{"version":3,"file":"static/js/206.2af145f7.chunk.js","mappings":"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","sources":["os/providers/ui.provider.tsx","os/providers/pool.provider.tsx","os/providers/wallet.provider.tsx","os/providers/account.provider.tsx","os/providers/mint.provider.tsx","shared/pdb/index.ts","shared/runtime.ts","shared/tokenProvider/supplementary.ts","shared/tokenProvider/index.ts"],"sourcesContent":["import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n  CSSProperties,\n  useCallback,\n} from 'react'\n\nimport { ConfigProvider } from 'antd'\n\nimport {\n  useRootSelector,\n  RootState,\n  useRootDispatch,\n  RootDispatch,\n} from 'os/store'\nimport {\n  UIState,\n  setBackground as _setBackground,\n  Background,\n} from 'os/store/ui.reducer'\nimport { ConfigProviderProps } from 'antd/lib/config-provider'\n\nconst Context = createContext<UIProvider>({} as UIProvider)\n\nexport type UIProvider = {\n  ui: UIState\n  setBackground: (\n    ...args: Parameters<typeof _setBackground>\n  ) => Promise<{ background: Background }>\n}\n\n/**\n * UI Context Provider\n */\nconst UIContextProvider = ({\n  children,\n  appId,\n  style = {},\n  antd = false,\n}: {\n  children: ReactNode\n  appId: string\n  style?: CSSProperties\n  antd?: boolean | ConfigProviderProps\n}) => {\n  const dispatch = useRootDispatch<RootDispatch>()\n  const { ui } = useRootSelector((state: RootState) => state)\n  const setBackground = useCallback(\n    async (...args: Parameters<typeof _setBackground>) =>\n      await dispatch(_setBackground(...args)).unwrap(),\n    [dispatch],\n  )\n  const provider = useMemo(() => ({ ui, setBackground }), [ui, setBackground])\n  const configProvider = antd\n    ? {\n        getPopupContainer: () => document.getElementById(appId) as HTMLElement,\n        ...(typeof antd === 'object' ? antd : {}),\n      }\n    : undefined\n\n  return (\n    <Context.Provider value={provider}>\n      <section\n        id={appId}\n        style={{ height: '100%', backgroundColor: 'transparent', ...style }}\n      >\n        {configProvider ? (\n          <ConfigProvider {...configProvider}>{children}</ConfigProvider>\n        ) : (\n          children\n        )}\n      </section>\n    </Context.Provider>\n  )\n}\nexport default UIContextProvider\n\n/**\n * UI Context Consumer\n */\nconst UIComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * UI HOC\n */\nexport const withUI = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <UIComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </UIComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * UI Hook\n */\nexport const useUI = () => {\n  return useContext<UIProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { PoolsState } from 'os/store/pools.reducer'\n\nconst Context = createContext<PoolProvider>({} as PoolProvider)\n\nexport type PoolProvider = {\n  pools: PoolsState\n}\n\n/**\n * Pool Context Provider\n */\nconst PoolContextProvider = ({ children }: { children: ReactNode }) => {\n  const { pools } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ pools }), [pools])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default PoolContextProvider\n\n/**\n * Pool Context Consumer\n */\nconst PoolContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Pool HOC\n */\nexport const withPool = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <PoolContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </PoolContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Pool Hook\n */\nexport const usePool = () => {\n  return useContext<PoolProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { WalletState } from 'os/store/wallet.reducer'\n\nconst Context = createContext<WalletProvider>({} as WalletProvider)\n\nexport type WalletProvider = {\n  wallet: WalletState\n}\n\n/**\n * Wallet Context Provider\n */\nconst WalletContextProvider = ({ children }: { children: ReactNode }) => {\n  const { wallet } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ wallet }), [wallet])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default WalletContextProvider\n\n/**\n * Wallet Context Consumer\n */\nconst WalletContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Wallet HOC\n */\nexport const withWallet = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <WalletContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </WalletContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Wallet Hook\n */\nexport const useWallet = () => {\n  return useContext<WalletProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { AccountsState } from 'os/store/accounts.reducer'\n\nconst Context = createContext<AccountProvider>({} as AccountProvider)\n\nexport type AccountProvider = {\n  accounts: AccountsState\n}\n\n/**\n * Account Context Provider\n */\nconst AccountContextProvider = ({ children }: { children: ReactNode }) => {\n  const { accounts } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ accounts }), [accounts])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default AccountContextProvider\n\n/**\n * Account Context Consumer\n */\nconst AccountContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Account HOC\n */\nexport const withAccount = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <AccountContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </AccountContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Account Hook\n */\nexport const useAccount = () => {\n  return useContext<AccountProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  useCallback,\n  ReactNode,\n  useMemo,\n} from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport {\n  useRootDispatch,\n  useRootSelector,\n  RootState,\n  RootDispatch,\n} from 'os/store'\nimport { getMint as _getMint, MintsState } from 'os/store/mints.reducer'\nimport TokenProvider from 'shared/tokenProvider'\n\nconst tokenProvider = new TokenProvider()\nconst Context = createContext<MintProvider>({} as MintProvider)\n\nexport type MintProvider = {\n  mints: MintsState\n  getMint: (...args: Parameters<typeof _getMint>) => Promise<MintsState>\n  getDecimals: (mintAddress: string) => Promise<number>\n  tokenProvider: TokenProvider\n}\n\n/**\n * Mint Context Provider\n */\nconst MintContextProvider = ({ children }: { children: ReactNode }) => {\n  const dispatch = useRootDispatch<RootDispatch>()\n  const { mints, pools } = useRootSelector((state: RootState) => state)\n  const getMint = useCallback(\n    async (...args: Parameters<typeof _getMint>) =>\n      await dispatch(_getMint(...args)).unwrap(),\n    [dispatch],\n  )\n  const getDecimals = useCallback(\n    async (mintAddress: string) => {\n      if (!account.isAddress(mintAddress))\n        throw new Error('Invalid mint address')\n      // If the token is in token provider, return its decimals\n      const tokenInfo = await tokenProvider.findByAddress(mintAddress)\n      if (tokenInfo?.decimals) return tokenInfo.decimals\n      // If the token is lp, return 9 as default\n      const index = Object.values(pools).findIndex(\n        ({ mint_lpt }) => mint_lpt === mintAddress,\n      )\n      if (index >= 0) return 9\n      // Fetch from the clustters\n      const mintData = await getMint({ address: mintAddress })\n      if (mintData[mintAddress]?.decimals) return mintData[mintAddress].decimals\n      throw new Error('Cannot find mint decimals')\n    },\n    [getMint, pools],\n  )\n  const provider = useMemo(\n    () => ({ mints, getMint, getDecimals, tokenProvider }),\n    [mints, getMint, getDecimals],\n  )\n  // Context provider\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default MintContextProvider\n\n/**\n * Mint Context Consumer\n */\nconst MintContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Mint HOC\n */\nexport const withMint = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <MintContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </MintContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Mint Hook\n */\nexport const useMint = () => {\n  return useContext<MintProvider>(Context)\n}\n","import localForage from 'localforage'\nimport { account } from '@senswap/sen-js'\nimport IPFS from './ipfs'\n\n/**\n * Persistent Database\n */\nclass PDB {\n  readonly dbName: string\n  private driver: any\n  private ipfs: IPFS\n\n  constructor(walletAddress: string) {\n    if (!account.isAddress(walletAddress)) throw new Error('Invalid address')\n    this.dbName = walletAddress\n    this.driver = [localForage.WEBSQL, localForage.LOCALSTORAGE]\n    this.ipfs = new IPFS()\n  }\n\n  /**\n   * Local\n   */\n\n  createInstance = (appId: string): LocalForage => {\n    return localForage.createInstance({\n      driver: this.driver,\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  dropInstance = async (appId: string): Promise<void> => {\n    const instance = this.createInstance(appId)\n    await instance.clear()\n    return await localForage.dropInstance({\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  all = async (): Promise<any> => {\n    let data: any = {}\n    const appIds = (\n      ((await this.createInstance('sentre').getItem('appIds')) as string[]) ||\n      []\n    )\n      .flat()\n      .concat(['sentre'])\n    for (const appId of appIds) {\n      data[appId] = {}\n      const instance = this.createInstance(appId)\n      await instance.iterate((value: string, key: string) => {\n        data[appId][key] = value\n      })\n    }\n    return data\n  }\n\n  /**\n   * Cloud\n   */\n\n  fetch = async (cid: string) => {\n    return await this.ipfs.get(cid)\n  }\n\n  backup = async () => {\n    const data = await this.all()\n    return await this.ipfs.set(data)\n  }\n\n  restore = async (cid: string) => {\n    // Download data\n    const data = await this.fetch(cid)\n    // Apply to storage\n    for (const appId in data) {\n      const instance = await this.createInstance(appId)\n      for (const key in data[appId]) {\n        const value = data[appId][key]\n        await instance.setItem(key, value)\n      }\n    }\n    return data\n  }\n}\n\nexport default PDB\n\n/**\n * High abtraction pdb for app\n */\nexport const createPDB = (walletArress: string, appId: string) => {\n  return account.isAddress(walletArress)\n    ? new PDB(walletArress).createInstance(appId)\n    : undefined\n}\n","import storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n\n/**\n * Chain ID\n */\nconst getChainId = () => {\n  switch (net) {\n    case 'devnet':\n      return 103\n    case 'testnet':\n      return 102\n    case 'mainnet':\n      return 101\n    default:\n      return 101\n  }\n}\nexport type ChainId = 101 | 102 | 103\nexport const chainId: ChainId = getChainId()\n","// Pseudo native sol info\n// It's for all networks\nexport const sol = (chainId: 101 | 102 | 103) => ({\n  symbol: 'SOL',\n  name: 'Solana',\n  address: '11111111111111111111111111111111',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'solana',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png',\n})\n\n// Pseudo SNTR info\n// Only for devnet and testnet\nexport const sntr = (chainId: 102 | 103) => ({\n  symbol: 'SNTR',\n  name: 'Sentre',\n  address: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'sentre',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M/logo.png',\n})\n\n// Pseudo token infos for devnet\nconst supplementary = [\n  sol(103),\n  sntr(103),\n  {\n    symbol: 'wBTC',\n    name: 'Wrapped Bitcoin',\n    address: '8jk4eJymMfNZV9mkRNxJEt2VJ3pRvdJvD5FE94GXGBPM',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'bitcoin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/qfnqNqs3nCAHjnyCgLRDbBtq4p2MtHZxw8YjSyYhPoL/logo.png',\n  },\n  {\n    symbol: 'wETH',\n    name: 'Ethereum',\n    address: '27hdcZv7RtuMp75vupThR3T4KLsL61t476eosMdoec4c',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'ethereum',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/FeGn77dhg1KXRRFeSwwMiykZnZPw5JXW6naf2aQgZDQf/logo.png',\n  },\n  {\n    symbol: 'UNI',\n    name: 'Uniswap',\n    address: 'FVZFSXu3yn17YdcxLD72TFDUqkdE5xZvcW18EUpRQEbe',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'uniswap',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/3MVa4e32PaKmPxYUQ6n8vFkWtCma68Ld7e7fTktWDueQ/logo.png',\n  },\n  {\n    symbol: 'USDC',\n    name: 'USD Coin',\n    address: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'usd-coin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png',\n  },\n]\n\nexport default supplementary\n","import lunr, { Index } from 'lunr'\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry'\n\nimport { net, chainId, ChainId, Net } from 'shared/runtime'\nimport supplementary, { sntr, sol } from './supplementary'\n\nclass TokenProvider {\n  private tokenMap: Map<string, TokenInfo>\n  private engine: Index | undefined\n  readonly chainId: ChainId\n  readonly cluster: Net\n  private loading: boolean\n  private queue: Array<any>\n\n  constructor() {\n    this.tokenMap = new Map<string, TokenInfo>()\n    this.engine = undefined\n    this.chainId = chainId\n    this.cluster = net\n    this.loading = false\n    this.queue = []\n    // Init\n    this._init()\n  }\n\n  private _init = async (): Promise<[Map<string, TokenInfo>, Index]> => {\n    if (this.tokenMap.size && this.engine) return [this.tokenMap, this.engine]\n    return new Promise(async (resolve) => {\n      // Queue of getters to avoid race condition of multiple _init calling\n      if (this.loading) return this.queue.push(resolve)\n      // Start\n      this.loading = true\n      // Build token list\n      let tokenList = await (await new TokenListProvider().resolve())\n        .filterByChainId(this.chainId)\n        .getList()\n      if (this.cluster === 'devnet') tokenList = tokenList.concat(supplementary)\n      if (this.cluster === 'testnet')\n        tokenList = tokenList.concat([sntr(102), sol(102)])\n      else tokenList = tokenList.concat([sol(101)])\n      // Build token map\n      tokenList.forEach((token) => this.tokenMap.set(token.address, token))\n      // Build search engine\n      this.engine = lunr(function () {\n        this.ref('address')\n        this.field('symbol')\n        this.field('name')\n        tokenList.forEach((doc) => this.add(doc))\n      })\n      // Resolve the main getter\n      resolve([this.tokenMap, this.engine])\n      // Resolve the rest of getters\n      while (this.queue.length) this.queue.shift()([this.tokenMap, this.engine])\n      // Finish\n      this.loading = false\n    })\n  }\n\n  all = async (): Promise<TokenInfo[]> => {\n    const [tokenMap] = await this._init()\n    return Array.from(tokenMap.values())\n  }\n\n  findByAddress = async (addr: string): Promise<TokenInfo | undefined> => {\n    const [tokenMap] = await this._init()\n    return tokenMap.get(addr)\n  }\n\n  find = async (keyword: string, limit = 10): Promise<TokenInfo[]> => {\n    const [tokenMap, engine] = await this._init()\n    let tokens: TokenInfo[] = []\n    if (!keyword) return []\n    engine.search(keyword).forEach(({ ref }) => {\n      if (tokens.findIndex(({ address }) => address === ref) < 0) {\n        const token = tokenMap.get(ref)\n        if (token) tokens.push(token)\n      }\n    })\n    return tokens.slice(0, limit)\n  }\n}\n\nexport default TokenProvider\n"],"names":["Context","createContext","children","appId","style","antd","dispatch","useRootDispatch","ui","useRootSelector","state","setBackground","useCallback","async","_setBackground","unwrap","provider","useMemo","configProvider","getPopupContainer","document","getElementById","undefined","Provider","value","id","height","backgroundColor","ConfigProvider","UIComsumer","Consumer","Children","child","cloneElement","withUI","WrappedComponent","HOC","Component","render","forwardedRef","rest","this","props","ref","forwardRef","useUI","useContext","pools","PoolContextComsumer","withPool","usePool","wallet","WalletContextComsumer","withWallet","useWallet","accounts","AccountContextComsumer","withAccount","useAccount","tokenProvider","TokenProvider","mints","getMint","_getMint","getDecimals","account","mintAddress","Error","tokenInfo","findByAddress","decimals","Object","values","findIndex","mint_lpt","mintData","address","MintContextComsumer","withMint","useMint","PDB","constructor","walletAddress","dbName","driver","ipfs","createInstance","localForage","name","storeName","dropInstance","instance","clear","all","data","appIds","getItem","flat","concat","iterate","key","fetch","get","cid","backup","set","restore","setItem","IPFS","createPDB","walletArress","env","net","storage","getNetwork","onSwitchNetwork","window","location","reload","chainId","getChainId","sol","symbol","extensions","coingeckoId","logoURI","sntr","tokenMap","engine","cluster","loading","queue","_init","size","Promise","push","resolve","tokenList","TokenListProvider","filterByChainId","getList","supplementary","forEach","token","lunr","field","doc","add","length","shift","Array","from","addr","find","keyword","limit","tokens","search","slice","Map"],"sourceRoot":""}