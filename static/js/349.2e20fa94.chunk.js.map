{"version":3,"file":"static/js/349.2e20fa94.chunk.js","mappings":"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","sources":["shared/dataloader/constant.ts","shared/dataloader/request.ts","shared/dataloader/cache.ts","shared/dataloader/index.ts","shared/util.ts","app/page/chart/chart.tsx","shared/antd/ionicon/assets/icon-telegram.svg","shared/antd/ionicon/customs.tsx","shared/antd/ionicon/index.tsx","app/page/chart/GroupAvatar.tsx","app/page/chart/chartEmpty.tsx","app/helper/cgk.ts","app/page/chart/index.tsx","app/components/swapButton.tsx","app/components/preview/routeAvatar.tsx","app/components/preview/inversePirce.tsx","app/components/preview/switchPriceRate.tsx","app/helper/router.ts","app/helper/oracle.ts","app/components/hooks/useSlippageRate.ts","app/components/preview/index.tsx","app/model/bid.controller.ts","app/page/swap/swapReview.tsx","app/shared/hooks/useTokenProvider.ts","app/shared/components/mint/mintAvatar.tsx","app/shared/components/mint/mintSymbol.tsx","app/shared/hooks/useMintCgk.ts","app/page/swap/swapPoolInfo.tsx","app/static/images/sen.svg","app/components/poweredBy.tsx","app/components/settings/slippage.tsx","app/components/settings/advanced.tsx","app/model/settings.controller.ts","app/components/settings/index.tsx","app/components/selection/search.tsx","app/components/selection/mint.tsx","app/components/selection/mintSelection.tsx","app/components/selection/index.tsx","app/model/ask.controller.ts","app/shared/components/numericInput.tsx","app/shared/hooks/useMintDecimals.ts","app/shared/hooks/useMintAccount.ts","app/constant/sol.ts","app/configs/manifest.config.ts","app/configs/sol.config.ts","app/configs/swap.config.ts","app/configs/wormhole.config.ts","app/configs/index.ts","app/components/hooks/useMintSelection.ts","app/components/ask/index.tsx","app/components/wormHoleSupported.tsx","app/constant/ethConfig.ts","app/constant/solConfig.ts","app/helper/wormhole.ts","app/components/bid/index.tsx","app/model/route.controller.ts","app/components/swap/swapAction.tsx","app/components/swap/index.tsx","app/page/swap/index.tsx","app/page/history/statusTag.tsx","app/page/history/column.tsx","app/lib/stat/entities/trans-log.ts","app/lib/stat/adapters/solana/client.ts","app/lib/stat/constants/transaction.ts","app/lib/stat/helpers/date.ts","app/lib/stat/logic/translog.ts","app/lib/stat/constants/sol.ts","app/model/history.controller.ts","app/page/history/index.tsx","app/page/index.tsx","app/widget/confirmSwap.tsx","app/widget/index.tsx","shared/devTools.ts","app/model/index.ts","app/bootstrap.app.tsx","os/configs/index.ts","os/configs/register.config.ts","os/configs/sol.config.ts","os/providers/tokenProvider/supplementary.ts","os/providers/tokenProvider/index.ts","shared/runtime.ts","shared/storage.ts"],"sourcesContent":["export type LimitConfig = {\n  calls: number\n  time: number\n}\n\nexport type CacheConfig = {\n  ttl: number // millisecond\n}\n\nexport type SingleFlightConfig = {\n  limit?: LimitConfig\n  cache?: CacheConfig\n}\n\n// 10 request per 1 second\nexport const DEFAULT_LIMIT_CONFIG: LimitConfig = {\n  calls: 10,\n  time: 1000,\n}\n\n// 10 request per 1 second\nexport const DEFAULT_CACHE_CONFIG: CacheConfig = {\n  ttl: 30000,\n}\n\nexport const DEFAULT_SINGLE_FLIGHT_CONFIG: SingleFlightConfig = {\n  limit : DEFAULT_LIMIT_CONFIG,\n  cache: DEFAULT_CACHE_CONFIG\n}","export interface IRequestQueue {\n  key: string\n  add(resolve: any, reject: any): void\n  resolves(data: any): void\n  rejects(error: any): void\n}\n\nexport class RequestQueue implements IRequestQueue {\n  key = ''\n  private resolveQueue: any[] = []\n  private rejectQueue: any[] = []\n  constructor(key: string) {\n    this.key = key\n  }\n\n  add(resolve: any, reject: any) {\n    this.resolveQueue.push(resolve)\n    this.rejectQueue.push(reject)\n  }\n\n  resolves(data: any) {\n    while (this.resolveQueue.length > 0) {\n      const resolve = this.resolveQueue.shift()\n      resolve(data)\n    }\n  }\n\n  rejects(error: any) {\n    while (this.rejectQueue.length > 0) {\n      const reject = this.rejectQueue.shift()\n      reject(error)\n    }\n  }\n}\n","import { DEFAULT_CACHE_CONFIG } from './constant'\nimport { CacheConfig } from './constant'\n\nexport class SingleFlightCache {\n  private static mapCache = new Map<string, any>()\n\n  static set(\n    key: string,\n    value: any,\n    configs: CacheConfig = DEFAULT_CACHE_CONFIG,\n  ) {\n    this.mapCache.set(key, value)\n    setTimeout(() => {\n      this.mapCache.delete(key)\n    }, configs.ttl)\n  }\n\n  static get(key: string) {\n    return this.mapCache.get(key)\n  }\n}\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey)\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(\n    request: IRequestQueue,\n    callback: () => Promise<any>,\n  ) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    return true\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import { account, utils } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport { net } from 'shared/runtime'\nimport { DataLoader } from './dataloader'\n\n/**\n * Delay by async/await\n * @param ms - milisenconds\n * @returns\n */\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Shorten a long address\n * @param address - The long address\n * @param num - The number of the heading and trailing characters\n * @param delimiter - The delimiter\n * @returns Shortened address\n */\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\n/**\n * Build a explorer url by context including addresses or transaction ids\n * @param addressOrTxId - Address or TxId\n * @returns\n */\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\n/**\n * Wrapped Numbro - https://numbrojs.com/old-format.html\n * @param value - value\n * @returns\n */\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value || !Number.isFinite(Number(value))) return numbro('0')\n  return numbro(value)\n}\n\n/**\n * Generate a random color\n * @param seed - Seed\n * @param opacity - Opacity\n * @returns\n */\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n\n/**\n * Fetch coingecko data with cache\n * @param ticket - Token ticket\n * @returns\n */\nexport const fetchCGK = async (ticket = '') => {\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n","import { useCallback, useState, useRef, useEffect } from 'react'\nimport Chart from 'chart.js'\nimport isEqual from 'react-fast-compare'\n\nimport { numeric } from 'shared/util'\ninterface Props {\n  labels?: (number | string)[]\n  chartData?: (number | string)[]\n  configs?: { backgroundColor?: string } & object\n  type?: string\n  disableAxe?: boolean\n  chartHeight?: string\n  chartId?: string\n}\n\nconst DEFAULT_BACKGROUND_COLOR = '#dadada'\n\nconst SenChart = ({\n  chartData = [],\n  labels = [],\n  type = 'line',\n  configs,\n  disableAxe = false,\n  chartId = 'sen_chart',\n}: Props) => {\n  const { backgroundColor } = configs || {}\n  const [isRebuildChart, setRebuildChart] = useState<boolean>(false)\n\n  const formatData = useCallback(\n    (\n      data: Array<number | number[] | undefined | null | any>,\n      label: Array<string | number>,\n      background?: string | CanvasGradient | undefined,\n    ): Chart.ChartData => ({\n      labels: label,\n      datasets: [{ ...configs, data, backgroundColor: background }],\n    }),\n    [configs],\n  )\n  // use a ref to store the chart instance since it it mutable\n  const chartRef = useRef<Chart | null>(null)\n\n  // callback creates the chart on the canvas element\n  const canvasCallback = (canvas: HTMLCanvasElement | null) => {\n    if (!canvas) return\n    const ctx = canvas.getContext('2d')\n    if (ctx && !isRebuildChart) {\n      // create new chart\n      chartRef.current = new Chart(ctx, {\n        type: type,\n        data: {\n          labels: [],\n          datasets: [\n            {\n              data: [],\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            xAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                },\n              },\n            ],\n            yAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                  beginAtZero: false,\n                  maxTicksLimit: 8,\n                  callback: function (value, index, values) {\n                    return numeric(value).format('0,0.[0]a')\n                  },\n                },\n              },\n            ],\n          },\n          plugins: {\n            legend: false,\n          },\n          hover: {\n            onHover: (event, elements) => {\n              const target = document.getElementById(chartId)\n              if (!target) return\n              target.style.cursor = elements[0] ? 'pointer' : 'default'\n            },\n          },\n        },\n      })\n      setRebuildChart(true)\n    }\n  }\n\n  const getBackground = useCallback(() => {\n    if (!chartRef || !backgroundColor) return DEFAULT_BACKGROUND_COLOR\n    const ctx = chartRef?.current?.canvas?.getContext('2d')\n    const gradient = ctx?.createLinearGradient(0, 0, 0, 180)\n    gradient?.addColorStop(0, backgroundColor)\n    gradient?.addColorStop(1, `${backgroundColor}00`)\n    const background = type === 'line' ? gradient : backgroundColor\n    return background\n  }, [backgroundColor, type])\n\n  useEffect(() => {\n    const chartInstance = chartRef.current\n    const dataInstace = chartInstance?.data.datasets?.find(({ data }) => data)\n    const compareData = isEqual(dataInstace?.data, chartData)\n    if (chartInstance && !compareData) {\n      chartInstance.data = formatData(chartData, labels, getBackground())\n      chartInstance?.update()\n    }\n  }, [chartData, formatData, getBackground, labels])\n\n  return <canvas id={chartId} height=\"180px\" ref={canvasCallback}></canvas>\n}\n\nexport default SenChart\n","var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgIconTelegram({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"inherit\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\",\n    width: \"50px\",\n    height: \"50px\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.137,6.552c-0.75-0.636-1.928-0.727-3.146-0.238l-0.002,0C41.708,6.828,6.728,21.832,5.304,22.445 c-0.259,0.09-2.521,0.934-2.288,2.814c0.208,1.695,2.026,2.397,2.248,2.478l8.893,3.045c0.59,1.964,2.765,9.21,3.246,10.758 c0.3,0.965,0.789,2.233,1.646,2.494c0.752,0.29,1.5,0.025,1.984-0.355l5.437-5.043l8.777,6.845l0.209,0.125 c0.596,0.264,1.167,0.396,1.712,0.396c0.421,0,0.825-0.079,1.211-0.237c1.315-0.54,1.841-1.793,1.896-1.935l6.556-34.077 C47.231,7.933,46.675,7.007,46.137,6.552z M22,32l-3,8l-3-10l23-17L22,32z\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgIconTelegram);\nexport default __webpack_public_path__ + \"static/media/icon-telegram.2450489f40d03000fe65fc1c6f238d85.svg\";\nexport { ForwardRef as ReactComponent };","import IconTele from './assets/icon-telegram.svg'\n\nexport const CUSTOM_ICONS: Record<string, string> = {\n  'logo-telegram': IconTele,\n}\n","/**\n * IonIcon 5\n * Credit https://ionic.io/ionicons\n */\n\nimport { forwardRef } from 'react'\nimport { CUSTOM_ICONS } from './customs'\n\n/**\n * IonIcon\n * @param name The icon name. You can find it here https://ionic.io/ionicons\n * @param className To modify the span class\n */\nconst IonIcon = forwardRef<\n  HTMLElement,\n  { name: string; className?: string } & any\n>(({ name, className, ...props }, ref) => {\n  const cln = className ? 'anticon ' + className : 'anticon'\n\n  return (\n    <span className={cln} {...props}>\n      {CUSTOM_ICONS[name] ? (\n        <ion-icon ref={ref} src={CUSTOM_ICONS[name]} />\n      ) : (\n        <ion-icon ref={ref} name={name} />\n      )}\n    </span>\n  )\n})\n\nexport default IonIcon\n","import { ReactNode } from 'react'\n\nimport { Avatar, AvatarProps } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst GroupAvatar = ({\n  icons = [],\n  defaultIcon = <IonIcon name=\"help-outline\" />,\n  ...rest\n}: {\n  icons?: (string | undefined)[]\n  defaultIcon?: ReactNode\n} & AvatarProps) => {\n  return (\n    <Avatar.Group>\n      {icons?.map((iconURI, idx) => (\n        <Avatar\n          src={iconURI}\n          key={idx}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n          {...rest}\n        >\n          {defaultIcon}\n        </Avatar>\n      ))}\n    </Avatar.Group>\n  )\n}\n\nexport default GroupAvatar\n","import { Col, Empty, Row } from 'antd'\n\nconst ChartEmpty = () => {\n  return (\n    <Row style={{ height: 170 }} align=\"middle\" justify=\"center\">\n      <Col>\n        <Empty />\n      </Col>\n    </Row>\n  )\n}\n\nexport default ChartEmpty\n","import TokenProvider from 'os/providers/tokenProvider'\nimport { fetchCGK } from 'shared/util'\nimport axios from 'axios'\n\nexport interface MintInfo {\n  address: string\n  symbol: string\n  price: number\n  decimals: number\n}\n\nexport type ChartParamsCGK = {\n  days: number\n  interval: string\n}\n\nconst DEFAULT_TOKEN_INFO = {\n  address: '',\n  chainId: 0,\n  decimals: 0,\n  name: '',\n  symbol: 'TOKEN',\n  extensions: undefined,\n  logoURI: '',\n  tags: [],\n}\n\nconst TOKEN_PROVIDER = new TokenProvider()\n\nconst cgk = {\n  getMintInfos: async (mintsAddress: string[]) => {\n    if (!TOKEN_PROVIDER || !mintsAddress) return\n    const promise = mintsAddress.map(async (mint) => {\n      let tokenInfo = await TOKEN_PROVIDER.findByAddress(mint)\n      if (!tokenInfo) tokenInfo = DEFAULT_TOKEN_INFO\n      const { address, symbol, decimals, extensions } = tokenInfo\n      const ticket = extensions?.coingeckoId\n\n      if (!ticket) return { address, symbol, decimals, price: 0 } // some mints don't have a ticket, so the price in cgk is 0\n\n      const { price } = await fetchCGK(ticket)\n      return { address, symbol, decimals, price }\n    })\n    const mintsDetails = await Promise.all(promise)\n    const mapMintsDetails = new Map<string, MintInfo>()\n    mintsDetails.forEach((mint) => {\n      mapMintsDetails.set(mint.address, mint)\n    })\n    return mapMintsDetails\n  },\n}\nexport default cgk\n\nexport const fetchMarketChart = async (\n  ticket: string,\n  params: ChartParamsCGK,\n) => {\n  try {\n    const data: any = await axios({\n      method: 'get',\n      url: `https://api.coingecko.com/api/v3/coins/${ticket}/market_chart?vs_currency=usd&days=${params.days}&interval=${params.interval}`,\n    })\n    const priceData: [number /*time*/, number /*price*/][] = data.data.prices\n    return priceData.map((data) => ({ time: data[0], val: data[1] }))\n  } catch (error) {\n    return []\n  }\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport moment from 'moment'\n\nimport { Card, Col, Radio, Row, Space, Typography } from 'antd'\nimport { AppState } from 'app/model'\nimport SenChart from './chart'\nimport GroupAvatar from './GroupAvatar'\nimport ChartEmpty from './chartEmpty'\nimport { ChartParamsCGK, fetchMarketChart } from 'app/helper/cgk'\nimport { numeric } from 'shared/util'\n\ntype ChartData = { label: string; val: number }\nenum Interval {\n  day = 'day',\n  week = 'week',\n  month = 'month',\n  year = 'year',\n}\nconst CHART_DATA_CONFIG: Record<\n  Interval,\n  {\n    amount: number\n    unit: moment.unitOfTime.DurationConstructor\n    format: string\n  }\n> = {\n  day: { amount: 4, unit: 'hours', format: 'HH:00' },\n  week: { amount: 1, unit: 'days', format: 'MMM DD' },\n  month: { amount: 5, unit: 'days', format: 'MMM DD' },\n  year: { amount: 2, unit: 'months', format: 'MMM DD' },\n}\nconst MARKET_CONFIG: Record<Interval, ChartParamsCGK> = {\n  day: { days: 1, interval: 'hourly' },\n  week: { days: 7, interval: 'daily' },\n  month: { days: 31, interval: 'daily' },\n  year: { days: 365, interval: 'daily' },\n}\n\nconst CHART_CONFIGS = {\n  color: '#3E8C6A',\n  radius: 0,\n  hitRadius: 14,\n  tooltip: 'TVL',\n  transparent: 'transparent',\n}\n\nconst DEFAULT_TOKEN = 'UNKN'\n\nconst SwapChart = () => {\n  const [interval, setInterval] = useState(Interval.week)\n  const [chartData, setChartData] = useState<{ label: string; val: number }[]>(\n    [],\n  )\n\n  const swapChartConfigs = {\n    borderColor: CHART_CONFIGS.transparent,\n    borderRadius: CHART_CONFIGS.radius,\n    pointRadius: CHART_CONFIGS.radius,\n    tooltip: CHART_CONFIGS.tooltip,\n    pointHitRadius: CHART_CONFIGS.hitRadius,\n    pointHoverRadius: CHART_CONFIGS.radius,\n    backgroundColor: CHART_CONFIGS.color,\n  }\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n\n  const icons = useMemo(() => {\n    return [askData.mintInfo?.logoURI, bidData.mintInfo?.logoURI]\n  }, [askData.mintInfo?.logoURI, bidData.mintInfo?.logoURI])\n  const symbols = useMemo(() => {\n    return [\n      askData.mintInfo?.symbol || DEFAULT_TOKEN,\n      bidData.mintInfo?.symbol || DEFAULT_TOKEN,\n    ]\n  }, [askData.mintInfo?.symbol, bidData.mintInfo?.symbol])\n\n  const parseChartDay = useCallback(\n    (marketData: { time: number; val: number }[]) => {\n      const chartData: ChartData[] = []\n      const { format, amount, unit } = CHART_DATA_CONFIG[interval]\n      let displayTime = moment()\n      // parser data\n      for (const data of marketData.reverse()) {\n        const chartTime = moment(data.time).format(format)\n        if (chartTime === displayTime.format(format)) {\n          const now = moment().format(format)\n          let label = chartTime\n          if (chartTime === now) label = moment().format('HH:mm')\n          if (displayTime)\n            chartData.unshift({\n              label: label,\n              val: data.val,\n            })\n          displayTime = displayTime.subtract(amount, unit)\n        } else if (chartTime === '00:00') {\n          chartData.unshift({\n            label: displayTime.format('MMM DD'),\n            val: data.val,\n          })\n        }\n      }\n      setChartData(chartData)\n    },\n    [interval],\n  )\n\n  const parseChartDaily = useCallback(\n    (marketData: { time: number; val: number }[]) => {\n      const chartData: ChartData[] = []\n      const { format, amount, unit } = CHART_DATA_CONFIG[interval]\n      let displayTime = moment()\n      // parser data\n      for (const data of marketData.reverse()) {\n        const chartTime = moment(data.time).format(format)\n        if (chartTime === displayTime.format(format)) {\n          displayTime = displayTime.subtract(amount, unit)\n          chartData.unshift({\n            label: chartTime,\n            val: data.val,\n          })\n          continue\n        }\n      }\n      setChartData(chartData)\n    },\n    [interval],\n  )\n\n  const fetchChartData = useCallback(async () => {\n    // fetch data market from coingecko\n    const askTicket = askData.mintInfo?.extensions?.coingeckoId\n    const bidTicket = bidData.mintInfo?.extensions?.coingeckoId\n    // return when bid & ask address is same\n    const compareAddress = bidData.accountAddress === askData.accountAddress\n    if (!askTicket || !bidTicket || compareAddress) return setChartData([])\n\n    const marketConfig = MARKET_CONFIG[interval]\n    const [bidChartData, askChartData] = await Promise.all([\n      fetchMarketChart(bidTicket, marketConfig),\n      fetchMarketChart(askTicket, marketConfig),\n    ])\n    // parser market data\n    const marketData: { time: number; val: number }[] = []\n    for (let idx = bidChartData.length - 1; idx >= 0; idx--) {\n      const bidChart = bidChartData[idx]\n      const askChart =\n        askChartData[askChartData.length - bidChartData.length + idx]\n      if (!bidChart || !askChart) continue\n      marketData.unshift({\n        time: bidChart.time,\n        val: bidChart.val / askChart.val,\n      })\n    }\n    if (interval === Interval.day) return parseChartDay(marketData)\n    return parseChartDaily(marketData)\n  }, [\n    askData.accountAddress,\n    askData.mintInfo?.extensions?.coingeckoId,\n    bidData.accountAddress,\n    bidData.mintInfo?.extensions?.coingeckoId,\n    interval,\n    parseChartDaily,\n    parseChartDay,\n  ])\n\n  useEffect(() => {\n    fetchChartData()\n  }, [fetchChartData])\n\n  const price = chartData[chartData.length - 1]?.val || 0\n  const priceUI = numeric(price).format(\n    price > 1 ? '0,0.[00]' : '0,0.[00000000]',\n  )\n\n  return (\n    <Card bordered={false} className=\"card-swap\" bodyStyle={{ paddingTop: 28 }}>\n      <Row gutter={[24, 24]}>\n        <Col flex=\"auto\">\n          <Row gutter={[20, 20]}>\n            <Col flex=\"auto\">\n              <Space size={4} align=\"center\">\n                <GroupAvatar icons={icons} size={24} />\n                <Typography.Text>{symbols.join('/')}</Typography.Text>\n              </Space>\n            </Col>\n            {chartData && !!chartData.length && (\n              <Col>\n                <Radio.Group\n                  defaultValue={Interval.week}\n                  onChange={(e) => setInterval(e.target.value)}\n                  className=\"chart-radio-btn\"\n                >\n                  <Radio.Button value={Interval.day}>1D</Radio.Button>\n                  <Radio.Button value={Interval.week}>1W</Radio.Button>\n                  <Radio.Button value={Interval.month}>1M</Radio.Button>\n                  <Radio.Button value={Interval.year}>1Y</Radio.Button>\n                </Radio.Group>\n              </Col>\n            )}\n            <Col span={24}>\n              <Typography.Title level={2}>\n                {price ? priceUI : ''}\n              </Typography.Title>\n            </Col>\n          </Row>\n        </Col>\n        <Col span={24}>\n          {chartData && !!chartData.length ? (\n            <SenChart\n              chartData={chartData?.map((data) => data.val)}\n              labels={chartData?.map((data) => data.label)}\n              configs={swapChartConfigs}\n            />\n          ) : (\n            <ChartEmpty />\n          )}\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapChart\n","import { useCallback, useState } from 'react'\nimport { utils } from '@senswap/sen-js'\nimport { useSelector } from 'react-redux'\n\nimport { Button } from 'antd'\nimport { HopData } from './preview/index'\nimport { AppState } from 'app/model'\nimport { useWallet } from 'senhub/providers'\nimport { explorer } from 'shared/util'\n\nconst DECIMALS = BigInt(1000000000)\n\nconst SwapButton = ({\n  hops,\n  onCallback = () => {},\n  disabled = false,\n  wrapAmount = BigInt(0),\n  hightImpact = false,\n}: {\n  hops: HopData[]\n  onCallback?: () => void\n  disabled?: boolean\n  wrapAmount: bigint\n  hightImpact?: boolean\n}) => {\n  const [loading, setLoading] = useState(false)\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const { slippage } = useSelector((state: AppState) => state.settings)\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  /**\n   * Swap function\n   */\n  const handleSwap = useCallback(async () => {\n    const { swap, splt, wallet } = window.sentre\n    if (!wallet) return\n    // Synthetize routings\n    const routingAddresses = await Promise.all(\n      hops.map(\n        async ({\n          srcMintInfo: { address: srcMintAddress },\n          dstMintInfo: { address: dstMintAddress },\n          poolData: { address: poolAddress },\n        }) => {\n          const srcAddress = await splt.deriveAssociatedAddress(\n            walletAddress,\n            srcMintAddress,\n          )\n          const dstAddress = await splt.deriveAssociatedAddress(\n            walletAddress,\n            dstMintAddress,\n          )\n          return {\n            poolAddress: poolAddress,\n            srcAddress: srcAddress,\n            dstAddress: dstAddress,\n          }\n        },\n      ),\n    )\n    // Compute limit\n    const {\n      srcMintInfo: { decimals: bidDecimals },\n    } = hops[0]\n    const bidAmount = utils.decimalize(bidData.amount, bidDecimals)\n    const {\n      dstMintInfo: { decimals: askDecimals },\n    } = hops[hops.length - 1]\n    const askAmount = utils.decimalize(askData.amount, askDecimals)\n    const limit =\n      (askAmount * (DECIMALS - utils.decimalize(slippage, 9))) / DECIMALS\n    // Execute swap\n    return await swap.route(bidAmount, limit, routingAddresses, wallet)\n  }, [hops, bidData, askData, slippage, walletAddress])\n\n  const handleWrapSol = async () => {\n    if (!wrapAmount) return\n    const { swap, wallet } = window.sentre\n    if (!wallet) return\n    return await swap.wrapSol(wrapAmount, wallet)\n  }\n\n  const onSwap = async () => {\n    try {\n      setLoading(true)\n      await handleWrapSol()\n      const { txId } = (await handleSwap()) || {}\n      window.notify({\n        type: 'success',\n        description: `Swap successfully. Click to view details.`,\n        onClick: () => window.open(explorer(txId || ''), '_blank'),\n      })\n      return onCallback()\n    } catch (er: any) {\n      return window.notify({ type: 'error', description: er.message })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Button\n      type=\"primary\"\n      onClick={onSwap}\n      disabled={disabled}\n      loading={loading}\n      block\n    >\n      {hightImpact ? 'Too High Price Impact' : 'Swap'}\n    </Button>\n  )\n}\n\nexport default SwapButton\n","import { Fragment, ReactNode } from 'react'\n\nimport { Avatar, Space } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst RouteAvatar = ({\n  icons = ['', ''],\n  size = 24,\n  defaultIcon = <IonIcon size={size} name=\"help-outline\" />,\n}: {\n  icons?: (string | undefined)[]\n  defaultIcon?: ReactNode\n  size?: number\n}) => {\n  return (\n    <Space>\n      {icons?.map((icon, idx) => (\n        <Fragment key={idx}>\n          <Avatar src={icon} size={size}>\n            {defaultIcon}\n          </Avatar>\n          {icons.length > idx + 1 && <IonIcon name=\"chevron-forward-outline\" />}\n        </Fragment>\n      ))}\n    </Space>\n  )\n}\nexport default RouteAvatar\n","import { Space, Typography } from 'antd'\nimport { State as BidState } from 'app/model/bid.controller'\nimport { State as AskState } from 'app/model/bid.controller'\nimport { numeric } from 'shared/util'\n\nconst InversePrice = ({\n  bidData,\n  askData,\n}: {\n  bidData?: BidState\n  askData?: AskState\n}) => {\n  const price = numeric(\n    Number(askData?.amount) / Number(bidData?.amount),\n  ).format('0,0.[000000]')\n  const symbols = `${askData?.mintInfo?.symbol}/${bidData?.mintInfo?.symbol}`\n  return (\n    <Space>\n      <Typography.Text>{price}</Typography.Text>\n      <Typography.Text>{symbols}</Typography.Text>\n    </Space>\n  )\n}\n\nexport default InversePrice\n","import { Button, Space, Typography } from 'antd'\nimport { Fragment, ReactNode } from 'react'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst SwitchPriceRate = ({\n  value = false,\n  onChange = () => {},\n  priceRate = <Fragment />,\n}: {\n  priceRate?: ReactNode\n  value?: boolean\n  onChange?: (value: boolean) => void\n}) => {\n  return (\n    <Space size={4}>\n      <Button\n        type=\"text\"\n        onClick={() => onChange(!value)}\n        shape=\"circle\"\n        icon={<IonIcon name=\"swap-horizontal-outline\" />}\n      />\n      <Typography.Text>{priceRate}</Typography.Text>\n    </Space>\n  )\n}\nexport default SwitchPriceRate\n","import { account, PoolData } from '@senswap/sen-js'\n\nimport { curve } from './oracle'\nimport { State as BidState } from 'app/model/bid.controller'\nimport { State as AskState } from 'app/model/ask.controller'\nimport { inverseCurve } from './oracle'\nimport { HopData } from 'app/components/preview/index'\nimport TokenProvider from 'os/providers/tokenProvider'\n\nconst POOL_ACTIVITY_STATUS = 1\nconst LIMIT_POOL_IN_ROUTE = 3\nconst TOKEN_PROVIDER = new TokenProvider()\n\nexport type ExtendedPoolData = PoolData & { address: string }\nexport type GraphPool = Map<string, Map<string, PoolData>>\nexport type RouteTrace = {\n  pools: string[]\n  mints: string[]\n}\nexport class BestRouteInfo {\n  hops: HopData[] = []\n  amounts: string[] = []\n  amount: string = ''\n}\n\n/**\n * Extract reserve from pool data\n * @param extractReserve\n * @param poolData\n * @returns\n */\nexport const extractReserve = (\n  mintAddress: string,\n  poolData: PoolData,\n): bigint => {\n  const { mint_a, mint_b, reserve_a, reserve_b } = poolData\n  if (mintAddress === mint_a) return reserve_a\n  if (mintAddress === mint_b) return reserve_b\n  throw new Error('Cannot find reserves')\n}\n\n/**\n *\n * @param param0\n * @param param1\n * @returns\n */\ntype Point = { point: bigint }\nexport const pointSorting = (\n  { point: firstPoint }: Point,\n  { point: secondPoint }: Point,\n) => {\n  if (firstPoint < secondPoint) return 1\n  if (firstPoint > secondPoint) return -1\n  return 0\n}\n\nexport const buildPoolGraph = (pools: Record<string, PoolData>): GraphPool => {\n  const graph = new Map<\n    /*mint_address*/ string,\n    Map</*pool_address*/ string, PoolData>\n  >()\n  for (const poolAddress in pools) {\n    const pool = pools[poolAddress]\n    if (pool?.state !== POOL_ACTIVITY_STATUS) continue\n    const mints = [pool.mint_a, pool.mint_b]\n    mints.forEach((mint) => {\n      if (!graph.has(mint)) graph.set(mint, new Map<string, PoolData>())\n      graph.get(mint)?.set(poolAddress, pool)\n    })\n  }\n  return graph\n}\n\n// because of Solana is limiting the number of calculation unit, so the system\n// must limit the list pool of root. Currently, the system set 3 pools in route\nexport const findAllRoute = (\n  routes: Array<RouteTrace>,\n  graph: GraphPool,\n  startMint: string,\n  endMint: string,\n  pathTrace: RouteTrace,\n) => {\n  const { pools, mints } = pathTrace\n  if (pools.length === LIMIT_POOL_IN_ROUTE) return\n  const mapPool = graph.get(startMint)\n  mapPool?.forEach((pool, poolAddress) => {\n    if (pools.includes(poolAddress)) return\n\n    let { mint_b: askMint } = pool\n    if (pool.mint_a !== startMint) {\n      askMint = pool.mint_a\n    }\n    if (mints.includes(askMint)) return\n\n    const newPathTrace = {\n      pools: [...pools, poolAddress],\n      mints: [...mints, askMint],\n    }\n    if (askMint === endMint) {\n      routes.push(newPathTrace)\n      return\n    }\n    findAllRoute(routes, graph, askMint, endMint, newPathTrace)\n  })\n}\n\nconst parseHops = async (\n  mapPoolData: Record<string, PoolData>,\n  pools: string[],\n  bidData: BidState,\n  askData: AskState,\n): Promise<HopData[]> => {\n  const bidMintAddress = bidData.mintInfo?.address\n  const askMintAddress = askData.mintInfo?.address\n  if (!account.isAddress(bidMintAddress) || !account.isAddress(askMintAddress))\n    return []\n\n  const hops: HopData[] = []\n  let srcMintAddress = bidMintAddress\n  let dstMintAddress = ''\n  for (const poolAddress of pools) {\n    const poolData = mapPoolData[poolAddress]\n    const { mint_a, mint_b } = poolData\n\n    if (srcMintAddress !== mint_a && srcMintAddress !== mint_b) return []\n\n    dstMintAddress = srcMintAddress === mint_a ? mint_b : mint_a\n    const srcMintInfo = await TOKEN_PROVIDER.findByAddress(srcMintAddress)\n    const dstMintInfo = await TOKEN_PROVIDER.findByAddress(dstMintAddress)\n    if (!srcMintInfo || !dstMintInfo) return []\n\n    const hop: HopData = {\n      poolData: { address: poolAddress, ...poolData },\n      srcMintInfo,\n      dstMintInfo,\n    }\n    srcMintAddress = dstMintAddress\n    hops.push(hop)\n  }\n  return hops\n}\n\nexport const findBestRouteFromBid = async (\n  mapPoolData: Record<string, PoolData>,\n  routes: RouteTrace[],\n  bidData: BidState,\n  askData: AskState,\n): Promise<BestRouteInfo> => {\n  let bestRoute = new BestRouteInfo()\n  for (let route of routes) {\n    const hops = await parseHops(mapPoolData, route.pools, bidData, askData)\n    if (!hops.length) continue\n    let amount = bidData.amount\n    const amounts = new Array<string>()\n\n    hops.forEach((hop) => {\n      amounts.push(amount)\n      amount = curve(amount, hop)\n    })\n    const maxAskAmount = Number(bestRoute.amount)\n    if (Number(amount) > maxAskAmount) {\n      bestRoute = {\n        hops,\n        amounts,\n        amount,\n      }\n    }\n  }\n  return bestRoute\n}\n\nexport const findBestRouteFromAsk = async (\n  mapPoolData: Record<string, PoolData>,\n  routes: RouteTrace[],\n  bidData: BidState,\n  askData: AskState,\n): Promise<BestRouteInfo> => {\n  let bestRoute = new BestRouteInfo()\n  for (let route of routes) {\n    try {\n      const hops = await parseHops(mapPoolData, route.pools, bidData, askData)\n      if (!hops.length) continue\n      const reversedHops = [...hops].reverse()\n      let amount = askData.amount\n      const amounts = new Array<string>()\n\n      for (const reversedHop of reversedHops) {\n        amount = inverseCurve(amount, reversedHop)\n        if (Number(amount) < 0) break\n        amounts.unshift(amount)\n      }\n      if (Number(amount) < 0) continue\n      const minBidAmount = Number(bestRoute.amount)\n      if (!minBidAmount || Number(amount) < minBidAmount) {\n        bestRoute = {\n          hops,\n          amounts,\n          amount,\n        }\n      }\n    } catch (error) {}\n  }\n  return bestRoute\n}\n","import { utils, Swap } from '@senswap/sen-js'\nimport { HopData } from 'app/components/preview/index'\nimport { extractReserve } from './router'\n\nexport const ORACLE = Swap.oracle\n\nexport const curve = (bidAmount: string, data: HopData): string => {\n  const {\n    srcMintInfo: { address: srcMintAddress, decimals: bidDecimals },\n    dstMintInfo: { address: dstMintAddress, decimals: askDecimals },\n  } = data\n  const { fee_ratio, tax_ratio } = data.poolData\n  const bidReserve = extractReserve(srcMintAddress, data.poolData)\n  const askReserve = extractReserve(dstMintAddress, data.poolData)\n  if (!bidReserve || !askReserve) return '0'\n\n  const { askAmount } = ORACLE.swap(\n    utils.decimalize(bidAmount, bidDecimals),\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return utils.undecimalize(askAmount, askDecimals)\n}\n\nexport const inverseCurve = (askAmount: string, data: HopData): string => {\n  const {\n    srcMintInfo: { address: srcMintAddress, decimals: bidDecimals },\n    dstMintInfo: { address: dstMintAddress, decimals: askDecimals },\n  } = data\n  const { fee_ratio, tax_ratio } = data.poolData\n  const bidReserve = extractReserve(srcMintAddress, data.poolData)\n  const askReserve = extractReserve(dstMintAddress, data.poolData)\n  const bidAmount = ORACLE.inverseSwap(\n    utils.decimalize(askAmount, askDecimals),\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return utils.undecimalize(bidAmount, bidDecimals)\n}\n\nexport const slippage = (bidAmount: string, data: HopData): bigint => {\n  const {\n    srcMintInfo: { address: srcMintAddress, decimals: bidDecimals },\n    dstMintInfo: { address: dstMintAddress },\n  } = data\n  const { fee_ratio, tax_ratio } = data.poolData\n  const bidReserve = extractReserve(srcMintAddress, data.poolData)\n  const askReserve = extractReserve(dstMintAddress, data.poolData)\n\n  const slippage = ORACLE.slippage(\n    utils.decimalize(bidAmount, bidDecimals),\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return slippage\n}\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\n\nimport { curve } from 'app/helper/oracle'\nimport { AppState } from 'app/model'\n\nexport const useSlippageRate = () => {\n  const { route } = useSelector((state: AppState) => state.route)\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askMount = useSelector((state: AppState) => state.ask)\n\n  const { amounts = [], hops = [] } = route || {}\n  const slippageRate = useMemo(() => {\n    let newAmount = bidData.amount\n    hops.forEach((hop, i) => {\n      const { dstMintInfo, srcMintInfo, poolData } = hop\n      const newPoolData = { ...poolData }\n      const srcAmount = amounts[i]\n      const srcDecimals = srcMintInfo.decimals\n      const dstAmount = amounts[i + 1] || askMount.amount\n      const dstDecimals = dstMintInfo.decimals\n      if (srcMintInfo.address === poolData.mint_a) {\n        newPoolData.reserve_a += utils.decimalize(srcAmount, srcDecimals)\n        newPoolData.reserve_b -= utils.decimalize(dstAmount, dstDecimals)\n      } else {\n        newPoolData.reserve_b += utils.decimalize(srcAmount, srcDecimals)\n        newPoolData.reserve_a -= utils.decimalize(dstAmount, dstDecimals)\n      }\n      newAmount = curve(newAmount, { ...hop, poolData: newPoolData })\n    })\n    return 1 - Number(newAmount) / Number(askMount.amount)\n  }, [amounts, askMount.amount, bidData.amount, hops])\n\n  return slippageRate\n}\n","import {\n  Fragment,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport { TokenInfo } from '@solana/spl-token-registry'\nimport { useSelector } from 'react-redux'\nimport { PoolData } from '@senswap/sen-js'\n\nimport { Col, Row, Typography } from 'antd'\nimport RouteAvatar from './routeAvatar'\nimport InversePrice from './inversePirce'\nimport SwitchPriceRate from './switchPriceRate'\n\nimport { AppState } from 'app/model'\nimport { numeric } from 'shared/util'\nimport { useSlippageRate } from '../hooks/useSlippageRate'\n\nexport type HopData = {\n  poolData: PoolData & { address: string }\n  srcMintInfo: TokenInfo\n  dstMintInfo: TokenInfo\n}\n\nconst ExtraTypography = ({\n  label = '',\n  content = '',\n}: {\n  label?: string\n  content?: string | ReactNode\n}) => {\n  return (\n    <Row>\n      <Col flex=\"auto\">\n        <Typography.Text type=\"secondary\">{label}</Typography.Text>\n      </Col>\n      <Col>\n        <span>{content}</span>\n      </Col>\n    </Row>\n  )\n}\n\nconst PreviewSwap = () => {\n  const [inReverse, setInReverse] = useState(false)\n  const { slippage: slippageSettings } = useSelector(\n    (state: AppState) => state.settings,\n  )\n  const { route } = useSelector((state: AppState) => state.route)\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const slippageRate = useSlippageRate()\n\n  const { mintInfo: bidMintInfo } = bidData\n\n  const routeIcons = useMemo(() => {\n    if (!route?.hops) return\n    const { logoURI } = bidMintInfo || {}\n    let listRouteIcons = [logoURI]\n    for (const hop of route?.hops) {\n      const {\n        dstMintInfo: { logoURI },\n      } = hop\n      if (logoURI) listRouteIcons.push(logoURI)\n    }\n    return listRouteIcons\n  }, [bidMintInfo, route?.hops])\n\n  const calculatePrice = useCallback(() => {\n    if (!bidData.amount || !askData.amount) return <Fragment />\n    if (inReverse) return <InversePrice bidData={askData} askData={bidData} />\n    return <InversePrice bidData={bidData} askData={askData} />\n  }, [askData, bidData, inReverse])\n\n  useEffect(() => {\n    calculatePrice()\n  }, [calculatePrice])\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Price impact\"\n          content={\n            <Typography.Text type=\"danger\">\n              {numeric(Number(slippageRate)).format('0.[0000]%')}\n            </Typography.Text>\n          }\n        />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Price\"\n          content={\n            <SwitchPriceRate\n              priceRate={calculatePrice()}\n              value={inReverse}\n              onChange={setInReverse}\n            />\n          }\n        />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Slippage Tolerance\"\n          content={numeric(slippageSettings).format('0.[00]%')}\n        />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Route\"\n          content={<RouteAvatar icons={routeIcons} />}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default PreviewSwap\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { TokenInfo } from '@solana/spl-token-registry'\n\nexport type State = {\n  amount: string // Desired amount\n  accountAddress: string // Associated account to the selected token\n  mintInfo?: TokenInfo // Selected token\n  poolAddresses: string[] // List of available pools\n  priority: number\n}\n\nconst NAME = 'bid'\nconst initialState: State = {\n  amount: '',\n  accountAddress: '',\n  poolAddresses: [],\n  priority: 0,\n}\n\n/**\n * Actions\n */\n\nexport const updateBidData = createAsyncThunk<\n  Partial<State>,\n  Partial<State> & { prioritized?: boolean; reset?: boolean },\n  { state: any }\n>(\n  `${NAME}/updateBidData`,\n  async ({ prioritized, reset, ...bidData }, { getState }) => {\n    const {\n      bid: { priority: prevPriority },\n      ask: { priority: refPriority },\n    } = getState()\n    if (Number(bidData.amount) < 0) bidData.amount = undefined\n    const priority = reset ? 0 : prioritized ? refPriority + 1 : prevPriority\n    return { ...bidData, priority }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateBidData.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { DEFAULT_WSOL, utils } from '@senswap/sen-js'\n\nimport { Card, Col, Row, Typography } from 'antd'\nimport SwapButton from 'app/components/swapButton'\nimport SwapInfo from 'app/components/preview'\n\nimport { AppState } from 'app/model'\nimport { useAccount } from 'senhub/providers'\nimport { useSlippageRate } from 'app/components/hooks/useSlippageRate'\nimport { updateBidData } from 'app/model/bid.controller'\n\nconst SwapActions = () => {\n  const dispatch = useDispatch()\n  const { route } = useSelector((state: AppState) => state.route)\n  const {\n    amount: bidAmount,\n    mintInfo: bidMint,\n    accountAddress: bidAccountAddr,\n  } = useSelector((state: AppState) => state.bid)\n  const { amount: askAmount } = useSelector((state: AppState) => state.ask)\n  const { advanced } = useSelector((state: AppState) => state.settings)\n  const { accounts } = useAccount()\n  const slippageRate = useSlippageRate()\n\n  const hops = route?.hops || []\n\n  const wrapAmount = useMemo(() => {\n    const { amount: bidAccountAmount } = accounts[bidAccountAddr] || {}\n    const bidBalance = bidAccountAmount || BigInt(0)\n    if (!bidMint || !Number(bidAmount) || bidMint.address !== DEFAULT_WSOL)\n      return BigInt(0)\n    const bid = utils.decimalize(bidAmount, bidMint.decimals)\n    if (bid <= bidBalance) return BigInt(0)\n    return bid - bidBalance\n  }, [accounts, bidAccountAddr, bidAmount, bidMint])\n\n  const tooHightImpact = !advanced && slippageRate * 100 > 12.5 //just swap when the slippage rate is smaller than 12.5%\n  const disabled =\n    tooHightImpact ||\n    !hops.length ||\n    !parseFloat(bidAmount) ||\n    parseFloat(bidAmount) < 0 ||\n    !parseFloat(askAmount) ||\n    parseFloat(askAmount) < 0\n\n  return (\n    <Card bordered={false}>\n      <Row gutter={[24, 24]}>\n        <Col span={24}>\n          <Typography.Title level={5}>Review & Swap</Typography.Title>\n        </Col>\n        <Col span={24}>\n          <SwapInfo />\n        </Col>\n        <Col span={24} /> {/* Safe sapce */}\n        <Col span={24}>\n          <SwapButton\n            hops={hops}\n            wrapAmount={wrapAmount}\n            disabled={disabled}\n            hightImpact={tooHightImpact}\n            onCallback={() =>\n              dispatch(updateBidData({ amount: '', prioritized: true }))\n            }\n          />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapActions\n","import { useCallback, useEffect, useState } from 'react'\nimport { TokenInfo } from '@solana/spl-token-registry'\n\nimport { useMint, usePool } from 'senhub/providers'\n\nconst useTokenProvider = (mintAddress: string) => {\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n  const [tokenInfo, setTokenInfo] = useState<(TokenInfo | undefined)[]>([])\n\n  const fetchTokenInfo = useCallback(async () => {\n    if (!mintAddress) return setTokenInfo([undefined])\n    // Normal mint\n    const token = await tokenProvider.findByAddress(mintAddress)\n    if (token) return setTokenInfo([token])\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (!poolData) return setTokenInfo([undefined])\n    const { mint_a, mint_b } = poolData\n    const tokenA = await tokenProvider.findByAddress(mint_a)\n    const tokenB = await tokenProvider.findByAddress(mint_b)\n    return setTokenInfo([tokenA, tokenB])\n  }, [mintAddress, pools, tokenProvider])\n\n  useEffect(() => {\n    fetchTokenInfo()\n  }, [fetchTokenInfo])\n\n  return tokenInfo\n}\n\nexport default useTokenProvider\n","import { ReactNode } from 'react'\n\nimport { Avatar } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport useTokenProvider from '../../hooks/useTokenProvider'\n\nconst MintAvatar = ({\n  mintAddress,\n  size = 24,\n  icon = <IonIcon name=\"diamond-outline\" />,\n}: {\n  mintAddress: string\n  size?: number\n  icon?: ReactNode\n}) => {\n  const tokens = useTokenProvider(mintAddress)\n  return (\n    <Avatar.Group style={{ display: 'block' }} >\n      {tokens.map((token, i) => (\n        <Avatar\n          key={token?.address || i}\n          src={token?.logoURI}\n          size={size}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n        >\n          {icon}\n        </Avatar>\n      ))}\n    </Avatar.Group>\n  )\n}\n\nexport default MintAvatar\n","import { useMemo } from 'react'\n\nimport useTokenProvider from 'app/shared/hooks/useTokenProvider'\n\nconst MintSymbol = ({ mintAddress }: { mintAddress: string }) => {\n  \n  const tokens = useTokenProvider(mintAddress)\n  const symbols = useMemo(() => {\n    return tokens\n      .map((token) => {\n        if (!token) return 'UNKN'\n        return token.symbol\n      })\n      .join(' / ')\n  }, [tokens])\n  return <span>{symbols}</span>\n}\n\nexport default MintSymbol\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from 'senhub/providers'\nimport { fetchCGK } from 'shared/util'\n\nconst DEFAULT_DATA = {\n  address: '',\n  icon: '',\n  name: 'TOKEN',\n  price: 0,\n  priceChange: 0,\n  rank: 0,\n  symbol: 'TOKEN',\n  totalVolume: 0,\n}\n\nconst useMintCgk = (mintAddress?: string): CgkData => {\n  const [cgkData, setCgkData] = useState<CgkData>(DEFAULT_DATA)\n  const { tokenProvider } = useMint()\n\n  const fetchCgkData = useCallback(async () => {\n    if (!mintAddress) return setCgkData(DEFAULT_DATA)\n    try {\n      const token = await tokenProvider.findByAddress(mintAddress)\n      const ticket = token?.extensions?.coingeckoId\n      const cgkData = await fetchCGK(ticket)\n      return setCgkData(cgkData)\n    } catch (error) {\n      return setCgkData(DEFAULT_DATA)\n    }\n  }, [mintAddress, tokenProvider])\n\n  useEffect(() => {\n    fetchCgkData()\n  }, [fetchCgkData])\n\n  return cgkData\n}\nexport default useMintCgk\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { account, PoolData, utils } from '@senswap/sen-js'\n\nimport { Card, Col, Divider, Row, Space, Typography } from 'antd'\nimport { MintAvatar } from 'app/shared/components/mint'\n\nimport { AppState } from 'app/model'\nimport { extractReserve } from 'app/helper/router'\nimport { numeric } from 'shared/util'\nimport useMintCgk from 'app/shared/hooks/useMintCgk'\n\nconst MintPoolInfo = ({\n  mintAddress = '',\n  tvl = '',\n  symbol = '',\n  price,\n  format = '0,0.[00]a',\n}: {\n  mintAddress?: string\n  tvl?: string | number\n  symbol?: string\n  price?: number\n  format?: string\n}) => {\n  return (\n    <Space direction=\"vertical\" size={4}>\n      <MintAvatar mintAddress={mintAddress} />\n      <Space>\n        <Typography.Text>TVL:</Typography.Text>\n        <Typography.Title level={5}>\n          {numeric(tvl).format(format)}\n        </Typography.Title>\n        <Typography.Title level={5}>{symbol}</Typography.Title>\n      </Space>\n      <Typography.Text className=\"caption\" type=\"secondary\">\n        ~ ${numeric(price).format(format)}\n      </Typography.Text>\n    </Space>\n  )\n}\n\nconst SwapPoolInfo = () => {\n  const { route } = useSelector((state: AppState) => state.route)\n  const askMint = useSelector((state: AppState) => state.ask.mintInfo)\n  const bidMint = useSelector((state: AppState) => state.bid.mintInfo)\n  const askCgk = useMintCgk(askMint?.address)\n  const bidCgk = useMintCgk(bidMint?.address)\n\n  const { dstMintInfo: askMintInfo, poolData: askPoolData } =\n    route?.hops[route?.hops.length - 1] || {}\n  const { srcMintInfo: bidMintInfo, poolData: bidPoolData } =\n    route?.hops[0] || {}\n\n  const getMintTVL = (mintAddr?: string, poolData?: PoolData) => {\n    if (!account.isAddress(mintAddr) || !poolData) return BigInt(0)\n    return extractReserve(mintAddr, poolData)\n  }\n\n  const askTVL = useMemo(() => {\n    if (!askMintInfo?.decimals) return 0\n    const ask = getMintTVL(askMintInfo?.address, askPoolData)\n    return Number(utils.undecimalize(ask, askMintInfo.decimals))\n  }, [askMintInfo?.address, askMintInfo?.decimals, askPoolData])\n  const bidTVL = useMemo(() => {\n    if (!bidMintInfo?.decimals) return 0\n    const bid = getMintTVL(bidMintInfo?.address, bidPoolData)\n    return Number(utils.undecimalize(bid, bidMintInfo.decimals))\n  }, [bidMintInfo?.address, bidMintInfo?.decimals, bidPoolData])\n\n  return (\n    <Card bordered={false}>\n      <Row gutter={[16, 16]} wrap={false}>\n        <Col span={11}>\n          <MintPoolInfo\n            mintAddress={bidMint?.address}\n            tvl={bidTVL}\n            symbol={bidMint?.symbol}\n            price={bidTVL * bidCgk.price}\n          />\n        </Col>\n        <Col>\n          <Divider type=\"vertical\" style={{ height: '100%' }} />\n        </Col>\n        <Col span={11}>\n          <MintPoolInfo\n            mintAddress={askMint?.address}\n            tvl={askTVL}\n            symbol={askMint?.symbol}\n            price={askTVL * askCgk.price}\n          />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapPoolInfo\n","var _defs, _path, _path2;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgSen({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    \"data-name\": \"Layer 1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    viewBox: \"0 0 283.465 283.465\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"linear-gradient\",\n    x1: -1222.504,\n    y1: -2883.343,\n    x2: -1135.428,\n    y2: -2970.419,\n    gradientTransform: \"translate(1300.837 3068.613)\",\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    stopColor: \"#f9575e\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.27,\n    stopColor: \"#f8555b\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.486,\n    stopColor: \"#f44f51\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.685,\n    stopColor: \"#ee4540\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.871,\n    stopColor: \"#e63728\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#de2a13\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"linear-gradient-2\",\n    x1: 1314.111,\n    y1: -895.144,\n    x2: 1389.882,\n    y2: -811.556,\n    gradientTransform: \"translate(1516.988 -707.868) rotate(180)\",\n    xlinkHref: \"#linear-gradient\"\n  }))), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Senswap logo FINAL\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.179,85.127H114a92.562,92.562,0,0,1,92.562,92.562v20.648a0,0,0,0,1,0,0H129.741a92.562,92.562,0,0,1-92.562-92.562V85.127A0,0,0,0,1,37.179,85.127Z\",\n    transform: \"translate(107.828 328.128) rotate(-135)\",\n    fill: \"url(#linear-gradient)\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M169.462,85.127h76.823a0,0,0,0,1,0,0v20.648a92.562,92.562,0,0,1-92.562,92.562H76.9a0,0,0,0,1,0,0V177.689a92.562,92.562,0,0,1,92.562-92.562Z\",\n    transform: \"translate(-52.89 155.776) rotate(-45)\",\n    fill: \"url(#linear-gradient-2)\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSen);\nexport default __webpack_public_path__ + \"static/media/sen.f2d012c907167ba613b035621b6423cb.svg\";\nexport { ForwardRef as ReactComponent };","import { Avatar, Space, Typography } from 'antd'\nimport SentreIcon from 'app/static/images/sen.svg'\n\nconst PoweredBy = ({\n  spacing = 4,\n  iconSize = 20,\n}: {\n  spacing?: number\n  iconSize?: number\n}) => {\n  return (\n    <Space size={spacing}>\n      <Typography.Text style={{ fontSize: 12, color: '#7A7B85' }}>\n        Powered by\n      </Typography.Text>\n      <Avatar src={SentreIcon} size={iconSize} />\n    </Space>\n  )\n}\n\nexport default PoweredBy\n","import { Row, Col, Button, Typography, Tooltip } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Option = ({\n  label,\n  value,\n  onClick,\n  active = false,\n}: {\n  label: string\n  value: number\n  onClick: (value: number) => void\n  active?: boolean\n}) => {\n  return (\n    <Typography.Text\n      style={{ cursor: 'pointer', color: active ? '#F9575E' : 'inherit' }}\n      onClick={() => onClick(value)}\n    >\n      {label}\n    </Typography.Text>\n  )\n}\n\nconst Slippage = ({\n  value,\n  onChange,\n}: {\n  value: number\n  onChange: (value: number) => void\n}) => {\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false}>\n          <Col flex=\"auto\">\n            <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>\n              Slippage Tolerance\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Tooltip\n              placement=\"right\"\n              title={\n                <span>\n                  Your transaction will be canceled if the confirmed price\n                  breaks the limited range of{' '}\n                  <strong style={{ color: '#f9575e' }}>{`${\n                    value * 100\n                  }%.`}</strong>\n                </span>\n              }\n            >\n              <Button\n                type=\"text\"\n                shape=\"circle\"\n                size=\"small\"\n                icon={<IonIcon name=\"information-circle-outline\" />}\n              />\n            </Tooltip>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false} justify=\"space-between\">\n          {[0.001, 0.005, 0.01, 0.05, 1].map((e, i) => (\n            <Col key={i}>\n              <Option\n                label={e === 1 ? 'Freely' : `${e * 100}%`}\n                value={e}\n                onClick={onChange}\n                active={e === value}\n              />\n            </Col>\n          ))}\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Slippage\n","import { Row, Col, Typography, Switch } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Advanced = ({\n  value,\n  onChange,\n}: {\n  value: boolean\n  onChange: (value: boolean) => void\n}) => {\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false}>\n          <Col flex=\"auto\">\n            <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>\n              Advanced Mode\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Switch\n              size=\"small\"\n              checkedChildren={<IonIcon name=\"calculator-outline\" />}\n              unCheckedChildren={<IonIcon name=\"sparkles-outline\" />}\n              checked={value}\n              onChange={onChange}\n            />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Typography.Paragraph style={{ fontSize: 12, textAlign: 'justify' }}>\n          <IonIcon name=\"warning-outline\" /> This advanced mode will disable the\n          automatic protection that often results in bad rates and lost funds.\n          Only use this mode if you know what you are doing.\n        </Typography.Paragraph>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Advanced\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nexport type State = {\n  slippage: number\n  advanced: boolean\n}\n\nconst NAME = 'settings'\nconst initialState: State = {\n  slippage: 0.01,\n  advanced: false,\n}\n\n/**\n * Actions\n */\n\nexport const updateSettings = createAsyncThunk(\n  `${NAME}/updateSettings`,\n  async (settings: Partial<State>) => ({ ...settings }),\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateSettings.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useDispatch, useSelector } from 'react-redux'\n\nimport { Row, Col, Button, Popover, Typography, Divider } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport PoweredBy from 'app/components/poweredBy'\nimport Slippage from './slippage'\nimport Advanced from './advanced'\n\nimport { updateSettings } from 'app/model/settings.controller'\nimport { AppDispatch, AppState } from 'app/model'\n\nconst Settings = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const { slippage, advanced } = useSelector(\n    (state: AppState) => state.settings,\n  )\n\n  const onSlippage = (slippage: number) => {\n    return dispatch(updateSettings({ slippage }))\n  }\n  const onAdvanced = (advanced: boolean) => {\n    return dispatch(updateSettings({ advanced }))\n  }\n\n  return (\n    <Row gutter={[4, 4]} justify=\"end\" align=\"middle\" wrap={false}>\n      <Col>\n        <PoweredBy />\n      </Col>\n      <Col>\n        <Divider type=\"vertical\" style={{ padding: 0 }} />\n      </Col>\n      <Col>\n        <Popover\n          placement=\"bottomRight\"\n          overlayInnerStyle={{ width: 300 }}\n          content={\n            <Row gutter={[8, 8]}>\n              <Col span={24}>\n                <Typography.Title level={5}>Settings</Typography.Title>\n              </Col>\n              <Col span={24}>\n                <Slippage value={slippage} onChange={onSlippage} />\n              </Col>\n              <Divider style={{ marginTop: 8, marginBottom: 8 }} />\n              <Col span={24}>\n                <Advanced value={advanced} onChange={onAdvanced} />\n              </Col>\n            </Row>\n          }\n          trigger=\"click\"\n        >\n          <Button\n            type=\"text\"\n            shape=\"circle\"\n            size=\"small\"\n            icon={<IonIcon name=\"settings-outline\" />}\n          />\n        </Popover>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Settings\n","import React, { useCallback, useEffect, useState } from 'react'\n\nimport { Card, Input, Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { TokenInfo } from '@solana/spl-token-registry'\nimport { useMint } from 'senhub/providers'\n\nconst KEYSIZE = 3\n\nconst Search = ({\n  onChange,\n  isSupportedMint,\n  disabled = false,\n}: {\n  onChange: (data: TokenInfo[] | null) => void\n  isSupportedMint: (mintAddress: string) => boolean\n  disabled?: boolean\n}) => {\n  const [keyword, setKeyword] = useState('')\n  const { tokenProvider } = useMint()\n\n  const search = useCallback(async () => {\n    if (!keyword || keyword.length < KEYSIZE) return onChange(null)\n    const raw = await tokenProvider.find(keyword)\n    const data = raw.filter(({ address }) => isSupportedMint(address))\n    return onChange(data)\n  }, [keyword, tokenProvider, onChange, isSupportedMint])\n\n  useEffect(() => {\n    search()\n  }, [search])\n\n  return (\n    <Card className=\"card-child\" bodyStyle={{ padding: 8 }} bordered={false}>\n      <Input\n        placeholder=\"Search\"\n        value={keyword}\n        size=\"small\"\n        bordered={false}\n        suffix={\n          <Button\n            type=\"text\"\n            style={{ marginRight: -7 }}\n            size=\"small\"\n            onClick={keyword ? () => setKeyword('') : () => {}}\n            icon={\n              <IonIcon name={keyword ? 'close-outline' : 'search-outline'} />\n            }\n            disabled={disabled}\n          />\n        }\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          setKeyword(e.target.value)\n        }\n        disabled={disabled}\n      />\n    </Card>\n  )\n}\n\nexport default Search\n","import { Row, Col, Space, Avatar, Typography, Card, Divider } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Mint = ({\n  logoURI,\n  symbol,\n  name,\n  onClick,\n  active = false,\n}: {\n  logoURI: string | undefined\n  symbol: string\n  name: string\n  onClick: () => void\n  active?: boolean\n}) => {\n  return (\n    <Card\n      className={`card-child${active ? ' active' : ''}`}\n      bodyStyle={{ padding: `8px 16px`, cursor: 'pointer' }}\n      bordered={active}\n      onClick={onClick}\n      hoverable\n    >\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Space size={12} style={{ marginLeft: -4 }}>\n            <Avatar\n              src={logoURI}\n              size={32}\n              style={{ backgroundColor: '#2D3355', border: 'none' }}\n            >\n              <IonIcon name=\"diamond-outline\" />\n            </Avatar>\n            <Typography.Text style={{ margin: 0 }}>{symbol}</Typography.Text>\n            <Divider type=\"vertical\" style={{ margin: 0 }} />\n            <Typography.Text\n              type=\"secondary\"\n              style={{ margin: 0, fontSize: 12 }}\n            >\n              {name}\n            </Typography.Text>\n          </Space>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default Mint\n","import { useState, useCallback, useMemo } from 'react'\nimport { TokenInfo } from '@solana/spl-token-registry'\nimport { account } from '@senswap/sen-js'\nimport LazyLoad from '@senswap/react-lazyload'\n\nimport { Row, Col, Typography, Divider } from 'antd'\nimport Search from './search'\nimport Mint from './mint'\n\nimport { useMint, usePool } from 'senhub/providers'\n\nexport type SelectionInfo = {\n  mintInfo?: TokenInfo\n  poolAddress?: string\n  poolAddresses: string[]\n}\n\nconst MintSelection = ({\n  value,\n  onChange,\n}: {\n  value: SelectionInfo\n  onChange: (value: SelectionInfo) => void\n}) => {\n  const [mints, setMints] = useState<Array<TokenInfo>>([])\n  const { pools } = usePool()\n  const { tokenProvider } = useMint()\n\n  // Compute mints that appear in all pools\n  const supportedMints = useMemo(() => {\n    if (!pools) return []\n    return Object.keys(pools)\n      .map((poolAddress) => {\n        const { mint_a, mint_b } = pools[poolAddress]\n        return [mint_a, mint_b]\n      })\n      .flat()\n      .filter((item, pos, self) => self.indexOf(item) === pos)\n  }, [pools])\n  const isSupportedMint = useCallback(\n    (mintAddress) => supportedMints.includes(mintAddress),\n    [supportedMints],\n  )\n  // Compoute mint list\n  const onMints = useCallback(\n    async (value: null | Array<TokenInfo>) => {\n      if (value) return setMints(value)\n      const raw = await tokenProvider.all()\n      const allMints = raw.filter(({ address }) => isSupportedMint(address))\n      return setMints(allMints)\n    },\n    [tokenProvider, isSupportedMint],\n  )\n  // Compute available pools\n  const getAvailablePoolAddresses = useCallback(\n    (tokenInfo: TokenInfo | undefined) => {\n      const mintAddress = tokenInfo?.address\n      if (!account.isAddress(mintAddress)) return []\n      return Object.keys(pools).filter((poolAddress) => {\n        const { mint_a, mint_b } = pools[poolAddress]\n        return [mint_a, mint_b].includes(mintAddress)\n      })\n    },\n    [pools],\n  )\n\n  /**\n   * Render mint list\n   */\n  const mintList = useMemo(() => {\n    // Return data to parent\n    const onMint = (tokenInfo: TokenInfo) => {\n      const poolAddresses = getAvailablePoolAddresses(tokenInfo)\n      return onChange({\n        mintInfo: tokenInfo,\n        poolAddress: undefined,\n        poolAddresses,\n      })\n    }\n    return (\n      <Row gutter={[16, 16]}>\n        {mints.map((mint, i) => {\n          const { logoURI, symbol, name, address } = mint\n          const { address: currentMintAddress } = value.mintInfo || {}\n          return (\n            <Col span={24} key={name + i}>\n              <LazyLoad height={48} overflow>\n                <Mint\n                  logoURI={logoURI}\n                  symbol={symbol}\n                  name={name}\n                  onClick={() => onMint(mint)}\n                  active={currentMintAddress === address}\n                />\n              </LazyLoad>\n            </Col>\n          )\n        })}\n      </Row>\n    )\n  }, [getAvailablePoolAddresses, onChange, mints, value])\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        <Typography.Title level={5}>Token Selection</Typography.Title>\n      </Col>\n      <Col span={24}>\n        <Divider style={{ margin: 0 }} />\n      </Col>\n      <Col span={24}>\n        <Search onChange={onMints} isSupportedMint={isSupportedMint} />\n      </Col>\n      <Col span={24}>\n        <Row gutter={[16, 16]} style={{ height: 300, overflow: 'auto' }}>\n          <Col span={24}>{mintList}</Col>\n          <Col span={24} />\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default MintSelection\n","import { useState, Fragment, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { forceCheck } from '@senswap/react-lazyload'\n\nimport { Row, Col, Avatar, Space, Typography, Divider, Modal } from 'antd'\nimport MintSelection, { SelectionInfo } from './mintSelection'\nimport IonIcon from 'shared/antd/ionicon'\nimport { SenLpState } from 'app/constant/senLpState'\n\nconst Selection = ({\n  value,\n  onChange,\n}: {\n  value: SelectionInfo\n  onChange: (value: SelectionInfo) => void\n}) => {\n  const [visible, setVisible] = useState(false)\n  const history = useHistory()\n  const { state } = useLocation<SenLpState>()\n  useEffect(() => {\n    if (visible) setTimeout(forceCheck, 500)\n  }, [visible])\n\n  const onSelection = (selectionInfo: SelectionInfo) => {\n    setVisible(false)\n\n    // Clear state of senlp come to\n    if (state) history.replace({ ...history.location, state: {} })\n\n    return onChange(selectionInfo)\n  }\n\n  const { logoURI, symbol } = value?.mintInfo || {}\n  return (\n    <Fragment>\n      <Space style={{ cursor: 'pointer' }} onClick={() => setVisible(true)}>\n        <Avatar\n          size={24}\n          src={logoURI}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n        >\n          <IonIcon name=\"diamond-outline\" />\n        </Avatar>\n        <Typography.Text type=\"secondary\" style={{ margin: 0 }}>\n          {symbol || 'TOKEN'}\n        </Typography.Text>\n        <Divider type=\"vertical\" style={{ marginLeft: 4 }} />\n      </Space>\n      <Modal\n        visible={visible}\n        onCancel={() => setVisible(false)}\n        closeIcon={<IonIcon name=\"close\" />}\n        footer={null}\n        destroyOnClose={true}\n        centered={true}\n      >\n        <Row gutter={[16, 16]}>\n          <Col span={24}>\n            <MintSelection value={value} onChange={onSelection} />\n          </Col>\n        </Row>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default Selection\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { TokenInfo } from '@solana/spl-token-registry'\n\nexport type State = {\n  amount: string // Desired amount\n  accountAddress: string // Associated account to the selected token\n  mintInfo?: TokenInfo // Selected token\n  poolAddresses: string[] // List of available pools\n  priority: number\n}\n\nconst NAME = 'ask'\nconst initialState: State = {\n  amount: '',\n  accountAddress: '',\n  poolAddresses: [],\n  priority: 0,\n}\n\n/**\n * Actions\n */\nexport const updateAskData = createAsyncThunk<\n  Partial<State>,\n  Partial<State> & { prioritized?: boolean; reset?: boolean },\n  { state: any }\n>(\n  `${NAME}/updateAskData`,\n  async ({ prioritized, reset, ...askData }, { getState }) => {\n    const {\n      bid: { priority: refPriority },\n      ask: { priority: prevPriority },\n    } = getState()\n    const priority = reset ? 0 : prioritized ? refPriority + 1 : prevPriority\n    return { ...askData, priority }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateAskData.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import React, { useState, forwardRef, useCallback, useRef } from 'react'\n\nimport { Input, Tooltip, Space } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nlet timeoutId: ReturnType<typeof setTimeout> | undefined\n\nconst NumericInput = forwardRef(\n  ({ max, onChange, ...props }: any, ref: any) => {\n    const [error, setError] = useState('')\n    const [cursor, setCursor] = useState<number | null>(null)\n    const innerRef = useRef(ref)\n\n    // Handle amount\n    const onAmount = useCallback(\n      (val: string) => {\n        const onError = (er: string) => {\n          if (timeoutId) {\n            clearTimeout(timeoutId)\n            timeoutId = undefined\n          }\n          setError(er)\n          timeoutId = setTimeout(() => setError(''), 500)\n        }\n        const reg = /^\\d*(\\.\\d*)?$/\n        if (!reg.test(val)) return onError('Invalid character')\n        if (max && parseFloat(val) > parseFloat(max))\n          return onError('Not enough balance')\n        return onChange(val)\n      },\n      [max, onChange],\n    )\n    // Handle cursor\n    innerRef?.current?.setSelectionRange(cursor, cursor)\n    return (\n      <Tooltip\n        title={\n          <Space>\n            <IonIcon name=\"warning\" />\n            {error}\n          </Space>\n        }\n        visible={!!error}\n      >\n        <Input\n          {...props}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setCursor(e.target.selectionStart)\n            onAmount(e.target.value || '')\n          }}\n          ref={innerRef}\n        />\n      </Tooltip>\n    )\n  },\n)\n\nexport default NumericInput\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from 'senhub/providers'\n\nconst useMintDecimals = (mintAddress: string): number => {\n  const [decimals, setDecimals] = useState(0)\n  const { tokenProvider, getMint } = useMint()\n\n  const fetchTokenDecimals = useCallback(async () => {\n    if (!mintAddress) return setDecimals(0)\n    // Find in token provider\n    const token = await tokenProvider.findByAddress(mintAddress)\n    if (token) return setDecimals(token.decimals)\n    // Find on blockchain (slow than token provider)\n    try {\n      const mint = await getMint({ address: mintAddress })\n      return setDecimals(mint[mintAddress].decimals)\n    } catch (error) {}\n    return setDecimals(0)\n  }, [getMint, mintAddress, tokenProvider])\n\n  useEffect(() => {\n    fetchTokenDecimals()\n  }, [fetchTokenDecimals])\n\n  return decimals\n}\n\nexport default useMintDecimals\n","import { useMemo } from 'react'\n\nimport { utils } from '@senswap/sen-js'\nimport { useAccount, useWallet } from 'senhub/providers'\n\nimport { SOL_ADDRESS } from 'app/constant/sol'\nimport useMintDecimals from './useMintDecimals'\n\nexport const useMintAccount = (accountAddr: string) => {\n  const { accounts } = useAccount()\n  const { wallet } = useWallet()\n\n  const { amount, mint } = useMemo(() => {\n    // sol account\n    if (accountAddr === wallet.address)\n      return { amount: wallet.lamports, mint: SOL_ADDRESS }\n    // spl token account\n    return accounts[accountAddr] || {}\n  }, [accountAddr, accounts, wallet.address, wallet.lamports])\n\n  const decimals = useMintDecimals(mint)\n  const mintInfo = useMemo(() => {\n    return {\n      balance: utils.undecimalize(amount, decimals),\n      mint,\n      amount,\n      decimals,\n    }\n  }, [amount, decimals, mint])\n\n  return mintInfo\n}\n","export const SOL_ADDRESS = '11111111111111111111111111111111'\n\nexport const WSOL_ADDRESS = 'So11111111111111111111111111111111111111112'\n\nexport const LPT_DECIMALS = 9\n\nexport const SOL_DECIMALS = 9\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string' ||\n  typeof process.env.REACT_APP_SENHUB !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n  senhub: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n  senhub: process.env.REACT_APP_SENHUB,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  spltAddress: string\n  splataAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: 'https://api.devnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: 'https://api.testnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: 'https://api.mainnet-beta.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  bidDefault: string\n  askDefault: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    bidDefault: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    askDefault: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    bidDefault: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    askDefault: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    bidDefault: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    askDefault: 'SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  wormholeAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { env, net } from 'shared/runtime'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\nimport swap from './swap.config'\nimport wormhole from './wormhole.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n  swap: swap[net],\n  wormhole: wormhole[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { SelectionInfo } from './../selection/mintSelection'\nimport { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport { useMint, usePool, useWallet } from 'senhub/providers'\n\nconst DEFAULT_INFO = {\n  accountAddress: '',\n  poolAddresses: [],\n}\n\ntype MintSelection = SelectionInfo & {\n  accountAddress?: string\n}\n\nexport const useMintSelection = (mintAddress: string): MintSelection => {\n  const { wallet } = useWallet()\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n  const [selectionInfo, setSelectionInfo] =\n    useState<MintSelection>(DEFAULT_INFO)\n\n  const getSelectionInfo = useCallback(async () => {\n    if (!account.isAddress(mintAddress) || !Object.keys(pools).length)\n      return setSelectionInfo(DEFAULT_INFO)\n\n    const mintInfo = await tokenProvider.findByAddress(mintAddress)\n    if (!mintInfo) return setSelectionInfo(DEFAULT_INFO)\n    const { splt } = window.sentre\n    // get mint account\n    const accountAddress = await splt.deriveAssociatedAddress(\n      wallet.address,\n      mintAddress,\n    )\n    // get pools\n    const poolAddresses = Object.keys(pools).filter((poolAddress) => {\n      const { mint_a, mint_b } = pools[poolAddress]\n      return [mint_a, mint_b].includes(mintAddress)\n    })\n    setSelectionInfo({\n      accountAddress,\n      mintInfo,\n      poolAddress: '',\n      poolAddresses,\n    })\n  }, [mintAddress, pools, tokenProvider, wallet.address])\n\n  useEffect(() => {\n    getSelectionInfo()\n  }, [getSelectionInfo])\n\n  return selectionInfo\n}\n","import { useMemo, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account } from '@senswap/sen-js'\n\nimport { Row, Col, Typography } from 'antd'\nimport { SelectionInfo } from '../selection/mintSelection'\nimport Selection from '../selection'\n\nimport { useWallet } from 'senhub/providers'\nimport { numeric } from 'shared/util'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateAskData } from 'app/model/ask.controller'\nimport NumericInput from 'app/shared/components/numericInput'\nimport { useMintAccount } from 'app/shared/hooks/useMintAccount'\nimport configs from 'app/configs'\nimport { useMintSelection } from '../hooks/useMintSelection'\nimport { SenLpState } from 'app/constant/senLpState'\n\nconst Ask = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const { wallet } = useWallet()\n  const askData = useSelector((state: AppState) => state.ask)\n  const { state } = useLocation<SenLpState>()\n  const { balance } = useMintAccount(askData.accountAddress)\n  const selectionDefault = useMintSelection(configs.swap.askDefault)\n  const poolAdress = state?.poolAddress\n\n  // Select default\n  useEffect(() => {\n    if (\n      account.isAddress(askData.accountAddress) ||\n      account.isAddress(poolAdress)\n    )\n      return\n    dispatch(updateAskData(selectionDefault))\n  }, [askData.accountAddress, dispatch, poolAdress, selectionDefault])\n\n  // Compute selection info\n  const selectionInfo: SelectionInfo = useMemo(\n    () => ({\n      mintInfo: askData.mintInfo,\n      poolAddresses: askData.poolAddresses,\n    }),\n    [askData],\n  )\n\n  // Handle amount\n  const onAmount = (val: string) => {\n    return dispatch(updateAskData({ amount: val, prioritized: true }))\n  }\n\n  // Update ask data\n  const onSelectionInfo = async (selectionInfo: SelectionInfo) => {\n    const { splt } = window.sentre\n    const { address: mintAddress } = selectionInfo.mintInfo || {}\n    if (!account.isAddress(mintAddress))\n      return dispatch(updateAskData({ ...selectionInfo }))\n    const accountAddress = await splt.deriveAssociatedAddress(\n      wallet.address,\n      mintAddress,\n    )\n    dispatch(updateAskData({ accountAddress, ...selectionInfo }))\n  }\n\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Typography.Text>To</Typography.Text>\n      </Col>\n      <Col span={24}>\n        <NumericInput\n          placeholder=\"0\"\n          value={askData.amount}\n          onChange={onAmount}\n          size=\"large\"\n          prefix={\n            <Selection value={selectionInfo} onChange={onSelectionInfo} />\n          }\n        />\n      </Col>\n      <Col flex=\"auto\" />\n      <Col className=\"caption\">\n        <Typography.Text type=\"secondary\">\n          Available: {numeric(balance || 0).format('0,0.[00]')}{' '}\n          {selectionInfo.mintInfo?.symbol || 'TOKEN'}\n        </Typography.Text>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Ask\n","import { Space, Tag, Typography } from 'antd'\nimport { randomColor } from 'shared/util'\n\nconst WORMHOLE_COLOR = '#F9575E'\n\nconst WormHoleSupported = () => {\n  return (\n    <Space size={4}>\n      <Tag\n        style={{\n          margin: 0,\n          borderRadius: 4,\n          color: randomColor(WORMHOLE_COLOR),\n        }}\n        color={randomColor(WORMHOLE_COLOR, 0.2)}\n      >\n        Wormhole Bridge\n      </Tag>\n      <Typography.Text type=\"secondary\">Supported</Typography.Text>\n    </Space>\n  )\n}\n\nexport default WormHoleSupported\n","export type EthAddressConfig = {\n  mainnet: string\n  goerli: string\n  ropsten: string\n}\n\nexport type EthChainIdConfig = {\n  mainnet: number\n  goerli: number\n  ropsten: number\n}\n\nexport type EtherNetwork = 'mainnet' | 'goerli'\n\nexport type EtherConfigSet = {\n  mainnet: string\n  goerli: string\n  ropsten: string\n}\n\nexport type MoralisStructure = {\n  url: string\n  apiKey: string\n}\n\nexport const ETH_BRIDGE_ADDRESS: EthAddressConfig = {\n  mainnet: '0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B',\n  goerli: '0x706abc4E45D419950511e474C7B9Ed348A4a716c',\n  ropsten: '0xC89Ce4735882C9F0f0FE26686c53074E09B0D550',\n}\n\nexport const ETH_TOKEN_BRIDGE_ADDRESS: EthAddressConfig = {\n  mainnet: '0x3ee18B2214AFF97000D974cf647E7C347E8fa585',\n  goerli: '0xf890982f9310df57d00f659cf4fd87e65aded8d7',\n  ropsten: '0x0290FB167208Af455bB137780163b7B7a9a10C16',\n}\n\nexport const CHAIN_ID_ETH: EthChainIdConfig = {\n  mainnet: 1,\n  goerli: 5,\n  ropsten: 3,\n}\n\nexport const MORALIS_INFO: MoralisStructure = {\n  url: 'https://deep-index.moralis.io/api/v2',\n  apiKey: 'N6yeIUl1FxCPZWbXyxLHWPAjSr6ahQeJTX3d19pSKCwHsLCzpWE7z1hilon4xDOd',\n}\n\nexport const INFURA_API_KEY: String = '5eb1b92f2065414d9dd21858fac54257'\n\nexport const INFURA_API_HTTP_URL: EtherConfigSet = {\n  mainnet: `https://mainnet.infura.io/v3/${INFURA_API_KEY}`,\n  goerli: `https://goerli.infura.io/v3/${INFURA_API_KEY}`,\n  ropsten: `https://ropsten.infura.io/v3/${INFURA_API_KEY}`,\n}\n\nexport const INFURA_API_WSS_URL: EtherConfigSet = {\n  mainnet: `wss://mainnet.infura.io/ws/v3/${INFURA_API_KEY}`,\n  goerli: `wss://goerli.infura.io/ws/v3/${INFURA_API_KEY}`,\n  ropsten: `wss://ropsten.infura.io/ws/v3/${INFURA_API_KEY}`,\n}\n","export type SolNetWork = 'mainnet' | 'devnet'\n\nexport type SolAddressConfig = {\n  mainnet: string\n  testnet: string\n  devnet: string\n}\n\nexport const SOL_BRIDGE_ADDRESS: SolAddressConfig = {\n  mainnet: 'worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth',\n  testnet: 'Brdguy7BmNB4qwEbcqqMbyV5CyJd2sxQNUn6NEpMSsUb',\n  devnet: '3u8hJUVTA4jH1wYAyUur7FFZVQ8H635K3tSHHF4ssjQ5',\n}\n\nexport const SOL_TOKEN_BRIDGE_ADDRESS: SolAddressConfig = {\n  mainnet: 'wormDTUJ6AWPNvk59vGQbDvGJmqbDTdgWgAqcLBCgUb',\n  testnet: 'A4Us8EhCC76XdGAN17L4KpRNEK423nMivVHZzZqFqqBg',\n  devnet: 'DZnkkTmCiFWfYTfT41X3Rd1kDgozqzxWaHqsw6W4x2oe',\n}\n","import {\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from '@certusone/wormhole-sdk'\nimport storage from 'shared/storage'\n\nimport {\n  EtherNetwork,\n  ETH_BRIDGE_ADDRESS,\n  ETH_TOKEN_BRIDGE_ADDRESS,\n} from 'app/constant/ethConfig'\nimport {\n  SolNetWork,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n} from 'app/constant/solConfig'\nimport { getIsWrappedAssetSol } from '@certusone/wormhole-sdk'\n\nexport const getSolNetwork = () => {\n  const solNetwork = storage.get('network') || 'mainnet'\n  return solNetwork\n}\n\nexport const getEtherNetwork = () => {\n  const solNetwork = getSolNetwork()\n  const etherNetwork = solNetwork === 'mainnet' ? 'mainnet' : 'goerli'\n  return etherNetwork\n}\n\nexport const getEtherContext = () => {\n  const etherNetwork: EtherNetwork = getEtherNetwork()\n  return {\n    chainId: CHAIN_ID_ETH,\n    tokenBridgeAddress: ETH_TOKEN_BRIDGE_ADDRESS[etherNetwork],\n    bridgeAddress: ETH_BRIDGE_ADDRESS[etherNetwork],\n  }\n}\n\nexport const getSolContext = () => {\n  const solNetWork: SolNetWork = getSolNetwork()\n  return {\n    chainId: CHAIN_ID_SOLANA,\n    tokenBridgeAddress: SOL_TOKEN_BRIDGE_ADDRESS[solNetWork],\n    bridgeAddress: SOL_BRIDGE_ADDRESS[solNetWork],\n  }\n}\n\nexport const checkAttestedWormhole = async (mintAddress: string) => {\n  const solContext = getSolContext()\n  return getIsWrappedAssetSol(\n    window.sentre.splt.connection,\n    solContext.tokenBridgeAddress,\n    mintAddress,\n  )\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account, DEFAULT_WSOL, utils } from '@senswap/sen-js'\n\nimport { Row, Col, Typography, Button } from 'antd'\nimport WormHoleSupported from '../wormHoleSupported'\nimport Selection from '../selection'\n\nimport { useMint, useWallet } from 'senhub/providers'\nimport { numeric } from 'shared/util'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateBidData } from 'app/model/bid.controller'\nimport NumericInput from 'app/shared/components/numericInput'\nimport { SelectionInfo } from '../selection/mintSelection'\nimport { useMintSelection } from '../hooks/useMintSelection'\nimport { useMintAccount } from 'app/shared/hooks/useMintAccount'\nimport configs from 'app/configs'\nimport { checkAttestedWormhole } from 'app/helper/wormhole'\nimport { SenLpState } from 'app/constant/senLpState'\n\nconst Bid = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const {\n    wallet: { address: walletAddress, lamports },\n  } = useWallet()\n  const bidData = useSelector((state: AppState) => state.bid)\n  const { getMint } = useMint()\n  const [wormholeSupported, setWormholeSupported] = useState(false)\n  const { balance, decimals, mint, amount } = useMintAccount(\n    bidData.accountAddress,\n  )\n  const selectionDefault = useMintSelection(configs.swap.bidDefault)\n  const { state } = useLocation<SenLpState>()\n  const poolAdress = state?.poolAddress\n\n  // Select default\n  useEffect(() => {\n    if (\n      account.isAddress(bidData.accountAddress) ||\n      account.isAddress(poolAdress)\n    )\n      return\n    dispatch(updateBidData(selectionDefault))\n  }, [bidData.accountAddress, dispatch, poolAdress, selectionDefault])\n\n  // Compute selection info\n  const selectionInfo: SelectionInfo = useMemo(\n    () => ({\n      mintInfo: bidData.mintInfo,\n      poolAddresses: bidData.poolAddresses,\n    }),\n    [bidData],\n  )\n\n  // Compute human-readable balance\n  const balanceTransfer = useMemo((): string => {\n    if (mint !== DEFAULT_WSOL || decimals < 1) return balance\n    // So estimate max = 0.01 fee -> multi transaction.\n    const estimateFee = utils.decimalize(0.01, decimals)\n    const max = lamports + amount - estimateFee\n    if (max <= amount) return utils.undecimalize(amount, decimals)\n    return utils.undecimalize(max, decimals)\n  }, [amount, balance, decimals, lamports, mint])\n\n  // Handle amount\n  const onAmount = useCallback(\n    (val: string) => {\n      return dispatch(updateBidData({ amount: val, prioritized: true }))\n    },\n    [dispatch],\n  )\n  // All in :)))\n  const onMax = () => onAmount(balanceTransfer)\n\n  // Update bid data\n  const onSelectionInfo = async (selectionInfo: SelectionInfo) => {\n    const { splt } = window.sentre\n    const { address: mintAddress } = selectionInfo.mintInfo || {}\n    // clear field input when select new token\n    dispatch(updateBidData({ amount: '', prioritized: true }))\n\n    if (!account.isAddress(mintAddress))\n      return dispatch(updateBidData({ ...selectionInfo }))\n    const accountAddress = await splt.deriveAssociatedAddress(\n      walletAddress,\n      mintAddress,\n    )\n    return dispatch(updateBidData({ accountAddress, ...selectionInfo }))\n  }\n\n  useEffect(() => {\n    ;(async () => {\n      const bidMintAddr = selectionInfo?.mintInfo?.address\n      if (!account.isAddress(bidMintAddr)) return\n      const wormholeSupported = await checkAttestedWormhole(bidMintAddr)\n      return setWormholeSupported(wormholeSupported)\n    })()\n  }, [getMint, selectionInfo])\n\n  return (\n    <Row gutter={[8, 8]}>\n      <Col flex=\"auto\">\n        <Typography.Text>From</Typography.Text>\n      </Col>\n      {wormholeSupported && (\n        <Col>\n          <WormHoleSupported />\n        </Col>\n      )}\n      <Col span={24}>\n        <NumericInput\n          placeholder=\"0\"\n          value={bidData.amount}\n          onChange={onAmount}\n          size=\"large\"\n          prefix={\n            <Selection value={selectionInfo} onChange={onSelectionInfo} />\n          }\n          suffix={\n            <Button\n              type=\"text\"\n              size=\"small\"\n              style={{ fontSize: 12, marginRight: -7 }}\n              onClick={onMax}\n            >\n              MAX\n            </Button>\n          }\n          max={balanceTransfer}\n        />\n      </Col>\n      <Col flex=\"auto\" />\n      <Col className=\"caption\">\n        <Typography.Text type=\"secondary\">\n          Available: {numeric(balanceTransfer || 0).format('0,0.[00]')}{' '}\n          {selectionInfo.mintInfo?.symbol || 'TOKEN'}\n        </Typography.Text>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Bid\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { HopData } from 'app/components/preview/index'\n\ntype RouteInfo = {\n  hops: HopData[]\n  amounts: string[]\n  amount: string\n}\n\nexport type State = {\n  route?: RouteInfo\n}\nconst ROUTE_DEFAULT = {\n  amount: '',\n  amounts: [],\n  hops: [],\n}\nconst NAME = 'route'\nconst initialState: State = {\n  route: ROUTE_DEFAULT,\n}\n\n/**\n * Actions\n */\nexport const updateRouteInfo = createAsyncThunk<\n  State,\n  { route: RouteInfo },\n  { state: any }\n>(`${NAME}/updateRouteInfo`, async ({ route }, { getState }) => {\n  const { route: routeState } = getState()\n  if (!route) return { route: routeState }\n  return { route }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateRouteInfo.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account } from '@senswap/sen-js'\n\nimport { Button, Col, Row } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport Ask from '../ask'\nimport Bid from '../bid'\n\nimport {\n  BestRouteInfo,\n  buildPoolGraph,\n  findAllRoute,\n  findBestRouteFromAsk,\n  findBestRouteFromBid,\n  RouteTrace,\n} from 'app/helper/router'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateAskData } from 'app/model/ask.controller'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { updateRouteInfo } from 'app/model/route.controller'\nimport { usePool } from 'senhub/providers'\nimport { SenLpState } from 'app/constant/senLpState'\n\nconst SwapAction = ({ spacing = 12 }: { spacing?: number }) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const [bestRoute, setBestRoute] = useState(new BestRouteInfo())\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const { pools } = usePool()\n  const { state } = useLocation<SenLpState>()\n  const poolAdress = state?.poolAddress\n  const originalRoute = state?.originalRoute\n\n  /**\n   * Switch tokens\n   */\n  const onSwitch = useCallback(async () => {\n    const { amount: bidAmount, priority: bidPriority, ...bidRest } = bidData\n    const { amount: askAmount, priority: askPriority, ...askRest } = askData\n    const amount = bidPriority > askPriority ? bidAmount : askAmount\n    const updateData = bidPriority > askPriority ? updateAskData : updateBidData\n    await dispatch(updateBidData({ ...askRest, amount: '', reset: true }))\n    await dispatch(updateAskData({ ...bidRest, amount: '', reset: true }))\n    await dispatch(updateData({ amount, prioritized: true }))\n  }, [dispatch, askData, bidData])\n\n  /**\n   * Find optimal route\n   */\n  const findRoute = useCallback(async () => {\n    const {\n      poolAddresses: bidPoolAddresses,\n      mintInfo: bidMintInfo,\n      amount: bidAmount,\n      priority: bidPriority,\n    } = bidData\n    const {\n      poolAddresses: askPoolAddresses,\n      mintInfo: askMintInfo,\n      amount: askAmount,\n      priority: askPriority,\n    } = askData\n    const { address: bidMintAddress } = bidMintInfo || {}\n    const bidPools = bidPoolAddresses.map((address) => ({\n      address,\n      ...pools[address],\n    }))\n    const { address: askMintAddress } = askMintInfo || {}\n    const askPools = askPoolAddresses.map((address) => ({\n      address,\n      ...pools[address],\n    }))\n    let bestRoute = new BestRouteInfo()\n\n    if (\n      (!Number(bidAmount) && !Number(askAmount)) ||\n      !account.isAddress(bidMintAddress) ||\n      !account.isAddress(askMintAddress) ||\n      !bidPools.length ||\n      !askPools.length ||\n      !bidMintInfo\n    )\n      return setBestRoute(bestRoute)\n    // Use mode to find best route this mean the system find best route for end user.\n    // the best route return a route that user can receive maximum ask amount when swap\n    let routes = new Array<RouteTrace>()\n\n    const pathTrace: RouteTrace = {\n      mints: [bidMintAddress],\n      pools: [],\n    }\n    const graph = buildPoolGraph(pools)\n    findAllRoute(routes, graph, bidMintAddress, askMintAddress, pathTrace)\n    // No available route\n    if (!routes.length) return setBestRoute(bestRoute)\n\n    //when user select original route from senlp\n    if (originalRoute)\n      routes = routes.filter(\n        (route) => route.pools.length === 1 && route.pools[0] === poolAdress,\n      )\n\n    if (askPriority < bidPriority) {\n      bestRoute = await findBestRouteFromBid(pools, routes, bidData, askData)\n    } else\n      bestRoute = await findBestRouteFromAsk(pools, routes, bidData, askData)\n    return setBestRoute(bestRoute)\n  }, [askData, bidData, originalRoute, poolAdress, pools])\n\n  const updateRoute = useCallback(() => {\n    const bidPriority = bidData.priority\n    const askPriority = askData.priority\n    if (askPriority < bidPriority) {\n      dispatch(updateAskData({ amount: bestRoute.amount }))\n    }\n    if (bidPriority < askPriority) {\n      dispatch(updateBidData({ amount: bestRoute.amount }))\n    }\n    dispatch(updateRouteInfo({ route: { ...bestRoute } }))\n  }, [askData.priority, bestRoute, bidData.priority, dispatch])\n\n  useEffect(() => {\n    updateRoute()\n  }, [updateRoute])\n\n  useEffect(() => {\n    findRoute()\n  }, [findRoute])\n\n  return (\n    <Row gutter={[spacing, spacing]} justify=\"center\">\n      <Col span={24}>\n        <Bid />\n      </Col>\n      <Col>\n        <Button\n          size=\"small\"\n          icon={<IonIcon name=\"git-compare-outline\" />}\n          onClick={onSwitch}\n        />\n      </Col>\n      <Col span={24}>\n        <Ask />\n      </Col>\n    </Row>\n  )\n}\n\nexport default SwapAction\n","import { Col, Row } from 'antd'\nimport Settings from '../settings'\nimport SwapAction from './swapAction'\n\nconst Swap = () => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} justify=\"end\" align=\"middle\" wrap={false}>\n          <Col>\n            <Settings />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <SwapAction />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Swap\n","import { Card, Col, Row } from 'antd'\nimport SwapReview from './swapReview'\nimport SwapPoolInfo from './swapPoolInfo'\nimport SwapForm from 'app/components/swap'\n\nconst Swap = () => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Card bordered={false} className=\"card-swap\">\n          <SwapForm />\n        </Card>\n      </Col>\n      <Col span={24}>\n        <SwapReview />\n      </Col>\n      <Col span={24}>\n        <SwapPoolInfo />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Swap\n","import { Tag } from 'antd'\n\nconst STATUS_COLOR: Record<string, number[]> = {\n  success: [20, 224, 65],\n  pending: [212, 177, 6],\n  error: [215, 35, 17],\n  failed: [215, 35, 17],\n}\n\nconst StatusTag = ({ tag }: { tag: string }) => {\n  const setColorTag = (opacity?: number) => {\n    let color = STATUS_COLOR[tag]\n    return `rgba(${color[0]},  ${color[1]}, ${color[2]},${opacity || 1})`\n  }\n\n  return (\n    <Tag\n      style={{\n        margin: 0,\n        borderRadius: 4,\n        color: setColorTag(),\n        textTransform: 'capitalize',\n      }}\n      color={setColorTag(0.1)}\n    >\n      {tag}\n    </Tag>\n  )\n}\n\nexport default StatusTag\n","import { Button, Space, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'app/shared/components/mint'\nimport IonIcon from 'shared/antd/ionicon'\nimport { explorer, numeric, shortenAddress } from 'shared/util'\nimport StatusTag from './statusTag'\n\nconst FORMAT_AMOUNT = '0,00.[0000]a'\n\nexport const HISTORY_COLUMN = [\n  {\n    title: 'TIME',\n    dataIndex: 'time',\n  },\n  {\n    title: 'TRANSACTION',\n    dataIndex: 'transactionId',\n    render: (text: string) => (\n      <Space align=\"baseline\">\n        <Typography.Text\n          onClick={() => window.open(explorer(text), '_blank')}\n          style={{ fontWeight: 700, cursor: 'pointer' }}\n        >\n          {shortenAddress(text, 3, '...')}\n        </Typography.Text>\n        <Button\n          type=\"text\"\n          size=\"small\"\n          onClick={() => window.open(explorer(text), '_blank')}\n          icon={<IonIcon name=\"open-outline\" />}\n        />\n      </Space>\n    ),\n  },\n\n  {\n    title: 'BID',\n    dataIndex: 'bid',\n    render: (text: string, record: any) =>\n      !record.from ? (\n        '--'\n      ) : (\n        <Space size={8}>\n          <MintAvatar mintAddress={record.from} />\n          {numeric(record.amountFrom).format(FORMAT_AMOUNT)}\n          <MintSymbol mintAddress={record.from} />\n        </Space>\n      ),\n  },\n  {\n    title: 'ASK',\n    dataIndex: 'ask',\n    render: (text: string, record: any) =>\n      !record.to ? (\n        '--'\n      ) : (\n        <Space size={8}>\n          <MintAvatar mintAddress={record.to} />\n          {numeric(record.amountTo).format(FORMAT_AMOUNT)}\n          <MintSymbol mintAddress={record.to} />\n        </Space>\n      ),\n  },\n  {\n    title: 'STATUS',\n    dataIndex: 'status',\n    width: 100,\n    render: (text: string, record: any) => <StatusTag tag={record.status} />,\n  },\n]\n","export class TransLog {\n  programId: string = ''\n\n  programInfo: ProgramInfo | undefined\n\n  signature: string = ''\n\n  blockTime: number = 0\n\n  time: number = 0\n\n  owner: string = ''\n\n  actionType: string = ''\n\n  actionTransfers: Array<ActionTransfer> = []\n\n  programTransfer: Array<ActionTransfer> = []\n}\n\nexport class ActionInfo {\n  address: string = ''\n\n  // pool: string = ''\n\n  mint: string = ''\n\n  decimals: number = 0\n\n  preBalance: string = '0'\n\n  postBalance: string = '0'\n}\n/**\n * Amount is not same postBalance - preBalance\n * @postBalance and @preBalance are balance after all action (transaction)\n * @postBalance = @preBalance +- all @amount (multi amount in transaction)\n * @amount is value in 1 action\n */\nexport class ActionTransfer {\n  source: ActionInfo | undefined\n\n  destination: ActionInfo | undefined\n\n  amount: string = '0'\n}\ntype ProgramInfo = {\n  programId: string\n  data: string\n}\n","import {\n  ConfirmedSignatureInfo,\n  ConfirmedSignaturesForAddress2Options,\n  Connection,\n  ParsedConfirmedTransaction,\n  PublicKey,\n} from '@solana/web3.js'\n\nimport { OptionsFetchSignature } from '../../constants/transaction'\n\nconst DEFAULT_LIMIT = 700\nconst TRANSACTION_LIMIT = 150\n\nexport class Solana {\n  private conn: Connection = window.sentre.splt.connection\n\n  //Search for all signatures from last Signature and earlier\n  //So: If new collection (to now) -> last Signature = null\n  private async fetchSignatures(\n    address: PublicKey,\n    lastSignature?: string,\n    limit: number = DEFAULT_LIMIT,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    if (limit > DEFAULT_LIMIT) limit = DEFAULT_LIMIT\n    const options: ConfirmedSignaturesForAddress2Options = {\n      limit: limit,\n      before: lastSignature,\n    }\n    return this.conn.getConfirmedSignaturesForAddress2(address, options)\n  }\n\n  private async fetchConfirmTransaction(signatures: string[]) {\n    let confirmedTransactions: ParsedConfirmedTransaction[] = []\n    let limit = TRANSACTION_LIMIT\n\n    const promiseTransGroup = []\n    for (let offset = 0; offset <= signatures.length / limit; offset++) {\n      const skip = offset * limit\n      const signaturesGroup = signatures.slice(skip, skip + limit)\n      promiseTransGroup.push(\n        this.conn.getParsedConfirmedTransactions(signaturesGroup),\n      )\n    }\n\n    const transGroups = await Promise.all(promiseTransGroup)\n    for (const transGroup of transGroups) {\n      //@ts-ignore\n      confirmedTransactions = confirmedTransactions.concat(transGroup)\n    }\n    return confirmedTransactions\n  }\n\n  async fetchTransactions(\n    programId: string,\n    options: OptionsFetchSignature,\n  ): Promise<ParsedConfirmedTransaction[]> {\n    const currentTime = new Date().getTime() / 1000\n    let { secondFrom, secondTo, lastSignature, limit } = options\n    secondFrom = Math.floor(secondFrom || 0)\n    secondTo = Math.floor(secondTo || currentTime)\n\n    const programPublicKey = new PublicKey(programId)\n    let signatures: string[] = []\n    let isStop = false\n\n    while (!isStop) {\n      const confirmedSignatureInfos: ConfirmedSignatureInfo[] =\n        await this.fetchSignatures(programPublicKey, lastSignature, limit)\n      if (!confirmedSignatureInfos?.length || isStop) break\n      for (const info of confirmedSignatureInfos) {\n        const blockTime = info.blockTime\n        if (!blockTime || blockTime > secondTo) continue\n        if (blockTime < secondFrom) {\n          isStop = true\n          break\n        }\n        lastSignature = info.signature\n        signatures.push(info.signature)\n      }\n\n      if (limit && signatures.length >= limit) break\n      if (confirmedSignatureInfos?.length < DEFAULT_LIMIT) break\n    }\n    const confirmedTransactions = await this.fetchConfirmTransaction(signatures)\n    return confirmedTransactions\n  }\n}\n","export enum ParsedType {\n  Transfer = 'transfer',\n}\n\nexport type ParsedAction = {\n  type: ParsedType\n  info: ParsedInfoTransfer\n}\n\nexport type ParsedInfoTransfer = {\n  source: string\n  destination: string\n  amount: string\n  lamports: number\n}\n\nexport type OptionsFetchSignature = {\n  limit?: number\n  lastSignature?: string\n  secondFrom?: number\n  secondTo?: number\n}\n","import moment from 'moment'\n\nconst SECOND_PER_MILLISECOND = 1000\n\nexport enum TimeFormat {\n  YMD = 'YYYYMMDD',\n  SortableTimePattern = 'YYYY-MM-DD HH:mm:ss',\n}\n\nexport class DateHelper {\n  private milliSeconds: number = new Date().valueOf()\n\n  setMilliSeconds(milliSeconds: number) {\n    this.milliSeconds = milliSeconds\n  }\n\n  static fromSeconds(seconds: number): DateHelper {\n    const date = new DateHelper()\n    const milliSeconds = seconds * SECOND_PER_MILLISECOND\n    date.setMilliSeconds(milliSeconds)\n    return date\n  }\n\n  static fromYmd(ymd: number): DateHelper {\n    const date = new DateHelper()\n    const milliSeconds = moment(ymd, TimeFormat.YMD).valueOf()\n    date.setMilliSeconds(milliSeconds)\n    return date\n  }\n\n  static getListDate(ymdFrom: number, ymdTo: number): number[] {\n    const dates: number[] = []\n    let dateFrom = DateHelper.fromYmd(ymdFrom)\n    const dateTo = DateHelper.fromYmd(ymdTo)\n    while (dateFrom.ymd() <= dateTo.ymd()) {\n      dates.push(dateFrom.ymd())\n      dateFrom = dateFrom.addDay()\n    }\n    return dates\n  }\n\n  format(dateFormat: TimeFormat): string {\n    const date = new Date(this.milliSeconds)\n    return moment(date).format(dateFormat)\n  }\n\n  subtractDay(dayAmount: number = 1): DateHelper {\n    const milliSeconds = moment(this.milliSeconds)\n      .subtract(dayAmount, 'days')\n      .valueOf()\n    const date = DateHelper.fromSeconds(milliSeconds / SECOND_PER_MILLISECOND)\n    return date\n  }\n\n  addDay(dayAmount: number = 1): DateHelper {\n    const milliSeconds = moment(this.milliSeconds)\n      .add(dayAmount, 'days')\n      .valueOf()\n    const date = DateHelper.fromSeconds(milliSeconds / SECOND_PER_MILLISECOND)\n    return date\n  }\n\n  seconds(): number {\n    return (\n      (this.milliSeconds - (this.milliSeconds % SECOND_PER_MILLISECOND)) /\n      SECOND_PER_MILLISECOND\n    )\n  }\n\n  ymd(): number {\n    return Number(this.format(TimeFormat.YMD))\n  }\n\n  static today(format: string = TimeFormat.YMD): string {\n    return moment().format(format)\n  }\n}\n","//@ts-ignore\nimport {\n  ParsedConfirmedTransaction,\n  ParsedInstruction,\n  ParsedMessageAccount,\n  PartiallyDecodedInstruction,\n  TokenBalance,\n} from '@solana/web3.js'\nimport { account } from '@senswap/sen-js'\n\nimport { ActionInfo, ActionTransfer, TransLog } from '../entities/trans-log'\nimport { Solana } from '../adapters/solana/client'\nimport {\n  OptionsFetchSignature,\n  ParsedAction,\n  ParsedInfoTransfer,\n  ParsedType,\n} from '../constants/transaction'\nimport { DateHelper } from '../helpers/date'\nimport { SOL_ADDRESS, SOL_DECIMALS } from '../constants/sol'\n\ntype InstructionData = ParsedInstruction | PartiallyDecodedInstruction\n\nexport class TransLogService {\n  solana: Solana\n  constructor() {\n    this.solana = new Solana()\n  }\n\n  async collect(\n    programId: string,\n    configs: OptionsFetchSignature,\n    funcFilter?: (transLog: TransLog) => boolean,\n  ): Promise<TransLog[]> {\n    let { lastSignature, limit } = configs\n\n    let isStop = false\n    let transLogs: Array<TransLog> = []\n    let lastSignatureTmp = lastSignature\n\n    while (!isStop) {\n      const confirmedTrans: ParsedConfirmedTransaction[] =\n        await this.solana.fetchTransactions(programId, {\n          ...configs,\n          lastSignature: lastSignatureTmp,\n        })\n\n      for (const trans of confirmedTrans) {\n        lastSignatureTmp = trans.transaction.signatures[0]\n        const log = this.parseTransLog(trans)\n        if (log) transLogs.push(log)\n      }\n\n      if (funcFilter) {\n        transLogs = transLogs.filter((trans) => funcFilter(trans))\n\n        if (!confirmedTrans.length || isStop) break\n        if (limit && transLogs.length >= limit) {\n          isStop = true\n          break\n        }\n      } else break\n    }\n    return transLogs\n  }\n  private parseTransLog(\n    confirmedTrans: ParsedConfirmedTransaction,\n  ): TransLog | undefined {\n    const { blockTime, meta, transaction } = confirmedTrans\n    if (!blockTime || !meta) return\n    const { postTokenBalances, preTokenBalances, postBalances, preBalances } =\n      meta\n    const { signatures, message } = transaction\n\n    const innerInstructionData = meta.innerInstructions?.[0]?.instructions || []\n    const instructionData = message.instructions[0] || []\n\n    const transLog = new TransLog()\n    transLog.signature = signatures[0]\n    transLog.blockTime = blockTime\n    transLog.time = DateHelper.fromSeconds(blockTime).ymd()\n    transLog.programId = instructionData.programId.toString()\n\n    const mapAccount = this.parseAccountInfo(\n      message.accountKeys,\n      postTokenBalances || [],\n      preTokenBalances || [],\n      postBalances,\n      preBalances,\n    )\n    // system program transaction\n    if (this.isParsedInstruction(instructionData)) {\n      transLog.programTransfer = this.parseAction([instructionData], mapAccount)\n      return transLog\n    }\n    // smart contract transaction\n    transLog.actionTransfers = this.parseAction(\n      innerInstructionData,\n      mapAccount,\n    )\n    transLog.programInfo = {\n      programId: instructionData.programId.toString(),\n      data: (instructionData as PartiallyDecodedInstruction).data,\n    }\n    return transLog\n  }\n\n  private isParsedInstruction(instructionData: InstructionData) {\n    return (instructionData as ParsedInstruction).parsed !== undefined\n  }\n\n  private parseAction(\n    actions: InstructionData[],\n    mapAccount: Map<string, ActionInfo>,\n  ) {\n    const actionTransfer: ActionTransfer[] = []\n    for (const action of actions) {\n      if (!this.isParsedInstruction(action)) continue\n      const actionParsed: ParsedAction =\n        (action as ParsedInstruction).parsed || {}\n      switch (actionParsed.type) {\n        case ParsedType.Transfer:\n          const info: ParsedInfoTransfer = actionParsed.info\n          const parsedAction = this.parseActionTransfer(info, mapAccount)\n          if (parsedAction) actionTransfer.push(parsedAction)\n          break\n        default:\n          break\n      }\n    }\n    return actionTransfer\n  }\n\n  private parseActionTransfer(\n    parsedTransfer: ParsedInfoTransfer,\n    mapAccount: Map<string, ActionInfo>,\n  ): ActionTransfer | undefined {\n    const { source, destination, amount, lamports } = parsedTransfer\n    const amountTransfer = amount || lamports.toString()\n\n    if (\n      !amountTransfer ||\n      !mapAccount.has(source) ||\n      !mapAccount.has(destination)\n    )\n      return\n\n    const actionTransfer = new ActionTransfer()\n    actionTransfer.source = mapAccount.get(source)\n    actionTransfer.destination = mapAccount.get(destination)\n    actionTransfer.amount = amountTransfer\n    return actionTransfer\n  }\n\n  private parseAccountInfo(\n    accountKeys: Array<ParsedMessageAccount>,\n    postTokenBalances: Array<TokenBalance>,\n    preTokenBalances: Array<TokenBalance>,\n    postBalances: number[],\n    preBalances: number[],\n  ): Map<string, ActionInfo> {\n    const mapAccountInfo = new Map<string, ActionInfo>()\n\n    // Associated Address\n    for (const postBalance of postTokenBalances) {\n      const { accountIndex, mint, uiTokenAmount } = postBalance\n      const info = new ActionInfo()\n      info.address = accountKeys[accountIndex].pubkey.toString()\n      info.postBalance = uiTokenAmount.amount\n      info.mint = mint\n      info.decimals = uiTokenAmount.decimals\n      mapAccountInfo.set(info.address, info)\n    }\n\n    for (const preBalance of preTokenBalances) {\n      const { accountIndex, uiTokenAmount } = preBalance\n      const address = accountKeys[accountIndex].pubkey.toString()\n      const info = mapAccountInfo.get(address) || new ActionInfo()\n      info.preBalance = uiTokenAmount.amount\n      mapAccountInfo.set(info.address, info)\n    }\n\n    // Wallet address\n    accountKeys.forEach((accountData, idx) => {\n      const address = accountData.pubkey.toString()\n      if (!account.isAssociatedAddress(address)) {\n        const info = mapAccountInfo.get(address) || new ActionInfo()\n        info.address = address\n        info.mint = SOL_ADDRESS\n        info.postBalance = String(postBalances[idx] || 0) // lamports\n        info.preBalance = String(preBalances[idx] || 0) // lamports\n        info.decimals = SOL_DECIMALS\n        mapAccountInfo.set(info.address, info)\n      }\n    })\n\n    return mapAccountInfo\n  }\n}\n","export const SOL_ADDRESS = '11111111111111111111111111111111'\n\nexport const SOL_DECIMALS = 9\n","import moment from 'moment'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nimport { utils } from '@senswap/sen-js'\nimport { TransLogService } from 'app/lib/stat/logic/translog'\nimport configs from 'os/configs'\nimport { TransLog } from 'app/lib/stat/entities/trans-log'\n\nexport type State = {\n  historySwap: HistorySwap[]\n}\n\n/**\n * Store constructor\n */\n\nexport type HistorySwap = {\n  time: string\n  transactionId: string\n  from?: string\n  to?: string\n  amountFrom?: number\n  amountTo?: number\n  key: string\n  status: string\n  decimals: number\n}\n\nconst LIMIT_HISTORY_SWAP = 20\n\nconst NAME = 'history'\nconst initialState: State = {\n  historySwap: [],\n}\n\nconst filterFunction = (transLog: TransLog) => {\n  if (!transLog.actionTransfers.length) return false\n  return true\n}\n\n/**\n * Actions\n */\nexport const fetchHistorySwap = createAsyncThunk<\n  { historySwap: HistorySwap[] },\n  { lastSignature?: string; isLoadMore?: boolean },\n  { state: { history: State } }\n>(\n  `${NAME}/fetchHistorySwap`,\n  async ({ lastSignature, isLoadMore }, { getState }) => {\n    const {\n      sol: { swapAddress },\n    } = configs\n\n    const {\n      history: { historySwap },\n    } = getState()\n\n    const myWalletAddress = await window.sentre.wallet?.getAddress()\n    if (!myWalletAddress) throw Error('Loggin first')\n\n    const options = {\n      limit: LIMIT_HISTORY_SWAP,\n      lastSignature,\n    }\n\n    const transLogService = new TransLogService()\n    const transLogsData = await transLogService.collect(\n      myWalletAddress,\n      options,\n      filterFunction,\n    )\n    let history: HistorySwap[] = []\n\n    if (isLoadMore) history = [...historySwap]\n\n    for (const transLog of transLogsData) {\n      const historyItem = {} as HistorySwap\n      const actionTransfer = transLog.actionTransfers\n      let lastAction\n      const firstAction = actionTransfer[0]\n      if (actionTransfer.length > 1)\n        lastAction = actionTransfer[actionTransfer.length - 1]\n\n      const programId = transLog.programId\n\n      if (programId !== swapAddress) continue\n\n      const time = new Date(transLog.blockTime * 1000)\n\n      historyItem.time = moment(time).format('MMM DD, YYYY HH:mm')\n      historyItem.amountFrom = firstAction.destination\n        ? Number(\n            utils.undecimalize(\n              BigInt(firstAction.amount),\n              firstAction.destination.decimals,\n            ),\n          )\n        : undefined\n      historyItem.amountTo = lastAction?.destination\n        ? Number(\n            utils.undecimalize(\n              BigInt(lastAction.amount),\n              lastAction.destination.decimals,\n            ),\n          )\n        : undefined\n\n      historyItem.from = firstAction.destination?.mint\n      historyItem.to = lastAction?.destination?.mint\n      historyItem.transactionId = transLog.signature\n      historyItem.key = transLog.signature\n      historyItem.status =\n        !firstAction.destination || !lastAction?.destination\n          ? 'failed'\n          : 'success'\n      history.push(historyItem)\n    }\n    return { historySwap: history }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      fetchHistorySwap.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Card, Col, Row, Typography, Table, Button } from 'antd'\nimport { HISTORY_COLUMN } from './column'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { fetchHistorySwap } from 'app/model/history.controller'\nimport { AppDispatch, AppState } from 'app/model'\n\nimport './index.less'\n\nconst ROW_PER_PAGE = 5\nconst LIMIT_IN_STORE = 15\nconst TABLE_HEIGHT = 462\n\nconst History = () => {\n  const [amountRow, setAmountRow] = useState(ROW_PER_PAGE)\n  const [loading, setLoading] = useState(false)\n\n  const { historySwap } = useSelector((state: AppState) => state.history)\n  const dispatch = useDispatch<AppDispatch>()\n\n  const fetchHistory = useCallback(async () => {\n    setLoading(true)\n    await dispatch(fetchHistorySwap({})).unwrap()\n    setLoading(false)\n  }, [dispatch])\n\n  useEffect(() => {\n    fetchHistory()\n  }, [fetchHistory])\n\n  const onHandleViewMore = () => {\n    const currentTransactionDataLength = historySwap.slice(0, amountRow).length\n\n    if (historySwap.length - currentTransactionDataLength <= LIMIT_IN_STORE) {\n      const lastSignature = historySwap[historySwap.length - 1]?.transactionId\n      dispatch(\n        fetchHistorySwap({\n          lastSignature,\n          isLoadMore: true,\n        }),\n      )\n    }\n    setAmountRow(amountRow + ROW_PER_PAGE)\n  }\n\n  const onHandleRefeshTable = () => {\n    fetchHistory()\n    setAmountRow(ROW_PER_PAGE)\n  }\n\n  const style = useMemo(() => {\n    return amountRow > 5 ? { height: 'auto' } : { height: TABLE_HEIGHT }\n  }, [amountRow])\n\n  return (\n    <Card bordered={false} style={{ ...style }}>\n      <Row gutter={[16, 24]}>\n        <Col flex=\"auto\">\n          <Typography.Title level={5}>Swap history</Typography.Title>\n        </Col>\n        <Col>\n          <Button onClick={onHandleRefeshTable}>Refresh</Button>\n        </Col>\n        <Col span={24}>\n          <Row justify=\"center\" gutter={[16, 9]}>\n            <Col span={24} style={{ minHeight: 310 }}>\n              <Table\n                columns={HISTORY_COLUMN}\n                dataSource={historySwap.slice(0, amountRow)}\n                loading={loading}\n                pagination={false}\n                rowClassName={(record, index) =>\n                  index % 2 ? 'odd-row' : 'even-row'\n                }\n                scroll={historySwap.length ? { x: 800 } : {}}\n              />\n            </Col>\n            <Col>\n              <Button\n                onClick={onHandleViewMore}\n                type=\"text\"\n                icon={<IonIcon name=\"chevron-down-outline\" />}\n                disabled={amountRow >= historySwap.length}\n              >\n                View more\n              </Button>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default History\n","import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account } from '@senswap/sen-js'\n\nimport { Row, Col } from 'antd'\nimport SwapChart from './chart'\nimport Swap from './swap'\nimport History from './history'\n\nimport { usePool } from 'senhub/providers'\nimport { useMintSelection } from 'app/components/hooks/useMintSelection'\nimport { AppDispatch } from 'app/model'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { updateAskData } from 'app/model/ask.controller'\nimport { SenLpState } from 'app/constant/senLpState'\n\nimport 'app/static/styles/index.less'\n\nconst Page = () => {\n  const { pools } = usePool()\n  const dispatch = useDispatch<AppDispatch>()\n  const { state } = useLocation<SenLpState>()\n  const [bid, setBid] = useState('')\n  const [ask, setAsk] = useState('')\n  const bidData = useMintSelection(bid)\n  const askData = useMintSelection(ask)\n  const poolAdress = state?.poolAddress\n\n  /** Check state when user come from sen LP */\n  const checkIsSenLpCome = useCallback(() => {\n    if (!account.isAddress(poolAdress)) return\n    const poolData = pools[poolAdress]\n    if (!poolData) return\n    setBid(poolData?.mint_a)\n    setAsk(poolData?.mint_b)\n  }, [poolAdress, pools])\n\n  useEffect(() => {\n    checkIsSenLpCome()\n  }, [checkIsSenLpCome])\n\n  useEffect(() => {\n    if (\n      !account.isAddress(bidData.accountAddress) ||\n      !account.isAddress(askData.accountAddress)\n    )\n      return\n    dispatch(updateBidData(bidData))\n    dispatch(updateAskData(askData))\n  }, [askData, bidData, dispatch])\n\n  return (\n    <Row gutter={[24, 24]} style={{ paddingBottom: 12 }}>\n      <Col lg={8} md={12} xs={24}>\n        <Swap />\n      </Col>\n      <Col lg={16} md={12} xs={24}>\n        <Row gutter={[24, 24]}>\n          <Col span={24}>\n            <SwapChart />\n          </Col>\n          <Col span={24}>\n            <History />\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Page\n","import { useSelector } from 'react-redux'\n\nimport { Avatar, Col, Divider, Row, Space, Typography } from 'antd'\nimport PreviewSwap from 'app/components/preview'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { AppState } from 'app/model'\n\nconst ConfirmSwap = () => {\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n\n  return (\n    <Row gutter={[16, 24]}>\n      <Col span={24}>\n        <Row align=\"middle\" justify=\"space-between\">\n          <Col>\n            <Space direction=\"vertical\">\n              <Typography.Text>From</Typography.Text>\n              <Typography.Text>\n                <Space>\n                  <Avatar src={bidData.mintInfo?.logoURI} />\n                  {bidData.mintInfo?.symbol}\n                </Space>\n              </Typography.Text>\n              <Typography.Title level={4}>{bidData.amount}</Typography.Title>\n            </Space>\n          </Col>\n          <Col>\n            <IonIcon name=\"arrow-forward-outline\" style={{ fontSize: 24 }} />\n          </Col>\n          <Col>\n            <Space direction=\"vertical\">\n              <Typography.Text>To</Typography.Text>\n              <Space>\n                <Avatar src={askData.mintInfo?.logoURI} />\n                {askData.mintInfo?.symbol}\n              </Space>\n              <Typography.Title level={4}>{askData.amount}</Typography.Title>\n            </Space>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Divider style={{ margin: 0 }} />\n      </Col>\n      <Col>\n        <PreviewSwap />\n      </Col>\n    </Row>\n  )\n}\n\nexport default ConfirmSwap\n","import { useMemo, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Row, Col, Typography, Space, Button, Popover, Modal } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport PreviewSwap from 'app/components/preview'\nimport ConfirmSwap from './confirmSwap'\nimport SwapButton from 'app/components/swapButton'\nimport SwapAction from 'app/components/swap/swapAction'\n\nimport { AppState } from 'app/model'\nimport { useAccount } from 'senhub/providers'\nimport { DEFAULT_WSOL, utils } from '@senswap/sen-js'\nimport { useSlippageRate } from 'app/components/hooks/useSlippageRate'\nimport { numeric } from 'shared/util'\n\nconst Widget = () => {\n  const [visible, setVisible] = useState(false)\n  const { route } = useSelector((state: AppState) => state.route)\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const { advanced } = useSelector((state: AppState) => state.settings)\n  const { accounts } = useAccount()\n  const slippageRate = useSlippageRate()\n\n  const wrapAmount = useMemo(() => {\n    const bidMint = bidData.mintInfo\n    const bidAccount = accounts[bidData.accountAddress]\n    const bidBalance = bidAccount?.amount || BigInt(0)\n\n    if (!bidMint || !Number(bidData.amount)) return BigInt(0)\n    if (bidMint.address !== DEFAULT_WSOL) return BigInt(0)\n\n    const bidAmount = utils.decimalize(bidData.amount, bidMint.decimals)\n    if (bidAmount <= bidBalance) return BigInt(0)\n    return bidAmount - bidBalance\n  }, [accounts, bidData.accountAddress, bidData.amount, bidData.mintInfo])\n\n  const tooHightImpact = !advanced && slippageRate * 100 > 12.5\n  const disabled =\n    !route?.hops.length ||\n    !parseFloat(bidData.amount) ||\n    parseFloat(bidData.amount) < 0 ||\n    !parseFloat(askData?.amount) ||\n    parseFloat(askData?.amount) < 0\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={24}>\n        <SwapAction spacing={12} />\n      </Col>\n      <Col span={24}>\n        <Row align=\"bottom\">\n          <Col flex=\"auto\">\n            <Popover\n              placement=\"bottomLeft\"\n              content={<PreviewSwap />}\n              trigger=\"click\"\n            >\n              <Space\n                style={{ cursor: 'pointer' }}\n                direction=\"vertical\"\n                size={4}\n              >\n                <Space>\n                  <Typography.Text>\n                    <IonIcon\n                      name=\"information-circle-outline\"\n                      style={{ color: '#7A7B85' }}\n                    />\n                  </Typography.Text>\n                  <Typography.Text type=\"secondary\">\n                    Price impact\n                  </Typography.Text>\n                </Space>\n                <Space>\n                  <Typography.Text style={{ color: '#D72311' }}>\n                    <IonIcon name=\"arrow-down-outline\" />\n                  </Typography.Text>\n                  <Typography.Text style={{ color: '#D72311' }}>\n                    {numeric(Number(slippageRate)).format('0.[0000]%')}\n                  </Typography.Text>\n                </Space>\n              </Space>\n            </Popover>\n          </Col>\n          <Col>\n            <Button\n              onClick={() => setVisible(true)}\n              size=\"large\"\n              block\n              type=\"primary\"\n              disabled={disabled}\n            >\n              Review & Swap\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n      <Modal\n        title={<Typography.Title level={4}> Confirm swap</Typography.Title>}\n        onCancel={() => setVisible(false)}\n        footer={\n          <SwapButton\n            hops={route?.hops || []}\n            wrapAmount={wrapAmount}\n            onCallback={() => setVisible(false)}\n            hightImpact={tooHightImpact}\n            disabled={disabled || tooHightImpact}\n          />\n        }\n        visible={visible}\n      >\n        <ConfirmSwap />\n      </Modal>\n    </Row>\n  )\n}\n\nexport default Widget\n","// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint'\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport ask from './ask.controller'\nimport bid from './bid.controller'\nimport settings from './settings.controller'\nimport route from './route.controller'\nimport history from './history.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools('myapp'),\n  reducer: {\n    ask,\n    bid,\n    settings,\n    route,\n    history,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport {\n  WalletProvider,\n  UIProvider,\n  AccountProvider,\n  PoolProvider,\n  MintProvider,\n} from 'senhub/providers'\n\nimport PageView from 'app/page'\nimport WidgetView from 'app/widget'\n\nimport model from 'app/model'\nimport configs from 'app/configs'\n\nimport 'app/static/styles/dark.less'\nimport 'app/static/styles/light.less'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <MintProvider>\n        <PoolProvider>\n          <AccountProvider>\n            <WalletProvider>\n              <Provider store={model}>\n                <PageView />\n              </Provider>\n            </WalletProvider>\n          </AccountProvider>\n        </PoolProvider>\n      </MintProvider>\n    </UIProvider>\n  )\n}\n\nexport const widgetConfig: WidgetConfig = {\n  size: 'small',\n  type: 'solid',\n}\n\nexport const Widget = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <MintProvider>\n        <PoolProvider>\n          <AccountProvider>\n            <WalletProvider>\n              <Provider store={model}>\n                <WidgetView />\n              </Provider>\n            </WalletProvider>\n          </AccountProvider>\n        </PoolProvider>\n      </MintProvider>\n    </UIProvider>\n  )\n}\n","import { net, env } from 'shared/runtime'\nimport sol from './sol.config'\nimport register from './register.config'\n\nconst configs = {\n  sol: sol[net],\n  register: register[env],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_NAME !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string' ||\n  typeof process.env.REACT_APP_SENHUB !== 'string'\n)\n  throw new Error(\n    'Please add REACT_APP_ID, REACT_APP_NAME, REACT_APP_URL in .env.local!',\n  )\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  defaultAppId: string\n  extra: SenReg\n  senreg: string\n}\n\nconst DEFAULT_APP_ID = 'senhub'\nconst devApp = {\n  [process.env.REACT_APP_ID]: {\n    url: process.env.REACT_APP_URL,\n    appId: process.env.REACT_APP_ID,\n    name: process.env.REACT_APP_NAME,\n    author: {\n      name: process.env.REACT_APP_AUTHOR_NAME || '',\n      email: process.env.REACT_APP_AUTHOR_EMAIL || '',\n    },\n    supportedViews: (process.env.REACT_APP_SUPPORTED_VIEWS || '')\n      .split(',')\n      .map((view) => view.trim())\n      .filter((view) => ['page', 'widget'].includes(view)) as Array<\n      'widget' | 'page'\n    >,\n    tags: (process.env.REACT_APP_TAGS || '')\n      .split(',')\n      .map((tag) => tag.trim()),\n    description: process.env.REACT_APP_DESCRIPTION || '',\n    verified: false,\n  },\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: {},\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\nconst SOLVARS = {\n  spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n  splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n}\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  chainId: 101 | 102 | 103\n  sntrAddress: string\n  sntrPoolAddress: string\n  swapAddress: string\n  taxmanAddress: string\n} & typeof SOLVARS\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    ...SOLVARS,\n    node: 'https://api.devnet.solana.com',\n    chainId: 103,\n    sntrAddress: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n    sntrPoolAddress: '3EUPL7YQLbU6DNU5LZeQeHPXTf1MigJ2yASXA9rH5Ku4',\n    swapAddress: '4erFSLP7oBFSVC1t35jdxmbfxEhYCKfoM6XdG2BLR3UF',\n    taxmanAddress: '8UaZw2jDhJzv5V53569JbCd3bD4BnyCfBH3sjwgajGS9',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    ...SOLVARS,\n    node: 'https://api.testnet.solana.com',\n    chainId: 102,\n    sntrAddress: '',\n    sntrPoolAddress: '',\n    swapAddress: '',\n    taxmanAddress: '',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    ...SOLVARS,\n    node: 'https://api.mainnet-beta.solana.com',\n    chainId: 101,\n    sntrAddress: 'SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M',\n    sntrPoolAddress: 'Aa3WZX7Xunfebp2MuAcz9CNw8TYTDL7mVrmb11rjyVm6',\n    swapAddress: 'SSW7ooZ1EbEognq5GosbygA3uWW1Hq1NsFq6TsftCFV',\n    taxmanAddress: '9doo2HZQEmh2NgfT3Yx12M89aoBheycYqH1eaR5gKb3e',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","// Pseudo native sol info\n// It's for all networks\nexport const sol = (chainId: 101 | 102 | 103) => ({\n  symbol: 'SOL',\n  name: 'Solana',\n  address: '11111111111111111111111111111111',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'solana',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png',\n})\n\n// Pseudo SNTR info\n// Only for testnet and mainnet\nexport const sntr = (chainId: 102 | 103) => ({\n  symbol: 'SNTR',\n  name: 'Sentre',\n  address: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'sentre',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M/logo.png',\n})\n\n// Pseudo token infos for devnet\nconst supplementary = [\n  sol(103),\n  sntr(103),\n  {\n    symbol: 'wBTC',\n    name: 'Wrapped Bitcoin',\n    address: '8jk4eJymMfNZV9mkRNxJEt2VJ3pRvdJvD5FE94GXGBPM',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'bitcoin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/qfnqNqs3nCAHjnyCgLRDbBtq4p2MtHZxw8YjSyYhPoL/logo.png',\n  },\n  {\n    symbol: 'wETH',\n    name: 'Ethereum',\n    address: '27hdcZv7RtuMp75vupThR3T4KLsL61t476eosMdoec4c',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'ethereum',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/FeGn77dhg1KXRRFeSwwMiykZnZPw5JXW6naf2aQgZDQf/logo.png',\n  },\n  {\n    symbol: 'UNI',\n    name: 'Uniswap',\n    address: 'FVZFSXu3yn17YdcxLD72TFDUqkdE5xZvcW18EUpRQEbe',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'uniswap',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/3MVa4e32PaKmPxYUQ6n8vFkWtCma68Ld7e7fTktWDueQ/logo.png',\n  },\n  {\n    symbol: 'USDC',\n    name: 'USD Coin',\n    address: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'usd-coin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png',\n  },\n]\n\nexport default supplementary\n","import { Document } from 'flexsearch'\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry'\n\nimport { net } from 'shared/runtime'\nimport configs from 'os/configs'\nimport supplementary, { sntr, sol } from './supplementary'\n\nconst {\n  sol: { chainId },\n} = configs\nconst DELIMITER = /[\\W_]+/g\nconst PRESET = {\n  tokenize: 'full',\n  context: true,\n  minlength: 3,\n}\nconst DOCUMENT = {\n  document: {\n    id: 'address',\n    index: [\n      { field: 'symbol', ...PRESET },\n      { field: 'name', ...PRESET },\n    ],\n  },\n}\n\nclass TokenProvider {\n  private tokenMap: Map<string, TokenInfo>\n  private engine: typeof Document | undefined\n  readonly chainId: typeof chainId\n  readonly cluster: typeof net\n  private loading: boolean\n  private queue: Array<any>\n\n  constructor() {\n    this.tokenMap = new Map<string, TokenInfo>()\n    this.engine = undefined\n    this.chainId = chainId\n    this.cluster = net\n    this.loading = false\n    this.queue = []\n    // Init\n    this._init()\n  }\n\n  private _init = async (): Promise<[Map<string, TokenInfo>, any]> => {\n    if (this.tokenMap.size) return [this.tokenMap, this.engine]\n    return new Promise(async (resolve) => {\n      // Queue of getters to avoid race condition of multiple _init calling\n      if (this.loading) return this.queue.push(resolve)\n      // Start\n      this.loading = true\n      // Build token list\n      let tokenList = await (await new TokenListProvider().resolve())\n        .filterByChainId(this.chainId)\n        .getList()\n      if (this.cluster === 'devnet') tokenList = tokenList.concat(supplementary)\n      if (this.cluster === 'testnet')\n        tokenList = tokenList.concat([sntr(102), sol(102)])\n      else tokenList = tokenList.concat([sol(101)])\n      // Build token map\n      tokenList.forEach((token) => this.tokenMap.set(token.address, token))\n      // Build search engine\n      this.engine = new Document(DOCUMENT)\n      this.tokenMap.forEach(({ address, ...doc }) =>\n        this.engine.add(address, doc),\n      )\n      // Resolve the main getter\n      resolve([this.tokenMap, this.engine])\n      // Resolve the rest of getters\n      while (this.queue.length) this.queue.shift()([this.tokenMap, this.engine])\n      // Finish\n      this.loading = false\n    })\n  }\n\n  all = async (): Promise<TokenInfo[]> => {\n    const [tokenMap] = await this._init()\n    return Array.from(tokenMap.values())\n  }\n\n  findByAddress = async (addr: string): Promise<TokenInfo | undefined> => {\n    const [tokenMap] = await this._init()\n    return tokenMap.get(addr)\n  }\n\n  find = async (keyword: string, limit?: 10): Promise<TokenInfo[]> => {\n    const [tokenMap, engine] = await this._init()\n    let tokens: TokenInfo[] = []\n    keyword.split(DELIMITER).forEach((key) => {\n      const raw: Array<{ result: string[] }> = engine.search(key, limit)\n      return raw.forEach(({ result }) => {\n        return result.forEach((id: string) => {\n          if (tokens.findIndex(({ address }) => address === id) < 0) {\n            const token = tokenMap.get(id)\n            if (token) tokens.push(token)\n          }\n        })\n      })\n    })\n    return tokens\n  }\n}\n\nexport default TokenProvider\n","import storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  if (!value) return null\n  try {\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n"],"names":["DEFAULT_CACHE_CONFIG","ttl","DEFAULT_SINGLE_FLIGHT_CONFIG","limit","calls","time","cache","RequestQueue","constructor","key","resolveQueue","rejectQueue","this","add","resolve","reject","push","resolves","data","length","shift","rejects","error","SingleFlightCache","value","configs","mapCache","set","setTimeout","delete","get","Map","DataLoader","instanceKey","JSON","stringify","mapInstance","has","instance","newSingleFlight","SingleFlight","requestKey","callback","singleFlight","getSingleFlight","newRequest","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","Object","assign","cacheData","Promise","isFetch","request","fetch","validateLimit","addRequestQueue","createTimeLogs","then","response","catch","finally","fetchRequestQueue","clearInterval","setInterval","now","Date","getTime","shortenAddress","address","num","delimiter","substring","explorer","addressOrTxId","account","net","numeric","Number","isFinite","numbro","randomColor","seed","opacity","hash","Math","floor","random","i","charCodeAt","rgb","fetchCGK","async","ticket","utils","chartData","labels","type","disableAxe","chartId","backgroundColor","isRebuildChart","setRebuildChart","useState","formatData","useCallback","label","background","datasets","chartRef","useRef","getBackground","ctx","current","canvas","getContext","gradient","createLinearGradient","addColorStop","useEffect","chartInstance","dataInstace","find","compareData","isEqual","update","id","height","ref","Chart","options","responsive","maintainAspectRatio","scales","xAxes","gridLines","drawBorder","display","ticks","yAxes","beginAtZero","maxTicksLimit","index","values","format","plugins","legend","hover","onHover","event","elements","target","document","getElementById","style","cursor","CUSTOM_ICONS","forwardRef","name","className","props","cln","src","icons","defaultIcon","rest","Avatar","map","iconURI","idx","border","Row","align","justify","Col","Empty","TokenProvider","fetchMarketChart","params","axios","method","url","days","interval","prices","val","Interval","CHART_DATA_CONFIG","day","amount","unit","week","month","year","MARKET_CONFIG","CHART_CONFIGS","DEFAULT_TOKEN","setChartData","swapChartConfigs","borderColor","borderRadius","pointRadius","tooltip","pointHitRadius","pointHoverRadius","bidData","useSelector","state","bid","askData","ask","useMemo","mintInfo","logoURI","symbols","symbol","parseChartDay","marketData","displayTime","moment","reverse","chartTime","unshift","subtract","parseChartDaily","fetchChartData","askTicket","extensions","coingeckoId","bidTicket","compareAddress","accountAddress","marketConfig","bidChartData","askChartData","all","bidChart","askChart","price","priceUI","Card","bordered","bodyStyle","paddingTop","gutter","flex","Space","size","Typography","join","Radio","defaultValue","onChange","e","span","level","DECIMALS","BigInt","hops","onCallback","disabled","wrapAmount","hightImpact","loading","setLoading","slippage","settings","wallet","walletAddress","useWallet","handleSwap","swap","splt","window","sentre","routingAddresses","srcMintInfo","srcMintAddress","dstMintInfo","dstMintAddress","poolData","poolAddress","srcAddress","deriveAssociatedAddress","dstAddress","decimals","bidDecimals","bidAmount","askDecimals","route","Button","onClick","wrapSol","handleWrapSol","txId","notify","description","open","er","message","block","icon","Fragment","priceRate","shape","TOKEN_PROVIDER","BestRouteInfo","amounts","extractReserve","mintAddress","mint_a","mint_b","reserve_a","reserve_b","Error","findAllRoute","routes","graph","startMint","endMint","pathTrace","pools","mints","mapPool","forEach","pool","includes","askMint","newPathTrace","parseHops","mapPoolData","bidMintAddress","askMintAddress","findByAddress","hop","ORACLE","Swap","curve","fee_ratio","tax_ratio","bidReserve","askReserve","askAmount","inverseCurve","inverseSwap","useSlippageRate","askMount","newAmount","newPoolData","srcAmount","srcDecimals","dstAmount","dstDecimals","ExtraTypography","content","inReverse","setInReverse","slippageSettings","slippageRate","bidMintInfo","routeIcons","listRouteIcons","calculatePrice","updateBidData","createAsyncThunk","prioritized","reset","getState","priority","prevPriority","refPriority","undefined","createSlice","initialState","poolAddresses","reducers","extraReducers","builder","addCase","fulfilled","payload","dispatch","useDispatch","bidMint","bidAccountAddr","advanced","accounts","useAccount","bidAccountAmount","bidBalance","DEFAULT_WSOL","tooHightImpact","parseFloat","tokenProvider","useMint","usePool","tokenInfo","setTokenInfo","fetchTokenInfo","token","mint_lpt","tokenA","tokenB","tokens","useTokenProvider","DEFAULT_DATA","priceChange","rank","totalVolume","cgkData","setCgkData","fetchCgkData","MintPoolInfo","tvl","direction","askCgk","useMintCgk","bidCgk","askMintInfo","askPoolData","bidPoolData","getMintTVL","mintAddr","askTVL","bidTVL","wrap","Divider","spacing","iconSize","fontSize","color","SentreIcon","Option","active","Tooltip","placement","title","Switch","checkedChildren","unCheckedChildren","checked","textAlign","NAME","updateSettings","padding","Popover","overlayInnerStyle","width","marginTop","marginBottom","trigger","isSupportedMint","keyword","setKeyword","search","filter","Input","placeholder","suffix","marginRight","hoverable","marginLeft","margin","setMints","supportedMints","keys","flat","item","pos","self","indexOf","onMints","allMints","getAvailablePoolAddresses","mintList","mint","currentMintAddress","overflow","onMint","visible","setVisible","history","useHistory","useLocation","forceCheck","Modal","onCancel","closeIcon","footer","destroyOnClose","centered","selectionInfo","replace","location","updateAskData","timeoutId","max","setError","setCursor","innerRef","onAmount","onError","clearTimeout","test","setSelectionRange","selectionStart","setDecimals","getMint","fetchTokenDecimals","useMintAccount","accountAddr","lamports","useMintDecimals","balance","shared","appId","process","senhub","devnet","node","spltAddress","splataAddress","testnet","mainnet","bidDefault","askDefault","wormholeAddress","manifest","development","staging","production","env","sol","wormhole","DEFAULT_INFO","useMintSelection","setSelectionInfo","getSelectionInfo","selectionDefault","poolAdress","prefix","WORMHOLE_COLOR","Tag","SOL_BRIDGE_ADDRESS","SOL_TOKEN_BRIDGE_ADDRESS","getSolNetwork","storage","checkAttestedWormhole","solContext","solNetWork","chainId","CHAIN_ID_SOLANA","tokenBridgeAddress","bridgeAddress","getSolContext","getIsWrappedAssetSol","connection","wormholeSupported","setWormholeSupported","balanceTransfer","estimateFee","bidMintAddr","updateRouteInfo","routeState","bestRoute","setBestRoute","originalRoute","onSwitch","bidPriority","bidRest","askPriority","askRest","updateData","findRoute","bidPoolAddresses","askPoolAddresses","bidPools","askPools","Array","buildPoolGraph","maxAskAmount","findBestRouteFromBid","reversedHops","reversedHop","minBidAmount","findBestRouteFromAsk","updateRoute","STATUS_COLOR","success","pending","failed","tag","setColorTag","textTransform","FORMAT_AMOUNT","HISTORY_COLUMN","dataIndex","render","text","fontWeight","record","from","amountFrom","to","amountTo","status","TransLog","programId","programInfo","signature","blockTime","owner","actionType","actionTransfers","programTransfer","ActionInfo","preBalance","postBalance","ActionTransfer","source","destination","DEFAULT_LIMIT","Solana","conn","lastSignature","before","getConfirmedSignaturesForAddress2","signatures","confirmedTransactions","promiseTransGroup","offset","skip","signaturesGroup","slice","getParsedConfirmedTransactions","transGroups","transGroup","concat","currentTime","secondFrom","secondTo","programPublicKey","PublicKey","isStop","confirmedSignatureInfos","fetchSignatures","info","fetchConfirmTransaction","ParsedType","SECOND_PER_MILLISECOND","TimeFormat","DateHelper","milliSeconds","valueOf","setMilliSeconds","seconds","date","ymd","YMD","ymdFrom","ymdTo","dates","dateFrom","fromYmd","dateTo","addDay","dateFormat","subtractDay","dayAmount","fromSeconds","TransLogService","solana","funcFilter","transLogs","lastSignatureTmp","confirmedTrans","fetchTransactions","trans","transaction","log","parseTransLog","meta","postTokenBalances","preTokenBalances","postBalances","preBalances","innerInstructionData","innerInstructions","instructions","instructionData","transLog","toString","mapAccount","parseAccountInfo","accountKeys","isParsedInstruction","parseAction","parsed","actions","actionTransfer","action","actionParsed","Transfer","parsedAction","parseActionTransfer","parsedTransfer","amountTransfer","mapAccountInfo","accountIndex","uiTokenAmount","pubkey","accountData","String","filterFunction","fetchHistorySwap","isLoadMore","swapAddress","historySwap","myWalletAddress","getAddress","transLogService","transLogsData","collect","historyItem","lastAction","firstAction","transactionId","amountRow","setAmountRow","fetchHistory","unwrap","minHeight","Table","columns","dataSource","pagination","rowClassName","scroll","x","currentTransactionDataLength","setBid","setAsk","checkIsSenLpCome","paddingBottom","lg","md","xs","bidAccount","prototype","toJSON","bigintSerializationMiddleware","serializableCheck","isSerializable","isArray","obj","proto","getPrototypeOf","isPlainObject","configureStore","middleware","getDefaultMiddleware","devTools","reducer","Page","UIProvider","antd","MintProvider","PoolProvider","AccountProvider","WalletProvider","Provider","store","model","widgetConfig","Widget","register","DEFAULT_APP_ID","devApp","author","email","supportedViews","split","view","trim","tags","verified","defaultAppId","extra","senreg","SOLVARS","sntrAddress","sntrPoolAddress","taxmanAddress","sntr","DELIMITER","PRESET","tokenize","context","minlength","DOCUMENT","field","tokenMap","engine","cluster","queue","_init","tokenList","TokenListProvider","filterByChainId","getList","supplementary","Document","doc","addr","result","findIndex","getNetwork","KEY","driver","localStorage","convert","parse","getItem","setItem","clear"],"sourceRoot":""}