{"version":3,"file":"static/js/396.e7fb1624.chunk.js","mappings":"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","sources":["os/providers/ui.provider.tsx","os/providers/pool.provider.tsx","os/providers/wallet.provider.tsx","os/providers/account.provider.tsx","os/providers/mint.provider.tsx","os/store/accounts.reducer.ts","os/store/flags.reducer.ts","os/store/index.ts","os/store/mints.reducer.ts","os/store/page.reducer.ts","os/store/pools.reducer.ts","os/store/search.reducer.ts","os/store/ui.reducer.ts","os/store/walkthrough.reducer.ts","os/store/wallet.reducer.ts","shared/pdb/index.ts","shared/pdb/ipfs.ts"],"sourcesContent":["import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n  CSSProperties,\n} from 'react'\n\nimport { ConfigProvider } from 'antd'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { UIState } from 'os/store/ui.reducer'\nimport { ConfigProviderProps } from 'antd/lib/config-provider'\n\nconst Context = createContext<UIProvider>({} as UIProvider)\n\nexport type UIProvider = {\n  ui: UIState\n}\n\n/**\n * UI Context Provider\n */\nconst UIContextProvider = ({\n  children,\n  appId,\n  style = {},\n  antd = false,\n}: {\n  children: ReactNode\n  appId: string\n  style?: CSSProperties\n  antd?: boolean | ConfigProviderProps\n}) => {\n  const { ui } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ ui }), [ui])\n  const configProvider = antd\n    ? {\n        getPopupContainer: () => document.getElementById(appId) as HTMLElement,\n        ...(typeof antd === 'object' ? antd : {}),\n      }\n    : undefined\n\n  return (\n    <Context.Provider value={provider}>\n      <section\n        id={appId}\n        style={{ height: '100%', backgroundColor: 'transparent', ...style }}\n      >\n        {configProvider ? (\n          <ConfigProvider {...configProvider}>{children}</ConfigProvider>\n        ) : (\n          children\n        )}\n      </section>\n    </Context.Provider>\n  )\n}\nexport default UIContextProvider\n\n/**\n * UI Context Consumer\n */\nconst UIComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * UI HOC\n */\nexport const withUI = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <UIComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </UIComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * UI Hook\n */\nexport const useUI = () => {\n  return useContext<UIProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { PoolsState } from 'os/store/pools.reducer'\n\nconst Context = createContext<PoolProvider>({} as PoolProvider)\n\nexport type PoolProvider = {\n  pools: PoolsState\n}\n\n/**\n * Pool Context Provider\n */\nconst PoolContextProvider = ({ children }: { children: ReactNode }) => {\n  const { pools } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ pools }), [pools])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default PoolContextProvider\n\n/**\n * Pool Context Consumer\n */\nconst PoolContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Pool HOC\n */\nexport const withPool = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <PoolContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </PoolContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Pool Hook\n */\nexport const usePool = () => {\n  return useContext<PoolProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { WalletState } from 'os/store/wallet.reducer'\n\nconst Context = createContext<WalletProvider>({} as WalletProvider)\n\nexport type WalletProvider = {\n  wallet: WalletState\n}\n\n/**\n * Wallet Context Provider\n */\nconst WalletContextProvider = ({ children }: { children: ReactNode }) => {\n  const { wallet } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ wallet }), [wallet])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default WalletContextProvider\n\n/**\n * Wallet Context Consumer\n */\nconst WalletContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Wallet HOC\n */\nexport const withWallet = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <WalletContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </WalletContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Wallet Hook\n */\nexport const useWallet = () => {\n  return useContext<WalletProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { AccountsState } from 'os/store/accounts.reducer'\n\nconst Context = createContext<AccountProvider>({} as AccountProvider)\n\nexport type AccountProvider = {\n  accounts: AccountsState\n}\n\n/**\n * Account Context Provider\n */\nconst AccountContextProvider = ({ children }: { children: ReactNode }) => {\n  const { accounts } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ accounts }), [accounts])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default AccountContextProvider\n\n/**\n * Account Context Consumer\n */\nconst AccountContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Account HOC\n */\nexport const withAccount = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <AccountContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </AccountContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Account Hook\n */\nexport const useAccount = () => {\n  return useContext<AccountProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  useCallback,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport {\n  useRootDispatch,\n  useRootSelector,\n  RootState,\n  RootDispatch,\n} from 'os/store'\nimport { getMint as _getMint, MintsState } from 'os/store/mints.reducer'\nimport TokenProvider from './tokenProvider'\nimport { account } from '@senswap/sen-js'\n\nconst tokenProvider = new TokenProvider()\nconst Context = createContext<MintProvider>({} as MintProvider)\n\nexport type MintProvider = {\n  mints: MintsState\n  getMint: (...agrs: Parameters<typeof _getMint>) => Promise<MintsState>\n  getDecimals: (mintAddress: string) => Promise<number>\n  tokenProvider: TokenProvider\n}\n\n/**\n * Mint Context Provider\n */\nconst MintContextProvider = ({ children }: { children: ReactNode }) => {\n  const dispatch = useRootDispatch<RootDispatch>()\n  const { mints, pools } = useRootSelector((state: RootState) => state)\n  const getMint = useCallback(\n    async (...agrs: Parameters<typeof _getMint>) =>\n      await dispatch(_getMint(...agrs)).unwrap(),\n    [dispatch],\n  )\n  const getDecimals = useCallback(\n    async (mintAddress: string) => {\n      if (!account.isAddress(mintAddress))\n        throw new Error('Invalid mint address')\n      // If the token is in token provider, return its decimals\n      const tokenInfo = await tokenProvider.findByAddress(mintAddress)\n      if (tokenInfo?.decimals) return tokenInfo.decimals\n      // If the token is lp, return 9 as default\n      const index = Object.values(pools).findIndex(\n        ({ mint_lpt }) => mint_lpt === mintAddress,\n      )\n      if (index >= 0) return 9\n      // Fetch from the clustters\n      const mintData = await getMint({ address: mintAddress })\n      if (mintData[mintAddress]?.decimals) return mintData[mintAddress].decimals\n      throw new Error('Cannot find mint decimals')\n    },\n    [getMint, pools],\n  )\n  const provider = useMemo(\n    () => ({ mints, getMint, getDecimals, tokenProvider }),\n    [mints, getMint, getDecimals],\n  )\n  // Context provider\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default MintContextProvider\n\n/**\n * Mint Context Consumer\n */\nconst MintContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Mint HOC\n */\nexport const withMint = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <MintContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </MintContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Mint Hook\n */\nexport const useMint = () => {\n  return useContext<MintProvider>(Context)\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, AccountData } from '@senswap/sen-js'\n\n/**\n * Interface & Utility\n */\n\nexport type AccountsState = Record<string, AccountData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'accounts'\nconst initialState: AccountsState = {}\n\n/**\n * Actions\n */\n\nexport const getAccounts = createAsyncThunk(\n  `${NAME}/getAccounts`,\n  async ({ owner }: { owner: string }) => {\n    if (!account.isAddress(owner))\n      throw new Error('Invalid owner/wallet address')\n    const { splt } = window.sentre\n    const ownerPublicKey = account.fromAddress(owner)\n    const { value } = await splt.connection.getTokenAccountsByOwner(\n      ownerPublicKey,\n      { programId: splt.spltProgramId },\n    )\n    let bulk: AccountsState = {}\n    value.forEach(({ pubkey, account: { data: buf } }) => {\n      const address = pubkey.toBase58()\n      const data = splt.parseAccountData(buf)\n      return (bulk[address] = data)\n    })\n    return bulk\n  },\n)\n\nexport const getAccount = createAsyncThunk<\n  AccountsState,\n  { address: string },\n  { state: any }\n>(`${NAME}/getAccount`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid account address')\n  const {\n    accounts: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const { splt } = window.sentre\n  const raw = await splt.getAccountData(address)\n  return { [address]: raw }\n})\n\nexport const upsetAccount = createAsyncThunk<\n  AccountsState,\n  { address: string; data: AccountData },\n  { state: any }\n>(`${NAME}/upsetAccount`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteAccount = createAsyncThunk(\n  `${NAME}/deleteAccount`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getAccounts.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getAccount.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetAccount.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteAccount.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account } from '@senswap/sen-js'\n\nimport PDB from 'shared/pdb'\n\n/**\n * Interface & Utility\n */\n\ntype FlagsState = {\n  visited: boolean\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'flags'\nconst initialState: FlagsState = {\n  visited: true,\n}\n\n/**\n * Actions\n */\n\nexport const loadVisited = createAsyncThunk<\n  Partial<FlagsState>,\n  void,\n  { state: any }\n>(`${NAME}/loadVisited`, async (_, { getState }) => {\n  const {\n    wallet: { address },\n    flags: prevFlags,\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet')\n  const db = new PDB(address).createInstance('sentre')\n  const visited = (await db.getItem('visited')) || false\n  return { ...prevFlags, visited }\n})\n\nexport const updateVisited = createAsyncThunk<\n  Partial<FlagsState>,\n  boolean,\n  { state: any }\n>(`${NAME}/updateVisited`, async (visited, { getState }) => {\n  const {\n    wallet: { address },\n    flags: prevFlags,\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet')\n  const db = new PDB(address).createInstance('sentre')\n  await db.setItem('visited', visited)\n  return { ...prevFlags, visited }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        loadVisited.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateVisited.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import {\n  createDispatchHook,\n  createSelectorHook,\n  createStoreHook,\n  useDispatch,\n  useSelector,\n} from 'react-redux'\nimport { configureStore } from '@reduxjs/toolkit'\nimport { RootContext } from '@senhub/context'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport ui from './ui.reducer'\nimport flags from './flags.reducer'\nimport page from './page.reducer'\nimport wallet from './wallet.reducer'\nimport accounts from './accounts.reducer'\nimport mints from './mints.reducer'\nimport pools from './pools.reducer'\nimport search from './search.reducer'\nimport walkthrough from './walkthrough.reducer'\n\n/**\n * Root types\n */\nexport type RootState = ReturnType<typeof store.getState>\nexport type RootDispatch = typeof store.dispatch\n\n/**\n * Root hooks\n */\nexport const useRootStore = createStoreHook(RootContext)\nexport const useRootDispatch: typeof useDispatch =\n  createDispatchHook(RootContext)\nexport const useRootSelector: typeof useSelector =\n  createSelectorHook(RootContext)\n\n/**\n * Root store\n */\nconst store = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools('sentre'),\n  reducer: {\n    ui,\n    flags,\n    page,\n    wallet,\n    accounts,\n    mints,\n    pools,\n    search,\n    walkthrough,\n  },\n})\n\nexport default store\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, MintData } from '@senswap/sen-js'\n\n/**\n * Interface & Utility\n */\n\nexport type MintsState = Record<string, MintData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'mints'\nconst initialState: MintsState = {}\n\n/**\n * Actions\n */\n\nexport const getMint = createAsyncThunk<\n  MintsState,\n  { address: string; force?: boolean },\n  { state: any }\n>(`${NAME}/getMint`, async ({ address, force = false }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid mint address')\n  if (!force) {\n    const {\n      accounts: { [address]: data },\n    } = getState()\n    if (data) return { [address]: data }\n  }\n  const { splt } = window.sentre\n  const raw = await splt.getMintData(address)\n  return { [address]: raw }\n})\n\nexport const upsetMint = createAsyncThunk<\n  MintsState,\n  { address: string; data: MintData },\n  { state: any }\n>(`${NAME}/upsetMint`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteMint = createAsyncThunk(\n  `${NAME}/deleteMint`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        getMint.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetMint.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteMint.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account } from '@senswap/sen-js'\n\nimport PDB from 'shared/pdb'\nimport configs from 'os/configs'\n\nconst {\n  register: { senreg, extra },\n} = configs\n\n/**\n * Interface & Utility\n */\n\nexport type PageState = {\n  register: SenReg\n  appIds: AppIds\n  widgetIds: AppIds\n}\n\nconst troubleshoot = (register: SenReg, appIds?: AppIds): AppIds => {\n  if (!appIds || !Array.isArray(appIds)) return []\n  return appIds.filter((appId) => register[appId])\n}\nconst fetchRegister = async () => {\n  try {\n    const res = await fetch(senreg)\n    return await res.json()\n  } catch (er) {\n    return {}\n  }\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'page'\nconst initialState: PageState = {\n  register: {},\n  appIds: [],\n  widgetIds: [],\n}\n\n/**\n * Actions\n */\n\n// Must fetch register at very first of the process\nexport const loadRegister = createAsyncThunk(\n  `${NAME}/loadRegister`,\n  async () => {\n    const register = await fetchRegister()\n    return { register: { ...register, ...extra } }\n  },\n)\n\n// For sandbox only\nexport const installManifest = createAsyncThunk<\n  Partial<PageState>,\n  ComponentManifest,\n  { state: any }\n>(`${NAME}/installManifest`, async (manifest, { getState }) => {\n  const {\n    wallet: { address },\n    page: { appIds, widgetIds, register },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  if (appIds.includes(manifest.appId))\n    throw new Error('Cannot run sandbox for an installed application.')\n  const newAppIds: AppIds = [...appIds]\n  newAppIds.push(manifest.appId)\n  const newWidgetIds: AppIds = [...widgetIds]\n  if (manifest.supportedViews.includes('widget'))\n    newWidgetIds.push(manifest.appId)\n  const newRegister: SenReg = { ...register }\n  newRegister[manifest.appId] = manifest\n  return { appIds: newAppIds, widgetIds: newWidgetIds, register: newRegister }\n})\n\n/**\n * App Actions\n */\nexport const loadPage = createAsyncThunk<\n  Partial<PageState>,\n  void,\n  { state: any }\n>(`${NAME}/loadPage`, async (_, { getState }) => {\n  const {\n    wallet: { address },\n    page: { register },\n  } = getState()\n\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  // Fetch user's apps\n  const db = new PDB(address).createInstance('sentre')\n  const appIds = troubleshoot(\n    register,\n    (await db.getItem('appIds')) || initialState.appIds,\n  )\n  const widgetIds = troubleshoot(\n    register,\n    (await db.getItem('widgetIds')) || initialState.widgetIds,\n  )\n  return { appIds, widgetIds }\n})\n\nexport const updatePage = createAsyncThunk<\n  Partial<PageState>,\n  AppIds,\n  { state: any }\n>(`${NAME}/updatePage`, async (appIds, { getState }) => {\n  const {\n    wallet: { address },\n    page: { register },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  appIds = troubleshoot(register, appIds)\n  const db = new PDB(address).createInstance('sentre')\n  await db.setItem('appIds', appIds)\n  return { appIds }\n})\n\nexport const installApp = createAsyncThunk<\n  Partial<PageState>,\n  string,\n  { state: any }\n>(`${NAME}/installApp`, async (appId, { getState }) => {\n  const {\n    wallet: { address },\n    page: { register, appIds, widgetIds },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  if (appIds.includes(appId)) return {}\n  const newAppIds: AppIds = [...appIds]\n  newAppIds.push(appId)\n  const newWidgetIds = register[appId]?.supportedViews?.includes('widget')\n    ? [...widgetIds, appId]\n    : [...widgetIds]\n  const db = new PDB(address).createInstance('sentre')\n  await db.setItem('appIds', newAppIds)\n  await db.setItem('widgetIds', newWidgetIds)\n  return { appIds: newAppIds, widgetIds: newWidgetIds }\n})\n\nexport const uninstallApp = createAsyncThunk<\n  Partial<PageState>,\n  string,\n  { state: any }\n>(`${NAME}/uninstallApp`, async (appId, { getState }) => {\n  const {\n    wallet: { address },\n    page: { appIds, widgetIds },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  if (!appIds.includes(appId)) return {}\n  const newAppIds = appIds.filter((_appId: string) => _appId !== appId)\n  const newWidgetIds = widgetIds.filter((_appId: string) => _appId !== appId)\n  const pdb = new PDB(address)\n  const db = pdb.createInstance('sentre')\n  await db.setItem('appIds', newAppIds)\n  await db.setItem('widgetIds', newWidgetIds)\n  await pdb.dropInstance(appId)\n  return { appIds: newAppIds, widgetIds: newWidgetIds }\n})\n\n/**\n * Dashboard Actions\n */\nexport const updateDashboard = createAsyncThunk<\n  Partial<PageState>,\n  AppIds,\n  { state: any }\n>(`${NAME}/updateDashboard`, async (widgetIds, { getState }) => {\n  const {\n    wallet: { address },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  const db = new PDB(address).createInstance('sentre')\n  await db.setItem('widgetIds', widgetIds)\n  return { widgetIds }\n})\n\nexport const addWidgets = createAsyncThunk<\n  Partial<PageState>,\n  AppIds,\n  { state: any }\n>(`${NAME}/addWidgets`, async (appIds, { getState }) => {\n  const {\n    wallet: { address },\n    page: { widgetIds },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet')\n  const newWidgetIds: AppIds = [...widgetIds, ...appIds]\n  const db = new PDB(address).createInstance('sentre')\n  await db.setItem('widgetIds', newWidgetIds)\n  return { widgetIds: newWidgetIds }\n})\n\nexport const removeWidget = createAsyncThunk<\n  Partial<PageState>,\n  string,\n  { state: any }\n>(`${NAME}/removeWidget`, async (appId, { getState }) => {\n  const {\n    wallet: { address },\n    page: { widgetIds },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  if (!widgetIds.includes(appId)) return {}\n  const newWidgetIds = widgetIds.filter((_appId: string) => _appId !== appId)\n  const db = new PDB(address).createInstance('sentre')\n  await db.setItem('widgetIds', newWidgetIds)\n  return { widgetIds: newWidgetIds }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        loadRegister.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        installManifest.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        loadPage.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updatePage.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        installApp.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        uninstallApp.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateDashboard.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        addWidgets.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        removeWidget.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { AccountInfo, PublicKey } from '@solana/web3.js'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, PoolData } from '@senswap/sen-js'\nimport configs from 'os/configs'\n\nconst {\n  sol: { taxmanAddress },\n} = configs\n\n/**\n * Interface & Utility\n */\n\nexport type PoolsState = Record<string, PoolData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'pools'\nconst initialState: PoolsState = {}\n\n/**\n * Actions\n */\n\nexport const getPools = createAsyncThunk(`${NAME}/getPools`, async () => {\n  const { swap } = window.sentre\n  // Get all pools\n  const value: Array<{ pubkey: PublicKey; account: AccountInfo<Buffer> }> =\n    await swap.connection.getProgramAccounts(swap.swapProgramId, {\n      filters: [\n        { dataSize: 257 },\n        { memcmp: { bytes: taxmanAddress, offset: 65 } },\n      ],\n    })\n  let bulk: PoolsState = {}\n  value.forEach(({ pubkey, account: { data: buf } }) => {\n    const address = pubkey.toBase58()\n    const data = swap.parsePoolData(buf)\n    bulk[address] = data\n  })\n  return bulk\n})\n\nexport const getPool = createAsyncThunk<\n  PoolsState,\n  { address: string },\n  { state: any }\n>(`${NAME}/getPool`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid pool address')\n  const {\n    pools: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const { swap } = window.sentre\n  const raw = await swap.getPoolData(address)\n  return { [address]: raw }\n})\n\nexport const upsetPool = createAsyncThunk<\n  PoolsState,\n  { address: string; data: PoolData },\n  { state: any }\n>(`${NAME}/upsetPool`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid pool address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getPools.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\ntype SearchState = {\n  value: string\n  loading: boolean\n  disabled: boolean\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'search'\nconst initialState: SearchState = {\n  value: '',\n  loading: false,\n  disabled: false,\n}\n\n/**\n * Actions\n */\n\nexport const setValue = createAsyncThunk<\n  Partial<SearchState>,\n  string,\n  { state: any }\n>(`${NAME}/setValue`, async (value) => {\n  return { value }\n})\n\nexport const setLoading = createAsyncThunk<\n  Partial<SearchState>,\n  boolean,\n  { state: any }\n>(`${NAME}/setLoading`, async (loading) => {\n  return { loading }\n})\n\nexport const setDisabled = createAsyncThunk<\n  Partial<SearchState>,\n  boolean,\n  { state: any }\n>(`${NAME}/setDisabled`, async (disabled) => {\n  return { disabled }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setValue.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setLoading.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setDisabled.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\nexport type Infix = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\nexport type Theme = 'light' | 'dark'\n\nexport type UIState = {\n  theme: Theme\n  width: number\n  infix: Infix\n  touchable: boolean\n  visibleActionCenter: boolean\n}\n\nconst getInfix = (): Infix => {\n  const width = window.innerWidth\n  if (width < 576) return 'xs'\n  if (width < 768) return 'sm'\n  if (width < 992) return 'md'\n  if (width < 1200) return 'lg'\n  if (width < 1400) return 'xl'\n  return 'xxl'\n}\nconst isTouchable = () => {\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0\n}\nconst getTheme = (): Theme => {\n  if (window.matchMedia('(prefers-color-scheme: light)').matches) return 'light'\n  return 'dark'\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'ui'\nconst initialState: UIState = {\n  theme: getTheme(),\n  width: window.innerWidth,\n  infix: getInfix(),\n  touchable: isTouchable(),\n  visibleActionCenter: false,\n}\n\n/**\n * Actions\n */\n\nexport const setTheme = createAsyncThunk(\n  `${NAME}/setTheme`,\n  async (theme: Theme) => {\n    return { theme }\n  },\n)\n\nexport const resize = createAsyncThunk(`${NAME}/resize`, async () => {\n  const width = window.innerWidth\n  const infix = getInfix()\n  return { width, infix }\n})\n\nexport const setVisibleActionCenter = createAsyncThunk(\n  `${NAME}/setVisibleActionCenter`,\n  async (visible: boolean) => {\n    return { visibleActionCenter: visible }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setTheme.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        resize.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setVisibleActionCenter.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\ntype WalkThorughState = {\n  run: boolean\n  step: number\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'walkthrough'\nconst initialState: WalkThorughState = {\n  run: false,\n  step: 0,\n}\n\n/**\n * Actions\n */\n\nexport const setWalkthrough = createAsyncThunk<\n  Partial<WalkThorughState>,\n  Partial<WalkThorughState>,\n  { state: any }\n>(`${NAME}/setWalkthrough`, async (state) => {\n  return { ...state }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      setWalkthrough.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { Lamports, SPLT, Swap, WalletInterface } from '@senswap/sen-js'\n\nimport configs from 'os/configs'\n\n/**\n * Interface & Utility\n */\n\nexport type WalletState = {\n  visible: boolean\n  address: string\n  lamports: bigint\n}\n\nconst initializeWindow = async (wallet: WalletInterface | undefined) => {\n  const {\n    sol: { node, spltAddress, splataAddress, swapAddress },\n  } = configs\n  window.sentre = {\n    wallet,\n    lamports: new Lamports(node),\n    splt: new SPLT(spltAddress, splataAddress, node),\n    swap: new Swap(swapAddress, spltAddress, splataAddress, node),\n  }\n}\n\nconst destroyWindow = async () => {\n  if (window.sentre?.wallet) window.sentre.wallet.disconnect()\n  await initializeWindow(undefined)\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'wallet'\nconst initialState: WalletState = {\n  visible: false,\n  address: '',\n  lamports: BigInt(0),\n}\n\n/**\n * Actions\n */\n\nexport const openWallet = createAsyncThunk(`${NAME}/openWallet`, async () => {\n  return { visible: true }\n})\n\nexport const closeWallet = createAsyncThunk(`${NAME}/closeWallet`, async () => {\n  return { visible: false }\n})\n\nexport const connectWallet = createAsyncThunk(\n  `${NAME}/connectWallet`,\n  async (wallet: any) => {\n    if (!wallet) throw new Error('Invalid wallet instance')\n    await initializeWindow(wallet)\n    const address = await wallet.getAddress()\n    const lamports = await window.sentre.lamports.getLamports(address)\n    return { address, lamports: BigInt(lamports), visible: false }\n  },\n)\n\nexport const updateWallet = createAsyncThunk(\n  `${NAME}/updateWallet`,\n  async ({ lamports }: Partial<WalletState>) => {\n    return { lamports }\n  },\n)\n\nexport const disconnectWallet = createAsyncThunk(\n  `${NAME}/disconnectWallet`,\n  async () => {\n    await destroyWindow()\n    window.location.reload() // Reset all redux store\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        openWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        closeWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        connectWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        disconnectWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import localForage from 'localforage'\nimport { account } from '@senswap/sen-js'\nimport IPFS from './ipfs'\n\n/**\n * Persistent Database\n */\nclass PDB {\n  readonly dbName: string\n  private driver: any\n  private ipfs: IPFS\n\n  constructor(walletAddress: string) {\n    if (!account.isAddress(walletAddress)) throw new Error('Invalid address')\n    this.dbName = walletAddress\n    this.driver = [localForage.WEBSQL, localForage.LOCALSTORAGE]\n    this.ipfs = new IPFS()\n  }\n\n  /**\n   * Local\n   */\n\n  createInstance = (appId: string): LocalForage => {\n    return localForage.createInstance({\n      driver: this.driver,\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  dropInstance = async (appId: string): Promise<void> => {\n    const instance = this.createInstance(appId)\n    await instance.clear()\n    return await localForage.dropInstance({\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  all = async (): Promise<any> => {\n    let data: any = {}\n    const appIds = (\n      ((await this.createInstance('sentre').getItem('appIds')) as string[]) ||\n      []\n    )\n      .flat()\n      .concat(['sentre'])\n    for (const appId of appIds) {\n      data[appId] = {}\n      const instance = this.createInstance(appId)\n      await instance.iterate((value: string, key: string) => {\n        data[appId][key] = value\n      })\n    }\n    return data\n  }\n\n  /**\n   * Cloud\n   */\n\n  fetch = async (cid: string) => {\n    return await this.ipfs.get(cid)\n  }\n\n  backup = async () => {\n    const data = await this.all()\n    return await this.ipfs.set(data)\n  }\n\n  restore = async (cid: string) => {\n    // Download data\n    const data = await this.fetch(cid)\n    // Apply to storage\n    for (const appId in data) {\n      const instance = await this.createInstance(appId)\n      for (const key in data[appId]) {\n        const value = data[appId][key]\n        await instance.setItem(key, value)\n      }\n    }\n    return data\n  }\n}\n\nexport default PDB\n\n/**\n * High abtraction pdb for app\n */\nexport const createPDB = (walletArress: string, appId: string) => {\n  return account.isAddress(walletArress)\n    ? new PDB(walletArress).createInstance(appId)\n    : undefined\n}\n","import { create, isIPFS } from 'ipfs-core'\nimport { asyncWait } from 'shared/util'\n\nclass IPFS {\n  private _ipfs: any = async () => {\n    try {\n      if (!window.ipfs) window.ipfs = await create()\n      return window.ipfs\n    } catch (er) {\n      await asyncWait(500)\n      return await this._ipfs()\n    }\n  }\n\n  static isCID = (cid: string | undefined | null): boolean => {\n    try {\n      if (!cid) return false\n      return isIPFS.multihash(cid)\n    } catch (er) {\n      return false\n    }\n  }\n\n  get = async (cid: string) => {\n    if (!IPFS.isCID(cid)) throw new Error('Invalid CID')\n    const ipfs = await this._ipfs()\n    const stream = await ipfs.cat(cid)\n    let raw = ''\n    for await (const chunk of stream) raw += Buffer.from(chunk).toString()\n    const data = JSON.parse(raw)\n    return data\n  }\n\n  set = async (data: object): Promise<string> => {\n    if (!data) throw new Error('Empty data')\n    const raw = JSON.stringify(data)\n    const ipfs = await this._ipfs()\n    const { path: cid } = await ipfs.add(raw)\n    return cid as string\n  }\n}\n\nexport default IPFS\n"],"names":["Context","createContext","children","appId","style","antd","ui","useRootSelector","state","provider","useMemo","configProvider","getPopupContainer","document","getElementById","undefined","Provider","value","id","height","backgroundColor","ConfigProvider","UIComsumer","Consumer","Children","child","cloneElement","withUI","WrappedComponent","HOC","Component","render","forwardedRef","rest","this","props","ref","forwardRef","useUI","useContext","pools","PoolContextComsumer","withPool","usePool","wallet","WalletContextComsumer","withWallet","useWallet","accounts","AccountContextComsumer","withAccount","useAccount","tokenProvider","TokenProvider","dispatch","useRootDispatch","mints","getMint","useCallback","async","agrs","_getMint","unwrap","getDecimals","account","mintAddress","Error","tokenInfo","findByAddress","decimals","Object","values","findIndex","mint_lpt","mintData","address","MintContextComsumer","withMint","useMint","NAME","getAccounts","createAsyncThunk","owner","splt","window","sentre","ownerPublicKey","connection","getTokenAccountsByOwner","programId","spltProgramId","bulk","forEach","pubkey","data","buf","toBase58","parseAccountData","getAccount","getState","getAccountData","upsetAccount","deleteAccount","createSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","payload","assign","loadVisited","_","flags","prevFlags","db","PDB","createInstance","visited","getItem","updateVisited","setItem","createStoreHook","RootContext","createDispatchHook","createSelectorHook","configureStore","middleware","getDefaultMiddleware","bigintSerializationMiddleware","devTools","reducer","page","search","walkthrough","force","getMintData","upsetMint","deleteMint","register","senreg","extra","configs","troubleshoot","appIds","Array","isArray","filter","widgetIds","loadRegister","res","fetch","json","er","fetchRegister","installManifest","manifest","includes","newAppIds","push","newWidgetIds","supportedViews","newRegister","loadPage","updatePage","installApp","uninstallApp","_appId","pdb","dropInstance","updateDashboard","addWidgets","removeWidget","sol","taxmanAddress","getPools","swap","getProgramAccounts","swapProgramId","filters","dataSize","memcmp","bytes","offset","parsePoolData","getPool","getPoolData","upsetPool","setValue","setLoading","loading","setDisabled","disabled","getInfix","width","innerWidth","theme","matchMedia","matches","infix","touchable","navigator","maxTouchPoints","visibleActionCenter","setTheme","resize","setVisibleActionCenter","visible","setWalkthrough","run","step","initializeWindow","node","spltAddress","splataAddress","swapAddress","lamports","Lamports","SPLT","Swap","BigInt","openWallet","closeWallet","connectWallet","getAddress","getLamports","updateWallet","disconnectWallet","disconnect","destroyWindow","location","reload","constructor","walletAddress","dbName","driver","ipfs","localForage","storeName","instance","clear","all","flat","concat","iterate","key","get","cid","backup","set","restore","IPFS","_ipfs","create","asyncWait","isCID","stream","cat","raw","chunk","Buffer","from","toString","JSON","parse","stringify","path","add","isIPFS"],"sourceRoot":""}