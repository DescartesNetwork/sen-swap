{"version":3,"file":"static/js/node_modules_certusone_wormhole-sdk_lib_esm_solana_nft-node_nft_bridge_js.bcdf8fed.chunk.js","mappings":"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","sources":["../node_modules/@certusone/wormhole-sdk/lib/esm/solana/nft-node/nft_bridge.js"],"sourcesContent":["\"use strict\";\nvar imports = {};\nimports['__wbindgen_placeholder__'] = module.exports;\nvar wasm;\nvar _a = require(\"util\"), TextDecoder = _a.TextDecoder, TextEncoder = _a.TextEncoder;\nvar cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\ncachedTextDecoder.decode();\nvar cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nvar heap = new Array(32).fill(undefined);\nheap.push(undefined, null, true, false);\nvar heap_next = heap.length;\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length)\n        heap.push(heap.length + 1);\n    var idx = heap_next;\n    heap_next = heap[idx];\n    heap[idx] = obj;\n    return idx;\n}\nvar WASM_VECTOR_LEN = 0;\nvar cachedTextEncoder = new TextEncoder('utf-8');\nvar encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n        return cachedTextEncoder.encodeInto(arg, view);\n    }\n    : function (arg, view) {\n        var buf = cachedTextEncoder.encode(arg);\n        view.set(buf);\n        return {\n            read: arg.length,\n            written: buf.length\n        };\n    });\nfunction passStringToWasm0(arg, malloc, realloc) {\n    if (realloc === undefined) {\n        var buf = cachedTextEncoder.encode(arg);\n        var ptr_1 = malloc(buf.length);\n        getUint8Memory0().subarray(ptr_1, ptr_1 + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr_1;\n    }\n    var len = arg.length;\n    var ptr = malloc(len);\n    var mem = getUint8Memory0();\n    var offset = 0;\n    for (; offset < len; offset++) {\n        var code = arg.charCodeAt(offset);\n        if (code > 0x7F)\n            break;\n        mem[ptr + offset] = code;\n    }\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        var view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        var ret = encodeString(arg, view);\n        offset += ret.written;\n    }\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\nfunction passArray8ToWasm0(arg, malloc) {\n    var ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\nfunction getObject(idx) { return heap[idx]; }\nfunction dropObject(idx) {\n    if (idx < 36)\n        return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\nfunction takeObject(idx) {\n    var ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n* @param {string} program_id\n* @param {string} bridge_id\n* @param {string} payer\n* @param {string} message\n* @param {string} from\n* @param {string} mint\n* @param {number} nonce\n* @param {Uint8Array} target_address\n* @param {number} target_chain\n* @returns {any}\n*/\nmodule.exports.transfer_native_ix = function (program_id, bridge_id, payer, message, from, mint, nonce, target_address, target_chain) {\n    var ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(bridge_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passStringToWasm0(payer, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ptr4 = passStringToWasm0(from, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len4 = WASM_VECTOR_LEN;\n    var ptr5 = passStringToWasm0(mint, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len5 = WASM_VECTOR_LEN;\n    var ptr6 = passArray8ToWasm0(target_address, wasm.__wbindgen_malloc);\n    var len6 = WASM_VECTOR_LEN;\n    var ret = wasm.transfer_native_ix(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4, ptr5, len5, nonce, ptr6, len6, target_chain);\n    return takeObject(ret);\n};\n/**\n* @param {string} program_id\n* @param {string} bridge_id\n* @param {string} payer\n* @param {string} message\n* @param {string} from\n* @param {string} from_owner\n* @param {number} token_chain\n* @param {Uint8Array} token_address\n* @param {Uint8Array} token_id\n* @param {number} nonce\n* @param {Uint8Array} target_address\n* @param {number} target_chain\n* @returns {any}\n*/\nmodule.exports.transfer_wrapped_ix = function (program_id, bridge_id, payer, message, from, from_owner, token_chain, token_address, token_id, nonce, target_address, target_chain) {\n    var ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(bridge_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passStringToWasm0(payer, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ptr4 = passStringToWasm0(from, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len4 = WASM_VECTOR_LEN;\n    var ptr5 = passStringToWasm0(from_owner, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len5 = WASM_VECTOR_LEN;\n    var ptr6 = passArray8ToWasm0(token_address, wasm.__wbindgen_malloc);\n    var len6 = WASM_VECTOR_LEN;\n    var ptr7 = passArray8ToWasm0(token_id, wasm.__wbindgen_malloc);\n    var len7 = WASM_VECTOR_LEN;\n    var ptr8 = passArray8ToWasm0(target_address, wasm.__wbindgen_malloc);\n    var len8 = WASM_VECTOR_LEN;\n    var ret = wasm.transfer_wrapped_ix(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4, ptr5, len5, token_chain, ptr6, len6, ptr7, len7, nonce, ptr8, len8, target_chain);\n    return takeObject(ret);\n};\n/**\n* @param {string} program_id\n* @param {string} bridge_id\n* @param {string} payer\n* @param {string} to_authority\n* @param {Uint8Array} vaa\n* @returns {any}\n*/\nmodule.exports.complete_transfer_native_ix = function (program_id, bridge_id, payer, to_authority, vaa) {\n    var ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(bridge_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passStringToWasm0(payer, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passStringToWasm0(to_authority, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ptr4 = passArray8ToWasm0(vaa, wasm.__wbindgen_malloc);\n    var len4 = WASM_VECTOR_LEN;\n    var ret = wasm.complete_transfer_native_ix(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4);\n    return takeObject(ret);\n};\n/**\n* @param {string} program_id\n* @param {string} bridge_id\n* @param {string} payer\n* @param {string} to_authority\n* @param {Uint8Array} vaa\n* @returns {any}\n*/\nmodule.exports.complete_transfer_wrapped_ix = function (program_id, bridge_id, payer, to_authority, vaa) {\n    var ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(bridge_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passStringToWasm0(payer, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passStringToWasm0(to_authority, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ptr4 = passArray8ToWasm0(vaa, wasm.__wbindgen_malloc);\n    var len4 = WASM_VECTOR_LEN;\n    var ret = wasm.complete_transfer_wrapped_ix(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4);\n    return takeObject(ret);\n};\n/**\n* @param {string} program_id\n* @param {string} bridge_id\n* @param {string} payer\n* @param {Uint8Array} vaa\n* @returns {any}\n*/\nmodule.exports.complete_transfer_wrapped_meta_ix = function (program_id, bridge_id, payer, vaa) {\n    var ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(bridge_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passStringToWasm0(payer, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArray8ToWasm0(vaa, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ret = wasm.complete_transfer_wrapped_meta_ix(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n    return takeObject(ret);\n};\n/**\n* @param {string} program_id\n* @param {string} bridge_id\n* @param {string} payer\n* @param {string} spill\n* @param {Uint8Array} vaa\n* @returns {any}\n*/\nmodule.exports.upgrade_contract_ix = function (program_id, bridge_id, payer, spill, vaa) {\n    var ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(bridge_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passStringToWasm0(payer, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passStringToWasm0(spill, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ptr4 = passArray8ToWasm0(vaa, wasm.__wbindgen_malloc);\n    var len4 = WASM_VECTOR_LEN;\n    var ret = wasm.upgrade_contract_ix(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4);\n    return takeObject(ret);\n};\n/**\n* @param {string} program_id\n* @param {string} bridge_id\n* @param {string} payer\n* @param {Uint8Array} vaa\n* @returns {any}\n*/\nmodule.exports.register_chain_ix = function (program_id, bridge_id, payer, vaa) {\n    var ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(bridge_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passStringToWasm0(payer, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArray8ToWasm0(vaa, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ret = wasm.register_chain_ix(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n    return takeObject(ret);\n};\nvar cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {string} program_id\n* @returns {Uint8Array}\n*/\nmodule.exports.emitter_address = function (program_id) {\n    try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.emitter_address(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\n/**\n* @param {string} program_id\n* @returns {Uint8Array}\n*/\nmodule.exports.approval_authority_address = function (program_id) {\n    try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.approval_authority_address(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\n/**\n* @param {string} program_id\n* @param {Uint8Array} token_address\n* @param {number} token_chain\n* @param {Uint8Array} token_id\n* @returns {Uint8Array}\n*/\nmodule.exports.wrapped_address = function (program_id, token_address, token_chain, token_id) {\n    try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(token_address, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = passArray8ToWasm0(token_id, wasm.__wbindgen_malloc);\n        var len2 = WASM_VECTOR_LEN;\n        wasm.wrapped_address(retptr, ptr0, len0, ptr1, len1, token_chain, ptr2, len2);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v3 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v3;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\n/**\n* @param {string} program_id\n* @param {Uint8Array} mint_address\n* @returns {Uint8Array}\n*/\nmodule.exports.wrapped_meta_address = function (program_id, mint_address) {\n    try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(mint_address, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.wrapped_meta_address(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v2;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\n/**\n* @param {Uint8Array} mint_address\n* @returns {Uint8Array}\n*/\nmodule.exports.spl_meta_address = function (mint_address) {\n    try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passArray8ToWasm0(mint_address, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.spl_meta_address(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\n/**\n* @param {Uint8Array} data\n* @returns {any}\n*/\nmodule.exports.parse_wrapped_meta = function (data) {\n    var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.parse_wrapped_meta(ptr0, len0);\n    return takeObject(ret);\n};\n/**\n* @param {Uint8Array} data\n* @returns {any}\n*/\nmodule.exports.parse_endpoint_registration = function (data) {\n    var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.parse_endpoint_registration(ptr0, len0);\n    return takeObject(ret);\n};\nmodule.exports.__wbindgen_json_parse = function (arg0, arg1) {\n    var ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\nvar path = require('path').join(__dirname, 'nft_bridge_bg.wasm');\nvar bytes = require('fs').readFileSync(path);\nvar wasmModule = new WebAssembly.Module(bytes);\nvar wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;\n"],"names":["wasm","imports","module","exports","_a","require","TextDecoder","TextEncoder","cachedTextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","memory","Uint8Array","heap","Array","fill","undefined","push","heap_next","length","WASM_VECTOR_LEN","cachedTextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","ptr_1","subarray","len","ptr","mem","offset","code","charCodeAt","slice","passArray8ToWasm0","takeObject","idx","ret","getObject","dropObject","transfer_native_ix","program_id","bridge_id","payer","message","from","mint","nonce","target_address","target_chain","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","ptr1","len1","ptr2","len2","ptr3","len3","ptr4","len4","ptr5","len5","ptr6","len6","transfer_wrapped_ix","from_owner","token_chain","token_address","token_id","ptr7","len7","ptr8","len8","complete_transfer_native_ix","to_authority","vaa","complete_transfer_wrapped_ix","complete_transfer_wrapped_meta_ix","upgrade_contract_ix","spill","register_chain_ix","cachegetInt32Memory0","getInt32Memory0","Int32Array","getArrayU8FromWasm0","emitter_address","retptr","__wbindgen_add_to_stack_pointer","r0","r1","v1","__wbindgen_free","approval_authority_address","wrapped_address","v3","wrapped_meta_address","mint_address","v2","spl_meta_address","parse_wrapped_meta","data","parse_endpoint_registration","__wbindgen_json_parse","arg0","arg1","obj","addHeapObject","JSON","parse","path","bytes","wasmModule","WebAssembly","Module","wasmInstance","Instance","__wasm"],"sourceRoot":""}