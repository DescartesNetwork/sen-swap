{"version":3,"file":"static/js/12.93e0322d.chunk.js","mappings":"sQA0BA,MCxBaA,EAAuC,CAClD,gBDwBa,IAA0B,mE,eEdzC,MAiBA,GAjBgBC,EAAAA,EAAAA,aAGd,EAAGC,KAAAA,EAAMC,UAAAA,KAAcC,GAASC,KAChC,MAAMC,EAAMH,EAAY,WAAaA,EAAY,UAEjD,OACE,iBAAMA,UAAWG,KAASF,EAA1B,SACGJ,EAAaE,IACZ,qBAAUG,IAAKA,EAAKE,IAAKP,EAAaE,MAEtC,qBAAUG,IAAKA,EAAKH,KAAMA,SChB5BM,EAA6C,MAACC,GAqFpD,EApEmB,EACjBC,YAAAA,EACAC,KAAAA,EAAO,GACPC,KAAAA,GAAO,SAAC,EAAD,CAASV,KAAK,oBACrBW,SAAAA,GAAW,KACRT,MAEH,MAAOU,EAASC,IAAcC,EAAAA,EAAAA,UAASR,IACjC,cAAES,IAAkBC,EAAAA,EAAAA,YACpB,MAAEC,IAAUC,EAAAA,EAAAA,WAEZC,GAAeC,EAAAA,EAAAA,cACnBC,MAAAA,IACE,MAAMC,QAAcP,EAAcQ,cAAcC,GAChD,UAAIF,QAAJ,IAAIA,GAAAA,EAAOG,QAAS,OAAOH,EAAMG,UAGnC,CAACV,IAGGW,GAAgBN,EAAAA,EAAAA,cAAYC,UAChC,IAAKM,EAAAA,QAAAA,UAAkBnB,GAAc,OAAOK,EAAWP,GAEvD,MAAMsB,EAAWC,OAAOC,OAAOb,GAAOc,MACpC,EAAGC,SAAAA,KAAeA,IAAaxB,IAEjC,GAAIoB,EAAU,CACZ,MAAM,OAAEK,EAAF,OAAUC,GAAWN,EACrBhB,QAAgBuB,QAAQC,IAAI,CAACH,EAAQC,GAAQG,IAAIlB,IAEvD,OADIR,GAAUC,EAAQ0B,UACfzB,EAAWD,GAGpB,MAAM2B,QAAepB,EAAaX,GAClC,OAAOK,EAAW,CAAC0B,MAClB,CAAC/B,EAAaG,EAAUQ,EAAcF,IAMzC,OAJAuB,EAAAA,EAAAA,YAAU,KACRd,MACC,CAACA,IAEmB,IAAnBd,EAAQ6B,QAER,SAAC,EAAAC,OAAD,CACErC,IAAKO,EAAQ,GACbH,KAAMA,EACNkC,MAAO,CAAEC,gBAAiB,UAAWC,OAAQ,WACzC3C,EAJN,SAMGQ,KAIL,SAAC,EAAAgC,OAAA,MAAD,CAAcC,MAAO,CAAEG,QAAS,QAASC,WAAY,aAAgB7C,EAArE,SACGU,EAAQyB,KAAI,CAACE,EAAQS,KACpB,SAAC,EAAAN,OAAD,CAEErC,IAAKkC,EACL9B,KAAMA,EACNkC,MAAO,CAAEC,gBAAiB,UAAWC,OAAQ,QAJ/C,SAMGnC,GALIsC,QC5ETC,EAAe,gBAuDrB,EA9CiB,EACfzC,YAAAA,EACA0C,UAAAA,EAAY,WACZvC,SAAAA,GAAW,MAMX,MAAOX,EAAMmD,IAAWrC,EAAAA,EAAAA,UAASmC,IAC3B,cAAElC,IAAkBC,EAAAA,EAAAA,YACpB,MAAEC,IAAUC,EAAAA,EAAAA,WAEZkC,GAAahC,EAAAA,EAAAA,cACjBC,MAAAA,IACE,MAAMC,QAAcP,EAAcQ,cAAcC,GAChD,cAAIF,QAAJ,IAAIA,GAAAA,EAAOtB,KAAasB,EAAMtB,KACvBiD,IAET,CAAClC,IAGGsC,GAAcjC,EAAAA,EAAAA,cAAYC,UAC9B,IAAKM,EAAAA,QAAAA,UAAkBnB,GAAc,OAAO2C,EAAQF,GAEpD,MAAMrB,EAAWC,OAAOC,OAAOb,GAAOc,MACpC,EAAGC,SAAAA,KAAeA,IAAaxB,IAEjC,GAAIoB,EAAU,CACZ,MAAM,OAAEK,EAAF,OAAUC,GAAWN,EACrB0B,QAAcnB,QAAQC,IAAI,CAACH,EAAQC,GAAQG,IAAIe,IAErD,OADIzC,GAAU2C,EAAMhB,UACba,EAAS,GAAEG,EAAMC,KAAKL,SAG/B,MAAMlD,QAAaoD,EAAW5C,GAC9B,OAAO2C,EAAQnD,KACd,CAACQ,EAAaG,EAAUyC,EAAYnC,EAAOiC,IAM9C,OAJAV,EAAAA,EAAAA,YAAU,KACRa,MACC,CAACA,KAEG,0BAAOrD,KCpDVwD,EAAiB,OAuDvB,EA9CmB,EACjBhD,YAAAA,EACA0C,UAAAA,EAAY,WACZvC,SAAAA,GAAW,MAMX,MAAO8C,EAAQC,IAAa5C,EAAAA,EAAAA,UAAS0C,IAC/B,cAAEzC,IAAkBC,EAAAA,EAAAA,YACpB,MAAEC,IAAUC,EAAAA,EAAAA,WAEZyC,GAAevC,EAAAA,EAAAA,cACnBC,MAAAA,IACE,MAAMC,QAAcP,EAAcQ,cAAcC,GAChD,cAAIF,QAAJ,IAAIA,GAAAA,EAAOmC,OAAenC,EAAMmC,OACzBjC,EAAQoC,UAAU,EAAG,KAE9B,CAAC7C,IAGG8C,GAAgBzC,EAAAA,EAAAA,cAAYC,UAChC,IAAKM,EAAAA,QAAAA,UAAkBnB,GAAc,OAAOkD,EAAUF,GAEtD,MAAM5B,EAAWC,OAAOC,OAAOb,GAAOc,MACpC,EAAGC,SAAAA,KAAeA,IAAaxB,IAEjC,GAAIoB,EAAU,CACZ,MAAM,OAAEK,EAAF,OAAUC,GAAWN,EACrBkC,QAAgB3B,QAAQC,IAAI,CAACH,EAAQC,GAAQG,IAAIsB,IAEvD,OADIhD,GAAUmD,EAAQxB,UACfoB,EAAUI,EAAQP,KAAKL,IAGhC,MAAMO,QAAeE,EAAanD,GAClC,OAAOkD,EAAUD,KAChB,CAACjD,EAAaG,EAAUgD,EAAc1C,EAAOiC,IAMhD,OAJAV,EAAAA,EAAAA,YAAU,KACRqB,MACC,CAACA,KAEG,0BAAOJ,KC3BhB,EAvBc,KACZ,MACEM,KAAOC,SAAUC,GACjBC,KAAOF,SAAUG,KACfC,EAAAA,EAAAA,cAAaC,GAAoBA,IAE/BC,GAA4B,OAAXL,QAAW,IAAXA,OAAA,EAAAA,EAAazC,UAAW,GACzC+C,GAA4B,OAAXJ,QAAW,IAAXA,OAAA,EAAAA,EAAa3C,UAAW,GAC/C,OACE,UAAC,EAAAgD,MAAD,YACE,UAAC,EAAA9B,OAAA,MAAD,YACE,SAAC,EAAD,CAAYlC,YAAa8D,KACzB,SAAC,EAAD,CAAY9D,YAAa+D,QAE3B,UAAC,EAAAE,WAAA,KAAD,YACE,SAAC,EAAD,CAAYjE,YAAa8D,IACxB,OACD,SAAC,EAAD,CAAY9D,YAAa+D,W,2ECT1B,MAMMG,EAAoC,CAC/CC,IAAK,KAGMC,EAAmD,CAC9DC,MAX+C,CAC/CC,MAAO,GACPC,KAAM,KAUNC,MAAON,GCpBF,MAAMO,EAIXC,YAAYC,GAAc,KAH1BA,IAAM,GAGmB,KAFjBC,aAAsB,GAEL,KADjBC,YAAqB,GAE3BC,KAAKH,IAAMA,EAGbI,IAAIC,EAAcC,GAChBH,KAAKF,aAAaM,KAAKF,GACvBF,KAAKD,YAAYK,KAAKD,GAGxBE,SAASC,GACP,KAAON,KAAKF,aAAa3C,OAAS,GAAG,CACnB6C,KAAKF,aAAaS,OAClCL,CAAQI,IAIZE,QAAQC,GACN,KAAOT,KAAKD,YAAY5C,OAAS,GAAG,CACnB6C,KAAKD,YAAYQ,OAChCJ,CAAOM,KC3BN,MAAMC,EAGD,WACRb,EACAc,EACAC,EAAuBxB,GAEvBY,KAAKa,SAASC,IAAIjB,EAAKc,GACvBI,YAAW,KACTf,KAAKa,SAASG,OAAOnB,KACpBe,EAAQvB,KAGH,WAACQ,GACT,OAAOG,KAAKa,SAASI,IAAIpB,IAfhBa,EACIG,SAAW,IAAIK,ICCzB,MAAMC,EAGmB,uBAACP,GAC7B,MAAMQ,EAAcC,KAAKC,UAAUV,GACnC,GAAIZ,KAAKuB,YAAYC,IAAIJ,GAAc,CACrC,MAAMK,EAAWzB,KAAKuB,YAAYN,IAAIG,GACtC,GAAIK,EAAU,OAAOA,EAGvB,IAAIC,EAAkB,IAAIC,EAAaf,GAEvC,OADAZ,KAAKuB,YAAYT,IAAIM,EAAaM,GAC3BA,EAGQ,kBACfE,EACAC,EACAjB,EAA8B,IAEJ,kBAAfgB,IAAyBA,EAAaP,KAAKC,UAAUM,IAEhE,IAAIE,EAAeX,EAAWY,gBAAgBnB,GAC9CO,EAAWI,YAAYT,IAAIc,EAAYE,GACvC,MAAME,EAAa,IAAIrC,EAAaiC,GACpC,OAAOE,EAAaG,KAAQD,EAAYH,IAzB/BV,EACJI,YAAc,IAAIL,IA4B3B,MAAMS,EAQJ/B,YAAYgB,GAA8B,KAPlCsB,YAOiC,OANjCC,qBAMiC,OALjCC,SAAqB,GAKY,KAHjCC,kBAAoB,IAAInB,IAGS,KAFjCoB,aAAgC,GAGtCtC,KAAKkC,OAAS3F,OAAOgG,OAAOjD,EAA8BsB,GAGlD,WAAIoB,EAA2BH,GACvC,MAAMW,EAAY9B,EAAkBO,IAAIe,EAAWnC,KACnD,GAAI2C,EAAW,OAAO3F,QAAQqD,QAAQsC,GAEtC,IAAIC,GAAU,EACVC,EAAU1C,KAAKqC,kBAAkBpB,IAAIe,EAAWnC,KAOpD,OANK6C,IACHA,EAAUV,EACVS,GAAU,EACVzC,KAAKqC,kBAAkBvB,IAAI4B,EAAQ7C,IAAK6C,IAGnC,IAAI7F,SAAQ,CAACqD,EAASC,KAC3B,IAAKuC,EAAS,OAAOvC,EAAO,sBAC5BuC,EAAQzC,IAAIC,EAASC,GACjBsC,GACFzC,KAAK2C,MAASD,EAASb,MAKrBc,MAASD,EAAwBb,GACvC,IAAK7B,KAAK4C,gBACR,OAAO5C,KAAK6C,gBAAgBH,EAASb,GAEvC7B,KAAK8C,iBAELjB,IACGkB,MAAMC,IACLtC,EAAkBI,IAAI4B,EAAQ7C,IAAKmD,EAAUhD,KAAKkC,OAAOxC,OACzDgD,EAAQrC,SAAS2C,MAElBC,OAAOxC,IACNiC,EAAQlC,QAAQC,MAEjByC,SAAQ,KACPlD,KAAKqC,kBAAkBrB,OAAO0B,EAAQ7C,KACtCG,KAAKmD,kBAAkBtB,MAIrBsB,kBAAkBtB,GACxB,IAAK7B,KAAK4C,gBAAiB,OAC3B,MAAMF,EAAU1C,KAAKsC,aAAa/B,QAC9BmC,GAAS1C,KAAKiC,KAAKS,EAASb,GAEC,IAA7B7B,KAAKsC,aAAanF,QAAgB6C,KAAKmC,iBACzCiB,cAAcpD,KAAKmC,iBAIfU,gBACNH,EACAb,GACC,IAAD,EACA7B,KAAKsC,aAAalC,KAAKsC,GACvB1C,KAAKmC,gBAAkBkB,aAAY,KACjCrD,KAAKmD,kBAAkBtB,KADS,UAE/B7B,KAAKkC,OAAO3C,aAFmB,aAE/B,EAAmBE,MAGhBmD,gBACN,OAAO,EAGDE,iBAAkB,IAAD,EACvB,IAAK9C,KAAKkC,OAAO3C,MAAO,OAExB,MAAM+D,GAAM,IAAIC,MAAOC,UACvBxD,KAAKoC,SAAShC,KAAKkD,GACftD,KAAKoC,SAASjF,QAAd,UAAuB6C,KAAKkC,OAAO3C,aAAnC,aAAuB,EAAmBC,QAC5CQ,KAAKoC,SAAS7B,SC1Gb,MAWMkD,EAAiB,CAACvH,EAAiBwH,EAAM,EAAGC,EAAY,QAEjEzH,EAAQoC,UAAU,EAAGoF,GACrBC,EACAzH,EAAQoC,UAAUpC,EAAQiB,OAASuG,EAAKxH,EAAQiB,QASvCyG,EAAYC,GACnBxH,EAAAA,QAAAA,UAAkBwH,GACZ,uCAAsCA,aAAyBC,EAAAA,KAEjE,kCAAiCD,aAAyBC,EAAAA,KAQvDC,EACXpD,GAEKA,GAAUqD,OAAOC,SAASD,OAAOrD,IAC/BuD,GAAAA,CAAOvD,GADwCuD,GAAAA,CAAO,KAUlDC,EAAc,CAACC,EAAeC,KACzC,IAAIC,EAAOC,KAAKC,MAAsB,SAAhBD,KAAKE,UAC3B,GAAIL,EAAM,CACRE,EAAO,EACP,IAAK,IAAI5G,EAAI,EAAGA,EAAI0G,EAAKjH,OAAQO,IAC/B4G,EAAOF,EAAKM,WAAWhH,KAAO4G,GAAQ,GAAKA,GAG/C,IAAIK,EAAM,CAAC,EAAG,EAAG,GACjB,IAAK,IAAIjH,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIiD,EAAS2D,GAAa,EAAJ5G,EAAU,IAChCiH,EAAIjH,GAAKiD,EAEX,MAAQ,QAAOgE,EAAI,YAAYA,EAAI,MAAMN,GAAW,MAQzCO,EAAW7I,MAAO8I,EAAS,KAC/B1D,EAAWc,KAAK,WAAa4C,GAAQ,IAAMC,EAAAA,MAAAA,SAAeD,KC+CnE,EAhHiB,EACfE,UAAAA,EAAY,GACZC,OAAAA,EAAS,GACTC,KAAAA,EAAO,OACPrE,QAAAA,EACAsE,WAAAA,GAAa,EACbC,QAAAA,EAAU,gBAEV,MAAM,gBAAE7H,GAAoBsD,GAAW,IAChCwE,EAAgBC,IAAmB7J,EAAAA,EAAAA,WAAkB,GAEtD8J,GAAaxJ,EAAAA,EAAAA,cACjB,CACEwE,EACAiF,EACAC,KAHF,CAKER,OAAQO,EACRE,SAAU,CAAC,IAAK7E,EAASN,KAAAA,EAAMhD,gBAAiBkI,OAElD,CAAC5E,IAGG8E,GAAWC,EAAAA,EAAAA,QAAqB,MAkEhCC,GAAgB9J,EAAAA,EAAAA,cAAY,KAAO,IAAD,IACtC,IAAK4J,IAAapI,EAAiB,MA5FN,UA6F7B,MAAMuI,EAAG,OAAGH,QAAH,IAAGA,GAAH,UAAGA,EAAUI,eAAb,iBAAG,EAAmBC,cAAtB,aAAG,EAA2BC,WAAW,MAC5CC,EAAQ,OAAGJ,QAAH,IAAGA,OAAH,EAAGA,EAAKK,qBAAqB,EAAG,EAAG,EAAG,KAC5C,OAARD,QAAQ,IAARA,GAAAA,EAAUE,aAAa,EAAG7I,GAClB,OAAR2I,QAAQ,IAARA,GAAAA,EAAUE,aAAa,EAAI,GAAE7I,OAE7B,MAD4B,SAAT2H,EAAkBgB,EAAW3I,IAE/C,CAACA,EAAiB2H,IAYrB,OAVA/H,EAAAA,EAAAA,YAAU,KAAO,IAAD,EACd,MAAMkJ,EAAgBV,EAASI,QACzBO,EAAW,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAe9F,KAAKmF,gBAAvB,aAAG,EAA8BhJ,MAAK,EAAG6D,KAAAA,KAAWA,IAC/DgG,EAAcC,GAAAA,CAAO,OAACF,QAAD,IAACA,OAAD,EAACA,EAAa/F,KAAMyE,GAC3CqB,IAAkBE,IACpBF,EAAc9F,KAAOgF,EAAWP,EAAWC,EAAQY,KACtC,OAAbQ,QAAa,IAAbA,GAAAA,EAAeI,YAEhB,CAACzB,EAAWO,EAAYM,EAAeZ,KAEnC,mBAAQyB,GAAItB,EAASuB,OAAO,QAAQ7L,IAnFnBkL,IACtB,IAAKA,EAAQ,OACb,MAAMF,EAAME,EAAOC,WAAW,MAC1BH,IAAQT,IAEVM,EAASI,QAAU,IAAIa,IAAJ,CAAUd,EAAK,CAChCZ,KAAMA,EACN3E,KAAM,CACJ0E,OAAQ,GACRS,SAAU,CACR,CACEnF,KAAM,MAIZsG,QAAS,CACPC,YAAY,EACZC,qBAAqB,EACrBC,OAAQ,CACNC,MAAO,CACL,CACEC,UAAW,CACTC,YAAY,EACZ1J,SAAS,GAEX2J,MAAO,CACL3J,SAAU0H,KAIhBkC,MAAO,CACL,CACEH,UAAW,CACTC,YAAY,EACZ1J,SAAS,GAEX2J,MAAO,CACL3J,SAAU0H,EACVmC,aAAa,EACbC,cAAe,EACfzF,SAAU,SAAUlB,EAAO4G,EAAO/K,GAChC,OAAOuH,EAAQpD,GAAO6G,OAAO,iBAMvCC,QAAS,CACPC,QAAQ,GAEVC,MAAO,CACLC,QAAS,CAACC,EAAOC,KACf,MAAMC,EAASC,SAASC,eAAe9C,GAClC4C,IACLA,EAAO1K,MAAM6K,OAASJ,EAAS,GAAK,UAAY,gBAKxDzC,GAAgB,QC1FtB,EAVmB,KAEf,SAAC,EAAA8C,IAAD,CAAK9K,MAAO,CAAEqJ,OAAQ,KAAO0B,MAAM,SAASC,QAAQ,SAApD,UACE,SAAC,EAAAC,IAAD,WACE,SAAC,EAAAC,MAAD,Q,mCCqBe,IAAIC,EAAAA,EAX3B,MAqCaC,EAAmB1M,MAC9B8I,EACA6D,KAEA,IACE,MAAMpI,QAAkBqI,GAAAA,CAAM,CAC5BC,OAAQ,MACRC,IAAM,0CAAyChE,uCAA4C6D,EAAOI,iBAAiBJ,EAAOK,aAG5H,OADyDzI,EAAKA,KAAK0I,OAClDjM,KAAKuD,IAAD,CAAab,KAAMa,EAAK,GAAI2I,IAAK3I,EAAK,OAC3D,MAAOG,GACP,MAAO,K,IClDNyI,GAAAA,SAAAA,GAAAA,EAAAA,IAAAA,MAAAA,EAAAA,KAAAA,OAAAA,EAAAA,MAAAA,QAAAA,EAAAA,KAAAA,OAAAA,CAAAA,IAAAA,EAAAA,KAML,MAAMC,EAOF,CACFC,IAAK,CAAEC,OAAQ,EAAGC,KAAM,QAAS9B,OAAQ,SACzC+B,KAAM,CAAEF,OAAQ,EAAGC,KAAM,OAAQ9B,OAAQ,UACzCgC,MAAO,CAAEH,OAAQ,EAAGC,KAAM,OAAQ9B,OAAQ,UAC1CiC,KAAM,CAAEJ,OAAQ,EAAGC,KAAM,SAAU9B,OAAQ,WAEvCkC,EAAkD,CACtDN,IAAK,CAAEN,KAAM,EAAGC,SAAU,UAC1BQ,KAAM,CAAET,KAAM,EAAGC,SAAU,SAC3BS,MAAO,CAAEV,KAAM,GAAIC,SAAU,SAC7BU,KAAM,CAAEX,KAAM,IAAKC,SAAU,UAGzBY,EACG,UADHA,EAEI,EAFJA,EAGO,GAHPA,EAIK,MAJLA,EAKS,cA4Kf,EAzKkB,KAAO,IAAD,MACtB,MAAOZ,EAAU1F,IAAe7H,EAAAA,EAAAA,UAAS0N,EAASK,OAC3CxE,EAAW6E,IAAgBpO,EAAAA,EAAAA,UAChC,IAEIqO,GAAU/K,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMN,MACjDqL,GAAUhL,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMH,OACjD,cAAEnD,IAAkBC,EAAAA,EAAAA,WAEpBqO,EAAmB,CACvBC,YAAaL,EACbM,aAAcN,EACdO,YAAaP,EACbQ,QAASR,EACTS,eAAgBT,EAChBU,iBAAkBV,EAClBrM,gBAAiBqM,GAGbW,GAAgBxO,EAAAA,EAAAA,cACnByO,IACC,MAAMxF,EAAyB,IACzB,OAAEyC,EAAF,OAAU6B,EAAV,KAAkBC,GAASH,EAAkBJ,GACnD,IAAIyB,EAAcC,GAAAA,GAElB,IAAK,MAAMnK,KAAQiK,EAAWvN,UAAW,CACvC,MAAM0N,EAAYD,GAAAA,CAAOnK,EAAKb,MAAM+H,OAAOA,GAC3C,GAAIkD,IAAcF,EAAYhD,OAAOA,GAAS,CAE5C,IAAIjC,EAAQmF,EACRA,IAFQD,GAAAA,GAASjD,OAAOA,KAELjC,EAAQkF,GAAAA,GAASjD,OAAO,UAC3CgD,GACFzF,EAAU4F,QAAQ,CAChBpF,MAAOA,EACP0D,IAAK3I,EAAK2I,MAEduB,EAAcA,EAAYI,SAASvB,EAAQC,OACpB,UAAdoB,GACT3F,EAAU4F,QAAQ,CAChBpF,MAAOiF,EAAYhD,OAAO,UAC1ByB,IAAK3I,EAAK2I,MAIhBW,EAAa7E,KAEf,CAACgE,IAGG8B,GAAkB/O,EAAAA,EAAAA,cACrByO,IACC,MAAMxF,EAAyB,IACzB,OAAEyC,EAAF,OAAU6B,EAAV,KAAkBC,GAASH,EAAkBJ,GACnD,IAAIyB,EAAcC,GAAAA,GAElB,IAAK,MAAMnK,KAAQiK,EAAWvN,UAAW,CACvC,MAAM0N,EAAYD,GAAAA,CAAOnK,EAAKb,MAAM+H,OAAOA,GACvCkD,IAAcF,EAAYhD,OAAOA,KACnCgD,EAAcA,EAAYI,SAASvB,EAAQC,GAC3CvE,EAAU4F,QAAQ,CAChBpF,MAAOmF,EACPzB,IAAK3I,EAAK2I,OAKhBW,EAAa7E,KAEf,CAACgE,IAGG+B,GAAiBhP,EAAAA,EAAAA,cAAYC,UAAa,IAAD,QAE7C,MAAMgP,QAAqBtP,EAAcQ,eACvC,UAAA4N,EAAQnL,gBAAR,eAAkBxC,UAAW,IAEzB8O,QAAqBvP,EAAcQ,eACvC,UAAA6N,EAAQpL,gBAAR,eAAkBxC,UAAW,IAEzB+O,EAAS,OAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAcG,kBAAjB,aAAG,EAA0BC,YACtCC,EAAS,OAAGJ,QAAH,IAAGA,GAAH,UAAGA,EAAcE,kBAAjB,aAAG,EAA0BC,YAEtCE,EAAiBxB,EAAQyB,iBAAmBxB,EAAQwB,eAC1D,IAAKF,IAAcH,GAAaI,EAAgB,OAAOzB,EAAa,IAEpE,MAAM2B,EAAe7B,EAAcX,IAC5ByC,EAAcC,SAAsB5O,QAAQC,IAAI,CACrD2L,EAAiBwC,EAAWM,GAC5B9C,EAAiB2C,EAAWG,KAGxBhB,EAA8C,GACpD,IAAK,IAAImB,EAAMF,EAAarO,OAAS,EAAGuO,GAAO,EAAGA,IAAO,CACvD,MAAMC,EAAWH,EAAaE,GACxBE,EACJH,EAAaA,EAAatO,OAASqO,EAAarO,OAASuO,GACtDC,GAAaC,GAClBrB,EAAWI,QAAQ,CACjBlL,KAAMkM,EAASlM,KACfwJ,IAAK0C,EAAS1C,IAAM2C,EAAS3C,MAGjC,OAAIF,IAAaG,EAASE,IAAYkB,EAAcC,GAC7CM,EAAgBN,KACtB,CACDT,EAAQwB,eADP,UAEDxB,EAAQpL,gBAFP,aAED,EAAkBxC,QAClB2N,EAAQyB,eAHP,UAIDzB,EAAQnL,gBAJP,aAID,EAAkBxC,QAClB6M,EACA8B,EACAP,EACA7O,KAGFyB,EAAAA,EAAAA,YAAU,KACR4N,MACC,CAACA,IAEJ,MAAMe,GAAQ,UAAA9G,EAAUA,EAAU5H,OAAS,UAA7B,eAAiC8L,MAAO,EAChD6C,EAAU/H,EAAQ8H,GAAOrE,OAC7BqE,EAAQ,EAAI,WAAa,kBAG3B,OACE,SAAC,EAAAE,KAAD,CAAMC,UAAU,EAAOrR,UAAU,YAAYsR,UAAW,CAAEC,WAAY,IAAtE,UACE,UAAC,EAAA/D,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAK8D,KAAK,OAAV,UACE,UAAC,EAAAjE,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAK8D,KAAK,OAAV,UACE,SAAC,EAAD,MAEDrH,KAAeA,EAAU5H,SACxB,SAAC,EAAAmL,IAAD,WACE,UAAC,EAAA+D,MAAA,MAAD,CACEC,aAAcpD,EAASK,KACvBgD,SAAWC,GAAMnJ,EAAYmJ,EAAEzE,OAAOpH,OACtChG,UAAU,kBAHZ,WAKE,SAAC,EAAA0R,MAAA,OAAD,CAAc1L,MAAOuI,EAASE,IAA9B,iBACA,SAAC,EAAAiD,MAAA,OAAD,CAAc1L,MAAOuI,EAASK,KAA9B,iBACA,SAAC,EAAA8C,MAAA,OAAD,CAAc1L,MAAOuI,EAASM,MAA9B,iBACA,SAAC,EAAA6C,MAAA,OAAD,CAAc1L,MAAOuI,EAASO,KAA9B,sBAIN,SAAC,EAAAnB,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAtN,WAAA,MAAD,CAAkBuN,MAAO,EAAzB,SACGb,EAAQC,EAAU,aAK3B,SAAC,EAAAxD,IAAD,CAAKmE,KAAM,GAAX,SACG1H,GAAeA,EAAU5H,QACxB,SAAC,EAAD,CACE4H,UAAS,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAWhI,KAAKuD,GAASA,EAAK2I,MACzCjE,OAAM,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAWhI,KAAKuD,GAASA,EAAKiF,QACtC3E,QAASmJ,KAGX,SAAC,EAAD,YCrLZ,GApByB7O,IACvB,MAAOyR,EAAUC,IAAepR,EAAAA,EAAAA,eAA6BP,IACvD,YAAE4R,IAAgBnR,EAAAA,EAAAA,WAElBoR,GAAgBhR,EAAAA,EAAAA,cAAYC,UAChC,IACE,MAAM4Q,QAAiBE,EAAY3R,GACnC,OAAO0R,EAAYD,GACnB,MAAOI,GACP,OAAOH,OAAY3R,MAEpB,CAACC,EAAa2R,IAMjB,OAJA3P,EAAAA,EAAAA,YAAU,KACR4P,MACC,CAACA,IAEGH,GCdHK,GAAc,CAClB9R,EACAmO,EACAsD,IAGGtQ,EAAAA,QAAAA,UAAkBnB,SACRD,IAAXoO,QACapO,IAAb0R,EAGK,CACLzR,YAAAA,EACAmO,OAAAA,EACAsD,SAAAA,EACAM,QAASjJ,OAAOc,EAAAA,MAAAA,aAAmBuE,EAAQsD,KALpC,CAAEtD,OAAQ6D,OAAO,GAAIP,SAAU,EAAGM,QAAS,GAqBhDE,GAAqB7B,IACzB,MACE8B,QAAUlR,QAASmR,EAAX,SAA0BC,KAChCC,EAAAA,EAAAA,cACE,SAAEC,IAAaC,EAAAA,EAAAA,eACf,OAAEpE,EAAQqE,KAAMxS,GAAgBsS,EAASlC,IAAmB,GAC5DqB,EAAWgB,GAAgBzS,IAAgB,EAEjD,OAAKmB,EAAAA,QAAAA,UAAkBgR,IAAmBhR,EAAAA,QAAAA,UAAkBiP,GAExDA,IAAmB+B,EACdL,GAAYY,EAAAA,sBAAuBN,EAAU,GAE/CN,GAAY9R,EAAamO,EAAQsD,GAJ/BK,MAOX,MCtCaa,GAAiB,CAC5B3S,EACAoB,KAEA,MAAM,OAAEK,EAAF,OAAUC,EAAV,UAAkBkR,EAAlB,UAA6BC,GAAczR,EACjD,GAAIpB,IAAgByB,EAAQ,OAAOmR,EACnC,GAAI5S,IAAgB0B,EAAQ,OAAOmR,EACnC,MAAM,IAAIC,MAAM,yBAsCLC,GAAgB,CAC3BC,EACAlP,EACAC,EACAkP,EAAO,KAEP,MAAMC,EAAuB,GACvBC,EAAc,IAAInN,IAAIgN,GACtBvS,EAAQuS,EAAMjN,IAAIjC,GAGxB,OAAImP,GAnEsB,IAqE1BE,EAAYrN,OAAOhC,GACd,OAALrD,QAAK,IAALA,GAAAA,EAAO2S,SAAQ,CAAChS,EAAUiS,KAExB,MAAMC,EAAiBxP,EACjByP,EACJD,IAAmBlS,EAASK,OAASL,EAASM,OAASN,EAASK,OAC5D+R,EAAe,CACnBF,eAAAA,EACAC,eAAAA,EACAnS,SAAU,IAAKA,EAAUJ,QAASqS,IAGpC,GAAIE,IAAmBxP,EAAgB,OAAOmP,EAAOhO,KAAK,CAACsO,IAEzCT,GAChBI,EACAI,EACAxP,EACAkP,KAEQG,SAASK,GAAUP,EAAOhO,KAAK,CAACsO,KAAQC,UAtBZP,GCzE7BQ,GAASC,EAAAA,KAAAA,OAETC,GAAQ,CAACC,EAAmBC,KACvC,IAAKD,EAAW,OAAO7B,OAAO,GAC9B,MAAM,eAAEsB,EAAF,eAAkBC,EAAlB,SAAkCnS,GAAa0S,GAC/C,UAAEC,EAAF,UAAaC,GAAc5S,EAC3B6S,EAAatB,GAAeW,EAAgBlS,GAC5C8S,EAAavB,GAAeY,EAAgBnS,GAClD,IAAK6S,IAAeC,EAAY,OAAOlC,OAAO,GAE9C,MAAM,UAAEmC,GAAcT,GAAOU,KAC3BP,EACAI,EACAC,EACAH,EACAC,GAEF,OAAOG,GAGIE,GAAe,CAACF,EAAmBL,KAC9C,IAAKK,EAAW,OAAOnC,OAAO,GAC9B,MAAM,eAAEsB,EAAF,eAAkBC,EAAlB,SAAkCnS,GAAa0S,GAC/C,UAAEC,EAAF,UAAaC,GAAc5S,EAC3B6S,EAAatB,GAAeW,EAAgBlS,GAC5C8S,EAAavB,GAAeY,EAAgBnS,GAClD,IAAK6S,IAAeC,EAAY,OAAOlC,OAAO,GAS9C,OAPkB0B,GAAOY,YACvBH,EACAF,EACAC,EACAH,EACAC,ICrCG,IAAKO,IAAZ,SAAYA,GAAAA,EAAAA,EAAAA,SAAAA,KAAAA,WAAAA,EAAAA,EAAAA,eAAAA,KAAAA,iBAAZ,CAAYA,KAAAA,GAAAA,KCOZ,MAEMC,GAAiB,KACrB,MACEf,OAAO,KAAEgB,GACTlR,KAAO4K,OAAQ0F,EAAWrQ,SAAUC,GACpCC,KAAOyK,OAAQgG,KACbvQ,EAAAA,EAAAA,cAAaC,GAAoBA,IAErC,IAAKiF,OAAO+K,KAAe/K,OAAOqL,GAAY,OAAO,EACrD,IAAIO,EAAY9K,EAAAA,MAAAA,WAAiBiK,EAAWpQ,EAAYgO,UACpDkD,EAAI,EAUR,OATAF,EAAKrB,SAASU,IACZ,MAAMc,EAAI9L,OACRc,EAAAA,MAAAA,aFqBkB,EAACiK,EAAmBC,KAC1C,IAAKD,EAAW,OAAO7B,OAAO,GAC9B,MAAM,eAAEsB,EAAF,eAAkBC,EAAlB,SAAkCnS,GAAa0S,GAC/C,UAAEC,EAAF,UAAaC,GAAc5S,EAC3B6S,EAAatB,GAAeW,EAAgBlS,GAC5C8S,EAAavB,GAAeY,EAAgBnS,GAClD,OAAK6S,GAAeC,EAEHR,GAAOmB,SACtBhB,EACAI,EACAC,EACAH,EACAC,GAPqChC,OAAO,IE3BvB6C,CAASH,EAAWZ,GAd3B,IAgBda,GAAS,EAAIC,EACb,MAAME,EAAYlB,GAAMc,EAAWZ,GACnCY,EAAYI,KAGP,EAAIH,GAGAI,GAAgB,KAC3B,MAAMC,EAAcR,KACpB,OAAIQ,EAAcT,GAAYU,SAAiB,UAC3CD,EAAcT,GAAYW,eAAuB,UAC9C,WAGT,MCzBMC,GAAWnD,OAAO,KA4IxB,GA1ImB,EACjBoD,WAAAA,EAAa,SACbC,UAAAA,GAAY,MAKZ,MAAOC,EAASC,IAAcjV,EAAAA,EAAAA,WAAS,IAErCmT,OAAO,KAAEgB,GACTlR,KACE4K,OAAQqH,EACRhS,UAAYxC,QAAS8C,EAAgB2N,SAAUgE,GAC/CrF,eAAgBsF,GAElBhS,KACEyK,OAAQwH,EACRnS,UAAYiO,SAAUmE,IAExBC,UAAU,SAAEhB,EAAF,SAAYiB,KACpBlS,EAAAA,EAAAA,cAAaC,GAAoBA,KAEnCqO,QAAUlR,QAASmR,EAAX,SAA0BC,KAChCC,EAAAA,EAAAA,cACIlE,OAAQ4H,GAAe9D,GAAkByD,GAC3CV,EAAcR,KAEdwB,GAAaC,EAAAA,EAAAA,UAAQ,KACzB,IAAKnN,OAAO0M,IAAe1R,IAAmBoS,EAAAA,aAAc,OAAOlE,OAAO,GAC1E,MAAM7D,EAASvE,EAAAA,MAAAA,WAAiB4L,EAAYC,GAC5C,OAAItH,GAAU4H,EAAmB/D,OAAO,GACjC7D,EAAS4H,IACf,CAACA,EAAYP,EAAY1R,EAAgB2R,IAEtCU,GAAeF,EAAAA,EAAAA,UAAQ,KAC3B,GAAInS,IAAmBoS,EAAAA,aACrB,OAAOtM,EAAAA,MAAAA,aAAmBmM,EAAYN,GAExC,MAAMW,EAAcxM,EAAAA,MAAAA,WAAiB,IAAM6L,GACrCY,EAAMjE,EAAW2D,EAAaK,EACpC,OAAIC,GAAON,EACFnM,EAAAA,MAAAA,aAAmBmM,EAAYN,GACjC7L,EAAAA,MAAAA,aAAmByM,EAAKZ,KAC9B,CAACM,EAAYjS,EAAgB2R,EAAiBrD,IAE3CkE,GAAa1V,EAAAA,EAAAA,cAAYC,UAC7B,MAAM,KAAEuT,EAAF,KAAQmC,EAAR,OAAcrE,GAAWsE,OAAOC,OACtC,IAAKvE,EAAQ,MAAM,IAAIY,MAAM,2BAE7B,MAAM4D,QAAyB/U,QAAQC,IACrC6S,EAAK5S,KACHhB,OACEyS,eAAAA,EACAC,eAAAA,EACAnS,UAAYJ,QAASqS,OAUd,CACLA,YAAaA,EACbsD,iBAVuBJ,EAAKK,wBAC5BzE,EACAmB,GASAuD,iBAPuBN,EAAKK,wBAC5BzE,EACAoB,QAWFM,EAAYjK,EAAAA,MAAAA,WAAiB4L,EAAYC,GAEzCpR,EADYuF,EAAAA,MAAAA,WAAiB+L,EAAYC,IAE/BT,GAAWvL,EAAAA,MAAAA,WAAiBiL,EAAU,IAAOM,GAE7D,aAAaf,EAAKX,MAAMI,EAAWxP,EAAOqS,EAAkBxE,KAC3D,CACDuC,EACAgB,EACAG,EACAf,EACA1C,EACAqD,EACAG,IA2BImB,GACHhB,GAAYd,EAAcT,GAAYW,iBAAmBG,EACtD0B,EACJD,IACCrC,EAAKxS,SACL6G,OAAO0M,KACP1M,OAAO6M,IACR7M,OAAO0M,GAAc1M,OAAOqN,GAC9B,OACE,SAAC,EAAAa,OAAD,CACEjN,KAAK,UACLkN,QA7BWpW,UACb,IACE0U,GAAW,QARO1U,WACpB,MAAM,KAAEuT,EAAF,OAAQlC,GAAWsE,OAAOC,OAChC,IAAKvE,EAAQ,MAAM,IAAIY,MAAM,2BAC7B,GAAIkD,EAAY,aAAa5B,EAAK8C,QAAQlB,EAAY9D,IAM9CiF,GACN,MAAM,KAAEC,SAAed,IAMvB,OALAE,OAAOa,OAAO,CACZtN,KAAM,UACNuN,YAAa,4CACbL,QAAS,IAAMT,OAAOe,KAAK7O,EAAS0O,GAAO,YAEtChC,IACP,MAAOvD,GACP,OAAO2E,OAAOa,OAAO,CAAEtN,KAAM,QAASuN,YAAazF,EAAG2F,UAXxD,QAaE,OAAOjC,GAAW,KAgBlBwB,SAAUA,EACVzB,QAASA,EACTmC,OAAK,EALP,SAOGX,EACG,wBACAzB,EACA,cACA,UC5GV,GA9BoB,KAClB,MACE9R,KAAK,SAAEC,GACPiQ,OAAO,KAAEgB,KACP7Q,EAAAA,EAAAA,cAAaC,GAAoBA,IAE/ByP,EAAc,OAAG9P,QAAH,IAAGA,OAAH,EAAGA,EAAUxC,QAC3B0W,GAAqBzB,EAAAA,EAAAA,UAAQ,KACjC,IAAKxB,EAAKxS,SAAWd,EAAAA,QAAAA,UAAkBmS,GAAiB,MAAO,GAC/D,IAAIqE,EAAO,CAACrE,GACZ,IAAK,MAAME,KAAOiB,EAAM,CACtB,MAAM,eAAElB,GAAmBC,EACvBrS,EAAAA,QAAAA,UAAkBoS,IAAiBoE,EAAKzS,KAAKqO,GAEnD,OAAOoE,IACN,CAACrE,EAAgBmB,IAEpB,OACE,SAAC,EAAAzQ,MAAD,iBACG0T,QADH,IACGA,OADH,EACGA,EAAoB7V,KAAI,CAAC7B,EAAawC,KACrC,UAAC,EAAAoV,SAAD,YACE,SAAC,EAAD,CAAY5X,YAAaA,IACxB0X,EAAmBzV,OAASO,EAAI,IAC/B,SAAC,EAAD,CAAShD,KAAK,8BAHHgD,QCsBvB,GA1Cc,KACZ,MAAOrC,EAAU0X,IAAevX,EAAAA,EAAAA,WAAS,IAEvCiD,KAAOC,SAAUC,EAAa0K,OAAQ0F,GACtCnQ,KAAOF,SAAUG,EAAawK,OAAQgG,KACpCvQ,EAAAA,EAAAA,cAAaC,GAAoBA,IAE/BC,GAA4B,OAAXL,QAAW,IAAXA,OAAA,EAAAA,EAAazC,UAAW,GACzC+C,GAA4B,OAAXJ,QAAW,IAAXA,OAAA,EAAAA,EAAa3C,UAAW,GACzC2P,EAAQ9H,EAAQC,OAAOqL,GAAarL,OAAO+K,IAAYvH,OAC3D,gBAEIwL,EAAgBjP,EAAQC,OAAO+K,GAAa/K,OAAOqL,IAAY7H,OACnE,gBAGF,OACE,UAAC,EAAAtI,MAAD,YACE,SAAC,EAAAgT,OAAD,CACEjN,KAAK,OACLkN,QAAS,IAAMY,GAAa1X,GAC5B4X,MAAM,SACN7X,MAAM,SAAC,EAAD,CAASV,KAAK,+BAEtB,SAAC,EAAAyE,WAAA,KAAD,UAAmB9D,EAAmB2X,EAARnH,KAC9B,UAAC,EAAA1M,WAAA,KAAD,WACI9D,GAGA,SAAC,EAAD,CAAYH,YAAa8D,KAFzB,SAAC,EAAD,CAAY9D,YAAa+D,IAI1B,MACC5D,GAGA,SAAC,EAAD,CAAYH,YAAa+D,KAFzB,SAAC,EAAD,CAAY/D,YAAa8D,WCpB7BkU,GAAkB,EACtB3N,MAAAA,EAAQ,GACR4N,QAAAA,EAAU,OAMR,UAAC,EAAAhL,IAAD,YACE,SAAC,EAAAG,IAAD,CAAK8D,KAAK,OAAV,UACE,SAAC,EAAAjN,WAAA,KAAD,CAAiB8F,KAAK,YAAtB,SAAmCM,OAErC,SAAC,EAAA+C,IAAD,WACE,0BAAO6K,SAyCf,GAnCoB,KAClB,MACEpC,UAAU,SAAEhB,KACVjR,EAAAA,EAAAA,cAAaC,GAAoBA,IAC/BmR,EAAcR,KACd0D,EAAanD,KAEnB,OACE,UAAC,EAAA9H,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAACyG,GAAD,CACE3N,MAAM,eACN4N,SACE,SAAC,EAAAhU,WAAA,KAAD,CAAiB9B,MAAO,CAAEgW,MAAOD,GAAjC,SACGrP,EAAQC,OAAOkM,IAAc1I,OAAO,oBAK7C,SAAC,EAAAc,IAAD,CAAKmE,KAAM,GAAX,UACE,SAACyG,GAAD,CAAiB3N,MAAM,QAAQ4N,SAAS,SAAC,GAAD,SAE1C,SAAC,EAAA7K,IAAD,CAAKmE,KAAM,GAAX,UACE,SAACyG,GAAD,CACE3N,MAAM,qBACN4N,QAASpP,EAAQgM,GAAUvI,OAAO,gBAGtC,SAAC,EAAAc,IAAD,CAAKmE,KAAM,GAAIpP,MAAO,CAAEiW,UAAW,IAAnC,UACE,SAACJ,GAAD,CAAiB3N,MAAM,QAAQ4N,SAAS,SAAC,GAAD,Y,gBC5DhD,MAgBaI,IAAgBC,EAAAA,GAAAA,kBAK1B,qBACDzX,OAAS0X,YAAAA,EAAaC,MAAAA,KAAU7J,IAAa8J,SAAAA,MAC3C,MACElV,KAAOmV,SAAUC,GACjBjV,KAAOgV,SAAUE,IACfH,IACA3P,OAAO6F,EAAQR,QAAU,IAAGQ,EAAQR,OAAS,IACjD,MAAMuK,EAAWF,EAAQ,EAAID,EAAcK,EAAc,EAAID,EAC7D,MAAO,IAAKhK,EAAS+J,SAAAA,MAmBzB,IAXcG,EAAAA,GAAAA,aAAY,CACxBrZ,KAtCW,MAuCXsZ,aAtC0B,CAC1B3K,OAAQ,GACR3K,SAAU,CACRxC,QAAS,GACTyQ,SAAU,GAEZrB,eAAgB,GAChB2I,cAAe,GACfL,SAAU,GA+BVM,SAAU,GACVC,cAAgBC,IACTA,EAAQC,QACXd,GAAce,WACd,CAACvV,GAASwV,QAAAA,MAAmBhY,OAAOgG,OAAOxD,EAAOwV,SAIxD,QC2BA,GAzEoB,EAClBC,QAAAA,GAAU,EACVC,SAAAA,EAAW,aAIN,IAAD,QACJ,MAAOC,EAASC,IAAcnZ,EAAAA,EAAAA,WAAS,GACjCqO,GAAU/K,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMN,MACjDqL,GAAUhL,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMH,MAGjDoT,EAFctC,KAEgBD,GAAYW,eAEhD,OACE,SAAC,EAAAwE,MAAD,CACEC,OAAO,SAAC,EAAA1V,WAAA,MAAD,CAAkBuN,MAAO,EAAzB,2BACPoI,SAAU,IAAML,GAAS,GACzBM,OAAQ,KACRP,QAASA,EAJX,UAME,UAAC,EAAArM,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,UAAC,EAAAtE,IAAD,CAAKC,MAAM,SAASC,QAAQ,gBAA5B,WACE,SAAC,EAAAC,IAAD,WACE,UAAC,EAAApJ,MAAD,CAAO8V,UAAU,WAAjB,WACE,SAAC,EAAA7V,WAAA,KAAD,oBACA,UAAC,EAAAD,MAAD,YACE,SAAC,EAAD,CAAYhE,YAAW,UAAE2O,EAAQnL,gBAAV,aAAE,EAAkBxC,WAC3C,SAAC,EAAAiD,WAAA,KAAD,WACE,SAAC,EAAD,CAAYjE,YAAW,UAAE2O,EAAQnL,gBAAV,aAAE,EAAkBxC,gBAG/C,SAAC,EAAAiD,WAAA,MAAD,CAAkBuN,MAAO,EAAzB,SAA6B7C,EAAQR,eAGzC,SAAC,EAAAf,IAAD,WACE,SAAC,EAAD,CAAS5N,KAAK,wBAAwB2C,MAAO,CAAE4X,SAAU,SAE3D,SAAC,EAAA3M,IAAD,WACE,UAAC,EAAApJ,MAAD,CAAO8V,UAAU,WAAW5M,MAAM,MAAlC,WACE,SAAC,EAAAjJ,WAAA,KAAD,kBACA,UAAC,EAAAD,MAAD,YACE,SAAC,EAAD,CAAYhE,YAAW,UAAE4O,EAAQpL,gBAAV,aAAE,EAAkBxC,WAC3C,SAAC,EAAAiD,WAAA,KAAD,WACE,SAAC,EAAD,CAAYjE,YAAW,UAAE4O,EAAQpL,gBAAV,aAAE,EAAkBxC,gBAG/C,SAAC,EAAAiD,WAAA,MAAD,CAAkBuN,MAAO,EAAzB,SAA6B5C,EAAQT,oBAK7C,SAAC,EAAAf,IAAD,WACE,SAAC,EAAAyD,KAAD,CAAMC,UAAU,EAAOrR,UAAU,eAAjC,UACE,SAAC,GAAD,QAGHqX,IACC,SAAC,EAAA1J,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAyI,SAAD,CAAUR,QAASA,EAASnI,SAAU,IAAMoI,GAAYD,GAAxD,0FAMJ,SAAC,EAAApM,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,CAAY6D,WAAY,IAAMmE,GAAS,GAAQlE,UAAWmE,YChCpE,GApCoB,KAClB,MAAOS,EAASC,IAAc5Z,EAAAA,EAAAA,WAAS,GACjC6Z,GAAWC,EAAAA,EAAAA,eAKXtD,EAFctC,KAEgBD,GAAYW,eAEhD,OACE,SAAC,EAAArE,KAAD,CAAMC,UAAU,EAAhB,UACE,UAAC,EAAA7D,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAtN,WAAA,MAAD,CAAkBuN,MAAO,EAAzB,8BAEF,SAAC,EAAApE,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,OAEF,SAAC,EAAAnE,IAAD,CAAKmE,KAAM,KAPb,KAQE,SAAC,EAAAnE,IAAD,CAAKmE,KAAM,GAAX,SACGuF,GACC,SAAC,EAAAE,OAAD,CAAQjN,KAAK,UAAUkN,QAAS,IAAMiD,GAAW,GAAOzC,OAAK,EAA7D,4BAIA,SAAC,GAAD,CAAYrC,WAtBH,IACjB+E,EAAS9B,GAAc,CAAElK,OAAQ,GAAIoK,aAAa,SAwB7CzB,IACC,SAAC,GAAD,CAAawC,QAASW,EAASV,SAAUW,UCrC7CG,GAAe,CACnBrZ,QAAS,GACTd,KAAM,GACNV,KAAM,QACNmR,MAAO,EACP2J,YAAa,EACbC,KAAM,EACNtX,OAAQ,QACRuX,YAAa,GAyBf,GAtBoBxa,IAClB,MAAOya,EAASC,IAAcpa,EAAAA,EAAAA,UAAkB+Z,KAC1C,cAAE9Z,IAAkBC,EAAAA,EAAAA,WAEpBma,GAAe/Z,EAAAA,EAAAA,cAAYC,UAC/B,IAAKb,EAAa,OAAO0a,EAAWL,IACpC,IAAK,IAAD,EACF,MAAMvZ,QAAcP,EAAcQ,cAAcf,GAC1C2J,EAAM,OAAG7I,QAAH,IAAGA,GAAH,UAAGA,EAAOkP,kBAAV,aAAG,EAAmBC,YAC5BwK,QAAgB/Q,EAASC,GAC/B,OAAO+Q,EAAWD,GAClB,MAAOlV,GACP,OAAOmV,EAAWL,OAEnB,CAACra,EAAaO,IAMjB,OAJAyB,EAAAA,EAAAA,YAAU,KACR2Y,MACC,CAACA,IAEGF,GCvBHG,GAAe,EACnB5a,YAAAA,EACA6a,IAAAA,EAAM,GACNlK,MAAAA,EACArE,OAAAA,EAAS,gBAQP,UAAC,EAAAtI,MAAD,CAAO8V,UAAU,WAAW7Z,KAAM,EAAlC,WACE,SAAC,EAAD,CAAYD,YAAaA,KACzB,UAAC,EAAAgE,MAAD,YACE,SAAC,EAAAC,WAAA,KAAD,oBACA,SAAC,EAAAA,WAAA,MAAD,CAAkBuN,MAAO,EAAzB,SACG3I,EAAQgS,GAAKvO,OAAOA,MAEvB,SAAC,EAAArI,WAAA,MAAD,CAAkBuN,MAAO,EAAzB,UACE,SAAC,EAAD,CAAYxR,YAAaA,UAG7B,UAAC,EAAAiE,WAAA,KAAD,CAAiBxE,UAAU,UAAUsK,KAAK,YAA1C,gBACMlB,EAAQ8H,GAAOrE,OAAOA,SAiElC,GA3DqB,KACnB,MACEmH,OAAO,KAAEgB,GACTlR,KAAOC,SAAUC,GACjBC,KAAOF,SAAUG,KACfC,EAAAA,EAAAA,cAAaC,GAAoBA,IAC/BiX,EAASC,GAAWtX,EAAYzC,SAChCga,EAASD,GAAWpX,EAAY3C,UAE9BI,SAAU6Z,GAAgBxG,EAAK,IAAM,IACrCrT,SAAU8Z,GAAgBzG,EAAKA,EAAKxS,OAAS,IAAM,GAErDkZ,EAAa,CAACnb,EAAsBoB,KACxC,IACE,OAAKD,EAAAA,QAAAA,UAAkBnB,IAAiBoB,EACjCuR,GAAe3S,EAAaoB,GADsB4Q,OAAO,GAEhE,MAAOH,GACP,OAAOG,OAAO,KAKZoJ,GAASnF,EAAAA,EAAAA,UAAQ,KACrB,IAAKxS,EAAYgO,SAAU,OAAO,EAClC,MAAMlO,EAAM4X,EAAW1X,EAAYzC,QAASia,GAC5C,OAAOnS,OAAOc,EAAAA,MAAAA,aAAmBrG,EAAKE,EAAYgO,aACjD,CAAChO,EAAawX,IAEXI,GAASpF,EAAAA,EAAAA,UAAQ,KACrB,IAAKtS,EAAY8N,SAAU,OAAO,EAClC,MAAM/N,EAAMyX,EAAWxX,EAAY3C,QAASka,GAC5C,OAAOpS,OAAOc,EAAAA,MAAAA,aAAmBlG,EAAKC,EAAY8N,aACjD,CAAC9N,EAAauX,IAEjB,OACE,SAAC,EAAArK,KAAD,CAAMC,UAAU,EAAhB,UACE,UAAC,EAAA7D,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAKqK,MAAM,EAA7B,WACE,SAAC,EAAAlO,IAAD,CAAKmE,KAAM,GAAX,UACE,SAACqJ,GAAD,CACE5a,aAAwB,OAAXyD,QAAW,IAAXA,OAAA,EAAAA,EAAazC,UAAW,GACrC6Z,IAAKO,EACLzK,MAAOyK,EAASN,EAAOnK,WAG3B,SAAC,EAAAvD,IAAD,WACE,SAAC,EAAAmO,QAAD,CAASxR,KAAK,WAAW5H,MAAO,CAAEqJ,OAAQ,aAE5C,SAAC,EAAA4B,IAAD,CAAKmE,KAAM,GAAX,UACE,SAACqJ,GAAD,CACE5a,aAAwB,OAAX2D,QAAW,IAAXA,OAAA,EAAAA,EAAa3C,UAAW,GACrC6Z,IAAKQ,EACL1K,MAAO0K,EAASL,EAAOrK,gBCzBnC,MACA,GAAe,IAA0B,wDCjDzC,GAjBkB,EAChB6K,QAAAA,EAAU,EACVC,SAAAA,EAAW,OAMT,UAAC,EAAAzX,MAAD,CAAO/D,KAAMub,EAAb,WACE,SAAC,EAAAvX,WAAA,KAAD,CAAiB9B,MAAO,CAAE4X,SAAU,GAAI5B,MAAO,WAA/C,yBAGA,SAAC,EAAAjW,OAAD,CAAQrC,IAAK6b,GAAYzb,KAAMwb,OCZ/BE,GAAS,EACbtR,MAAAA,EACA5E,MAAAA,EACAwR,QAAAA,EACA2E,OAAAA,GAAS,MAQP,SAAC,EAAA3X,WAAA,KAAD,CACE9B,MAAO,CAAE6K,OAAQ,UAAWmL,MAAOyD,EAAS,UAAY,WACxD3E,QAAS,IAAMA,EAAQxR,GAFzB,SAIG4E,IA8DP,GAzDiB,EACf5E,MAAAA,EACA4L,SAAAA,MAME,UAAC,EAAApE,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAjB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,UAAC,EAAAtE,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAIqK,MAAM,EAA3B,WACE,SAAC,EAAAlO,IAAD,CAAK8D,KAAK,OAAV,UACE,SAAC,EAAAjN,WAAA,KAAD,CAAiB8F,KAAK,YAAY5H,MAAO,CAAE4X,SAAU,IAArD,mCAIF,SAAC,EAAA3M,IAAD,WACE,SAAC,EAAAyO,QAAD,CACEC,UAAU,QACVnC,OACE,mHAE8B,KAC5B,mBAAQxX,MAAO,CAAEgW,MAAO,WAAxB,SACU,IAAR1S,EADqC,UAN7C,UAYE,SAAC,EAAAuR,OAAD,CACEjN,KAAK,OACLgO,MAAM,SACN9X,KAAK,QACLC,MAAM,SAAC,EAAD,CAASV,KAAK,2CAM9B,SAAC,EAAA4N,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAtE,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAIqK,MAAM,EAAOnO,QAAQ,gBAA1C,SACG,CAAC,KAAO,KAAO,IAAM,IAAM,GAAGtL,KAAI,CAACyP,EAAG9O,KACrC,SAAC,EAAA4K,IAAD,WACE,SAACuO,GAAD,CACEtR,MAAa,IAANiH,EAAU,SAAkB,IAAJA,EAAF,IAC7B7L,MAAO6L,EACP2F,QAAS5F,EACTuK,OAAQtK,IAAM7L,KALRjD,YCzBtB,GAtCiB,EACfiD,MAAAA,EACA4L,SAAAA,MAME,UAAC,EAAApE,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAjB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,UAAC,EAAAtE,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAIqK,MAAM,EAA3B,WACE,SAAC,EAAAlO,IAAD,CAAK8D,KAAK,OAAV,UACE,SAAC,EAAAjN,WAAA,KAAD,CAAiB8F,KAAK,YAAY5H,MAAO,CAAE4X,SAAU,IAArD,8BAIF,SAAC,EAAA3M,IAAD,WACE,SAAC,EAAA2O,OAAD,CACE9b,KAAK,QACL+b,iBAAiB,SAAC,EAAD,CAASxc,KAAK,uBAC/Byc,mBAAmB,SAAC,EAAD,CAASzc,KAAK,qBACjCga,QAAS/T,EACT4L,SAAUA,YAKlB,SAAC,EAAAjE,IAAD,CAAKmE,KAAM,GAAX,UACE,UAAC,EAAAtN,WAAA,UAAD,CAAsB9B,MAAO,CAAE4X,SAAU,GAAImC,UAAW,WAAxD,WACE,SAAC,EAAD,CAAS1c,KAAK,oBADhB,uKCxBF2c,GAAO,WAUAC,IAAiB9D,EAAAA,GAAAA,kBAC3B,2BACDzX,MAAAA,IAAA,IAA0CgV,MAkB5C,IAXcgD,EAAAA,GAAAA,aAAY,CACxBrZ,KAAM2c,GACNrD,aApB0B,CAC1BjE,SAAU,IACViB,UAAU,GAmBVkD,SAAU,GACVC,cAAgBC,IACTA,EAAQC,QACXiD,GAAehD,WACf,CAACvV,GAASwV,QAAAA,MAAmBhY,OAAOgG,OAAOxD,EAAOwV,SAIxD,QC2BA,GArDiB,KACf,MAAMc,GAAWC,EAAAA,EAAAA,gBACX,SAAEvF,EAAF,SAAYiB,IAAalS,EAAAA,EAAAA,cAC5BC,GAAoBA,EAAMgS,WAU7B,OACE,UAAC,EAAA5I,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAI9D,QAAQ,MAAMD,MAAM,SAASoO,MAAM,EAAxD,WACE,SAAC,EAAAlO,IAAD,WACE,SAAC,GAAD,OAEF,SAAC,EAAAA,IAAD,WACE,SAAC,EAAAmO,QAAD,CAASxR,KAAK,WAAW5H,MAAO,CAAEka,QAAS,QAE7C,SAAC,EAAAjP,IAAD,WACE,SAAC,EAAAkP,QAAD,CACER,UAAU,cACVS,kBAAmB,CAAEC,MAAO,KAC5BvE,SACE,UAAC,EAAAhL,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAjB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAtN,WAAA,MAAD,CAAkBuN,MAAO,EAAzB,yBAEF,SAAC,EAAApE,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,CAAU9L,MAAOoP,EAAUxD,SAzBrBwD,GACXsF,EAASiC,GAAe,CAAEvH,SAAAA,UA0BvB,SAAC,EAAA0G,QAAD,CAASpZ,MAAO,CAAEsa,UAAW,EAAGC,aAAc,MAC9C,SAAC,EAAAtP,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,CAAU9L,MAAOqQ,EAAUzE,SA1BrByE,GACXqE,EAASiC,GAAe,CAAEtG,SAAAA,YA6B3B6G,QAAQ,QAjBV,UAmBE,SAAC,EAAA3F,OAAD,CACEjN,KAAK,OACLgO,MAAM,SACN9X,KAAK,QACLC,MAAM,SAAC,EAAD,CAASV,KAAK,+B,gBCjDhC,MAgGA,GA9Fe,EACb6R,SAAAA,EACA0F,SAAAA,GAAW,MAKX,MAAO6F,EAAeC,IAAoBvc,EAAAA,EAAAA,UAAmB,KACtDwc,EAASC,IAAczc,EAAAA,EAAAA,UAAS,KACjC,cAAEC,IAAkBC,EAAAA,EAAAA,YACpB,MAAEC,IAAUC,EAAAA,EAAAA,WAEZsc,GAAoBpc,EAAAA,EAAAA,cAAYC,UAEpC,MAAMoc,EAAmB5b,OAAOC,OAAOb,GACpCoB,KAAI,EAAGJ,OAAAA,EAAQC,OAAAA,KAAa,CAACD,EAAQC,KACrCwb,OACAC,QAAO,CAACC,EAAMC,EAAKC,IAASA,EAAKC,QAAQH,KAAUC,IAEhDG,EAAkBnc,OAAOC,OAAOb,GAAOoB,KAAI,EAAGL,SAAAA,KAAeA,IAa7Dic,SAX6B9b,QAAQC,IACzCqb,EAAiBpb,KAAIhB,MAAAA,IACnB,MAAM6c,QAAkBnd,EAAcQ,cAAcf,GAKpD,MAJa,CACXgB,QAAShB,EACTwZ,QAASmE,QAAQD,IAAcF,EAAgBI,SAAS5d,SAO3D6d,MAAK,CAACC,EAAOC,KACPD,EAAMtE,SAAWuE,EAAOvE,QAAgB,EACzCsE,EAAMtE,UAAYuE,EAAOvE,SAAiB,EACvC,IAER3X,KAAI,EAAGb,QAAAA,KAAcA,IAExB,OAAO6b,EAAiBY,KACvB,CAACld,EAAeE,KAEnBuB,EAAAA,EAAAA,YAAU,KACRgb,MACC,CAACA,IAEJ,MAAMgB,GAASpd,EAAAA,EAAAA,cAAYC,UACzB,IAAKic,GAAWA,EAAQ7a,OAlDZ,EAkD8B,OAAOoP,EAASuL,GAC1D,MACMxX,SADY7E,EAAcgB,KAAKub,IAElCK,QAAO,EAAGnc,QAAAA,KAAc4b,EAAcgB,SAAS5c,KAC/Ca,KAAI,EAAGb,QAAAA,KAAcA,IAOxB,OALA4b,EAAcxJ,SAASpT,IACrB,IAAIoF,EAAKwY,SAAS5d,IACbA,EAAYie,cAAcL,SAASd,EAAQmB,eAChD,OAAO7Y,EAAKF,KAAKlF,MAEZqR,EAASjM,KACf,CAAC0X,EAASzL,EAAU9Q,EAAeqc,IAMtC,OAJA5a,EAAAA,EAAAA,YAAU,KACRgc,MACC,CAACA,KAGF,SAAC,EAAAnN,KAAD,CAAMpR,UAAU,aAAasR,UAAW,CAAEsL,QAAS,GAAKvL,UAAU,EAAlE,UACE,SAAC,EAAAoN,MAAD,CACEC,YAAY,SACZ1Y,MAAOqX,EACP7c,KAAK,QACL6Q,UAAU,EACVsN,QACE,SAAC,EAAApH,OAAD,CACEjN,KAAK,OACL5H,MAAO,CAAEkc,aAAc,GACvBpe,KAAK,QACLgX,QAAS6F,EAAU,IAAMC,EAAW,IAAM,OAC1C7c,MACE,SAAC,EAAD,CAASV,KAAMsd,EAAU,gBAAkB,mBAE7C/F,SAAUA,IAGd1F,SAAWC,GACTyL,EAAWzL,EAAEzE,OAAOpH,OAEtBsR,SAAUA,OCxDlB,GAtCa,EACX/W,YAAAA,EACAiX,QAAAA,EACA2E,OAAAA,GAAS,MAOP,SAAC,EAAA/K,KAAD,CACEpR,UAAY,cAAYmc,EAAS,UAAY,IAC7C7K,UAAW,CAAEsL,QAAU,WAAWrP,OAAQ,WAC1C8D,SAAU8K,EACV3E,QAASA,EACTqH,WAAS,EALX,UAOE,SAAC,EAAArR,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,UACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,UAAC,EAAAvN,MAAD,CAAO/D,KAAM,GAAIkC,MAAO,CAAEoc,YAAa,GAAvC,WACE,SAAC,EAAD,CAAYve,YAAaA,EAAaC,KAAM,MAC5C,SAAC,EAAAgE,WAAA,KAAD,CAAiB9B,MAAO,CAAEqc,OAAQ,GAAlC,UACE,SAAC,EAAD,CAAYxe,YAAaA,OAE3B,SAAC,EAAAub,QAAD,CAASxR,KAAK,WAAW5H,MAAO,CAAEqc,OAAQ,MAC1C,SAAC,EAAAva,WAAA,KAAD,CACE8F,KAAK,YACL5H,MAAO,CAAEqc,OAAQ,EAAGzE,SAAU,IAFhC,UAIE,SAAC,EAAD,CAAU/Z,YAAaA,eC+DrC,GA/EsB,EACpByF,MAAAA,EACA4L,SAAAA,EACAoN,aAAAA,MAMA,MAAO7B,EAAeC,IAAoBvc,EAAAA,EAAAA,UAAmB,KACrDU,QAAS0d,GAAuBjZ,EAAMjC,UAAY,IACpD,MAAE/C,IAAUC,EAAAA,EAAAA,YACZ,YAAEiR,IAAgBnR,EAAAA,EAAAA,WAGlBme,GAA4B/d,EAAAA,EAAAA,cAC/BZ,GACMmB,EAAAA,QAAAA,UAAkBnB,GAChBqB,OAAOud,KAAKne,GAAO0c,QAAQ9J,IAChC,MAAM,OAAE5R,EAAF,OAAUC,GAAWjB,EAAM4S,GACjC,MAAO,CAAC5R,EAAQC,GAAQkc,SAAS5d,MAHS,IAM9C,CAACS,IAIGoe,GAASje,EAAAA,EAAAA,cACbC,MAAAA,IACE,MAAMkY,EAAgB4F,EAA0B3e,GAC1CyR,QAAiBE,EAAY3R,GACnC,OAAOqR,EAAS,CACd7N,SAAU,CACRxC,QAAShB,EACTyR,SAAAA,GAEFsH,cAAAA,MAGJ,CAAC4F,EAA2BtN,EAAUM,IAGxC,OACE,UAAC,EAAA1E,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAtN,WAAA,MAAD,CAAkBuN,MAAO,EAAzB,gCAEF,SAAC,EAAApE,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAgK,QAAD,CAASpZ,MAAO,CAAEqc,OAAQ,QAE5B,SAAC,EAAApR,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,CAAQF,SAAUwL,OAEpB,SAAC,EAAAzP,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAtE,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAK9O,MAAO,CAAEqJ,OAAQ,KAAO/L,UAAU,YAAzD,UACE,SAAC,EAAA2N,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAtE,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,SACG2L,EAAc/a,KAAI,CAAC7B,EAAawC,IAC/B,OAAIic,QAAJ,IAAIA,GAAAA,EAAcb,SAAS5d,GAAqB,MAE9C,SAAC,EAAAoN,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,MAAD,CAAU/F,OAAQ,GAAIsT,UAAQ,EAA9B,UACE,SAAC,GAAD,CACE9e,YAAaA,EACbiX,QAAS,IAAM4H,EAAO7e,GACtB4b,OAAQ8C,IAAuB1e,OALjBwC,iBCPtC,GA1DkB,EAChBiD,MAAAA,EACA4L,SAAAA,EACAoN,aAAAA,MAKK,IAAD,EACJ,MAAOnF,EAASyF,IAAcze,EAAAA,EAAAA,WAAS,GACjC0e,GAAUC,EAAAA,EAAAA,eACV,MAAEpb,IAAUqb,EAAAA,EAAAA,gBAClBld,EAAAA,EAAAA,YAAU,KACJsX,GAASzT,WAAWsZ,GAAAA,GAAY,OACnC,CAAC7F,IAEJ,MASMtZ,GAAmB,OAALyF,QAAK,IAALA,GAAA,UAAAA,EAAOjC,gBAAP,eAAiBxC,UAAW,GAEhD,OACE,UAAC,EAAA4W,SAAD,YACE,UAAC,EAAA5T,MAAD,CAAO7B,MAAO,CAAE6K,OAAQ,WAAaiK,QAAS,IAAM8H,GAAW,GAA/D,WACE,SAAC,EAAD,CAAY/e,YAAaA,KACzB,SAAC,EAAAiE,WAAA,KAAD,CAAiB8F,KAAK,YAAtB,UACE,SAAC,EAAD,CAAY/J,YAAaA,OAE3B,SAAC,EAAAub,QAAD,CAASxR,KAAK,WAAW5H,MAAO,CAAEoc,WAAY,SAEhD,SAAC,EAAA7E,MAAD,CACEJ,QAASA,EACTM,SAAU,IAAMmF,GAAW,GAC3BK,WAAW,SAAC,EAAD,CAAS5f,KAAK,UACzBqa,OAAQ,KACRwF,gBAAgB,EAChBC,UAAU,EANZ,UAQE,SAAC,EAAArS,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,UACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,CACEkN,aAAcA,EACdhZ,MAAOA,EACP4L,SAjCSkO,IACnBR,GAAW,GAGPlb,GAAOmb,EAAQQ,QAAQ,IAAKR,EAAQS,SAAU5b,MAAO,KAElDwN,EAASkO,gBC5BpB,IAAIG,GAUJ,MAiEA,IAjEqBngB,EAAAA,EAAAA,aACnB,EAEI8W,IAAAA,EACAsJ,QAAAA,EAAU,SACVtO,SAAAA,EAAW,YACR3R,GAKLC,KACI,IAAD,EACH,MAAO4F,EAAOqa,IAAYtf,EAAAA,EAAAA,UAAS,KAC5B0M,EAAQ6S,IAAavf,EAAAA,EAAAA,UAAwB,MAC9Cwf,GAAWrV,EAAAA,EAAAA,QAAO9K,GAGlBogB,GAAWnf,EAAAA,EAAAA,cACdmN,IACC,MAAMiS,EAAWnO,IACX6N,KACFO,aAAaP,IACbA,QAAY3f,GAEd6f,EAAS/N,GACT6N,GAAY7Z,YAAW,IAAM+Z,EAAS,KAAK,MAG7C,MADY,gBACHM,KAAKnS,GACVsI,GAAO8J,WAAWpS,GAAOoS,WAAW9J,EAAI+J,YACnCJ,EAAQ,sBACVL,EAAQ5R,GAHYiS,EAAQ,uBAKrC,CAAC3J,EAAKsJ,IAOR,OAFe,OAAX3S,IAAyB,OAAR8S,QAAQ,IAARA,GAAA,UAAAA,EAAUlV,eAAV,SAAmByV,kBAAkBrT,EAAQA,KAGhE,SAAC,EAAA6O,QAAD,CACElC,OACE,UAAC,EAAA3V,MAAD,YACE,SAAC,EAAD,CAASxE,KAAK,YACb+F,KAGL+T,UAAW/T,EAPb,UASE,SAAC,EAAA2Y,MAAD,IACMxe,EACJ2R,SAAWC,IACTD,EAASC,GACTuO,EAAUvO,EAAEzE,OAAOyT,gBACnBP,EAASzO,EAAEzE,OAAOpH,OAAS,KAE7B9F,IAAKmgB,SCtDf,MAAMS,GAAS,CACbC,MAAOC,WACP9S,IAAK8S,uDACLC,OAAQD,6DCqBV,GAhCgC,CAI9BE,OAAQ,CACNC,KAAM,gCACNC,YAAa,8CACbC,cAAe,gDAMjBC,QAAS,CACPH,KAAM,iCACNC,YAAa,8CACbC,cAAe,gDAMjBE,QAAS,CACPJ,KAAM,sCACNC,YAAa,8CACbC,cAAe,iDCGnB,GA7BgC,CAI9BH,OAAQ,CACNM,WAAY,+CACZC,WAAY,gDAMdH,QAAS,CACPE,WAAY,+CACZC,WAAY,gDAMdF,QAAS,CACPC,WAAY,+CACZC,WAAY,gDCGhB,GA1BgC,CAI9BP,OAAQ,CACNQ,gBAAiB,+CAMnBJ,QAAS,CACPI,gBAAiB,+CAMnBH,QAAS,CACPG,gBAAiB,gDCIrB,GAvBoC,CAIlCR,OAAQ,CACNS,YAAa,mBAMfL,QAAS,CACPK,YAAa,mBAMfJ,QAAS,CACPI,YAAa,oBCVjB,GAXgB,CACdC,SLiB8B,CAI9BC,YAAa,IACRf,IAMLgB,QAAS,IACJhB,IAMLiB,WAAY,IACPjB,KKpCckB,EAAAA,IACnBC,IAAKA,GAAI9Y,EAAAA,IACTwL,KAAMA,GAAKxL,EAAAA,IACX+Y,SAAUA,GAAS/Y,EAAAA,IACnB6K,MAAOA,GAAM7K,EAAAA,KCeFgZ,IAAgBtJ,EAAAA,GAAAA,kBAK1B,qBACDzX,OAAS0X,YAAAA,EAAaC,MAAAA,KAAU5J,IAAa6J,SAAAA,MAC3C,MACElV,KAAOmV,SAAUE,GACjBlV,KAAOgV,SAAUC,IACfF,IACA3P,OAAO8F,EAAQT,QAAU,IAAGS,EAAQT,OAAS,IACjD,MAAMuK,EAAWF,EAAQ,EAAID,EAAcK,EAAc,EAAID,EAC7D,MAAO,IAAK/J,EAAS8J,SAAAA,MAmBzB,IAXcG,EAAAA,GAAAA,aAAY,CACxBrZ,KAtCW,MAuCXsZ,aAtC0B,CAC1B3K,OAAQ,GACR3K,SAAU,CACRxC,QAAS,GACTyQ,SAAU,GAEZrB,eAAgB,GAChB2I,cAAe,GACfL,SAAU,GA+BVM,SAAU,GACVC,cAAgBC,IACTA,EAAQC,QACXyI,GAAcxI,WACd,CAACvV,GAASwV,QAAAA,MAAmBhY,OAAOgG,OAAOxD,EAAOwV,SAIxD,QCrDMwI,GAAe,CACnBzR,eAAgB,GAChB2I,cAAe,IAOJ+I,GAAoB9hB,IAC/B,MAAM,OAAEkS,IAAWG,EAAAA,EAAAA,cACb,cAAE9R,IAAkBC,EAAAA,EAAAA,YACpB,MAAEC,IAAUC,EAAAA,EAAAA,YACX6e,EAAewC,IACpBzhB,EAAAA,EAAAA,UAAwBuhB,IAEpBG,GAAmBphB,EAAAA,EAAAA,cAAYC,UACnC,IAAKM,EAAAA,QAAAA,UAAkBnB,KAAiBqB,OAAOud,KAAKne,GAAOwB,OACzD,OAAO8f,EAAiBF,IAE1B,MAAMre,QAAiBjD,EAAcQ,cAAcf,GACnD,IAAKwD,EAAU,OAAOue,EAAiBF,IACvC,MAAM,KAAEtL,GAASC,OAAOC,OAElBrG,QAAuBmG,EAAKK,wBAChC1E,EAAOlR,QACPhB,GAGI+Y,EAAgB1X,OAAOud,KAAKne,GAAO0c,QAAQ9J,IAC/C,MAAM,OAAE5R,EAAF,OAAUC,GAAWjB,EAAM4S,GACjC,MAAO,CAAC5R,EAAQC,GAAQkc,SAAS5d,MAEnC+hB,EAAiB,CACf3R,eAAAA,EACA5M,SAAAA,EACAuV,cAAAA,MAED,CAAC/Y,EAAaS,EAAOF,EAAe2R,EAAOlR,UAM9C,OAJAgB,EAAAA,EAAAA,YAAU,KACRggB,MACC,CAACA,IAEGzC,GC2DT,GAzFY,KAAO,IAAD,EAChB,MAAMpF,GAAWC,EAAAA,EAAAA,gBACX,OAAElI,IAAWG,EAAAA,EAAAA,cAEjB3O,KAAK,OAAEyK,EAAF,eAAUiC,EAAV,SAA0B5M,EAA1B,cAAoCuV,GACzCxV,KACEC,UAAYxC,QAASihB,MAErBre,EAAAA,EAAAA,cAAaC,GAAoBA,KAC/B,MAAEA,IAAUqb,EAAAA,EAAAA,gBACVnN,QAASmQ,GAAejQ,GAAkB7B,GAC5C+R,EAAmBL,GAAiBpc,GAAAA,KAAAA,YACpC0c,EAAU,OAAGve,QAAH,IAAGA,OAAH,EAAGA,EAAOwP,aAG1BrR,EAAAA,EAAAA,YAAU,KACJb,EAAAA,QAAAA,UAAkBiP,IAAmBjP,EAAAA,QAAAA,UAAkBihB,IAE3DjI,EAASyH,GAAcO,MACtB,CAAC/R,EAAgB+J,EAAUiI,EAAYD,IAG1C,MAAM5C,GAA+BtJ,EAAAA,EAAAA,UACnC,MAASzS,SAAAA,EAAUuV,cAAAA,KACnB,CAACvV,EAAUuV,IA6Bb,OACE,UAAC,EAAA9L,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAjB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAtN,WAAA,KAAD,oBAEF,SAAC,EAAAmJ,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,CACE4M,YAAY,IACZ1Y,MAAO0I,EACPwR,QAlCU5R,GAChBoM,EAASyH,GAAc,CAAEzT,OAAQJ,EAAKwK,aAAa,KAkC7CtY,KAAK,QACLoiB,QACE,SAAC,GAAD,CACE5D,aAAc,CAACwD,GACfxc,MAAO8Z,EACPlO,SApCYxQ,MAAAA,IACtB,MAAM,KAAE0V,GAASC,OAAOC,QAChBzV,QAAShB,GAAgBuf,EAAc/b,UAAY,GAC3D,IAAKrC,EAAAA,QAAAA,UAAkBnB,GACrB,OAAOma,EACLyH,GAAc,CAAEzT,OAAQ,GAAIoK,aAAa,KAASgH,KAEtD,MAAMnP,QAAuBmG,EAAKK,wBAChC1E,EAAOlR,QACPhB,GAEFma,EACEyH,GAAc,CACZzT,OAAQ,GACRoK,aAAa,EACbnI,eAAAA,KACGmP,aAyBL,SAAC,EAAAnS,IAAD,CAAK8D,KAAK,UACV,SAAC,EAAA9D,IAAD,WACE,UAAC,EAAApJ,MAAD,CAAOvE,UAAU,UAAjB,WACE,SAAC,EAAAwE,WAAA,KAAD,CAAiB8F,KAAK,YAAtB,yBACA,SAAC,EAAA9F,WAAA,KAAD,CAAiB8F,KAAK,YAAtB,SACGlB,EAAQqZ,GAAY5V,OAAO,eAE9B,SAAC,EAAArI,WAAA,KAAD,CAAiB8F,KAAK,YAAtB,UACE,SAAC,EAAD,CAAY/J,aAAa,UAAAuf,EAAc/b,gBAAd,eAAwBxC,UAAW,gB,4BC5EjE,MCjBMshB,GAAuC,CAClDtB,QAAS,8CACTD,QAAS,+CACTJ,OAAQ,gDAGG4B,GAA6C,CACxDvB,QAAS,8CACTD,QAAS,+CACTJ,OAAQ,gDCCG6B,GAAgB,IACRC,GAAAA,EAAAA,IAAY,YAAc,UA4BlCC,GAAwB7hB,MAAAA,IACnC,MAAM8hB,EAVqB,MAC3B,MAAMC,EAAyBJ,KAC/B,MAAO,CACLK,QAASC,GAAAA,GACTC,mBAAoBR,GAAyBK,GAC7CI,cAAeV,GAAmBM,KAKjBK,GACnB,OAAOC,EAAAA,GAAAA,IACL1M,OAAOC,OAAOF,KAAK4M,WACnBR,EAAWI,mBACX/iB,ICxCEojB,GAAiB,WAGrB3P,OAAO,YAAE2N,KACP1b,GA4CJ,GA1C0B,KACxB,MAAO2d,EAAmBC,IAAwBhjB,EAAAA,EAAAA,WAAS,GACrD0e,GAAUC,EAAAA,EAAAA,eAEd1b,KAAK,SAAEC,KACLI,EAAAA,EAAAA,cAAaC,GAAoBA,IAC/B0f,EAAQ,IAAIC,iBAAgBtE,EAAAA,EAAAA,eAAclB,SACxChd,QAAShB,GAAgBwD,GAAY,IAE7CxB,EAAAA,EAAAA,YAAU,KACP,WACC,IAAKb,EAAAA,QAAAA,UAAkBnB,GAAc,OAAOsjB,GAAqB,GACjE,MAAMD,QAA0BX,GAAsB1iB,GAC/CsjB,EAAqBD,IAH7B,KAKA,CAACrjB,IAOJ,OAAKqjB,GAEH,UAAC,EAAArf,MAAD,CAAO/D,KAAM,EAAb,WACE,SAAC,EAAAwjB,IAAD,CACEthB,MAAO,CACLqc,OAAQ,EACRzP,aAAc,EACdoJ,MAAOlP,EAAYma,IACnBpW,OAAQ,WAEVmL,MAAOlP,EAAYma,GAAgB,IACnCnM,QAhBiB,KACrBsM,EAAM3d,IAAI,eAAgB5F,GAC1Bgf,EAAQ9Z,KAAM,GAAEkc,MAAiBmC,EAAMnD,aAMrC,8BAYA,SAAC,EAAAnc,WAAA,KAAD,CAAiB8F,KAAK,YAAtB,0BAf2B,OClB/BqK,MAAM,WAAE6M,KACNvb,GAwHJ,GAtHY,KAAO,IAAD,EAChB,MAAMyU,GAAWC,EAAAA,EAAAA,gBAEflI,QAAUlR,QAASmR,EAAX,SAA0BC,KAChCC,EAAAA,EAAAA,cAEF9O,KAAO4K,OAAQ0F,EAAV,eAAqBzD,EAArB,SAAqC5M,EAArC,cAA+CuV,GACpDrV,KACEF,UAAYxC,QAAS0iB,MAErB9f,EAAAA,EAAAA,cAAaC,GAAoBA,KAC7BsK,OAAQ4D,GAAYE,GAAkB7B,GACxC+R,EAAmBL,GAAiBb,KACpC,MAAEpd,IAAUqb,EAAAA,EAAAA,eACZkD,EAAU,OAAGve,QAAH,IAAGA,OAAH,EAAGA,EAAOwP,aAClBrS,QAAShB,EAAX,SAAwByR,GAAajO,GAG3CxB,EAAAA,EAAAA,YAAU,KACJb,EAAAA,QAAAA,UAAkBiP,IAAmBjP,EAAAA,QAAAA,UAAkBihB,IAE3DjI,EAAS9B,GAAc8J,MACtB,CAAC/R,EAAgB+J,EAAUiI,EAAYD,IAG1C,MAAM5C,GAA+BtJ,EAAAA,EAAAA,UACnC,MAASzS,SAAAA,EAAUuV,cAAAA,KACnB,CAACvV,EAAUuV,IAIPmJ,GAAajM,EAAAA,EAAAA,UAAQ,KACzB,GAAIjW,IAAgBkW,EAAAA,aAClB,OAAOtM,EAAAA,MAAAA,aAAmBmI,EAASN,GAErC,MAAM2E,EAAcxM,EAAAA,MAAAA,WAAiB,IAAM6H,GACrC4E,EAAMjE,EAAWL,EAAUqE,EACjC,OAAIC,GAAOtE,EAAgBnI,EAAAA,MAAAA,aAAmBmI,EAASN,GAChD7H,EAAAA,MAAAA,aAAmByM,EAAK5E,KAC9B,CAACM,EAASN,EAAUW,EAAUpS,IAG3B+f,EAAYhS,GAChBoM,EAAS9B,GAAc,CAAElK,OAAQJ,EAAKwK,aAAa,KA0BrD,OACE,UAAC,EAAAtL,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAjB,WACE,SAAC,EAAA7D,IAAD,CAAK8D,KAAK,OAAV,UACE,SAAC,EAAAjN,WAAA,KAAD,sBAEF,SAAC,EAAAmJ,IAAD,WACE,SAAC,GAAD,OAEF,SAAC,EAAAA,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,CACE4M,YAAY,IACZ1Y,MAAOoO,EACP8L,QAASI,EACT9f,KAAK,QACLoiB,QACE,SAAC,GAAD,CACE5D,aAAc,CAACiF,GACfje,MAAO8Z,EACPlO,SAvCYxQ,MAAAA,IACtB,MAAM,KAAE0V,GAASC,OAAOC,QAChBzV,QAAShB,GAAgBuf,EAAc/b,UAAY,GAC3D,IAAKrC,EAAAA,QAAAA,UAAkBnB,GACrB,OAAOma,EACL9B,GAAc,CAAElK,OAAQ,GAAIoK,aAAa,KAASgH,KAEtD,MAAMnP,QAAuBmG,EAAKK,wBAChCzE,EACAnS,GAEF,OAAOma,EACL9B,GAAc,CACZlK,OAAQ,GACRoK,aAAa,EACbnI,eAAAA,KACGmP,QA0BDnB,QACE,SAAC,EAAApH,OAAD,CACEjN,KAAK,OACL9J,KAAK,QACLkC,MAAO,CAAE4X,SAAU,GAAIsE,aAAc,GACrCpH,QAlDE,IAAM8I,EAASmC,GA8CnB,sBAWN,SAAC,EAAA9U,IAAD,CAAK8D,KAAK,UACV,SAAC,EAAA9D,IAAD,WACE,UAAC,EAAApJ,MAAD,CAAOvE,UAAU,UAAjB,WACE,SAAC,EAAAwE,WAAA,KAAD,CAAiB8F,KAAK,YAAtB,yBACA,SAAC,EAAA9F,WAAA,KAAD,CAAiB8F,KAAK,YAAtB,SACGlB,EAAQqZ,GAAc,GAAG5V,OAAO,eAEnC,SAAC,EAAArI,WAAA,KAAD,CAAiB8F,KAAK,YAAtB,UACE,SAAC,EAAD,CAAY/J,aAAa,UAAAuf,EAAc/b,gBAAd,eAAwBxC,UAAW,gBC9HlEmb,GAAO,QACPrD,GAAsB,CAC1B3K,OAAQ6D,OAAO,GACf2R,QAAS,GACTlP,KAAM,IAMKmP,IAActL,EAAAA,GAAAA,kBAIxB,qBAAsBzX,MAAO4S,GAASgF,SAAAA,MACvC,MAAQhF,MAAOoQ,GAAcpL,IAC7B,OAAKhF,EACE,IAAKoQ,KAAcpQ,GADP,IAAKoQ,MAmB1B,IAXchL,EAAAA,GAAAA,aAAY,CACxBrZ,KAAM2c,GACNrD,aAFwB,GAGxBE,SAAU,GACVC,cAAgBC,IACTA,EAAQC,QACXyK,GAAYxK,WACZ,CAACvV,GAASwV,QAAAA,MAAmBhY,OAAOgG,OAAOxD,EAAOwV,SAIxD,QCoHA,GAzIkB,EAAGmC,QAAAA,EAAU,OAAgC,IAAD,IAC5D,MAAMrB,GAAWC,EAAAA,EAAAA,gBACV0J,EAAWC,IAAgBzjB,EAAAA,EAAAA,UAAqB,CACrDmU,KAAM,GACNkP,QAAS,GACTxV,OAAQ6D,OAAO,MAETzO,IAAKoL,EAASjL,IAAKkL,IAAYhL,EAAAA,EAAAA,cAAaC,GAAoBA,KAClE,MAAEpD,IAAUC,EAAAA,EAAAA,YACZ,MAAEmD,IAAUqb,EAAAA,EAAAA,eACZ7L,EAAW,OAAGxP,QAAH,IAAGA,OAAH,EAAGA,EAAOwP,YACrB2Q,EAAa,OAAGngB,QAAH,IAAGA,OAAH,EAAGA,EAAOmgB,cAKvBC,GAAWrjB,EAAAA,EAAAA,cAAYC,UAC3B,MAAQsN,OAAQ0F,EAAW6E,SAAUwL,KAAgBC,GAAYxV,GACzDR,OAAQgG,EAAWuE,SAAU0L,KAAgBC,GAAYzV,EAC3DT,EAAS+V,EAAcE,EAAcvQ,EAAYM,EACjDmQ,EAAaJ,EAAcE,EAAcxC,GAAgBvJ,SACzD8B,EAAS9B,GAAc,IAAKgM,EAASlW,OAAQ,GAAIqK,OAAO,WACxD2B,EAASyH,GAAc,IAAKuC,EAAShW,OAAQ,GAAIqK,OAAO,WACxD2B,EAASmK,EAAW,CAAEnW,OAAAA,EAAQoK,aAAa,OAChD,CAAC4B,EAAUvL,EAASD,IAKjB4V,GAAY3jB,EAAAA,EAAAA,cAAYC,UAC5B,MACEkY,cAAeyL,EACfhhB,UAAYxC,QAAS8C,GACrBqK,OAAQ0F,EACR6E,SAAUwL,GACRvV,GAEFoK,cAAe0L,EACfjhB,UAAYxC,QAAS+C,GACrBoK,OAAQgG,EACRuE,SAAU0L,GACRxV,EAIJ,IAAIkV,EAAwB,CAAErP,KAAM,GAAIkP,QAAS,GAAIxV,OAAQ6D,OAAO,IAEpE,IACIlJ,OAAO+K,KAAe/K,OAAOqL,KAC9BhT,EAAAA,QAAAA,UAAkB2C,KAClB3C,EAAAA,QAAAA,UAAkB4C,KAClBygB,EAAiBviB,SACjBwiB,EAAiBxiB,OAElB,OAAO8hB,EAAaD,GAGtB,IAAIY,EAAY3R,GvCjCWtS,CAAAA,IAC7B,MAAMuS,EAAQ,IAAIhN,IAIlB,IAAK,MAAMqN,KAAe5S,EAAO,CAC/B,MAAMkkB,EAAOlkB,EAAM4S,GA5CM,KA6CjB,OAAJsR,QAAI,IAAJA,OAAA,EAAAA,EAAM9gB,QACI,CAAC8gB,EAAKljB,OAAQkjB,EAAKjjB,QAC3B0R,SAASZ,IAAU,IAAD,EACjBQ,EAAM1M,IAAIkM,IAAOQ,EAAMpN,IAAI4M,EAAM,IAAIxM,KAC1C,UAAAgN,EAAMjN,IAAIyM,UAAV,SAAiB5M,IAAIyN,EAAasR,MAGtC,OAAO3R,GuCoBH4R,CAAenkB,GACfqD,EACAC,GAGF,OAAK2gB,EAAUziB,QAEX+hB,IACFU,EAAYA,EAAUvH,QACnB1J,GACkB,IAAjBA,EAAMxR,QAAgBwR,EAAM,GAAGrS,SAASJ,UAAYqS,KAIxDyQ,EADEM,EAAcF,EvCWc,EAClChR,GACE/E,OAAQ0F,EAAWrQ,SAAAA,MAErB,IAAIsgB,EAAwB,CAAErP,KAAM,GAAIkP,QAAS,GAAIxV,OAAQ6D,OAAO,IAWpE,OAVAkB,EAAOE,SAASK,IACd,IAAItF,EAASvE,EAAAA,MAAAA,WAAiBiK,EAAWrQ,EAASiO,UAClD,MAAMkS,EAAU,IAAIkB,MACpBpR,EAAML,SAASI,IACbmQ,EAAQze,KAAKiJ,GACbA,EAASyF,GAAMzF,EAAQqF,MAEzB,MAAMsR,EAAehB,EAAU3V,OAC3BA,EAAS2W,IAAchB,EAAY,CAAErP,KAAMhB,EAAOkQ,QAAAA,EAASxV,OAAAA,OAE1D2V,GuCzBSiB,CAAqBL,EAAW/V,GvC4Bd,EAClCuE,GACE/E,OAAQgG,EAAW3Q,SAAAA,MAErB,IAAIsgB,EAAwB,CAAErP,KAAM,GAAIkP,QAAS,GAAIxV,OAAQ6D,OAAO,IACpE,IAAK,MAAMyB,KAASP,EAAQ,CAC1B,MAAM8R,EAAgB,IAAIvR,GAAO3R,UACjC,IAAIqM,EAASvE,EAAAA,MAAAA,WAAiBuK,EAAW3Q,EAASiO,UAClD,MAAMkS,EAAU,IAAIkB,MAEpB,IAAK,MAAMrR,KAAOwR,EAAe,CAE/B,GADA7W,EAASkG,GAAalG,EAAQqF,GAC1BrF,GAAU6D,OAAO,GAAI,MACzB2R,EAAQlU,QAAQtB,GAElB,GAAIA,GAAU6D,OAAO,GAAI,SACzB,MAAMiT,EAAenB,EAAU3V,QAC3BA,EAAS8W,IAAiBA,KAC5BnB,EAAY,CAAErP,KAAMhB,EAAOkQ,QAAAA,EAASxV,OAAAA,IAExC,OAAO2V,GuC/CYoB,CAAqBR,EAAW9V,GAC1CmV,EAAaD,IAXUC,EAAaD,KAY1C,CAAClV,EAASD,EAASqV,EAAe3Q,EAAa5S,IAE5C0kB,GAAWvkB,EAAAA,EAAAA,cAAY,KAC3B,MAAMsjB,EAAcvV,EAAQ+J,SACtB0L,EAAcxV,EAAQ8J,SACxB0L,EAAcF,GAChB/J,EACEyH,GAAc,CACZzT,OAAQvE,EAAAA,MAAAA,aACNka,EAAU3V,OACVS,EAAQpL,SAASiO,aAKrByS,EAAcE,GAChBjK,EACE9B,GAAc,CACZlK,OAAQvE,EAAAA,MAAAA,aACNka,EAAU3V,OACVQ,EAAQnL,SAASiO,aAKzB0I,EAASyJ,GAAY,IAAKE,OACzB,CACDlV,EAAQ8J,SACRoL,EACAnV,EAAQ+J,SACRyB,EAJC,UAKDxL,EAAQnL,gBALP,aAKD,EAAkBiO,SALjB,UAMD7C,EAAQpL,gBANP,aAMD,EAAkBiO,WAWpB,OARAzP,EAAAA,EAAAA,YAAU,KACRmjB,MACC,CAACA,KAEJnjB,EAAAA,EAAAA,YAAU,KACRuiB,MACC,CAACA,KAGF,UAAC,EAAAtX,IAAD,CAAKgE,OAAQ,CAACuK,EAASA,GAAUrO,QAAQ,SAAzC,WACE,SAAC,EAAAC,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,OAEF,SAAC,EAAAnE,IAAD,WACE,SAAC,EAAA4J,OAAD,CACE/W,KAAK,QACLC,MAAM,SAAC,EAAD,CAASV,KAAK,wBACpByX,QAASgN,OAGb,SAAC,EAAA7W,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,UCrIR,GAjBiB,KAEb,UAAC,EAAAtE,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAtE,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAI9D,QAAQ,MAAMD,MAAM,SAASoO,MAAM,EAAxD,UACE,SAAC,EAAAlO,IAAD,WACE,SAAC,GAAD,WAIN,SAAC,EAAAA,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,SCQR,GAlBa,KAET,UAAC,EAAAtE,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAV,KAAD,CAAMC,UAAU,EAAOrR,UAAU,YAAjC,UACE,SAAC,GAAD,SAGJ,SAAC,EAAA2N,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,OAEF,SAAC,EAAAnE,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,SCfF6T,GAAyC,CAC7CC,QAAS,CAAC,GAAI,IAAK,IACnBC,QAAS,CAAC,IAAK,IAAK,GACpB/f,MAAO,CAAC,IAAK,GAAI,IACjBggB,OAAQ,CAAC,IAAK,GAAI,KAwBpB,GArBkB,EAAGC,IAAAA,MACnB,MAAMC,EAAetc,IACnB,IAAIgP,EAAQiN,GAAaI,GACzB,MAAQ,QAAOrN,EAAM,QAAQA,EAAM,OAAOA,EAAM,MAAMhP,GAAW,MAGnE,OACE,SAAC,EAAAsa,IAAD,CACEthB,MAAO,CACLqc,OAAQ,EACRzP,aAAc,EACdoJ,MAAOsN,IACPC,cAAe,cAEjBvN,MAAOsN,EAAY,IAPrB,SASGD,KClBDG,GAAgB,eAETC,GAAiB,CAC5B,CACEjM,MAAO,OACPkM,UAAW,QAEb,CACElM,MAAO,cACPkM,UAAW,gBACXC,OAASC,IACP,UAAC,EAAA/hB,MAAD,CAAOkJ,MAAM,WAAb,WACE,SAAC,EAAAjJ,WAAA,KAAD,CACEgT,QAAS,IAAMT,OAAOe,KAAK7O,EAASqd,GAAO,UAC3C5jB,MAAO,CAAE6jB,WAAY,IAAKhZ,OAAQ,WAFpC,SAIGzE,EAAewd,EAAM,EAAG,UAE3B,SAAC,EAAA/O,OAAD,CACEjN,KAAK,OACL9J,KAAK,QACLgX,QAAS,IAAMT,OAAOe,KAAK7O,EAASqd,GAAO,UAC3C7lB,MAAM,SAAC,EAAD,CAASV,KAAK,uBAM5B,CACEma,MAAO,MACPkM,UAAW,MACXC,OAAQ,CAACC,EAAcE,IACpBA,EAAOC,MAGN,UAAC,EAAAliB,MAAD,CAAO/D,KAAM,EAAb,WACE,SAAC,EAAD,CAAYD,YAAaimB,EAAOC,OAC/Brd,EAAQod,EAAOE,YAAY7Z,OAAOqZ,KACnC,SAAC,EAAD,CAAY3lB,YAAaimB,EAAOC,UALlC,MASN,CACEvM,MAAO,MACPkM,UAAW,MACXC,OAAQ,CAACC,EAAcE,IACpBA,EAAOG,IAGN,UAAC,EAAApiB,MAAD,CAAO/D,KAAM,EAAb,WACE,SAAC,EAAD,CAAYD,YAAaimB,EAAOG,KAC/Bvd,EAAQod,EAAOI,UAAU/Z,OAAOqZ,KACjC,SAAC,EAAD,CAAY3lB,YAAaimB,EAAOG,QALlC,MASN,CACEzM,MAAO,SACPkM,UAAW,SACXrJ,MAAO,IACPsJ,OAAQ,CAACC,EAAcE,KAAgB,SAAC,GAAD,CAAWT,IAAKS,EAAOK,W,uCCnE3D,MAAMC,GAAU,cAAD,KACpBC,UAAoB,GADA,KAGpBC,iBAHoB,OAKpBC,UAAoB,GALA,KAOpBC,UAAoB,EAPA,KASpBpiB,KAAe,EATK,KAWpBqiB,MAAgB,GAXI,KAapBC,WAAqB,GAbD,KAepBC,gBAAyC,GAfrB,KAiBpBC,gBAAyC,IAGpC,MAAMC,GAAY,cAAD,KACtBhmB,QAAkB,GADI,KAKtBwR,KAAe,GALO,KAOtBf,SAAmB,EAPG,KAStBwV,WAAqB,IATC,KAWtBC,YAAsB,KAQjB,MAAMC,GAAgB,cAAD,KAC1BC,YAD0B,OAG1BC,iBAH0B,OAK1BlZ,OAAiB,K,gBClCnB,MAAMmZ,GAAgB,IAGf,MAAMC,GAAQ,cAAD,KACVC,KAAmBhR,OAAOC,OAAOF,KAAK4M,WAIjB,sBAC3BniB,EACAymB,EACApjB,EAAgBijB,KAEZjjB,EAAQijB,KAAejjB,EAAQijB,IACnC,MAAM5b,EAAiD,CACrDrH,MAAOA,EACPqjB,OAAQD,GAEV,OAAO3iB,KAAK0iB,KAAKG,kCAAkC3mB,EAAS0K,GAGzB,8BAACkc,GACpC,IAAIC,EAAsD,GAG1D,MAAMC,EAAoB,GAC1B,IAAK,IAAIC,EAAS,EAAGA,GAAUH,EAAW3lB,OAzBpB,IAyBoC8lB,IAAU,CAClE,MAAMC,EA1Bc,IA0BPD,EACPE,EAAkBL,EAAWM,MAAMF,EAAMA,EA3B3B,KA4BpBF,EAAkB5iB,KAChBJ,KAAK0iB,KAAKW,+BAA+BF,IAI7C,MAAMG,QAAoBzmB,QAAQC,IAAIkmB,GACtC,IAAK,MAAMO,KAAcD,EAEvBP,EAAwBA,EAAsBS,OAAOD,GAEvD,OAAOR,EAGc,wBACrBrB,EACA9a,GAEA,MAAM6c,GAAc,IAAIlgB,MAAOC,UAAY,IAC3C,IAAI,WAAEkgB,EAAF,SAAcC,EAAd,cAAwBhB,EAAxB,MAAuCpjB,GAAUqH,EACrD8c,EAAanf,KAAKC,MAAMkf,GAAc,GACtCC,EAAWpf,KAAKC,MAAMmf,GAAYF,GAElC,MAAMG,EAAmB,IAAIC,GAAAA,UAAUnC,GACvC,IAAIoB,EAAuB,GACvBgB,GAAS,EAEb,MAAQA,GAAQ,CACd,MAAMC,QACE/jB,KAAKgkB,gBAAgBJ,EAAkBjB,EAAepjB,GAC9D,GAAI,OAACwkB,QAAD,IAACA,IAAAA,EAAyB5mB,QAAU2mB,EAAQ,MAChD,IAAK,MAAMG,KAAQF,EAAyB,CAC1C,MAAMlC,EAAYoC,EAAKpC,UACvB,GAAKA,KAAaA,EAAY8B,GAA9B,CACA,GAAI9B,EAAY6B,EAAY,CAC1BI,GAAS,EACT,MAEFnB,EAAgBsB,EAAKrC,UACrBkB,EAAW1iB,KAAK6jB,EAAKrC,YAGvB,GAAIriB,GAASujB,EAAW3lB,QAAUoC,EAAO,MACzC,IAA2B,OAAvBwkB,QAAuB,IAAvBA,OAAA,EAAAA,EAAyB5mB,QAASqlB,GAAe,MAGvD,aADoCxiB,KAAKkkB,wBAAwBpB,ICnF9D,IAAKqB,IAAZ,SAAYA,GAAAA,EAAAA,SAAAA,WAAZ,CAAYA,KAAAA,GAAAA,KCEZ,MAAMC,GAAyB,IAExB,IAAKC,IAAZ,SAAYA,GAAAA,EAAAA,IAAAA,WAAAA,EAAAA,oBAAAA,sBAAZ,CAAYA,KAAAA,GAAAA,KAKL,MAAMC,GAAY,cAAD,KACdC,cAAuB,IAAIhhB,MAAOihB,UAE1CC,gBAAgBF,GACdvkB,KAAKukB,aAAeA,EAGJ,mBAACG,GACjB,MAAMC,EAAO,IAAIL,GACXC,EAAeG,EAAUN,GAE/B,OADAO,EAAKF,gBAAgBF,GACdI,EAGK,eAACC,GACb,MAAMD,EAAO,IAAIL,GACXC,EAAe9Z,GAAAA,CAAOma,EAAKP,GAAWQ,KAAKL,UAEjD,OADAG,EAAKF,gBAAgBF,GACdI,EAGS,mBAACG,EAAiBC,GAClC,MAAMC,EAAkB,GACxB,IAAIC,EAAWX,GAAWY,QAAQJ,GAClC,MAAMK,EAASb,GAAWY,QAAQH,GAClC,KAAOE,EAASL,OAASO,EAAOP,OAC9BI,EAAM5kB,KAAK6kB,EAASL,OACpBK,EAAWA,EAASG,SAEtB,OAAOJ,EAGTxd,OAAO6d,GACL,MAAMV,EAAO,IAAIphB,KAAKvD,KAAKukB,cAC3B,OAAO9Z,GAAAA,CAAOka,GAAMnd,OAAO6d,GAG7BC,YAAYC,EAAoB,GAC9B,MAAMhB,EAAe9Z,GAAAA,CAAOzK,KAAKukB,cAC9B3Z,SAAS2a,EAAW,QACpBf,UAEH,OADaF,GAAWkB,YAAYjB,EAAeH,IAIrDgB,OAAOG,EAAoB,GACzB,MAAMhB,EAAe9Z,GAAAA,CAAOzK,KAAKukB,cAC9BtkB,IAAIslB,EAAW,QACff,UAEH,OADaF,GAAWkB,YAAYjB,EAAeH,IAIrDM,UACE,OACG1kB,KAAKukB,aAAgBvkB,KAAKukB,aAAeH,IAC1CA,GAIJQ,MACE,OAAO5gB,OAAOhE,KAAKwH,OAAO6c,GAAWQ,MAG3B,aAACrd,EAAiB6c,GAAWQ,KACvC,OAAOpa,GAAAA,GAASjD,OAAOA,I,uBCrE3B,MAAM,OAAEie,IAAWC,EAAQ,OAErBC,GAA+B,CAAE9lB,IAAK,OAAQoF,KAAM,MAEnD,IAAK2gB,IAAZ,SAAYA,GAAAA,EAAAA,MAAAA,OAAZ,CAAYA,KAAAA,GAAAA,KAIZ,MAAMC,GAA8C,CAClD,EAAGD,GAAeE,OAGL,MAAMC,WCMd,MAELnmB,cAAe,KADfomB,YACc,OAIJC,YAAeC,GAChB,GAJPlmB,KAAKgmB,OAAS,IAAIvD,GAOP,cACXf,EACA9gB,EACAulB,GAEA,IAAI,cAAExD,EAAF,MAAiBpjB,GAAUqB,EAE3BkjB,GAAS,EACTsC,EAA6B,GAC7BC,EAAmB1D,EAEvB,MAAQmB,GAAQ,CACd,MAAMwC,QACEtmB,KAAKgmB,OAAOO,kBAAkB7E,EAAW,IAC1C9gB,EACH+hB,cAAe0D,IAGnB,IAAK,MAAMG,KAASF,EAAgB,CAClCD,EAAmBG,EAAMC,YAAY3D,WAAW,GAChD,MAAM4D,EAAM1mB,KAAK2mB,cAAcH,GAC3BE,GAAKN,EAAUhmB,KAAKsmB,GAG1B,IAAIP,EAQG,MALL,GAFAC,EAAYA,EAAU/N,QAAQmO,GAAUL,EAAWK,MAE9CF,EAAenpB,QAAU2mB,EAAQ,MACtC,GAAIvkB,GAAS6mB,EAAUjpB,QAAUoC,EAAO,CACtCukB,GAAS,EACT,OAIN,OAAOsC,EAEDO,cACNL,GACuB,IAAD,IACtB,MAAM,UAAEzE,EAAF,KAAa+E,EAAb,YAAmBH,GAAgBH,EACzC,IAAKzE,IAAc+E,EAAM,OACzB,MAAM,kBAAEC,EAAF,iBAAqBC,EAArB,aAAuCC,EAAvC,YAAqDC,GACzDJ,GACI,WAAE9D,EAAF,QAAcpQ,GAAY+T,EAE1BQ,GAAuB,UAAAL,EAAKM,yBAAL,mBAAyB,UAAzB,eAA6BC,eAAgB,GACpEC,EAAkB1U,EAAQyU,aAAa,IAAM,GAE7CjB,EAAW,IAAIzE,GACrByE,EAAStE,UAAYkB,EAAW,GAChCoD,EAASrE,UAAYA,EACrBqE,EAASzmB,KAAO6kB,GAAWkB,YAAY3D,GAAW+C,MAClDsB,EAASxE,UAAY0F,EAAgB1F,UAAUpG,WAE/C,MAAM+L,EAAarnB,KAAKsnB,iBACtB5U,EAAQ6U,YACRV,GAAqB,GACrBC,GAAoB,GACpBC,EACAC,GAGF,OAAIhnB,KAAKwnB,oBAAoBJ,IAC3BlB,EAASjE,gBAAkBjiB,KAAKynB,wBAC9B,CAACL,GACDC,GAEKnB,IAGTA,EAASlE,gBAAkBhiB,KAAKynB,wBAC9BR,EACAI,GAEFnB,EAASvE,YAAc,CACrBD,UAAW0F,EAAgB1F,UAAUpG,WACrChb,KAAO8mB,EAAgD9mB,MAEzD4lB,EAASnE,WAAa/hB,KAAKimB,YAAYC,GAChCA,GAGDsB,oBAAoBJ,GAC1B,YAAyDnsB,IAAjDmsB,EAAsCM,OAGxCD,wBACNE,EACAN,GAEA,MAAMO,EAAmC,GACzC,IAAK,MAAMC,KAAUF,EAAS,CAC5B,IAAK3nB,KAAKwnB,oBAAoBK,GAAS,SACvC,MAAMC,EACHD,EAA6BH,QAAU,GAC1C,GAAQI,EAAa7iB,OACdkf,GAAW4D,SAAhB,CACE,MAAM9D,EAA2B6D,EAAa7D,KACxC+D,EAAehoB,KAAKioB,oBAAoBhE,EAAMoD,GAChDW,GAAcJ,EAAexnB,KAAK4nB,IAM5C,OAAOJ,EAGDK,oBACNC,EACAb,GAEA,MAAM,OAAE/E,EAAF,YAAUC,EAAV,OAAuBlZ,EAAvB,SAA+BiE,GAAa4a,EAC5CC,EAAiB9e,GAAUiE,EAASgO,WAE1C,IACG6M,IACAd,EAAW7lB,IAAI8gB,KACf+E,EAAW7lB,IAAI+gB,GAEhB,OAEF,MAAMqF,EAAiB,IAAIvF,GAI3B,OAHAuF,EAAetF,OAAS+E,EAAWpmB,IAAIqhB,GACvCsF,EAAerF,YAAc8E,EAAWpmB,IAAIshB,GAC5CqF,EAAeve,OAAS8e,EACjBP,EAGDN,iBACNC,EACAV,EACAC,EACAC,EACAC,GAEA,MAAMoB,EAAiB,IAAIlnB,IAG3B,IAAK,MAAMkhB,KAAeyE,EAAmB,CAC3C,MAAM,aAAEwB,EAAF,KAAgB3a,EAAhB,cAAsB4a,GAAkBlG,EACxC6B,EAAO,IAAI/B,GACjB+B,EAAK/nB,QAAUqrB,EAAYc,GAAcE,OAAOjN,WAChD2I,EAAK7B,YAAckG,EAAcjf,OACjC4a,EAAKvW,KAAOA,EACZuW,EAAKtX,SAAW2b,EAAc3b,SAC9Byb,EAAetnB,IAAImjB,EAAK/nB,QAAS+nB,GAGnC,IAAK,MAAM9B,KAAc2E,EAAkB,CACzC,MAAM,aAAEuB,EAAF,cAAgBC,GAAkBnG,EAClCjmB,EAAUqrB,EAAYc,GAAcE,OAAOjN,WAC3C2I,EAAOmE,EAAennB,IAAI/E,IAAY,IAAIgmB,GAChD+B,EAAK9B,WAAamG,EAAcjf,OAChC+e,EAAetnB,IAAImjB,EAAK/nB,QAAS+nB,GAiBnC,OAbAsD,EAAYjZ,SAAQ,CAACka,EAAa9c,KAChC,MAAMxP,EAAUssB,EAAYD,OAAOjN,WACnC,IAAKjf,EAAAA,QAAAA,oBAA4BH,GAAU,CACzC,MAAM+nB,EAAOmE,EAAennB,IAAI/E,IAAY,IAAIgmB,GAChD+B,EAAK/nB,QAAUA,EACf+nB,EAAKvW,KCpMc,mCDqMnBuW,EAAK7B,YAAcqG,OAAO1B,EAAarb,IAAQ,GAC/CuY,EAAK9B,WAAasG,OAAOzB,EAAYtb,IAAQ,GAC7CuY,EAAKtX,SCrMe,EDsMpByb,EAAetnB,IAAImjB,EAAK/nB,QAAS+nB,OAI9BmE,ID3LuD,eAAD,oBAC/DnC,YAAeC,IAAwB,IAAD,EACpC,MAAMwC,EAAiB,UAAGxC,EAASvE,mBAAZ,aAAG,EAAsBrhB,KAChD,IAAKooB,EAAmB,MAAO,GAE/B,MAAMC,EAAaC,KAAAA,OAAcF,GAE3BG,EADe,IAAIpD,GAAO,CAACE,KACwBmD,WACvDC,GAAO3H,KAAKuH,IAEd,OAAO9C,GAAYgD,EAAkBG,OAAS,KGElD,MAEM3R,GAAO,UAKP4R,GAAkB/C,KACjBA,EAASlE,gBAAgB7kB,QACC,SAAxB+oB,EAASnE,WAMLmH,IAAmB1V,EAAAA,GAAAA,kBAK7B,4BACDzX,OAAS4mB,cAAAA,EAAewG,WAAAA,IAAgBxV,SAAAA,MAAgB,IAAD,EACrD,MACEiJ,KAAK,YAAEwM,IACLxoB,GAAAA,GAGFsZ,SAAS,YAAEmP,IACT1V,IAEE2V,QAAkB,UAAM5X,OAAOC,OAAOvE,cAApB,aAAM,EAAsBmc,cACpD,IAAKD,EAAiB,MAAMtb,MAAM,gBAElC,MAAMpH,EAAU,CACdrH,MAlCqB,GAmCrBojB,cAAAA,GAGI6G,EAAkB,IAAIzD,GACtB0D,QAAsBD,EAAgBE,QAC1CJ,EACA1iB,EACAqiB,IAEF,IAAI/O,EAAyB,GAEzBiP,IAAYjP,EAAU,IAAImP,IAE9B,IAAK,MAAMnD,KAAYuD,EAAe,CAAC,IAAD,UACpC,IAAKvD,EAASnE,WAAY,SAC1B,MAAM4H,EAAc,GACd/B,EAAiB1B,EAASlE,gBAChC,IAAI4H,EAEJ,MAAMC,EAAcjC,EAAe,GAC/BA,EAAezqB,OAAS,IAC1BysB,EAAahC,EAAeA,EAAezqB,OAAS,IAItD,GAFkB+oB,EAASxE,YAET0H,EAAa,SAE/B,MAAM3pB,EAAO,IAAI8D,KAA0B,IAArB2iB,EAASrE,WAE/B8H,EAAYlqB,KAAOgL,GAAAA,CAAOhL,GAAM+H,OAAO,sBACvCmiB,EAAYtI,WAAawI,EAAYtH,YACjCve,OACEc,EAAAA,MAAAA,aACEoI,OAAO2c,EAAYxgB,QACnBwgB,EAAYtH,YAAY5V,gBAG5B1R,EACJ0uB,EAAYpI,SAAqB,QAAV,EAAAqI,SAAA,SAAYrH,YAC/Bve,OACEc,EAAAA,MAAAA,aACEoI,OAAO0c,EAAWvgB,QAClBugB,EAAWrH,YAAY5V,gBAG3B1R,EAEJ0uB,EAAYvI,KAAZ,UAAmByI,EAAYtH,mBAA/B,aAAmB,EAAyB7U,KAC5Cic,EAAYrI,GAAZ,UAAiBsI,SAAjB,iBAAiB,EAAYrH,mBAA7B,aAAiB,EAAyB7U,KAC1Cic,EAAYG,cAAgB5D,EAAStE,UACrC+H,EAAY9pB,IAAMqmB,EAAStE,UAC3B+H,EAAYnI,OACTqI,EAAYtH,aAAe,UAACqH,SAAD,OAAC,EAAYrH,YAErC,UADA,SAENrI,EAAQ9Z,KAAKupB,GAEf,MAAO,CAAEN,YAAanP,MAmB1B,IAXcnG,EAAAA,GAAAA,aAAY,CACxBrZ,KAAM2c,GACNrD,aAnG0B,CAC1BqV,YAAa,IAmGbnV,SAAU,GACVC,cAAgBC,IACTA,EAAQC,QACX6U,GAAiB5U,WACjB,CAACvV,GAASwV,QAAAA,MAAmBhY,OAAOgG,OAAOxD,EAAOwV,SAIxD,QC3CA,GAjFgB,KACd,MAAOwV,EAAWC,IAAgBxuB,EAAAA,EAAAA,UALf,IAMZgV,EAASC,IAAcjV,EAAAA,EAAAA,WAAS,IAEjC,YAAE6tB,IAAgBvqB,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMmb,UACzD7E,GAAWC,EAAAA,EAAAA,eAEX2U,GAAenuB,EAAAA,EAAAA,cAAYC,UAC/B0U,GAAW,SACL4E,EAAS6T,GAAiB,KAAKgB,SACrCzZ,GAAW,KACV,CAAC4E,KAEJnY,EAAAA,EAAAA,YAAU,KACR+sB,MACC,CAACA,IAEJ,MAoBM5sB,GAAQ8T,EAAAA,EAAAA,UAAQ,IACb4Y,EAAY,EAAI,CAAErjB,OAAQ,QAAW,CAAEA,OAxC7B,MAyChB,CAACqjB,IAEJ,OACE,SAAC,EAAAhe,KAAD,CAAMC,UAAU,EAAO3O,MAAO,IAAKA,GAAnC,UACE,UAAC,EAAA8K,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAK8D,KAAK,OAAV,UACE,SAAC,EAAAjN,WAAA,MAAD,CAAkBuN,MAAO,EAAzB,6BAEF,SAAC,EAAApE,IAAD,WACE,SAAC,EAAA4J,OAAD,CAAQC,QAhBY,KAC1B8X,IACAD,EAtCiB,IAoDX,wBAEF,SAAC,EAAA1hB,IAAD,CAAKmE,KAAM,GAAX,UACE,UAAC,EAAAtE,IAAD,CAAKE,QAAQ,SAAS8D,OAAQ,CAAC,GAAI,GAAnC,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAIpP,MAAO,CAAEiW,UAAW,KAAnC,UACE,SAAC,EAAA6W,MAAD,CACEC,QAAStJ,GACTuJ,WAAYhB,EAAYjG,MAAM,EAAG2G,GACjCvZ,QAASA,EACT8Z,YAAY,EACZC,aAAc,CAACpJ,EAAQ5Z,IACrBA,EAAQ,EAAI,UAAY,WAE1BijB,OAAQ,CAAEC,EAAG,UAGjB,SAAC,EAAAniB,IAAD,WACE,SAAC,EAAA4J,OAAD,CACEC,QAjDW,KACvB,MAAMuY,EAA+BrB,EAAYjG,MAAM,EAAG2G,GAAW5sB,OAErE,GAAIksB,EAAYlsB,OAASutB,GAvBN,GAuBsD,CAAC,IAAD,EACvE,MAAM/H,EAAa,UAAG0G,EAAYA,EAAYlsB,OAAS,UAApC,aAAG,EAAqC2sB,cAC3DzU,EACE6T,GAAiB,CACfvG,cAAAA,EACAwG,YAAY,KAIlBa,EAAaD,EAjCI,IAuEL9kB,KAAK,OACL7J,MAAM,SAAC,EAAD,CAASV,KAAK,yBACpBuX,SAAU8X,GAAaV,EAAYlsB,OAJrC,oCCZd,GApDa,KACX,MAAM,MAAExB,IAAUC,EAAAA,EAAAA,WACZyZ,GAAWC,EAAAA,EAAAA,gBACX,MAAEvW,IAAUqb,EAAAA,EAAAA,gBACX3b,EAAKksB,IAAUnvB,EAAAA,EAAAA,UAAS,KACxBoD,EAAKgsB,IAAUpvB,EAAAA,EAAAA,UAAS,IACzBqO,EAAUmT,GAAiBve,GAC3BqL,EAAUkT,GAAiBpe,GAC3B0e,EAAU,OAAGve,QAAH,IAAGA,OAAH,EAAGA,EAAOwP,YAGpBsc,GAAmB/uB,EAAAA,EAAAA,cAAY,KACnC,IAAKO,EAAAA,QAAAA,UAAkBihB,GAAa,OACpC,MAAMhhB,EAAWX,EAAM2hB,GAClBhhB,IACLquB,EAAM,OAACruB,QAAD,IAACA,OAAD,EAACA,EAAUK,QACjBiuB,EAAM,OAACtuB,QAAD,IAACA,OAAD,EAACA,EAAUM,WAChB,CAAC0gB,EAAY3hB,IAgBhB,OAdAuB,EAAAA,EAAAA,YAAU,KACR2tB,MACC,CAACA,KAEJ3tB,EAAAA,EAAAA,YAAU,KAELb,EAAAA,QAAAA,UAAkBwN,EAAQyB,iBAC1BjP,EAAAA,QAAAA,UAAkByN,EAAQwB,kBAG7B+J,EAAS9B,GAAc1J,IACvBwL,EAASyH,GAAchT,OACtB,CAACA,EAASD,EAASwL,KAGpB,UAAC,EAAAlN,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAK9O,MAAO,CAAEytB,cAAe,IAA/C,WACE,SAAC,EAAAxiB,IAAD,CAAKyiB,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAxB,UACE,SAAC,GAAD,OAEF,SAAC,EAAA3iB,IAAD,CAAKyiB,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,UACE,UAAC,EAAA9iB,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAD,OAEF,SAAC,EAAAnE,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,eCiBZ,GAjEe,KACb,MAAO+H,EAASyF,IAAcze,EAAAA,EAAAA,WAAS,IAErCmT,OAAO,KAAEgB,GACTlR,KAAO4K,OAAQ0F,GACfnQ,KAAOyK,OAAQgG,KACbvQ,EAAAA,EAAAA,cAAaC,GAAoBA,IAC/BmR,EAAcR,KACd0D,EAAanD,KAEbgC,GAAYtC,EAAKxS,SAAW6G,OAAO+K,KAAe/K,OAAOqL,GAE/D,OACE,UAAC,EAAAlH,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,CAAWiK,QAAS,QAEtB,SAAC,EAAApO,IAAD,CAAKmE,KAAM,GAAX,UACE,UAAC,EAAAtE,IAAD,CAAKC,MAAM,SAAX,WACE,SAAC,EAAAE,IAAD,CAAK8D,KAAK,OAAV,UACE,SAAC,EAAAoL,QAAD,CACER,UAAU,aACV7D,SAAS,SAAC,GAAD,IACT0E,QAAQ,QAHV,UAKE,UAAC,EAAA3Y,MAAD,CACE7B,MAAO,CAAE6K,OAAQ,WACjB8M,UAAU,WACV7Z,KAAM,EAHR,WAKE,UAAC,EAAA+D,MAAD,YACE,SAAC,EAAAC,WAAA,KAAD,WACE,SAAC,EAAD,CACEzE,KAAK,6BACL2C,MAAO,CAAEgW,MAAO,gBAGpB,SAAC,EAAAlU,WAAA,KAAD,CAAiB8F,KAAK,YAAtB,8BAIF,SAAC,EAAA9F,WAAA,KAAD,CAAiB9B,MAAO,CAAEgW,MAAOD,GAAjC,SACGrP,EAAQC,OAAOkM,IAAc1I,OAAO,uBAK7C,SAAC,EAAAc,IAAD,WACE,SAAC,EAAA4J,OAAD,CACEC,QAAS,IAAM8H,GAAW,GAC1B9e,KAAK,QACLwX,OAAK,EACL1N,KAAK,UACLgN,SAAUA,EALZ,mCAYN,SAAC,GAAD,CAAauC,QAASA,EAASC,SAAUwF,QCzC/C/M,OAAOge,UAAUC,OAAS,WACxB,OAAOnrB,KAAKsb,YAEP,MAAM8P,GAAgC,CAC3CC,kBAAmB,CACjBC,eAtBariB,GAOE,qBAARA,GACC,OAARA,GACe,kBAARA,GACQ,mBAARA,GACQ,kBAARA,GACP8W,MAAMwL,QAAQtiB,IAXOuiB,CAAAA,IACrB,GAAY,OAARA,EAAc,OAAO,EACzB,MAAMC,EAAQlvB,OAAOmvB,eAAeF,GACpC,OAAiB,OAAVC,GAAmD,OAAjClvB,OAAOmvB,eAAeD,IAS/CE,CAAc1iB,IACC,kBAARA,ICFX,IAfc2iB,EAAAA,GAAAA,gBAAe,CAC3BC,WAAaC,GACXA,EAAqBV,IACvBW,UDZwD,ECaxDC,QAAS,CACPptB,IADO,GAEPH,IAFO,GAGPsS,SAHO,GAIPpC,MAJO,GAKPuL,QALO,OCITqC,UAAU,MAAEb,KACV9a,GAESqrB,GAAO,KAEhB,SAAC,EAAAC,WAAD,CAAYxQ,MAAOA,GAAOyQ,MAAI,EAA9B,UACE,SAAC,EAAAC,aAAD,WACE,SAAC,EAAAC,aAAD,WACE,SAAC,EAAAC,gBAAD,WACE,SAAC,EAAAC,eAAD,WACE,SAAC,EAAAC,SAAD,CAAUC,MAAOC,GAAjB,UACE,SAAC,GAAD,gBAUHC,GAA6B,CACxCxxB,KAAM,QACN8J,KAAM,SAGK2nB,GAAS,KAElB,SAAC,EAAAV,WAAD,CAAYxQ,MAAOA,GAAOyQ,MAAI,EAA9B,UACE,SAAC,EAAAC,aAAD,WACE,SAAC,EAAAC,aAAD,WACE,SAAC,EAAAC,gBAAD,WACE,SAAC,EAAAC,eAAD,WACE,SAAC,EAAAC,SAAD,CAAUC,MAAOC,GAAjB,UACE,SAAC,GAAD,iB,mFClDhB,MAQA,EARgB,CACd9P,IAAKA,EAAAA,EAAI9Y,EAAAA,IACT+oB,SAAUA,EAAAA,EAASlQ,EAAAA,M,8CCgBrB,MAAMmQ,EAAiB,SACjBC,EAAS,CACb,SAA4B,CAC1BlkB,IAAK8S,uDACLD,MAAOC,WACPjhB,KAAMihB,WACNqR,OAAQ,CACNtyB,KAAMihB,SACNsR,MAAOtR,gBAETuR,eAAiBvR,cACdwR,MAAM,KACNpwB,KAAKqwB,GAASA,EAAKC,SACnBhV,QAAQ+U,GAAS,CAAC,OAAQ,UAAUtU,SAASsU,KAGhDE,KAAO3R,sBACJwR,MAAM,KACNpwB,KAAK2jB,GAAQA,EAAI2M,SACpB7a,YAAamJ,2BACb4R,UAAU,IAoCd,EAhCgC,CAI9B/Q,YAAa,CACXgR,aAAcV,EACdW,MAAOV,EACPW,OAAQ,2DAMVjR,QAAS,CACP+Q,aAAcV,EACdW,MAAOV,EACPW,OAAQ,2DAMVhR,WAAY,CACV8Q,aAAcV,EACdW,MAAO,GACPC,OAAQ,6D,8CCrEZ,MAAMC,EAAU,CACd5R,YAAa,8CACbC,cAAe,gDA2DjB,EA5CgC,CAI9BH,OAAQ,IACH8R,EACH7R,KAAM,gCACNiC,QAAS,IACT6P,YAAa,+CACbC,gBAAiB,+CACjBzE,YAAa,+CACb0E,cAAe,gDAMjB7R,QAAS,IACJ0R,EACH7R,KAAM,iCACNiC,QAAS,IACT6P,YAAa,GACbC,gBAAiB,GACjBzE,YAAa,GACb0E,cAAe,IAMjB5R,QAAS,IACJyR,EACH7R,KAAM,sCACNiC,QAAS,IACT6P,YAAa,8CACbC,gBAAiB,+CACjBzE,YAAa,8CACb0E,cAAe,kD,8FCtDZ,MAAMlR,EAAOmB,IAAD,CACjB5f,OAAQ,MACRzD,KAAM,SACNwB,QAAS,mCACTyQ,SAAU,EACVoR,QAAAA,EACA7S,WAAY,CACVC,YAAa,UAEfhP,QACE,sIAKS4xB,EAAQhQ,IAAD,CAClB5f,OAAQ,OACRzD,KAAM,SACNwB,QAAS,+CACTyQ,SAAU,EACVoR,QAAAA,EACA7S,WAAY,CACVC,YAAa,UAEfhP,QACE,sIAyDJ,EArDsB,CACpBygB,EAAI,KACJmR,EAAK,KACL,CACE5vB,OAAQ,OACRzD,KAAM,kBACNwB,QAAS,+CACTyQ,SAAU,EACVoR,QAAS,IACT7S,WAAY,CACVC,YAAa,WAEfhP,QACE,qIAEJ,CACEgC,OAAQ,OACRzD,KAAM,WACNwB,QAAS,+CACTyQ,SAAU,EACVoR,QAAS,IACT7S,WAAY,CACVC,YAAa,YAEfhP,QACE,sIAEJ,CACEgC,OAAQ,MACRzD,KAAM,UACNwB,QAAS,+CACTyQ,SAAU,EACVoR,QAAS,IACT7S,WAAY,CACVC,YAAa,WAEfhP,QACE,sIAEJ,CACEgC,OAAQ,OACRzD,KAAM,WACNwB,QAAS,+CACTyQ,SAAU,EACVoR,QAAS,IACT7S,WAAY,CACVC,YAAa,YAEfhP,QACE,wICxEJygB,KAAK,QAAEmB,IACLnd,EAAAA,EACEotB,EAAY,UACZC,EAAS,CACbC,SAAU,OACVC,SAAS,EACTC,UAAW,GAEPC,EAAW,CACfrmB,SAAU,CACRvB,GAAI,UACJc,MAAO,CACL,CAAE+mB,MAAO,YAAaL,GACtB,CAAEK,MAAO,UAAWL,MAmF1B,QA9EA,MAQEruB,cAAe,KAPP2uB,cAOM,OANNC,YAMM,OALLzQ,aAKK,OAJL0Q,aAIK,OAHNje,aAGM,OAFNke,WAEM,OAWNC,MAAQ5yB,SACViE,KAAKuuB,SAASpzB,KAAa,CAAC6E,KAAKuuB,SAAUvuB,KAAKwuB,QAC7C,IAAI3xB,SAAQd,MAAAA,IAEjB,GAAIiE,KAAKwQ,QAAS,OAAOxQ,KAAK0uB,MAAMtuB,KAAKF,GAEzCF,KAAKwQ,SAAU,EAEf,IAAIoe,cAAyB,IAAIC,EAAAA,IAAoB3uB,WAClD4uB,gBAAgB9uB,KAAK+d,SACrBgR,UAeH,IAdqB,WAAjB/uB,KAAKyuB,UAAsBG,EAAYA,EAAUpL,OAAOwL,IAE1DJ,EADmB,YAAjB5uB,KAAKyuB,QACKG,EAAUpL,OAAO,CAACuK,EAAK,KAAMnR,EAAI,OAC9BgS,EAAUpL,OAAO,CAAC5G,EAAI,OAEvCgS,EAAUtgB,SAAStS,GAAUgE,KAAKuuB,SAASztB,IAAI9E,EAAME,QAASF,KAE9DgE,KAAKwuB,OAAS,IAAIS,EAAAA,SAASZ,GAC3BruB,KAAKuuB,SAASjgB,SAAQ,EAAGpS,QAAAA,KAAYgzB,KACnClvB,KAAKwuB,OAAOvuB,IAAI/D,EAASgzB,KAG3BhvB,EAAQ,CAACF,KAAKuuB,SAAUvuB,KAAKwuB,SAEtBxuB,KAAK0uB,MAAMvxB,QAAQ6C,KAAK0uB,MAAMnuB,OAAXP,CAAmB,CAACA,KAAKuuB,SAAUvuB,KAAKwuB,SAElExuB,KAAKwQ,SAAU,KAtCL,KA0Cd1T,IAAMf,UACJ,MAAOwyB,SAAkBvuB,KAAK2uB,QAC9B,OAAO5O,MAAMqB,KAAKmN,EAAS/xB,WA5Cf,KA+CdP,cAAgBF,MAAAA,IACd,MAAOwyB,SAAkBvuB,KAAK2uB,QAC9B,OAAOJ,EAASttB,IAAIkuB,IAjDR,KAoDd1yB,KAAOV,MAAOic,EAAiBzY,KAC7B,MAAOgvB,EAAUC,SAAgBxuB,KAAK2uB,QACtC,IAAIS,EAAsB,GAY1B,OAXApX,EAAQmV,MAAMa,GAAW1f,SAASzO,GACS2uB,EAAOtV,OAAOrZ,EAAKN,GACjD+O,SAAQ,EAAG+gB,OAAAA,KACbA,EAAO/gB,SAAS7H,IACrB,GAAI2oB,EAAOE,WAAU,EAAGpzB,QAAAA,KAAcA,IAAYuK,IAAM,EAAG,CACzD,MAAMzK,EAAQuyB,EAASttB,IAAIwF,GACvBzK,GAAOozB,EAAOhvB,KAAKpE,WAKxBozB,GAjEPpvB,KAAKuuB,SAAW,IAAIrtB,IACpBlB,KAAKwuB,YAASvzB,EACd+E,KAAK+d,QAAUA,EACf/d,KAAKyuB,QAAU3qB,EAAAA,GACf9D,KAAKwQ,SAAU,EACfxQ,KAAK0uB,MAAQ,GAEb1uB,KAAK2uB,W,uECrCT,MAaahS,EANA,aAwBA7Y,EAbM,MACjB,OAAQ6Z,EAAAA,EAAAA,IAAY,YAClB,IAAK,SACH,MAAO,SACT,IAAK,UACH,MAAO,UAGT,QACE,MAAO,YAIW4R,I,8CCpCxB,MAAMC,EAAM,SACNC,EAAS/d,OAAOge,aAEhBC,EAAWhvB,IACf,IACE,OAAKA,EACEU,KAAKuuB,MAAMjvB,GADC,KAEnB,MAAO6L,GACP,OAAO,OAILmR,EAAU,CACd7c,IAAK,CAACjB,EAAac,KACjB,IAAIL,EAAOqvB,EAAQF,EAAOI,QAAQL,IAC7BlvB,GAAwB,kBAATA,IAAmBA,EAAO,IAC9CA,EAAKT,GAAOc,EACZ8uB,EAAOK,QAAQN,EAAKnuB,KAAKC,UAAUhB,KAErCW,IAAMpB,IACJ,IAAIS,EAAOqvB,EAAQF,EAAOI,QAAQL,IAClC,OAAKlvB,GAAwB,kBAATA,EACbA,EAAKT,GADkC,MAGhDkwB,MAAQlwB,IACN8d,EAAQ7c,IAAIjB,EAAK,QAIrB,K","sources":["shared/antd/ionicon/assets/icon-telegram.svg","shared/antd/ionicon/customs.tsx","shared/antd/ionicon/index.tsx","shared/antd/mint/mintAvatar.tsx","shared/antd/mint/mintName.tsx","shared/antd/mint/mintSymbol.tsx","app/page/chart/cross.tsx","shared/dataloader/constant.ts","shared/dataloader/request.ts","shared/dataloader/cache.ts","shared/dataloader/index.ts","shared/util.ts","app/page/chart/chart.tsx","app/page/chart/chartEmpty.tsx","app/helper/cgk.ts","app/page/chart/index.tsx","shared/hooks/useMintDecimals.ts","shared/hooks/useAccountBalance.ts","app/helper/router.ts","app/helper/oracle.ts","app/constant/swap.ts","app/hooks/usePriceImpact.ts","app/components/swapAction/index.tsx","app/components/preview/routeAvatar.tsx","app/components/preview/price.tsx","app/components/preview/index.tsx","app/model/bid.controller.ts","app/components/confirmSwap.tsx","app/page/swap/swapReview.tsx","app/hooks/useMintCgk.ts","app/page/swap/swapPoolInfo.tsx","app/static/images/sen.svg","app/components/poweredBy.tsx","app/components/settings/slippage.tsx","app/components/settings/advanced.tsx","app/model/settings.controller.ts","app/components/settings/index.tsx","app/components/selection/search.tsx","app/components/selection/mint.tsx","app/components/selection/mintSelection.tsx","app/components/selection/index.tsx","shared/antd/numericInput.tsx","app/configs/manifest.config.ts","app/configs/sol.config.ts","app/configs/swap.config.ts","app/configs/wormhole.config.ts","app/configs/route.config.ts","app/configs/index.ts","app/model/ask.controller.ts","app/hooks/useMintSelection.ts","app/components/ask/index.tsx","app/constant/ethConfig.ts","app/constant/solConfig.ts","app/helper/wormhole.ts","app/components/bid/wormholeSupported.tsx","app/components/bid/index.tsx","app/model/route.controller.ts","app/components/swapForm/swapInput.tsx","app/components/swapForm/index.tsx","app/page/swap/index.tsx","app/page/history/statusTag.tsx","app/page/history/column.tsx","app/lib/stat/entities/trans-log.ts","app/lib/stat/adapters/solana/client.ts","app/lib/stat/constants/transaction.ts","app/lib/stat/helpers/date.ts","app/lib/stat/logic/translogSwap.ts","app/lib/stat/logic/translog.ts","app/lib/stat/constants/sol.ts","app/model/history.controller.ts","app/page/history/index.tsx","app/page/index.tsx","app/widget/index.tsx","shared/devTools.ts","app/model/index.ts","app/bootstrap.app.tsx","os/configs/index.ts","os/configs/register.config.ts","os/configs/sol.config.ts","os/providers/tokenProvider/supplementary.ts","os/providers/tokenProvider/index.ts","shared/runtime.ts","shared/storage.ts"],"sourcesContent":["var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgIconTelegram({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"inherit\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\",\n    width: \"50px\",\n    height: \"50px\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.137,6.552c-0.75-0.636-1.928-0.727-3.146-0.238l-0.002,0C41.708,6.828,6.728,21.832,5.304,22.445 c-0.259,0.09-2.521,0.934-2.288,2.814c0.208,1.695,2.026,2.397,2.248,2.478l8.893,3.045c0.59,1.964,2.765,9.21,3.246,10.758 c0.3,0.965,0.789,2.233,1.646,2.494c0.752,0.29,1.5,0.025,1.984-0.355l5.437-5.043l8.777,6.845l0.209,0.125 c0.596,0.264,1.167,0.396,1.712,0.396c0.421,0,0.825-0.079,1.211-0.237c1.315-0.54,1.841-1.793,1.896-1.935l6.556-34.077 C47.231,7.933,46.675,7.007,46.137,6.552z M22,32l-3,8l-3-10l23-17L22,32z\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgIconTelegram);\nexport default __webpack_public_path__ + \"static/media/icon-telegram.2450489f40d03000fe65fc1c6f238d85.svg\";\nexport { ForwardRef as ReactComponent };","import IconTele from './assets/icon-telegram.svg'\n\nexport const CUSTOM_ICONS: Record<string, string> = {\n  'logo-telegram': IconTele,\n}\n","/**\n * IonIcon 5\n * Credit https://ionic.io/ionicons\n */\n\nimport { forwardRef } from 'react'\nimport { CUSTOM_ICONS } from './customs'\n\n/**\n * IonIcon\n * @param name The icon name. You can find it here https://ionic.io/ionicons\n * @param className To modify the span class\n */\nconst IonIcon = forwardRef<\n  HTMLElement,\n  { name: string; className?: string } & any\n>(({ name, className, ...props }, ref) => {\n  const cln = className ? 'anticon ' + className : 'anticon'\n\n  return (\n    <span className={cln} {...props}>\n      {CUSTOM_ICONS[name] ? (\n        <ion-icon ref={ref} src={CUSTOM_ICONS[name]} />\n      ) : (\n        <ion-icon ref={ref} name={name} />\n      )}\n    </span>\n  )\n})\n\nexport default IonIcon\n","import { ReactNode, useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport { Avatar } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { useMint, usePool } from 'senhub/providers'\n\nconst DEFAULT_AVATARS: Array<string | undefined> = [undefined]\n\nexport type MintAvatarProps = {\n  mintAddress: string\n  size?: number\n  icon?: ReactNode\n  reversed?: boolean\n}\n\n/**\n * Mint/Token avatar, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param size - Avatar size. Default 24px.\n * @param icon - Fallback icon for unknown token\n * @param reversed - (Optional) The default LP token avatar is A-B. The reversed is to change it to B-A\n * @returns name\n */\nconst MintAvatar = ({\n  mintAddress,\n  size = 24,\n  icon = <IonIcon name=\"diamond-outline\" />,\n  reversed = false,\n  ...props\n}: MintAvatarProps) => {\n  const [avatars, setAvatars] = useState(DEFAULT_AVATARS)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveAvatar = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.logoURI) return token.logoURI\n      return undefined\n    },\n    [tokenProvider],\n  )\n\n  const deriveAvatars = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setAvatars(DEFAULT_AVATARS)\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const avatars = await Promise.all([mint_a, mint_b].map(deriveAvatar))\n      if (reversed) avatars.reverse()\n      return setAvatars(avatars)\n    }\n    // Normal mint\n    const avatar = await deriveAvatar(mintAddress)\n    return setAvatars([avatar])\n  }, [mintAddress, reversed, deriveAvatar, pools])\n\n  useEffect(() => {\n    deriveAvatars()\n  }, [deriveAvatars])\n\n  if (avatars.length === 1)\n    return (\n      <Avatar\n        src={avatars[0]}\n        size={size}\n        style={{ backgroundColor: '#2D3355', border: 'none' }}\n        {...props}\n      >\n        {icon}\n      </Avatar>\n    )\n  return (\n    <Avatar.Group style={{ display: 'block', whiteSpace: 'nowrap' }} {...props}>\n      {avatars.map((avatar, i) => (\n        <Avatar\n          key={i}\n          src={avatar}\n          size={size}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n        >\n          {icon}\n        </Avatar>\n      ))}\n    </Avatar.Group>\n  )\n}\n\nexport default MintAvatar\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport { useMint, usePool } from 'senhub/providers'\n\nconst DEFAULT_NAME = 'Unknown Token'\n\n/**\n * Mint/Token name, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param separator - (Optional) In case of LP tokens, the names is combined by 2 token names. The separator is to separate them.\n * @param reversed - (Optional) The default LP token names is A-B. The reversed is to change it to B-A\n * @returns name\n */\nconst MintName = ({\n  mintAddress,\n  separator = ' • ',\n  reversed = false,\n}: {\n  mintAddress: string\n  separator?: string\n  reversed?: boolean\n}) => {\n  const [name, setName] = useState(DEFAULT_NAME)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveName = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.name) return token.name\n      return DEFAULT_NAME\n    },\n    [tokenProvider],\n  )\n\n  const deriveNames = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setName(DEFAULT_NAME)\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const names = await Promise.all([mint_a, mint_b].map(deriveName))\n      if (reversed) names.reverse()\n      return setName(`${names.join(separator)} LP`)\n    }\n    // Normal mint\n    const name = await deriveName(mintAddress)\n    return setName(name)\n  }, [mintAddress, reversed, deriveName, pools, separator])\n\n  useEffect(() => {\n    deriveNames()\n  }, [deriveNames])\n\n  return <span>{name}</span>\n}\n\nexport default MintName\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport { useMint, usePool } from 'senhub/providers'\n\nconst DEFAULT_SYMBOL = 'TOKN'\n\n/**\n * Mint/Token symbol, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param separator - (Optional) In case of LP tokens, the symbols is combined by 2 token symbols. The separator is to separate them.\n * @param reversed - (Optional) The default LP token symbol is A-B. The reversed is to change it to B-A\n * @returns symbol\n */\nconst MintSymbol = ({\n  mintAddress,\n  separator = ' • ',\n  reversed = false,\n}: {\n  mintAddress: string\n  separator?: string\n  reversed?: boolean\n}) => {\n  const [symbol, setSymbol] = useState(DEFAULT_SYMBOL)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveSymbol = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.symbol) return token.symbol\n      return address.substring(0, 4)\n    },\n    [tokenProvider],\n  )\n\n  const deriveSymbols = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setSymbol(DEFAULT_SYMBOL)\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const symbols = await Promise.all([mint_a, mint_b].map(deriveSymbol))\n      if (reversed) symbols.reverse()\n      return setSymbol(symbols.join(separator))\n    }\n    // Normal mint\n    const symbol = await deriveSymbol(mintAddress)\n    return setSymbol(symbol)\n  }, [mintAddress, reversed, deriveSymbol, pools, separator])\n\n  useEffect(() => {\n    deriveSymbols()\n  }, [deriveSymbols])\n\n  return <span>{symbol}</span>\n}\n\nexport default MintSymbol\n","import { useSelector } from 'react-redux'\n\nimport { Avatar, Space, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\n\nimport { AppState } from 'app/model'\n\nconst Cross = () => {\n  const {\n    bid: { mintInfo: bidMintInfo },\n    ask: { mintInfo: askMintInfo },\n  } = useSelector((state: AppState) => state)\n\n  const bidMintAddress = bidMintInfo?.address || ''\n  const askMintAddress = askMintInfo?.address || ''\n  return (\n    <Space>\n      <Avatar.Group>\n        <MintAvatar mintAddress={bidMintAddress} />\n        <MintAvatar mintAddress={askMintAddress} />\n      </Avatar.Group>\n      <Typography.Text>\n        <MintSymbol mintAddress={bidMintAddress} />\n        {' / '}\n        <MintSymbol mintAddress={askMintAddress} />\n      </Typography.Text>\n    </Space>\n  )\n}\n\nexport default Cross\n","export type LimitConfig = {\n  calls: number\n  time: number\n}\n\nexport type CacheConfig = {\n  ttl: number // millisecond\n}\n\nexport type SingleFlightConfig = {\n  limit?: LimitConfig\n  cache?: CacheConfig\n}\n\n// 10 request per 1 second\nexport const DEFAULT_LIMIT_CONFIG: LimitConfig = {\n  calls: 10,\n  time: 1000,\n}\n\n// 10 request per 1 second\nexport const DEFAULT_CACHE_CONFIG: CacheConfig = {\n  ttl: 30000,\n}\n\nexport const DEFAULT_SINGLE_FLIGHT_CONFIG: SingleFlightConfig = {\n  limit : DEFAULT_LIMIT_CONFIG,\n  cache: DEFAULT_CACHE_CONFIG\n}","export interface IRequestQueue {\n  key: string\n  add(resolve: any, reject: any): void\n  resolves(data: any): void\n  rejects(error: any): void\n}\n\nexport class RequestQueue implements IRequestQueue {\n  key = ''\n  private resolveQueue: any[] = []\n  private rejectQueue: any[] = []\n  constructor(key: string) {\n    this.key = key\n  }\n\n  add(resolve: any, reject: any) {\n    this.resolveQueue.push(resolve)\n    this.rejectQueue.push(reject)\n  }\n\n  resolves(data: any) {\n    while (this.resolveQueue.length > 0) {\n      const resolve = this.resolveQueue.shift()\n      resolve(data)\n    }\n  }\n\n  rejects(error: any) {\n    while (this.rejectQueue.length > 0) {\n      const reject = this.rejectQueue.shift()\n      reject(error)\n    }\n  }\n}\n","import { DEFAULT_CACHE_CONFIG } from './constant'\nimport { CacheConfig } from './constant'\n\nexport class SingleFlightCache {\n  private static mapCache = new Map<string, any>()\n\n  static set(\n    key: string,\n    value: any,\n    configs: CacheConfig = DEFAULT_CACHE_CONFIG,\n  ) {\n    this.mapCache.set(key, value)\n    setTimeout(() => {\n      this.mapCache.delete(key)\n    }, configs.ttl)\n  }\n\n  static get(key: string) {\n    return this.mapCache.get(key)\n  }\n}\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey)\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(\n    request: IRequestQueue,\n    callback: () => Promise<any>,\n  ) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    return true\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import { account, utils } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport { net } from 'shared/runtime'\nimport { DataLoader } from './dataloader'\n\n/**\n * Delay by async/await\n * @param ms - milisenconds\n * @returns\n */\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Shorten a long address\n * @param address - The long address\n * @param num - The number of the heading and trailing characters\n * @param delimiter - The delimiter\n * @returns Shortened address\n */\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\n/**\n * Build a explorer url by context including addresses or transaction ids\n * @param addressOrTxId - Address or TxId\n * @returns\n */\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\n/**\n * Wrapped Numbro - https://numbrojs.com/old-format.html\n * @param value - value\n * @returns\n */\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value || !Number.isFinite(Number(value))) return numbro('0')\n  return numbro(value)\n}\n\n/**\n * Generate a random color\n * @param seed - Seed\n * @param opacity - Opacity\n * @returns\n */\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n\n/**\n * Fetch coingecko data with cache\n * @param ticket - Token ticket\n * @returns\n */\nexport const fetchCGK = async (ticket = '') => {\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n","import { useCallback, useState, useRef, useEffect } from 'react'\nimport Chart from 'chart.js'\nimport isEqual from 'react-fast-compare'\n\nimport { numeric } from 'shared/util'\ninterface Props {\n  labels?: (number | string)[]\n  chartData?: (number | string)[]\n  configs?: { backgroundColor?: string } & object\n  type?: string\n  disableAxe?: boolean\n  chartHeight?: string\n  chartId?: string\n}\n\nconst DEFAULT_BACKGROUND_COLOR = '#dadada'\n\nconst SenChart = ({\n  chartData = [],\n  labels = [],\n  type = 'line',\n  configs,\n  disableAxe = false,\n  chartId = 'sen_chart',\n}: Props) => {\n  const { backgroundColor } = configs || {}\n  const [isRebuildChart, setRebuildChart] = useState<boolean>(false)\n\n  const formatData = useCallback(\n    (\n      data: Array<number | number[] | undefined | null | any>,\n      label: Array<string | number>,\n      background?: string | CanvasGradient | undefined,\n    ): Chart.ChartData => ({\n      labels: label,\n      datasets: [{ ...configs, data, backgroundColor: background }],\n    }),\n    [configs],\n  )\n  // use a ref to store the chart instance since it it mutable\n  const chartRef = useRef<Chart | null>(null)\n\n  // callback creates the chart on the canvas element\n  const canvasCallback = (canvas: HTMLCanvasElement | null) => {\n    if (!canvas) return\n    const ctx = canvas.getContext('2d')\n    if (ctx && !isRebuildChart) {\n      // create new chart\n      chartRef.current = new Chart(ctx, {\n        type: type,\n        data: {\n          labels: [],\n          datasets: [\n            {\n              data: [],\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            xAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                },\n              },\n            ],\n            yAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                  beginAtZero: false,\n                  maxTicksLimit: 8,\n                  callback: function (value, index, values) {\n                    return numeric(value).format('0,0.[0]a')\n                  },\n                },\n              },\n            ],\n          },\n          plugins: {\n            legend: false,\n          },\n          hover: {\n            onHover: (event, elements) => {\n              const target = document.getElementById(chartId)\n              if (!target) return\n              target.style.cursor = elements[0] ? 'pointer' : 'default'\n            },\n          },\n        },\n      })\n      setRebuildChart(true)\n    }\n  }\n\n  const getBackground = useCallback(() => {\n    if (!chartRef || !backgroundColor) return DEFAULT_BACKGROUND_COLOR\n    const ctx = chartRef?.current?.canvas?.getContext('2d')\n    const gradient = ctx?.createLinearGradient(0, 0, 0, 180)\n    gradient?.addColorStop(0, backgroundColor)\n    gradient?.addColorStop(1, `${backgroundColor}00`)\n    const background = type === 'line' ? gradient : backgroundColor\n    return background\n  }, [backgroundColor, type])\n\n  useEffect(() => {\n    const chartInstance = chartRef.current\n    const dataInstace = chartInstance?.data.datasets?.find(({ data }) => data)\n    const compareData = isEqual(dataInstace?.data, chartData)\n    if (chartInstance && !compareData) {\n      chartInstance.data = formatData(chartData, labels, getBackground())\n      chartInstance?.update()\n    }\n  }, [chartData, formatData, getBackground, labels])\n\n  return <canvas id={chartId} height=\"180px\" ref={canvasCallback}></canvas>\n}\n\nexport default SenChart\n","import { Col, Empty, Row } from 'antd'\n\nconst ChartEmpty = () => {\n  return (\n    <Row style={{ height: 170 }} align=\"middle\" justify=\"center\">\n      <Col>\n        <Empty />\n      </Col>\n    </Row>\n  )\n}\n\nexport default ChartEmpty\n","import TokenProvider from 'os/providers/tokenProvider'\nimport { fetchCGK } from 'shared/util'\nimport axios from 'axios'\n\nexport interface MintInfo {\n  address: string\n  symbol: string\n  price: number\n  decimals: number\n}\n\nexport type ChartParamsCGK = {\n  days: number\n  interval: string\n}\n\nconst DEFAULT_TOKEN_INFO = {\n  address: '',\n  chainId: 0,\n  decimals: 0,\n  name: '',\n  symbol: 'TOKEN',\n  extensions: undefined,\n  logoURI: '',\n  tags: [],\n}\n\nconst TOKEN_PROVIDER = new TokenProvider()\n\nconst cgk = {\n  getMintInfos: async (mintsAddress: string[]) => {\n    if (!TOKEN_PROVIDER || !mintsAddress) return\n    const promise = mintsAddress.map(async (mint) => {\n      let tokenInfo = await TOKEN_PROVIDER.findByAddress(mint)\n      if (!tokenInfo) tokenInfo = DEFAULT_TOKEN_INFO\n      const { address, symbol, decimals, extensions } = tokenInfo\n      const ticket = extensions?.coingeckoId\n\n      if (!ticket) return { address, symbol, decimals, price: 0 } // some mints don't have a ticket, so the price in cgk is 0\n\n      const { price } = await fetchCGK(ticket)\n      return { address, symbol, decimals, price }\n    })\n    const mintsDetails = await Promise.all(promise)\n    const mapMintsDetails = new Map<string, MintInfo>()\n    mintsDetails.forEach((mint) => {\n      mapMintsDetails.set(mint.address, mint)\n    })\n    return mapMintsDetails\n  },\n}\nexport default cgk\n\nexport const fetchMarketChart = async (\n  ticket: string,\n  params: ChartParamsCGK,\n) => {\n  try {\n    const data: any = await axios({\n      method: 'get',\n      url: `https://api.coingecko.com/api/v3/coins/${ticket}/market_chart?vs_currency=usd&days=${params.days}&interval=${params.interval}`,\n    })\n    const priceData: [number /*time*/, number /*price*/][] = data.data.prices\n    return priceData.map((data) => ({ time: data[0], val: data[1] }))\n  } catch (error) {\n    return []\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport moment from 'moment'\n\nimport { Card, Col, Radio, Row, Typography } from 'antd'\nimport Cross from './cross'\n\nimport { AppState } from 'app/model'\nimport SenChart from './chart'\nimport ChartEmpty from './chartEmpty'\nimport { ChartParamsCGK, fetchMarketChart } from 'app/helper/cgk'\nimport { numeric } from 'shared/util'\nimport { useMint } from 'senhub/providers'\n\ntype ChartData = { label: string; val: number }\nenum Interval {\n  day = 'day',\n  week = 'week',\n  month = 'month',\n  year = 'year',\n}\nconst CHART_DATA_CONFIG: Record<\n  Interval,\n  {\n    amount: number\n    unit: moment.unitOfTime.DurationConstructor\n    format: string\n  }\n> = {\n  day: { amount: 4, unit: 'hours', format: 'HH:00' },\n  week: { amount: 1, unit: 'days', format: 'MMM DD' },\n  month: { amount: 5, unit: 'days', format: 'MMM DD' },\n  year: { amount: 2, unit: 'months', format: 'MMM DD' },\n}\nconst MARKET_CONFIG: Record<Interval, ChartParamsCGK> = {\n  day: { days: 1, interval: 'hourly' },\n  week: { days: 7, interval: 'daily' },\n  month: { days: 31, interval: 'daily' },\n  year: { days: 365, interval: 'daily' },\n}\n\nconst CHART_CONFIGS = {\n  color: '#3E8C6A',\n  radius: 0,\n  hitRadius: 14,\n  tooltip: 'TVL',\n  transparent: 'transparent',\n}\n\nconst SwapChart = () => {\n  const [interval, setInterval] = useState(Interval.week)\n  const [chartData, setChartData] = useState<{ label: string; val: number }[]>(\n    [],\n  )\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const { tokenProvider } = useMint()\n\n  const swapChartConfigs = {\n    borderColor: CHART_CONFIGS.transparent,\n    borderRadius: CHART_CONFIGS.radius,\n    pointRadius: CHART_CONFIGS.radius,\n    tooltip: CHART_CONFIGS.tooltip,\n    pointHitRadius: CHART_CONFIGS.hitRadius,\n    pointHoverRadius: CHART_CONFIGS.radius,\n    backgroundColor: CHART_CONFIGS.color,\n  }\n\n  const parseChartDay = useCallback(\n    (marketData: { time: number; val: number }[]) => {\n      const chartData: ChartData[] = []\n      const { format, amount, unit } = CHART_DATA_CONFIG[interval]\n      let displayTime = moment()\n      // parser data\n      for (const data of marketData.reverse()) {\n        const chartTime = moment(data.time).format(format)\n        if (chartTime === displayTime.format(format)) {\n          const now = moment().format(format)\n          let label = chartTime\n          if (chartTime === now) label = moment().format('HH:mm')\n          if (displayTime)\n            chartData.unshift({\n              label: label,\n              val: data.val,\n            })\n          displayTime = displayTime.subtract(amount, unit)\n        } else if (chartTime === '00:00') {\n          chartData.unshift({\n            label: displayTime.format('MMM DD'),\n            val: data.val,\n          })\n        }\n      }\n      setChartData(chartData)\n    },\n    [interval],\n  )\n\n  const parseChartDaily = useCallback(\n    (marketData: { time: number; val: number }[]) => {\n      const chartData: ChartData[] = []\n      const { format, amount, unit } = CHART_DATA_CONFIG[interval]\n      let displayTime = moment()\n      // parser data\n      for (const data of marketData.reverse()) {\n        const chartTime = moment(data.time).format(format)\n        if (chartTime === displayTime.format(format)) {\n          displayTime = displayTime.subtract(amount, unit)\n          chartData.unshift({\n            label: chartTime,\n            val: data.val,\n          })\n          continue\n        }\n      }\n      setChartData(chartData)\n    },\n    [interval],\n  )\n\n  const fetchChartData = useCallback(async () => {\n    // fetch data market from coingecko\n    const bidTokenInfo = await tokenProvider.findByAddress(\n      bidData.mintInfo?.address || '',\n    )\n    const askTokenInfo = await tokenProvider.findByAddress(\n      askData.mintInfo?.address || '',\n    )\n    const bidTicket = bidTokenInfo?.extensions?.coingeckoId\n    const askTicket = askTokenInfo?.extensions?.coingeckoId\n    // return when bid & ask address is same\n    const compareAddress = bidData.accountAddress === askData.accountAddress\n    if (!askTicket || !bidTicket || compareAddress) return setChartData([])\n\n    const marketConfig = MARKET_CONFIG[interval]\n    const [bidChartData, askChartData] = await Promise.all([\n      fetchMarketChart(bidTicket, marketConfig),\n      fetchMarketChart(askTicket, marketConfig),\n    ])\n    // parser market data\n    const marketData: { time: number; val: number }[] = []\n    for (let idx = bidChartData.length - 1; idx >= 0; idx--) {\n      const bidChart = bidChartData[idx]\n      const askChart =\n        askChartData[askChartData.length - bidChartData.length + idx]\n      if (!bidChart || !askChart) continue\n      marketData.unshift({\n        time: bidChart.time,\n        val: bidChart.val / askChart.val,\n      })\n    }\n    if (interval === Interval.day) return parseChartDay(marketData)\n    return parseChartDaily(marketData)\n  }, [\n    askData.accountAddress,\n    askData.mintInfo?.address,\n    bidData.accountAddress,\n    bidData.mintInfo?.address,\n    interval,\n    parseChartDaily,\n    parseChartDay,\n    tokenProvider,\n  ])\n\n  useEffect(() => {\n    fetchChartData()\n  }, [fetchChartData])\n\n  const price = chartData[chartData.length - 1]?.val || 0\n  const priceUI = numeric(price).format(\n    price > 1 ? '0,0.[00]' : '0,0.[00000000]',\n  )\n\n  return (\n    <Card bordered={false} className=\"card-swap\" bodyStyle={{ paddingTop: 28 }}>\n      <Row gutter={[24, 24]}>\n        <Col flex=\"auto\">\n          <Row gutter={[20, 20]}>\n            <Col flex=\"auto\">\n              <Cross />\n            </Col>\n            {chartData && !!chartData.length && (\n              <Col>\n                <Radio.Group\n                  defaultValue={Interval.week}\n                  onChange={(e) => setInterval(e.target.value)}\n                  className=\"chart-radio-btn\"\n                >\n                  <Radio.Button value={Interval.day}>1D</Radio.Button>\n                  <Radio.Button value={Interval.week}>1W</Radio.Button>\n                  <Radio.Button value={Interval.month}>1M</Radio.Button>\n                  <Radio.Button value={Interval.year}>1Y</Radio.Button>\n                </Radio.Group>\n              </Col>\n            )}\n            <Col span={24}>\n              <Typography.Title level={2}>\n                {price ? priceUI : ''}\n              </Typography.Title>\n            </Col>\n          </Row>\n        </Col>\n        <Col span={24}>\n          {chartData && !!chartData.length ? (\n            <SenChart\n              chartData={chartData?.map((data) => data.val)}\n              labels={chartData?.map((data) => data.label)}\n              configs={swapChartConfigs}\n            />\n          ) : (\n            <ChartEmpty />\n          )}\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapChart\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from 'senhub/providers'\n\n/**\n * Get token decimals from multiple resources. This hook needs MintProvider for work.\n * MintProvider Ref: https://docs.sentre.io/senhub/development/providers/mint-provider\n * @param mintAddress Mint address\n * @returns Decimals\n */\nconst useMintDecimals = (mintAddress: string) => {\n  const [decimals, setDecimals] = useState<number | undefined>(undefined)\n  const { getDecimals } = useMint()\n\n  const fetchDecimals = useCallback(async () => {\n    try {\n      const decimals = await getDecimals(mintAddress)\n      return setDecimals(decimals)\n    } catch (er: any) {\n      return setDecimals(undefined)\n    }\n  }, [mintAddress, getDecimals])\n\n  useEffect(() => {\n    fetchDecimals()\n  }, [fetchDecimals])\n\n  return decimals\n}\n\nexport default useMintDecimals\n","import { account, DEFAULT_EMPTY_ADDRESS, utils } from '@senswap/sen-js'\nimport { useEffect, useState } from 'react'\nimport { useAccount, useWallet } from 'senhub/providers'\nimport useMintDecimals from './useMintDecimals'\n\nexport type AccountBalanceReturn = {\n  amount: bigint\n  decimals: number\n  balance: number\n  mintAddress: string\n}\n\nconst buildResult = (\n  mintAddress?: string,\n  amount?: bigint,\n  decimals?: number,\n) => {\n  if (\n    !account.isAddress(mintAddress) ||\n    amount === undefined ||\n    decimals === undefined\n  )\n    return { amount: BigInt(0), decimals: 0, balance: 0 }\n  return {\n    mintAddress,\n    amount,\n    decimals,\n    balance: Number(utils.undecimalize(amount, decimals)),\n  }\n}\n\n/**\n * Get account balance. This hook needs WalletProvider, MintProvider, and AccountProvider for work.\n * WalletProvider Ref: https://docs.sentre.io/senhub/development/providers/wallet-provider\n * MintProvider Ref: https://docs.sentre.io/senhub/development/providers/mint-provider\n * AccountProvider Ref: https://docs.sentre.io/senhub/development/providers/account-provider\n * @param accountAddress Associated account address\n * @returns AccountBalanceReturn\n * - AccountBalanceReturn.amount: The amount with decimals\n * - AccountBalanceReturn.decimals: The corresponding mint decimals\n * - AccountBalanceReturn.balance: The human-readable balance (undecimalized amount)\n * - AccountBalanceReturn.mintAddress: The corresponding mint\n */\nconst useAccountBalance = (accountAddress: string) => {\n  const {\n    wallet: { address: walletAddress, lamports },\n  } = useWallet()\n  const { accounts } = useAccount()\n  const { amount, mint: mintAddress } = accounts[accountAddress] || {}\n  const decimals = useMintDecimals(mintAddress) || 0\n\n  if (!account.isAddress(walletAddress) || !account.isAddress(accountAddress))\n    return buildResult()\n  if (accountAddress === walletAddress)\n    return buildResult(DEFAULT_EMPTY_ADDRESS, lamports, 9)\n\n  return buildResult(mintAddress, amount, decimals)\n}\n\nexport default useAccountBalance\n\n/**\n * The same as useAccountBalance but the input is mint address\n * @param mintAddress Mint address\n * @returns AccountBalanceReturn\n */\nexport const useAccountBalanceByMintAddress = (mintAddress: string) => {\n  const [accountAddress, setAccountAddress] = useState('')\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n  const data = useAccountBalance(accountAddress)\n\n  useEffect(() => {\n    ;(async () => {\n      if (!account.isAddress(walletAddress) || !account.isAddress(mintAddress))\n        return setAccountAddress('')\n      const {\n        sentre: { splt },\n      } = window\n      try {\n        const address = await splt.deriveAssociatedAddress(\n          walletAddress,\n          mintAddress,\n        )\n        return setAccountAddress(address)\n      } catch (er) {\n        return setAccountAddress('')\n      }\n    })()\n  })\n\n  return data\n}\n","import { PoolData, utils } from '@senswap/sen-js'\n\nimport { curve } from './oracle'\nimport { State as BidState } from 'app/model/bid.controller'\nimport { State as AskState } from 'app/model/ask.controller'\nimport { inverseCurve } from './oracle'\nimport { HopData } from 'app/components/preview/index'\nimport { State as RouteState } from 'app/model/route.controller'\n\nconst POOL_ACTIVITY_STATUS = 1\nconst LIMIT_POOL_IN_ROUTE = 3\n\nexport type GraphPool = Map<string, Map<string, PoolData>>\nexport type RouteTrace = HopData[]\n\n/**\n * Extract reserve from pool data\n * @param extractReserve\n * @param poolData\n * @returns\n */\nexport const extractReserve = (\n  mintAddress: string,\n  poolData: PoolData,\n): bigint => {\n  const { mint_a, mint_b, reserve_a, reserve_b } = poolData\n  if (mintAddress === mint_a) return reserve_a\n  if (mintAddress === mint_b) return reserve_b\n  throw new Error('Cannot find reserves')\n}\n\n/**\n *\n * @param param0\n * @param param1\n * @returns\n */\ntype Point = { point: bigint }\nexport const pointSorting = (\n  { point: firstPoint }: Point,\n  { point: secondPoint }: Point,\n) => {\n  if (firstPoint < secondPoint) return 1\n  if (firstPoint > secondPoint) return -1\n  return 0\n}\n\nexport const buildPoolGraph = (pools: Record<string, PoolData>): GraphPool => {\n  const graph = new Map<\n    /*mint_address*/ string,\n    Map</*pool_address*/ string, PoolData>\n  >()\n  for (const poolAddress in pools) {\n    const pool = pools[poolAddress]\n    if (pool?.state !== POOL_ACTIVITY_STATUS) continue\n    const mints = [pool.mint_a, pool.mint_b]\n    mints.forEach((mint) => {\n      if (!graph.has(mint)) graph.set(mint, new Map<string, PoolData>())\n      graph.get(mint)?.set(poolAddress, pool)\n    })\n  }\n  return graph\n}\n\n// because of Solana is limiting the number of calculation unit, so the system\n// must limit the list pool of root. Currently, the system set 3 pools in route\nexport const findAllRoutes = (\n  graph: GraphPool,\n  bidMintAddress: string,\n  askMintAddress: string,\n  deep = 0,\n) => {\n  const routes: RouteTrace[] = []\n  const clonedGraph = new Map(graph)\n  const pools = graph.get(bidMintAddress)\n\n  // Too deep\n  if (deep >= LIMIT_POOL_IN_ROUTE) return routes\n\n  clonedGraph.delete(bidMintAddress)\n  pools?.forEach((poolData, poolAddress) => {\n    // Build sub params\n    const srcMintAddress = bidMintAddress\n    const dstMintAddress =\n      srcMintAddress === poolData.mint_a ? poolData.mint_b : poolData.mint_a\n    const hop: HopData = {\n      srcMintAddress,\n      dstMintAddress,\n      poolData: { ...poolData, address: poolAddress },\n    }\n    // Termination\n    if (dstMintAddress === askMintAddress) return routes.push([hop])\n    // Recursive call\n    const subRoutes = findAllRoutes(\n      clonedGraph,\n      dstMintAddress,\n      askMintAddress,\n      deep++,\n    )\n    subRoutes.forEach((route) => routes.push([hop, ...route]))\n  })\n\n  return routes\n}\n\nexport const findBestRouteFromBid = (\n  routes: RouteTrace[],\n  { amount: bidAmount, mintInfo }: BidState,\n): RouteState => {\n  let bestRoute: RouteState = { best: [], amounts: [], amount: BigInt(0) }\n  routes.forEach((route) => {\n    let amount = utils.decimalize(bidAmount, mintInfo.decimals)\n    const amounts = new Array<bigint>()\n    route.forEach((hop) => {\n      amounts.push(amount)\n      amount = curve(amount, hop)\n    })\n    const maxAskAmount = bestRoute.amount\n    if (amount > maxAskAmount) bestRoute = { best: route, amounts, amount }\n  })\n  return bestRoute\n}\n\nexport const findBestRouteFromAsk = (\n  routes: RouteTrace[],\n  { amount: askAmount, mintInfo }: AskState,\n): RouteState => {\n  let bestRoute: RouteState = { best: [], amounts: [], amount: BigInt(0) }\n  for (const route of routes) {\n    const reversedRoute = [...route].reverse()\n    let amount = utils.decimalize(askAmount, mintInfo.decimals)\n    const amounts = new Array<bigint>()\n\n    for (const hop of reversedRoute) {\n      amount = inverseCurve(amount, hop)\n      if (amount <= BigInt(0)) break\n      amounts.unshift(amount)\n    }\n    if (amount <= BigInt(0)) continue\n    const minBidAmount = bestRoute.amount\n    if (amount < minBidAmount || !minBidAmount)\n      bestRoute = { best: route, amounts, amount }\n  }\n  return bestRoute\n}\n","import { Swap } from '@senswap/sen-js'\nimport { HopData } from 'app/components/preview/index'\nimport { extractReserve } from './router'\n\nexport const ORACLE = Swap.oracle\n\nexport const curve = (bidAmount: bigint, hopData: HopData): bigint => {\n  if (!bidAmount) return BigInt(0)\n  const { srcMintAddress, dstMintAddress, poolData } = hopData\n  const { fee_ratio, tax_ratio } = poolData\n  const bidReserve = extractReserve(srcMintAddress, poolData)\n  const askReserve = extractReserve(dstMintAddress, poolData)\n  if (!bidReserve || !askReserve) return BigInt(0)\n\n  const { askAmount } = ORACLE.swap(\n    bidAmount,\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return askAmount\n}\n\nexport const inverseCurve = (askAmount: bigint, hopData: HopData): bigint => {\n  if (!askAmount) return BigInt(0)\n  const { srcMintAddress, dstMintAddress, poolData } = hopData\n  const { fee_ratio, tax_ratio } = poolData\n  const bidReserve = extractReserve(srcMintAddress, poolData)\n  const askReserve = extractReserve(dstMintAddress, poolData)\n  if (!bidReserve || !askReserve) return BigInt(0)\n\n  const bidAmount = ORACLE.inverseSwap(\n    askAmount,\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return bidAmount\n}\n\nexport const slippage = (bidAmount: bigint, hopData: HopData): bigint => {\n  if (!bidAmount) return BigInt(0)\n  const { srcMintAddress, dstMintAddress, poolData } = hopData\n  const { fee_ratio, tax_ratio } = poolData\n  const bidReserve = extractReserve(srcMintAddress, poolData)\n  const askReserve = extractReserve(dstMintAddress, poolData)\n  if (!bidReserve || !askReserve) return BigInt(0)\n\n  const slippage = ORACLE.slippage(\n    bidAmount,\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return slippage\n}\n","export enum PriceImpact {\n  goodSwap = 0.01, // price impact lower than 1%\n  acceptableSwap = 0.05, // price impact lower than 5%\n}\n","import { useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\n\nimport { AppState } from 'app/model'\nimport { curve, slippage } from 'app/helper/oracle'\nimport { PriceImpact } from 'app/constant/swap'\n\nconst PRECISION = 9\n\nconst usePriceImpact = () => {\n  const {\n    route: { best },\n    bid: { amount: bidAmount, mintInfo: bidMintInfo },\n    ask: { amount: askAmount },\n  } = useSelector((state: AppState) => state)\n\n  if (!Number(bidAmount) || !Number(askAmount)) return 0\n  let srcAmount = utils.decimalize(bidAmount, bidMintInfo.decimals)\n  let p = 1\n  best.forEach((hopData) => {\n    const s = Number(\n      utils.undecimalize(slippage(srcAmount, hopData), PRECISION),\n    )\n    p = p * (1 - s)\n    const dstAmount = curve(srcAmount, hopData)\n    srcAmount = dstAmount\n  })\n\n  return 1 - p\n}\n\nexport const usePriceColor = () => {\n  const priceImpact = usePriceImpact()\n  if (priceImpact < PriceImpact.goodSwap) return '#14E041'\n  if (priceImpact > PriceImpact.acceptableSwap) return '#D72311'\n  return '#FA8C16'\n}\n\nexport default usePriceImpact\n","import { useCallback, useMemo, useState } from 'react'\nimport { DEFAULT_WSOL, utils } from '@senswap/sen-js'\nimport { useSelector } from 'react-redux'\n\nimport { Button } from 'antd'\n\nimport { AppState } from 'app/model'\nimport { useWallet } from 'senhub/providers'\nimport { explorer } from 'shared/util'\nimport useAccountBalance from 'shared/hooks/useAccountBalance'\nimport usePriceImpact from 'app/hooks/usePriceImpact'\nimport { PriceImpact } from 'app/constant/swap'\n\nconst DECIMALS = BigInt(1000000000)\n\nconst SwapButton = ({\n  onCallback = () => {},\n  forceSwap = false,\n}: {\n  onCallback?: () => void\n  forceSwap?: boolean\n}) => {\n  const [loading, setLoading] = useState(false)\n  const {\n    route: { best },\n    bid: {\n      amount: _bidAmount,\n      mintInfo: { address: bidMintAddress, decimals: bidMintDecimals },\n      accountAddress: bidAccountAddress,\n    },\n    ask: {\n      amount: _askAmount,\n      mintInfo: { decimals: askMintDecimals },\n    },\n    settings: { slippage, advanced },\n  } = useSelector((state: AppState) => state)\n  const {\n    wallet: { address: walletAddress, lamports },\n  } = useWallet()\n  const { amount: bidBalance } = useAccountBalance(bidAccountAddress)\n  const priceImpact = usePriceImpact()\n\n  const wrapAmount = useMemo(() => {\n    if (!Number(_bidAmount) || bidMintAddress !== DEFAULT_WSOL) return BigInt(0)\n    const amount = utils.decimalize(_bidAmount, bidMintDecimals)\n    if (amount <= bidBalance) return BigInt(0)\n    return amount - bidBalance\n  }, [bidBalance, _bidAmount, bidMintAddress, bidMintDecimals])\n\n  const availableBid = useMemo((): string => {\n    if (bidMintAddress !== DEFAULT_WSOL)\n      return utils.undecimalize(bidBalance, bidMintDecimals)\n    // So estimate max = 0.01 fee -> multi transaction.\n    const estimateFee = utils.decimalize(0.01, bidMintDecimals)\n    const max = lamports + bidBalance - estimateFee\n    if (max <= bidBalance)\n      return utils.undecimalize(bidBalance, bidMintDecimals)\n    return utils.undecimalize(max, bidMintDecimals)\n  }, [bidBalance, bidMintAddress, bidMintDecimals, lamports])\n\n  const handleSwap = useCallback(async () => {\n    const { swap, splt, wallet } = window.sentre\n    if (!wallet) throw new Error('Wallet is not connected')\n    // Synthetize routings\n    const routingAddresses = await Promise.all(\n      best.map(\n        async ({\n          srcMintAddress,\n          dstMintAddress,\n          poolData: { address: poolAddress },\n        }) => {\n          const srcAddress = await splt.deriveAssociatedAddress(\n            walletAddress,\n            srcMintAddress,\n          )\n          const dstAddress = await splt.deriveAssociatedAddress(\n            walletAddress,\n            dstMintAddress,\n          )\n          return {\n            poolAddress: poolAddress,\n            srcAddress: srcAddress,\n            dstAddress: dstAddress,\n          }\n        },\n      ),\n    )\n    // Compute limit\n    const bidAmount = utils.decimalize(_bidAmount, bidMintDecimals)\n    const askAmount = utils.decimalize(_askAmount, askMintDecimals)\n    const limit =\n      (askAmount * (DECIMALS - utils.decimalize(slippage, 9))) / DECIMALS\n    // Execute swap\n    return await swap.route(bidAmount, limit, routingAddresses, wallet)\n  }, [\n    best,\n    bidMintDecimals,\n    askMintDecimals,\n    slippage,\n    walletAddress,\n    _bidAmount,\n    _askAmount,\n  ])\n\n  const handleWrapSol = async () => {\n    const { swap, wallet } = window.sentre\n    if (!wallet) throw new Error('Wallet is not connected')\n    if (wrapAmount) return await swap.wrapSol(wrapAmount, wallet)\n  }\n\n  const onSwap = async () => {\n    try {\n      setLoading(true)\n      await handleWrapSol()\n      const { txId } = await handleSwap()\n      window.notify({\n        type: 'success',\n        description: 'Swap successfully. Click to view details.',\n        onClick: () => window.open(explorer(txId), '_blank'),\n      })\n      return onCallback()\n    } catch (er: any) {\n      return window.notify({ type: 'error', description: er.message })\n    } finally {\n      return setLoading(false)\n    }\n  }\n\n  const tooHighImpact =\n    !advanced && priceImpact > PriceImpact.acceptableSwap && !forceSwap\n  const disabled =\n    tooHighImpact ||\n    !best.length ||\n    !Number(_bidAmount) ||\n    !Number(_askAmount) ||\n    Number(_bidAmount) > Number(availableBid)\n  return (\n    <Button\n      type=\"primary\"\n      onClick={onSwap}\n      disabled={disabled}\n      loading={loading}\n      block\n    >\n      {tooHighImpact\n        ? 'Too High Price Impact'\n        : forceSwap\n        ? 'Swap Anyway'\n        : 'Swap'}\n    </Button>\n  )\n}\n\nexport default SwapButton\n","import { Fragment, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Space } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { AppState } from 'app/model'\nimport { account } from '@senswap/sen-js'\nimport { MintAvatar } from 'shared/antd/mint'\n\nconst RouteAvatar = () => {\n  const {\n    bid: { mintInfo },\n    route: { best },\n  } = useSelector((state: AppState) => state)\n\n  const srcMintAddress = mintInfo?.address\n  const chainMintAddresses = useMemo(() => {\n    if (!best.length || !account.isAddress(srcMintAddress)) return []\n    let list = [srcMintAddress]\n    for (const hop of best) {\n      const { dstMintAddress } = hop\n      if (account.isAddress(dstMintAddress)) list.push(dstMintAddress)\n    }\n    return list\n  }, [srcMintAddress, best])\n\n  return (\n    <Space>\n      {chainMintAddresses?.map((mintAddress, i) => (\n        <Fragment key={i}>\n          <MintAvatar mintAddress={mintAddress} />\n          {chainMintAddresses.length > i + 1 && (\n            <IonIcon name=\"chevron-forward-outline\" />\n          )}\n        </Fragment>\n      ))}\n    </Space>\n  )\n}\nexport default RouteAvatar\n","import { useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Button, Space, Typography } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport { MintSymbol } from 'shared/antd/mint'\n\nimport { numeric } from 'shared/util'\nimport { AppState } from 'app/model'\n\nconst Price = () => {\n  const [reversed, setReversed] = useState(false)\n  const {\n    bid: { mintInfo: bidMintInfo, amount: bidAmount },\n    ask: { mintInfo: askMintInfo, amount: askAmount },\n  } = useSelector((state: AppState) => state)\n\n  const bidMintAddress = bidMintInfo?.address || ''\n  const askMintAddress = askMintInfo?.address || ''\n  const price = numeric(Number(askAmount) / Number(bidAmount)).format(\n    '0,0.[000000]',\n  )\n  const reversedPrice = numeric(Number(bidAmount) / Number(askAmount)).format(\n    '0,0.[000000]',\n  )\n\n  return (\n    <Space>\n      <Button\n        type=\"text\"\n        onClick={() => setReversed(!reversed)}\n        shape=\"circle\"\n        icon={<IonIcon name=\"swap-horizontal-outline\" />}\n      />\n      <Typography.Text>{!reversed ? price : reversedPrice}</Typography.Text>\n      <Typography.Text>\n        {!reversed ? (\n          <MintSymbol mintAddress={askMintAddress} />\n        ) : (\n          <MintSymbol mintAddress={bidMintAddress} />\n        )}\n        {' / '}\n        {!reversed ? (\n          <MintSymbol mintAddress={bidMintAddress} />\n        ) : (\n          <MintSymbol mintAddress={askMintAddress} />\n        )}\n      </Typography.Text>\n    </Space>\n  )\n}\n\nexport default Price\n","import { ReactNode } from 'react'\nimport { useSelector } from 'react-redux'\nimport { PoolData } from '@senswap/sen-js'\n\nimport { Col, Row, Typography } from 'antd'\nimport RouteAvatar from './routeAvatar'\n\nimport { AppState } from 'app/model'\nimport { numeric } from 'shared/util'\nimport usePriceImpact, { usePriceColor } from 'app/hooks/usePriceImpact'\nimport Price from './price'\n\nexport type LiteMintInfo = {\n  address: string\n  decimals: number\n}\n\nexport type HopData = {\n  poolData: PoolData & { address: string }\n  srcMintAddress: string\n  dstMintAddress: string\n}\n\nconst ExtraTypography = ({\n  label = '',\n  content = '',\n}: {\n  label?: string\n  content?: string | ReactNode\n}) => {\n  return (\n    <Row>\n      <Col flex=\"auto\">\n        <Typography.Text type=\"secondary\">{label}</Typography.Text>\n      </Col>\n      <Col>\n        <span>{content}</span>\n      </Col>\n    </Row>\n  )\n}\n\nconst PreviewSwap = () => {\n  const {\n    settings: { slippage },\n  } = useSelector((state: AppState) => state)\n  const priceImpact = usePriceImpact()\n  const priceColor = usePriceColor()\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Price impact\"\n          content={\n            <Typography.Text style={{ color: priceColor }}>\n              {numeric(Number(priceImpact)).format('0.[0000]%')}\n            </Typography.Text>\n          }\n        />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography label=\"Price\" content={<Price />} />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Slippage Tolerance\"\n          content={numeric(slippage).format('0.[00]%')}\n        />\n      </Col>\n      <Col span={24} style={{ minHeight: 24 }}>\n        <ExtraTypography label=\"Route\" content={<RouteAvatar />} />\n      </Col>\n    </Row>\n  )\n}\n\nexport default PreviewSwap\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { LiteMintInfo } from 'app/components/preview'\n\nexport type State = {\n  amount: string // Desired amount\n  accountAddress: string // Associated account to the selected token\n  mintInfo: LiteMintInfo // Selected token\n  poolAddresses: string[] // List of available pools\n  priority: number\n}\n\nconst NAME = 'bid'\nconst initialState: State = {\n  amount: '',\n  mintInfo: {\n    address: '',\n    decimals: 0,\n  },\n  accountAddress: '',\n  poolAddresses: [],\n  priority: 0,\n}\n\n/**\n * Actions\n */\n\nexport const updateBidData = createAsyncThunk<\n  Partial<State>,\n  Partial<State> & { prioritized?: boolean; reset?: boolean },\n  { state: any }\n>(\n  `${NAME}/updateBidData`,\n  async ({ prioritized, reset, ...bidData }, { getState }) => {\n    const {\n      bid: { priority: prevPriority },\n      ask: { priority: refPriority },\n    } = getState()\n    if (Number(bidData.amount) < 0) bidData.amount = ''\n    const priority = reset ? 0 : prioritized ? refPriority + 1 : prevPriority\n    return { ...bidData, priority }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateBidData.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Row, Col, Space, Typography, Modal, Card, Checkbox } from 'antd'\nimport Preview from 'app/components/preview'\nimport IonIcon from 'shared/antd/ionicon'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport SwapAction from 'app/components/swapAction'\n\nimport { AppState } from 'app/model'\nimport usePriceImpact from 'app/hooks/usePriceImpact'\nimport { PriceImpact } from 'app/constant/swap'\n\nconst ConfirmSwap = ({\n  visible = false,\n  onCancle = () => {},\n}: {\n  visible?: boolean\n  onCancle?: (visible: boolean) => void\n}) => {\n  const [checked, setChecked] = useState(false)\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const priceImpact = usePriceImpact()\n\n  const tooHighImpact = priceImpact > PriceImpact.acceptableSwap\n\n  return (\n    <Modal\n      title={<Typography.Title level={4}> Confirm swap</Typography.Title>}\n      onCancel={() => onCancle(false)}\n      footer={null}\n      visible={visible}\n    >\n      <Row gutter={[16, 24]}>\n        <Col span={24}>\n          <Row align=\"middle\" justify=\"space-between\">\n            <Col>\n              <Space direction=\"vertical\">\n                <Typography.Text>From</Typography.Text>\n                <Space>\n                  <MintAvatar mintAddress={bidData.mintInfo?.address} />\n                  <Typography.Text>\n                    <MintSymbol mintAddress={bidData.mintInfo?.address} />\n                  </Typography.Text>\n                </Space>\n                <Typography.Title level={4}>{bidData.amount}</Typography.Title>\n              </Space>\n            </Col>\n            <Col>\n              <IonIcon name=\"arrow-forward-outline\" style={{ fontSize: 24 }} />\n            </Col>\n            <Col>\n              <Space direction=\"vertical\" align=\"end\">\n                <Typography.Text>To</Typography.Text>\n                <Space>\n                  <MintAvatar mintAddress={askData.mintInfo?.address} />\n                  <Typography.Text>\n                    <MintSymbol mintAddress={askData.mintInfo?.address} />\n                  </Typography.Text>\n                </Space>\n                <Typography.Title level={4}>{askData.amount}</Typography.Title>\n              </Space>\n            </Col>\n          </Row>\n        </Col>\n        <Col>\n          <Card bordered={false} className=\"confirm-info\">\n            <Preview />\n          </Card>\n        </Col>\n        {tooHighImpact && (\n          <Col span={24}>\n            <Checkbox checked={checked} onChange={() => setChecked(!checked)}>\n              The price impact is currently high. Tick the checkbox to accept\n              the swap.\n            </Checkbox>\n          </Col>\n        )}\n        <Col span={24}>\n          <SwapAction onCallback={() => onCancle(false)} forceSwap={checked} />\n        </Col>\n      </Row>\n    </Modal>\n  )\n}\nexport default ConfirmSwap\n","import { useState } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { Button, Card, Col, Row, Typography } from 'antd'\nimport SwapAction from 'app/components/swapAction'\nimport Preview from 'app/components/preview'\n\nimport { updateBidData } from 'app/model/bid.controller'\nimport usePriceImpact from 'app/hooks/usePriceImpact'\nimport { PriceImpact } from 'app/constant/swap'\nimport ConfirmSwap from 'app/components/confirmSwap'\n\nconst SwapActions = () => {\n  const [visivle, setVisivle] = useState(false)\n  const dispatch = useDispatch()\n  const onCallback = () =>\n    dispatch(updateBidData({ amount: '', prioritized: true }))\n  const priceImpact = usePriceImpact()\n\n  const tooHighImpact = priceImpact > PriceImpact.acceptableSwap\n\n  return (\n    <Card bordered={false}>\n      <Row gutter={[24, 24]}>\n        <Col span={24}>\n          <Typography.Title level={5}>Review & Swap</Typography.Title>\n        </Col>\n        <Col span={24}>\n          <Preview />\n        </Col>\n        <Col span={24} /> {/* Safe sapce */}\n        <Col span={24}>\n          {tooHighImpact ? (\n            <Button type=\"primary\" onClick={() => setVisivle(true)} block>\n              Review & Swap\n            </Button>\n          ) : (\n            <SwapAction onCallback={onCallback} />\n          )}\n        </Col>\n        {tooHighImpact && (\n          <ConfirmSwap visible={visivle} onCancle={setVisivle} />\n        )}\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapActions\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from 'senhub/providers'\nimport { fetchCGK } from 'shared/util'\n\nconst DEFAULT_DATA = {\n  address: '',\n  icon: '',\n  name: 'TOKEN',\n  price: 0,\n  priceChange: 0,\n  rank: 0,\n  symbol: 'TOKEN',\n  totalVolume: 0,\n}\n\nconst useMintCgk = (mintAddress?: string): CgkData => {\n  const [cgkData, setCgkData] = useState<CgkData>(DEFAULT_DATA)\n  const { tokenProvider } = useMint()\n\n  const fetchCgkData = useCallback(async () => {\n    if (!mintAddress) return setCgkData(DEFAULT_DATA)\n    try {\n      const token = await tokenProvider.findByAddress(mintAddress)\n      const ticket = token?.extensions?.coingeckoId\n      const cgkData = await fetchCGK(ticket)\n      return setCgkData(cgkData)\n    } catch (error) {\n      return setCgkData(DEFAULT_DATA)\n    }\n  }, [mintAddress, tokenProvider])\n\n  useEffect(() => {\n    fetchCgkData()\n  }, [fetchCgkData])\n\n  return cgkData\n}\nexport default useMintCgk\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { account, PoolData, utils } from '@senswap/sen-js'\n\nimport { Card, Col, Divider, Row, Space, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\n\nimport { AppState } from 'app/model'\nimport { extractReserve } from 'app/helper/router'\nimport { numeric } from 'shared/util'\nimport useMintCgk from 'app/hooks/useMintCgk'\n\nconst MintPoolInfo = ({\n  mintAddress,\n  tvl = '',\n  price,\n  format = '0,0.[00]a',\n}: {\n  mintAddress: string\n  tvl?: string | number\n  price?: number\n  format?: string\n}) => {\n  return (\n    <Space direction=\"vertical\" size={4}>\n      <MintAvatar mintAddress={mintAddress} />\n      <Space>\n        <Typography.Text>TVL:</Typography.Text>\n        <Typography.Title level={5}>\n          {numeric(tvl).format(format)}\n        </Typography.Title>\n        <Typography.Title level={5}>\n          <MintSymbol mintAddress={mintAddress} />\n        </Typography.Title>\n      </Space>\n      <Typography.Text className=\"caption\" type=\"secondary\">\n        ~ ${numeric(price).format(format)}\n      </Typography.Text>\n    </Space>\n  )\n}\n\nconst SwapPoolInfo = () => {\n  const {\n    route: { best },\n    bid: { mintInfo: bidMintInfo },\n    ask: { mintInfo: askMintInfo },\n  } = useSelector((state: AppState) => state)\n  const bidCgk = useMintCgk(bidMintInfo.address)\n  const askCgk = useMintCgk(askMintInfo.address)\n\n  const { poolData: bidPoolData } = best[0] || {}\n  const { poolData: askPoolData } = best[best.length - 1] || {}\n\n  const getMintTVL = (mintAddress?: string, poolData?: PoolData) => {\n    try {\n      if (!account.isAddress(mintAddress) || !poolData) return BigInt(0)\n      return extractReserve(mintAddress, poolData)\n    } catch (er) {\n      return BigInt(0)\n    }\n  }\n\n  // Bid TVL\n  const bidTVL = useMemo(() => {\n    if (!bidMintInfo.decimals) return 0\n    const bid = getMintTVL(bidMintInfo.address, bidPoolData)\n    return Number(utils.undecimalize(bid, bidMintInfo.decimals))\n  }, [bidMintInfo, bidPoolData])\n  // Ask TVL\n  const askTVL = useMemo(() => {\n    if (!askMintInfo.decimals) return 0\n    const ask = getMintTVL(askMintInfo.address, askPoolData)\n    return Number(utils.undecimalize(ask, askMintInfo.decimals))\n  }, [askMintInfo, askPoolData])\n\n  return (\n    <Card bordered={false}>\n      <Row gutter={[16, 16]} wrap={false}>\n        <Col span={11}>\n          <MintPoolInfo\n            mintAddress={bidMintInfo?.address || ''}\n            tvl={bidTVL}\n            price={bidTVL * bidCgk.price}\n          />\n        </Col>\n        <Col>\n          <Divider type=\"vertical\" style={{ height: '100%' }} />\n        </Col>\n        <Col span={11}>\n          <MintPoolInfo\n            mintAddress={askMintInfo?.address || ''}\n            tvl={askTVL}\n            price={askTVL * askCgk.price}\n          />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapPoolInfo\n","var _defs, _path, _path2;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgSen({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    \"data-name\": \"Layer 1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    viewBox: \"0 0 283.465 283.465\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"linear-gradient\",\n    x1: -1222.504,\n    y1: -2883.343,\n    x2: -1135.428,\n    y2: -2970.419,\n    gradientTransform: \"translate(1300.837 3068.613)\",\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    stopColor: \"#f9575e\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.27,\n    stopColor: \"#f8555b\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.486,\n    stopColor: \"#f44f51\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.685,\n    stopColor: \"#ee4540\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.871,\n    stopColor: \"#e63728\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#de2a13\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"linear-gradient-2\",\n    x1: 1314.111,\n    y1: -895.144,\n    x2: 1389.882,\n    y2: -811.556,\n    gradientTransform: \"translate(1516.988 -707.868) rotate(180)\",\n    xlinkHref: \"#linear-gradient\"\n  }))), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Senswap logo FINAL\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.179,85.127H114a92.562,92.562,0,0,1,92.562,92.562v20.648a0,0,0,0,1,0,0H129.741a92.562,92.562,0,0,1-92.562-92.562V85.127A0,0,0,0,1,37.179,85.127Z\",\n    transform: \"translate(107.828 328.128) rotate(-135)\",\n    fill: \"url(#linear-gradient)\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M169.462,85.127h76.823a0,0,0,0,1,0,0v20.648a92.562,92.562,0,0,1-92.562,92.562H76.9a0,0,0,0,1,0,0V177.689a92.562,92.562,0,0,1,92.562-92.562Z\",\n    transform: \"translate(-52.89 155.776) rotate(-45)\",\n    fill: \"url(#linear-gradient-2)\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSen);\nexport default __webpack_public_path__ + \"static/media/sen.f2d012c907167ba613b035621b6423cb.svg\";\nexport { ForwardRef as ReactComponent };","import { Avatar, Space, Typography } from 'antd'\nimport SentreIcon from 'app/static/images/sen.svg'\n\nconst PoweredBy = ({\n  spacing = 4,\n  iconSize = 20,\n}: {\n  spacing?: number\n  iconSize?: number\n}) => {\n  return (\n    <Space size={spacing}>\n      <Typography.Text style={{ fontSize: 12, color: '#7A7B85' }}>\n        Powered by\n      </Typography.Text>\n      <Avatar src={SentreIcon} size={iconSize} />\n    </Space>\n  )\n}\n\nexport default PoweredBy\n","import { Row, Col, Button, Typography, Tooltip } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Option = ({\n  label,\n  value,\n  onClick,\n  active = false,\n}: {\n  label: string\n  value: number\n  onClick: (value: number) => void\n  active?: boolean\n}) => {\n  return (\n    <Typography.Text\n      style={{ cursor: 'pointer', color: active ? '#F9575E' : 'inherit' }}\n      onClick={() => onClick(value)}\n    >\n      {label}\n    </Typography.Text>\n  )\n}\n\nconst Slippage = ({\n  value,\n  onChange,\n}: {\n  value: number\n  onChange: (value: number) => void\n}) => {\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false}>\n          <Col flex=\"auto\">\n            <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>\n              Slippage Tolerance\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Tooltip\n              placement=\"right\"\n              title={\n                <span>\n                  Your transaction will be canceled if the confirmed price\n                  breaks the limited range of{' '}\n                  <strong style={{ color: '#f9575e' }}>{`${\n                    value * 100\n                  }%.`}</strong>\n                </span>\n              }\n            >\n              <Button\n                type=\"text\"\n                shape=\"circle\"\n                size=\"small\"\n                icon={<IonIcon name=\"information-circle-outline\" />}\n              />\n            </Tooltip>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false} justify=\"space-between\">\n          {[0.001, 0.005, 0.01, 0.05, 1].map((e, i) => (\n            <Col key={i}>\n              <Option\n                label={e === 1 ? 'Freely' : `${e * 100}%`}\n                value={e}\n                onClick={onChange}\n                active={e === value}\n              />\n            </Col>\n          ))}\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Slippage\n","import { Row, Col, Typography, Switch } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Advanced = ({\n  value,\n  onChange,\n}: {\n  value: boolean\n  onChange: (value: boolean) => void\n}) => {\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false}>\n          <Col flex=\"auto\">\n            <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>\n              Advanced Mode\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Switch\n              size=\"small\"\n              checkedChildren={<IonIcon name=\"calculator-outline\" />}\n              unCheckedChildren={<IonIcon name=\"sparkles-outline\" />}\n              checked={value}\n              onChange={onChange}\n            />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Typography.Paragraph style={{ fontSize: 12, textAlign: 'justify' }}>\n          <IonIcon name=\"warning-outline\" /> This advanced mode will disable the\n          automatic protection that often results in bad rates and lost funds.\n          Only use this mode if you know what you are doing.\n        </Typography.Paragraph>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Advanced\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nexport type State = {\n  slippage: number\n  advanced: boolean\n}\n\nconst NAME = 'settings'\nconst initialState: State = {\n  slippage: 0.01,\n  advanced: false,\n}\n\n/**\n * Actions\n */\n\nexport const updateSettings = createAsyncThunk(\n  `${NAME}/updateSettings`,\n  async (settings: Partial<State>) => ({ ...settings }),\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateSettings.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useDispatch, useSelector } from 'react-redux'\n\nimport { Row, Col, Button, Popover, Typography, Divider } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport PoweredBy from 'app/components/poweredBy'\nimport Slippage from './slippage'\nimport Advanced from './advanced'\n\nimport { updateSettings } from 'app/model/settings.controller'\nimport { AppDispatch, AppState } from 'app/model'\n\nconst Settings = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const { slippage, advanced } = useSelector(\n    (state: AppState) => state.settings,\n  )\n\n  const onSlippage = (slippage: number) => {\n    return dispatch(updateSettings({ slippage }))\n  }\n  const onAdvanced = (advanced: boolean) => {\n    return dispatch(updateSettings({ advanced }))\n  }\n\n  return (\n    <Row gutter={[4, 4]} justify=\"end\" align=\"middle\" wrap={false}>\n      <Col>\n        <PoweredBy />\n      </Col>\n      <Col>\n        <Divider type=\"vertical\" style={{ padding: 0 }} />\n      </Col>\n      <Col>\n        <Popover\n          placement=\"bottomRight\"\n          overlayInnerStyle={{ width: 300 }}\n          content={\n            <Row gutter={[8, 8]}>\n              <Col span={24}>\n                <Typography.Title level={5}>Settings</Typography.Title>\n              </Col>\n              <Col span={24}>\n                <Slippage value={slippage} onChange={onSlippage} />\n              </Col>\n              <Divider style={{ marginTop: 8, marginBottom: 8 }} />\n              <Col span={24}>\n                <Advanced value={advanced} onChange={onAdvanced} />\n              </Col>\n            </Row>\n          }\n          trigger=\"click\"\n        >\n          <Button\n            type=\"text\"\n            shape=\"circle\"\n            size=\"small\"\n            icon={<IonIcon name=\"settings-outline\" />}\n          />\n        </Popover>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Settings\n","import React, { useCallback, useEffect, useState } from 'react'\n\nimport { Card, Input, Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { useMint, usePool } from 'senhub/providers'\n\nconst KEYSIZE = 3\n\nconst Search = ({\n  onChange,\n  disabled = false,\n}: {\n  onChange: (data: string[]) => void\n  disabled?: boolean\n}) => {\n  const [mintAddresses, setMintAddresses] = useState<string[]>([])\n  const [keyword, setKeyword] = useState('')\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const sortMintAddresses = useCallback(async () => {\n    // Get all mints in pools\n    const rawMintAddresses = Object.values(pools)\n      .map(({ mint_a, mint_b }) => [mint_a, mint_b])\n      .flat()\n      .filter((item, pos, self) => self.indexOf(item) === pos)\n    // Get all lp mints\n    const lpMintAddresses = Object.values(pools).map(({ mint_lpt }) => mint_lpt)\n    // Check mint addresses (token info, mint lp)\n    const checkedMintAddresses = await Promise.all(\n      rawMintAddresses.map(async (mintAddress) => {\n        const tokenInfo = await tokenProvider.findByAddress(mintAddress)\n        const data = {\n          address: mintAddress,\n          checked: Boolean(tokenInfo) || lpMintAddresses.includes(mintAddress),\n        }\n        return data\n      }),\n    )\n    // Sort mint addresses by checking flags\n    const sortedMintAddresses = checkedMintAddresses\n      .sort((first, second) => {\n        if (!first.checked && second.checked) return 1\n        if (first.checked && !second.checked) return -1\n        return 0\n      })\n      .map(({ address }) => address)\n    // Return\n    return setMintAddresses(sortedMintAddresses)\n  }, [tokenProvider, pools])\n\n  useEffect(() => {\n    sortMintAddresses()\n  }, [sortMintAddresses])\n\n  const search = useCallback(async () => {\n    if (!keyword || keyword.length < KEYSIZE) return onChange(mintAddresses)\n    const raw = await tokenProvider.find(keyword)\n    const data = raw\n      .filter(({ address }) => mintAddresses.includes(address))\n      .map(({ address }) => address)\n    // Search by address\n    mintAddresses.forEach((mintAddress) => {\n      if (data.includes(mintAddress)) return\n      if (!mintAddress.toLowerCase().includes(keyword.toLowerCase())) return\n      return data.push(mintAddress)\n    })\n    return onChange(data)\n  }, [keyword, onChange, tokenProvider, mintAddresses])\n\n  useEffect(() => {\n    search()\n  }, [search])\n\n  return (\n    <Card className=\"card-child\" bodyStyle={{ padding: 8 }} bordered={false}>\n      <Input\n        placeholder=\"Search\"\n        value={keyword}\n        size=\"small\"\n        bordered={false}\n        suffix={\n          <Button\n            type=\"text\"\n            style={{ marginRight: -7 }}\n            size=\"small\"\n            onClick={keyword ? () => setKeyword('') : () => {}}\n            icon={\n              <IonIcon name={keyword ? 'close-outline' : 'search-outline'} />\n            }\n            disabled={disabled}\n          />\n        }\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          setKeyword(e.target.value)\n        }\n        disabled={disabled}\n      />\n    </Card>\n  )\n}\n\nexport default Search\n","import { Row, Col, Space, Typography, Card, Divider } from 'antd'\nimport { MintAvatar, MintName, MintSymbol } from 'shared/antd/mint'\n\nconst Mint = ({\n  mintAddress,\n  onClick,\n  active = false,\n}: {\n  mintAddress: string\n  onClick: () => void\n  active?: boolean\n}) => {\n  return (\n    <Card\n      className={`card-child${active ? ' active' : ''}`}\n      bodyStyle={{ padding: `8px 16px`, cursor: 'pointer' }}\n      bordered={active}\n      onClick={onClick}\n      hoverable\n    >\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Space size={12} style={{ marginLeft: -4 }}>\n            <MintAvatar mintAddress={mintAddress} size={32} />\n            <Typography.Text style={{ margin: 0 }}>\n              <MintSymbol mintAddress={mintAddress} />\n            </Typography.Text>\n            <Divider type=\"vertical\" style={{ margin: 0 }} />\n            <Typography.Text\n              type=\"secondary\"\n              style={{ margin: 0, fontSize: 12 }}\n            >\n              <MintName mintAddress={mintAddress} />\n            </Typography.Text>\n          </Space>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default Mint\n","import { useState, useCallback } from 'react'\nimport { account } from '@senswap/sen-js'\nimport LazyLoad from '@senswap/react-lazyload'\n\nimport { Row, Col, Typography, Divider } from 'antd'\nimport Search from './search'\nimport Mint from './mint'\n\nimport { useMint, usePool } from 'senhub/providers'\nimport { LiteMintInfo } from '../preview'\n\nexport type SelectionInfo = {\n  mintInfo?: LiteMintInfo\n  poolAddresses: string[]\n}\n\nconst MintSelection = ({\n  value,\n  onChange,\n  hiddenTokens,\n}: {\n  value: SelectionInfo\n  onChange: (value: SelectionInfo) => void\n  hiddenTokens?: string[]\n}) => {\n  const [mintAddresses, setMintAddresses] = useState<string[]>([])\n  const { address: currentMintAddress } = value.mintInfo || {}\n  const { pools } = usePool()\n  const { getDecimals } = useMint()\n\n  // Compute available pools\n  const getAvailablePoolAddresses = useCallback(\n    (mintAddress: string) => {\n      if (!account.isAddress(mintAddress)) return []\n      return Object.keys(pools).filter((poolAddress) => {\n        const { mint_a, mint_b } = pools[poolAddress]\n        return [mint_a, mint_b].includes(mintAddress)\n      })\n    },\n    [pools],\n  )\n\n  // Return data to parent\n  const onMint = useCallback(\n    async (mintAddress: string) => {\n      const poolAddresses = getAvailablePoolAddresses(mintAddress)\n      const decimals = await getDecimals(mintAddress)\n      return onChange({\n        mintInfo: {\n          address: mintAddress,\n          decimals,\n        },\n        poolAddresses,\n      })\n    },\n    [getAvailablePoolAddresses, onChange, getDecimals],\n  )\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        <Typography.Title level={5}>Token Selection</Typography.Title>\n      </Col>\n      <Col span={24}>\n        <Divider style={{ margin: 0 }} />\n      </Col>\n      <Col span={24}>\n        <Search onChange={setMintAddresses} />\n      </Col>\n      <Col span={24}>\n        <Row gutter={[16, 16]} style={{ height: 300 }} className=\"scrollbar\">\n          <Col span={24}>\n            <Row gutter={[16, 16]}>\n              {mintAddresses.map((mintAddress, i) => {\n                if (hiddenTokens?.includes(mintAddress)) return null\n                return (\n                  <Col span={24} key={i}>\n                    <LazyLoad height={48} overflow>\n                      <Mint\n                        mintAddress={mintAddress}\n                        onClick={() => onMint(mintAddress)}\n                        active={currentMintAddress === mintAddress}\n                      />\n                    </LazyLoad>\n                  </Col>\n                )\n              })}\n            </Row>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default MintSelection\n","import { useState, Fragment, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { forceCheck } from '@senswap/react-lazyload'\n\nimport { Row, Col, Space, Typography, Divider, Modal } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport MintSelection, { SelectionInfo } from './mintSelection'\n\nimport { SenLpState } from 'app/constant/senLpState'\n\nconst Selection = ({\n  value,\n  onChange,\n  hiddenTokens,\n}: {\n  value: SelectionInfo\n  onChange: (value: SelectionInfo) => void\n  hiddenTokens?: string[]\n}) => {\n  const [visible, setVisible] = useState(false)\n  const history = useHistory()\n  const { state } = useLocation<SenLpState>()\n  useEffect(() => {\n    if (visible) setTimeout(forceCheck, 500)\n  }, [visible])\n\n  const onSelection = (selectionInfo: SelectionInfo) => {\n    setVisible(false)\n\n    // Clear state of senlp come to\n    if (state) history.replace({ ...history.location, state: {} })\n\n    return onChange(selectionInfo)\n  }\n\n  const mintAddress = value?.mintInfo?.address || ''\n\n  return (\n    <Fragment>\n      <Space style={{ cursor: 'pointer' }} onClick={() => setVisible(true)}>\n        <MintAvatar mintAddress={mintAddress} />\n        <Typography.Text type=\"secondary\">\n          <MintSymbol mintAddress={mintAddress} />\n        </Typography.Text>\n        <Divider type=\"vertical\" style={{ marginLeft: 4 }} />\n      </Space>\n      <Modal\n        visible={visible}\n        onCancel={() => setVisible(false)}\n        closeIcon={<IonIcon name=\"close\" />}\n        footer={null}\n        destroyOnClose={true}\n        centered={true}\n      >\n        <Row gutter={[16, 16]}>\n          <Col span={24}>\n            <MintSelection\n              hiddenTokens={hiddenTokens}\n              value={value}\n              onChange={onSelection}\n            />\n          </Col>\n        </Row>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default Selection\n","import { ChangeEvent, useState, forwardRef, useCallback, useRef } from 'react'\n\nimport { Input, Tooltip, Space, InputProps } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nlet timeoutId: ReturnType<typeof setTimeout> | undefined\n\n/**\n * Numeric Input\n * - Check balance based on the max\n * - Only accept numeric characters\n * @remarks The props of input follows the same as https://ant.design/components/input/#API. Extra & Overrided props\n * @param max - Maximum\n * @param onValue - A triggerred function if a valid number\n */\nconst NumericInput = forwardRef(\n  (\n    {\n      max,\n      onValue = () => {},\n      onChange = () => {},\n      ...props\n    }: InputProps & {\n      onValue?: (val: string) => void\n      max?: string | number\n    },\n    ref: any,\n  ) => {\n    const [error, setError] = useState('')\n    const [cursor, setCursor] = useState<number | null>(null)\n    const innerRef = useRef(ref)\n\n    // Handle amount\n    const onAmount = useCallback(\n      (val: string) => {\n        const onError = (er: string) => {\n          if (timeoutId) {\n            clearTimeout(timeoutId)\n            timeoutId = undefined\n          }\n          setError(er)\n          timeoutId = setTimeout(() => setError(''), 500)\n        }\n        const reg = /^\\d*(\\.\\d*)?$/\n        if (!reg.test(val)) return onError('Invalid character')\n        if (max && parseFloat(val) > parseFloat(max.toString()))\n          return onError('Not enough balance')\n        return onValue(val)\n      },\n      [max, onValue],\n    )\n\n    // Handle cursor jumping\n    // To prevent autofocus on mobile, we must strictly check cursor different from null\n    if (cursor !== null) innerRef?.current?.setSelectionRange(cursor, cursor)\n\n    return (\n      <Tooltip\n        title={\n          <Space>\n            <IonIcon name=\"warning\" />\n            {error}\n          </Space>\n        }\n        visible={!!error}\n      >\n        <Input\n          {...props}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            onChange(e)\n            setCursor(e.target.selectionStart)\n            onAmount(e.target.value || '')\n          }}\n          ref={innerRef}\n        />\n      </Tooltip>\n    )\n  },\n)\n\nexport default NumericInput\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string' ||\n  typeof process.env.REACT_APP_SENHUB !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n  senhub: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n  senhub: process.env.REACT_APP_SENHUB,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  spltAddress: string\n  splataAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: 'https://api.devnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: 'https://api.testnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: 'https://api.mainnet-beta.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  bidDefault: string\n  askDefault: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    bidDefault: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    askDefault: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    bidDefault: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    askDefault: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    bidDefault: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    askDefault: 'SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  wormholeAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Config = {\n  assetsRoute: string\n}\n\nconst config: Record<Net, Config> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    assetsRoute: '/app/sen_assets',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    assetsRoute: '/app/sen_assets',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    assetsRoute: '/app/sen_assets',\n  },\n}\n\nexport default config\n","import { env, net } from 'shared/runtime'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\nimport swap from './swap.config'\nimport wormhole from './wormhole.config'\nimport route from './route.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n  swap: swap[net],\n  wormhole: wormhole[net],\n  route: route[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { LiteMintInfo } from 'app/components/preview'\n\nexport type State = {\n  amount: string // Desired amount\n  accountAddress: string // Associated account to the selected token\n  mintInfo: LiteMintInfo // Selected token\n  poolAddresses: string[] // List of available pools\n  priority: number\n}\n\nconst NAME = 'ask'\nconst initialState: State = {\n  amount: '',\n  mintInfo: {\n    address: '',\n    decimals: 0,\n  },\n  accountAddress: '',\n  poolAddresses: [],\n  priority: 0,\n}\n\n/**\n * Actions\n */\n\nexport const updateAskData = createAsyncThunk<\n  Partial<State>,\n  Partial<State> & { prioritized?: boolean; reset?: boolean },\n  { state: any }\n>(\n  `${NAME}/updateAskData`,\n  async ({ prioritized, reset, ...askData }, { getState }) => {\n    const {\n      bid: { priority: refPriority },\n      ask: { priority: prevPriority },\n    } = getState()\n    if (Number(askData.amount) < 0) askData.amount = ''\n    const priority = reset ? 0 : prioritized ? refPriority + 1 : prevPriority\n    return { ...askData, priority }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateAskData.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport { useMint, usePool, useWallet } from 'senhub/providers'\nimport { SelectionInfo } from 'app/components/selection/mintSelection'\n\nconst DEFAULT_INFO = {\n  accountAddress: '',\n  poolAddresses: [],\n}\n\ntype MintSelection = SelectionInfo & {\n  accountAddress?: string\n}\n\nexport const useMintSelection = (mintAddress: string): MintSelection => {\n  const { wallet } = useWallet()\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n  const [selectionInfo, setSelectionInfo] =\n    useState<MintSelection>(DEFAULT_INFO)\n\n  const getSelectionInfo = useCallback(async () => {\n    if (!account.isAddress(mintAddress) || !Object.keys(pools).length)\n      return setSelectionInfo(DEFAULT_INFO)\n\n    const mintInfo = await tokenProvider.findByAddress(mintAddress)\n    if (!mintInfo) return setSelectionInfo(DEFAULT_INFO)\n    const { splt } = window.sentre\n    // get mint account\n    const accountAddress = await splt.deriveAssociatedAddress(\n      wallet.address,\n      mintAddress,\n    )\n    // get pools\n    const poolAddresses = Object.keys(pools).filter((poolAddress) => {\n      const { mint_a, mint_b } = pools[poolAddress]\n      return [mint_a, mint_b].includes(mintAddress)\n    })\n    setSelectionInfo({\n      accountAddress,\n      mintInfo,\n      poolAddresses,\n    })\n  }, [mintAddress, pools, tokenProvider, wallet.address])\n\n  useEffect(() => {\n    getSelectionInfo()\n  }, [getSelectionInfo])\n\n  return selectionInfo\n}\n","import { useMemo, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account } from '@senswap/sen-js'\n\nimport { Row, Col, Typography, Space } from 'antd'\nimport { SelectionInfo } from '../selection/mintSelection'\nimport Selection from '../selection'\nimport NumericInput from 'shared/antd/numericInput'\nimport { MintSymbol } from 'shared/antd/mint'\n\nimport configs from 'app/configs'\nimport { useWallet } from 'senhub/providers'\nimport { numeric } from 'shared/util'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateAskData } from 'app/model/ask.controller'\nimport { useMintSelection } from 'app/hooks/useMintSelection'\nimport { SenLpState } from 'app/constant/senLpState'\nimport useAccountBalance from 'shared/hooks/useAccountBalance'\n\nconst Ask = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const { wallet } = useWallet()\n  const {\n    ask: { amount, accountAddress, mintInfo, poolAddresses },\n    bid: {\n      mintInfo: { address: bidAddress },\n    },\n  } = useSelector((state: AppState) => state)\n  const { state } = useLocation<SenLpState>()\n  const { balance: maxBalance } = useAccountBalance(accountAddress)\n  const selectionDefault = useMintSelection(configs.swap.askDefault)\n  const poolAdress = state?.poolAddress\n\n  // Select default\n  useEffect(() => {\n    if (account.isAddress(accountAddress) || account.isAddress(poolAdress))\n      return\n    dispatch(updateAskData(selectionDefault))\n  }, [accountAddress, dispatch, poolAdress, selectionDefault])\n\n  // Compute selection info\n  const selectionInfo: SelectionInfo = useMemo(\n    () => ({ mintInfo, poolAddresses }),\n    [mintInfo, poolAddresses],\n  )\n\n  // Handle amount\n  const onAmount = (val: string) =>\n    dispatch(updateAskData({ amount: val, prioritized: true }))\n\n  // Update ask data\n  const onSelectionInfo = async (selectionInfo: SelectionInfo) => {\n    const { splt } = window.sentre\n    const { address: mintAddress } = selectionInfo.mintInfo || {}\n    if (!account.isAddress(mintAddress))\n      return dispatch(\n        updateAskData({ amount: '', prioritized: true, ...selectionInfo }),\n      )\n    const accountAddress = await splt.deriveAssociatedAddress(\n      wallet.address,\n      mintAddress,\n    )\n    dispatch(\n      updateAskData({\n        amount: '',\n        prioritized: true,\n        accountAddress,\n        ...selectionInfo,\n      }),\n    )\n  }\n\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Typography.Text>To</Typography.Text>\n      </Col>\n      <Col span={24}>\n        <NumericInput\n          placeholder=\"0\"\n          value={amount}\n          onValue={onAmount}\n          size=\"large\"\n          prefix={\n            <Selection\n              hiddenTokens={[bidAddress]}\n              value={selectionInfo}\n              onChange={onSelectionInfo}\n            />\n          }\n        />\n      </Col>\n      <Col flex=\"auto\" />\n      <Col>\n        <Space className=\"caption\">\n          <Typography.Text type=\"secondary\">Available:</Typography.Text>\n          <Typography.Text type=\"secondary\">\n            {numeric(maxBalance).format('0,0.[00]')}\n          </Typography.Text>\n          <Typography.Text type=\"secondary\">\n            <MintSymbol mintAddress={selectionInfo.mintInfo?.address || ''} />\n          </Typography.Text>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Ask\n","export type EthAddressConfig = {\n  mainnet: string\n  goerli: string\n  ropsten: string\n}\n\nexport type EthChainIdConfig = {\n  mainnet: number\n  goerli: number\n  ropsten: number\n}\n\nexport type EtherNetwork = 'mainnet' | 'goerli'\n\nexport type EtherConfigSet = {\n  mainnet: string\n  goerli: string\n  ropsten: string\n}\n\nexport type MoralisStructure = {\n  url: string\n  apiKey: string\n}\n\nexport const ETH_BRIDGE_ADDRESS: EthAddressConfig = {\n  mainnet: '0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B',\n  goerli: '0x706abc4E45D419950511e474C7B9Ed348A4a716c',\n  ropsten: '0xC89Ce4735882C9F0f0FE26686c53074E09B0D550',\n}\n\nexport const ETH_TOKEN_BRIDGE_ADDRESS: EthAddressConfig = {\n  mainnet: '0x3ee18B2214AFF97000D974cf647E7C347E8fa585',\n  goerli: '0xf890982f9310df57d00f659cf4fd87e65aded8d7',\n  ropsten: '0x0290FB167208Af455bB137780163b7B7a9a10C16',\n}\n\nexport const CHAIN_ID_ETH: EthChainIdConfig = {\n  mainnet: 1,\n  goerli: 5,\n  ropsten: 3,\n}\n\nexport const MORALIS_INFO: MoralisStructure = {\n  url: 'https://deep-index.moralis.io/api/v2',\n  apiKey: 'N6yeIUl1FxCPZWbXyxLHWPAjSr6ahQeJTX3d19pSKCwHsLCzpWE7z1hilon4xDOd',\n}\n\nexport const INFURA_API_KEY: String = '5eb1b92f2065414d9dd21858fac54257'\n\nexport const INFURA_API_HTTP_URL: EtherConfigSet = {\n  mainnet: `https://mainnet.infura.io/v3/${INFURA_API_KEY}`,\n  goerli: `https://goerli.infura.io/v3/${INFURA_API_KEY}`,\n  ropsten: `https://ropsten.infura.io/v3/${INFURA_API_KEY}`,\n}\n\nexport const INFURA_API_WSS_URL: EtherConfigSet = {\n  mainnet: `wss://mainnet.infura.io/ws/v3/${INFURA_API_KEY}`,\n  goerli: `wss://goerli.infura.io/ws/v3/${INFURA_API_KEY}`,\n  ropsten: `wss://ropsten.infura.io/ws/v3/${INFURA_API_KEY}`,\n}\n","export type SolNetWork = 'mainnet' | 'devnet'\n\nexport type SolAddressConfig = {\n  mainnet: string\n  testnet: string\n  devnet: string\n}\n\nexport const SOL_BRIDGE_ADDRESS: SolAddressConfig = {\n  mainnet: 'worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth',\n  testnet: 'Brdguy7BmNB4qwEbcqqMbyV5CyJd2sxQNUn6NEpMSsUb',\n  devnet: '3u8hJUVTA4jH1wYAyUur7FFZVQ8H635K3tSHHF4ssjQ5',\n}\n\nexport const SOL_TOKEN_BRIDGE_ADDRESS: SolAddressConfig = {\n  mainnet: 'wormDTUJ6AWPNvk59vGQbDvGJmqbDTdgWgAqcLBCgUb',\n  testnet: 'A4Us8EhCC76XdGAN17L4KpRNEK423nMivVHZzZqFqqBg',\n  devnet: 'DZnkkTmCiFWfYTfT41X3Rd1kDgozqzxWaHqsw6W4x2oe',\n}\n","import {\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from '@certusone/wormhole-sdk'\nimport storage from 'shared/storage'\n\nimport {\n  EtherNetwork,\n  ETH_BRIDGE_ADDRESS,\n  ETH_TOKEN_BRIDGE_ADDRESS,\n} from 'app/constant/ethConfig'\nimport {\n  SolNetWork,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n} from 'app/constant/solConfig'\nimport { getIsWrappedAssetSol } from '@certusone/wormhole-sdk'\n\nexport const getSolNetwork = () => {\n  const solNetwork = storage.get('network') || 'mainnet'\n  return solNetwork\n}\n\nexport const getEtherNetwork = () => {\n  const solNetwork = getSolNetwork()\n  const etherNetwork = solNetwork === 'mainnet' ? 'mainnet' : 'goerli'\n  return etherNetwork\n}\n\nexport const getEtherContext = () => {\n  const etherNetwork: EtherNetwork = getEtherNetwork()\n  return {\n    chainId: CHAIN_ID_ETH,\n    tokenBridgeAddress: ETH_TOKEN_BRIDGE_ADDRESS[etherNetwork],\n    bridgeAddress: ETH_BRIDGE_ADDRESS[etherNetwork],\n  }\n}\n\nexport const getSolContext = () => {\n  const solNetWork: SolNetWork = getSolNetwork()\n  return {\n    chainId: CHAIN_ID_SOLANA,\n    tokenBridgeAddress: SOL_TOKEN_BRIDGE_ADDRESS[solNetWork],\n    bridgeAddress: SOL_BRIDGE_ADDRESS[solNetWork],\n  }\n}\n\nexport const checkAttestedWormhole = async (mintAddress: string) => {\n  const solContext = getSolContext()\n  return getIsWrappedAssetSol(\n    window.sentre.splt.connection,\n    solContext.tokenBridgeAddress,\n    mintAddress,\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { account } from '@senswap/sen-js'\n\nimport { Space, Tag, Typography } from 'antd'\n\nimport { AppState } from 'app/model'\nimport { checkAttestedWormhole } from 'app/helper/wormhole'\nimport { randomColor } from 'shared/util'\nimport configs from 'app/configs'\n\nconst WORMHOLE_COLOR = '#F9575E'\n\nconst {\n  route: { assetsRoute },\n} = configs\n\nconst WormholeSupported = () => {\n  const [wormholeSupported, setWormholeSupported] = useState(false)\n  const history = useHistory()\n  const {\n    bid: { mintInfo },\n  } = useSelector((state: AppState) => state)\n  const query = new URLSearchParams(useLocation().search)\n  const { address: mintAddress } = mintInfo || {}\n\n  useEffect(() => {\n    ;(async () => {\n      if (!account.isAddress(mintAddress)) return setWormholeSupported(false)\n      const wormholeSupported = await checkAttestedWormhole(mintAddress)\n      return setWormholeSupported(wormholeSupported)\n    })()\n  }, [mintAddress])\n\n  const wormholeBridge = () => {\n    query.set('tokenAddress', mintAddress)\n    history.push(`${assetsRoute}?` + query.toString())\n  }\n\n  if (!wormholeSupported) return null\n  return (\n    <Space size={4}>\n      <Tag\n        style={{\n          margin: 0,\n          borderRadius: 4,\n          color: randomColor(WORMHOLE_COLOR),\n          cursor: 'pointer',\n        }}\n        color={randomColor(WORMHOLE_COLOR, 0.2)}\n        onClick={wormholeBridge}\n      >\n        Wormhole Bridge\n      </Tag>\n      <Typography.Text type=\"secondary\">Supported</Typography.Text>\n    </Space>\n  )\n}\n\nexport default WormholeSupported\n","import { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account, DEFAULT_WSOL, utils } from '@senswap/sen-js'\n\nimport { Row, Col, Typography, Button, Space } from 'antd'\nimport Selection from '../selection'\nimport NumericInput from 'shared/antd/numericInput'\nimport { MintSymbol } from 'shared/antd/mint'\nimport WormholeSupported from './wormholeSupported'\n\nimport configs from 'app/configs'\nimport { useWallet } from 'senhub/providers'\nimport { numeric } from 'shared/util'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { SelectionInfo } from '../selection/mintSelection'\nimport { useMintSelection } from 'app/hooks/useMintSelection'\nimport { SenLpState } from 'app/constant/senLpState'\nimport useAccountBalance from 'shared/hooks/useAccountBalance'\n\nconst {\n  swap: { bidDefault },\n} = configs\n\nconst Bid = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const {\n    wallet: { address: walletAddress, lamports },\n  } = useWallet()\n  const {\n    bid: { amount: bidAmount, accountAddress, mintInfo, poolAddresses },\n    ask: {\n      mintInfo: { address: askAddress },\n    },\n  } = useSelector((state: AppState) => state)\n  const { amount: balance } = useAccountBalance(accountAddress)\n  const selectionDefault = useMintSelection(bidDefault)\n  const { state } = useLocation<SenLpState>()\n  const poolAdress = state?.poolAddress\n  const { address: mintAddress, decimals } = mintInfo\n\n  // Select default\n  useEffect(() => {\n    if (account.isAddress(accountAddress) || account.isAddress(poolAdress))\n      return\n    dispatch(updateBidData(selectionDefault))\n  }, [accountAddress, dispatch, poolAdress, selectionDefault])\n\n  // Compute selection info\n  const selectionInfo: SelectionInfo = useMemo(\n    () => ({ mintInfo, poolAddresses }),\n    [mintInfo, poolAddresses],\n  )\n\n  // Compute human-readable balance\n  const maxBalance = useMemo((): string => {\n    if (mintAddress !== DEFAULT_WSOL)\n      return utils.undecimalize(balance, decimals)\n    // So estimate max = 0.01 fee -> multi transaction.\n    const estimateFee = utils.decimalize(0.01, decimals)\n    const max = lamports + balance - estimateFee\n    if (max <= balance) return utils.undecimalize(balance, decimals)\n    return utils.undecimalize(max, decimals)\n  }, [balance, decimals, lamports, mintAddress])\n\n  // Handle amount\n  const onAmount = (val: string) =>\n    dispatch(updateBidData({ amount: val, prioritized: true }))\n  // All in :)))\n  const onMax = () => onAmount(maxBalance)\n\n  // Update bid data\n  const onSelectionInfo = async (selectionInfo: SelectionInfo) => {\n    const { splt } = window.sentre\n    const { address: mintAddress } = selectionInfo.mintInfo || {}\n    if (!account.isAddress(mintAddress))\n      return dispatch(\n        updateBidData({ amount: '', prioritized: true, ...selectionInfo }),\n      )\n    const accountAddress = await splt.deriveAssociatedAddress(\n      walletAddress,\n      mintAddress,\n    )\n    return dispatch(\n      updateBidData({\n        amount: '',\n        prioritized: true,\n        accountAddress,\n        ...selectionInfo,\n      }),\n    )\n  }\n\n  return (\n    <Row gutter={[8, 8]}>\n      <Col flex=\"auto\">\n        <Typography.Text>From</Typography.Text>\n      </Col>\n      <Col>\n        <WormholeSupported />\n      </Col>\n      <Col span={24}>\n        <NumericInput\n          placeholder=\"0\"\n          value={bidAmount}\n          onValue={onAmount}\n          size=\"large\"\n          prefix={\n            <Selection\n              hiddenTokens={[askAddress]}\n              value={selectionInfo}\n              onChange={onSelectionInfo}\n            />\n          }\n          suffix={\n            <Button\n              type=\"text\"\n              size=\"small\"\n              style={{ fontSize: 12, marginRight: -7 }}\n              onClick={onMax}\n            >\n              MAX\n            </Button>\n          }\n        />\n      </Col>\n      <Col flex=\"auto\" />\n      <Col>\n        <Space className=\"caption\">\n          <Typography.Text type=\"secondary\">Available:</Typography.Text>\n          <Typography.Text type=\"secondary\">\n            {numeric(maxBalance || 0).format('0,0.[00]')}\n          </Typography.Text>\n          <Typography.Text type=\"secondary\">\n            <MintSymbol mintAddress={selectionInfo.mintInfo?.address || ''} />\n          </Typography.Text>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Bid\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { RouteTrace } from 'app/helper/router'\n\nexport type State = {\n  best: RouteTrace\n  amounts: bigint[]\n  amount: bigint\n}\n\nconst NAME = 'route'\nconst initialState: State = {\n  amount: BigInt(0),\n  amounts: [],\n  best: [],\n}\n\n/**\n * Actions\n */\nexport const updateRoute = createAsyncThunk<\n  Partial<State>,\n  Partial<State>,\n  { state: any }\n>(`${NAME}/updateRoute`, async (route, { getState }) => {\n  const { route: prevRoute } = getState()\n  if (!route) return { ...prevRoute }\n  return { ...prevRoute, ...route }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateRoute.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account, utils } from '@senswap/sen-js'\n\nimport { Button, Col, Row } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport Ask from '../ask'\nimport Bid from '../bid'\n\nimport {\n  buildPoolGraph,\n  findAllRoutes,\n  findBestRouteFromAsk,\n  findBestRouteFromBid,\n} from 'app/helper/router'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateAskData } from 'app/model/ask.controller'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { State as RouteState, updateRoute } from 'app/model/route.controller'\nimport { usePool } from 'senhub/providers'\nimport { SenLpState } from 'app/constant/senLpState'\n\nconst SwapInput = ({ spacing = 12 }: { spacing?: number }) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const [bestRoute, setBestRoute] = useState<RouteState>({\n    best: [],\n    amounts: [],\n    amount: BigInt(0),\n  })\n  const { bid: bidData, ask: askData } = useSelector((state: AppState) => state)\n  const { pools } = usePool()\n  const { state } = useLocation<SenLpState>()\n  const poolAddress = state?.poolAddress\n  const originalRoute = state?.originalRoute\n\n  /**\n   * Switch tokens\n   */\n  const onSwitch = useCallback(async () => {\n    const { amount: bidAmount, priority: bidPriority, ...bidRest } = bidData\n    const { amount: askAmount, priority: askPriority, ...askRest } = askData\n    const amount = bidPriority > askPriority ? bidAmount : askAmount\n    const updateData = bidPriority > askPriority ? updateAskData : updateBidData\n    await dispatch(updateBidData({ ...askRest, amount: '', reset: true }))\n    await dispatch(updateAskData({ ...bidRest, amount: '', reset: true }))\n    await dispatch(updateData({ amount, prioritized: true }))\n  }, [dispatch, askData, bidData])\n\n  /**\n   * Find optimal route\n   */\n  const findRoute = useCallback(async () => {\n    const {\n      poolAddresses: bidPoolAddresses,\n      mintInfo: { address: bidMintAddress },\n      amount: bidAmount,\n      priority: bidPriority,\n    } = bidData\n    const {\n      poolAddresses: askPoolAddresses,\n      mintInfo: { address: askMintAddress },\n      amount: askAmount,\n      priority: askPriority,\n    } = askData\n\n    // Initialize an instance for the best route\n    // The best route return a route that user can receive maximum ask amount when swap\n    let bestRoute: RouteState = { best: [], amounts: [], amount: BigInt(0) }\n    // Return empty default\n    if (\n      (!Number(bidAmount) && !Number(askAmount)) ||\n      !account.isAddress(bidMintAddress) ||\n      !account.isAddress(askMintAddress) ||\n      !bidPoolAddresses.length ||\n      !askPoolAddresses.length\n    )\n      return setBestRoute(bestRoute)\n\n    // All possible routes\n    let allRoutes = findAllRoutes(\n      buildPoolGraph(pools),\n      bidMintAddress,\n      askMintAddress,\n    )\n    // No available route\n    if (!allRoutes.length) return setBestRoute(bestRoute)\n    // When user select original route from senlp\n    if (originalRoute)\n      allRoutes = allRoutes.filter(\n        (route) =>\n          route.length === 1 && route[0].poolData.address === poolAddress,\n      )\n\n    if (askPriority < bidPriority)\n      bestRoute = findBestRouteFromBid(allRoutes, bidData)\n    else bestRoute = findBestRouteFromAsk(allRoutes, askData)\n    return setBestRoute(bestRoute)\n  }, [askData, bidData, originalRoute, poolAddress, pools])\n\n  const setRoute = useCallback(() => {\n    const bidPriority = bidData.priority\n    const askPriority = askData.priority\n    if (askPriority < bidPriority) {\n      dispatch(\n        updateAskData({\n          amount: utils.undecimalize(\n            bestRoute.amount,\n            askData.mintInfo.decimals,\n          ),\n        }),\n      )\n    }\n    if (bidPriority < askPriority) {\n      dispatch(\n        updateBidData({\n          amount: utils.undecimalize(\n            bestRoute.amount,\n            bidData.mintInfo.decimals,\n          ),\n        }),\n      )\n    }\n    dispatch(updateRoute({ ...bestRoute }))\n  }, [\n    askData.priority,\n    bestRoute,\n    bidData.priority,\n    dispatch,\n    bidData.mintInfo?.decimals,\n    askData.mintInfo?.decimals,\n  ])\n\n  useEffect(() => {\n    setRoute()\n  }, [setRoute])\n\n  useEffect(() => {\n    findRoute()\n  }, [findRoute])\n\n  return (\n    <Row gutter={[spacing, spacing]} justify=\"center\">\n      <Col span={24}>\n        <Bid />\n      </Col>\n      <Col>\n        <Button\n          size=\"small\"\n          icon={<IonIcon name=\"git-compare-outline\" />}\n          onClick={onSwitch}\n        />\n      </Col>\n      <Col span={24}>\n        <Ask />\n      </Col>\n    </Row>\n  )\n}\n\nexport default SwapInput\n","import { Col, Row } from 'antd'\nimport Settings from '../settings'\nimport SwapInput from './swapInput'\n\nconst SwapForm = () => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} justify=\"end\" align=\"middle\" wrap={false}>\n          <Col>\n            <Settings />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <SwapInput />\n      </Col>\n    </Row>\n  )\n}\n\nexport default SwapForm\n","import { Card, Col, Row } from 'antd'\nimport SwapReview from './swapReview'\nimport SwapPoolInfo from './swapPoolInfo'\nimport SwapForm from 'app/components/swapForm'\n\nconst Swap = () => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Card bordered={false} className=\"card-swap\">\n          <SwapForm />\n        </Card>\n      </Col>\n      <Col span={24}>\n        <SwapReview />\n      </Col>\n      <Col span={24}>\n        <SwapPoolInfo />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Swap\n","import { Tag } from 'antd'\n\nconst STATUS_COLOR: Record<string, number[]> = {\n  success: [20, 224, 65],\n  pending: [212, 177, 6],\n  error: [215, 35, 17],\n  failed: [215, 35, 17],\n}\n\nconst StatusTag = ({ tag }: { tag: string }) => {\n  const setColorTag = (opacity?: number) => {\n    let color = STATUS_COLOR[tag]\n    return `rgba(${color[0]},  ${color[1]}, ${color[2]},${opacity || 1})`\n  }\n\n  return (\n    <Tag\n      style={{\n        margin: 0,\n        borderRadius: 4,\n        color: setColorTag(),\n        textTransform: 'capitalize',\n      }}\n      color={setColorTag(0.1)}\n    >\n      {tag}\n    </Tag>\n  )\n}\n\nexport default StatusTag\n","import { Button, Space, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport IonIcon from 'shared/antd/ionicon'\nimport StatusTag from './statusTag'\n\nimport { explorer, numeric, shortenAddress } from 'shared/util'\n\nconst FORMAT_AMOUNT = '0,00.[0000]a'\n\nexport const HISTORY_COLUMN = [\n  {\n    title: 'TIME',\n    dataIndex: 'time',\n  },\n  {\n    title: 'TRANSACTION',\n    dataIndex: 'transactionId',\n    render: (text: string) => (\n      <Space align=\"baseline\">\n        <Typography.Text\n          onClick={() => window.open(explorer(text), '_blank')}\n          style={{ fontWeight: 700, cursor: 'pointer' }}\n        >\n          {shortenAddress(text, 3, '...')}\n        </Typography.Text>\n        <Button\n          type=\"text\"\n          size=\"small\"\n          onClick={() => window.open(explorer(text), '_blank')}\n          icon={<IonIcon name=\"open-outline\" />}\n        />\n      </Space>\n    ),\n  },\n\n  {\n    title: 'BID',\n    dataIndex: 'bid',\n    render: (text: string, record: any) =>\n      !record.from ? (\n        '--'\n      ) : (\n        <Space size={8}>\n          <MintAvatar mintAddress={record.from} />\n          {numeric(record.amountFrom).format(FORMAT_AMOUNT)}\n          <MintSymbol mintAddress={record.from} />\n        </Space>\n      ),\n  },\n  {\n    title: 'ASK',\n    dataIndex: 'ask',\n    render: (text: string, record: any) =>\n      !record.to ? (\n        '--'\n      ) : (\n        <Space size={8}>\n          <MintAvatar mintAddress={record.to} />\n          {numeric(record.amountTo).format(FORMAT_AMOUNT)}\n          <MintSymbol mintAddress={record.to} />\n        </Space>\n      ),\n  },\n  {\n    title: 'STATUS',\n    dataIndex: 'status',\n    width: 100,\n    render: (text: string, record: any) => <StatusTag tag={record.status} />,\n  },\n]\n","export class TransLog {\n  programId: string = ''\n\n  programInfo: ProgramInfo | undefined\n\n  signature: string = ''\n\n  blockTime: number = 0\n\n  time: number = 0\n\n  owner: string = ''\n\n  actionType: string = ''\n\n  actionTransfers: Array<ActionTransfer> = []\n\n  programTransfer: Array<ActionTransfer> = []\n}\n\nexport class ActionInfo {\n  address: string = ''\n\n  // pool: string = ''\n\n  mint: string = ''\n\n  decimals: number = 0\n\n  preBalance: string = '0'\n\n  postBalance: string = '0'\n}\n/**\n * Amount is not same postBalance - preBalance\n * @postBalance and @preBalance are balance after all action (transaction)\n * @postBalance = @preBalance +- all @amount (multi amount in transaction)\n * @amount is value in 1 action\n */\nexport class ActionTransfer {\n  source: ActionInfo | undefined\n\n  destination: ActionInfo | undefined\n\n  amount: string = '0'\n}\ntype ProgramInfo = {\n  programId: string\n  data: string\n}\n","import {\n  ConfirmedSignatureInfo,\n  ConfirmedSignaturesForAddress2Options,\n  Connection,\n  ParsedConfirmedTransaction,\n  PublicKey,\n} from '@solana/web3.js'\n\nimport { OptionsFetchSignature } from '../../constants/transaction'\n\nconst DEFAULT_LIMIT = 700\nconst TRANSACTION_LIMIT = 150\n\nexport class Solana {\n  private conn: Connection = window.sentre.splt.connection\n\n  //Search for all signatures from last Signature and earlier\n  //So: If new collection (to now) -> last Signature = null\n  private async fetchSignatures(\n    address: PublicKey,\n    lastSignature?: string,\n    limit: number = DEFAULT_LIMIT,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    if (limit > DEFAULT_LIMIT) limit = DEFAULT_LIMIT\n    const options: ConfirmedSignaturesForAddress2Options = {\n      limit: limit,\n      before: lastSignature,\n    }\n    return this.conn.getConfirmedSignaturesForAddress2(address, options)\n  }\n\n  private async fetchConfirmTransaction(signatures: string[]) {\n    let confirmedTransactions: ParsedConfirmedTransaction[] = []\n    let limit = TRANSACTION_LIMIT\n\n    const promiseTransGroup = []\n    for (let offset = 0; offset <= signatures.length / limit; offset++) {\n      const skip = offset * limit\n      const signaturesGroup = signatures.slice(skip, skip + limit)\n      promiseTransGroup.push(\n        this.conn.getParsedConfirmedTransactions(signaturesGroup),\n      )\n    }\n\n    const transGroups = await Promise.all(promiseTransGroup)\n    for (const transGroup of transGroups) {\n      //@ts-ignore\n      confirmedTransactions = confirmedTransactions.concat(transGroup)\n    }\n    return confirmedTransactions\n  }\n\n  async fetchTransactions(\n    programId: string,\n    options: OptionsFetchSignature,\n  ): Promise<ParsedConfirmedTransaction[]> {\n    const currentTime = new Date().getTime() / 1000\n    let { secondFrom, secondTo, lastSignature, limit } = options\n    secondFrom = Math.floor(secondFrom || 0)\n    secondTo = Math.floor(secondTo || currentTime)\n\n    const programPublicKey = new PublicKey(programId)\n    let signatures: string[] = []\n    let isStop = false\n\n    while (!isStop) {\n      const confirmedSignatureInfos: ConfirmedSignatureInfo[] =\n        await this.fetchSignatures(programPublicKey, lastSignature, limit)\n      if (!confirmedSignatureInfos?.length || isStop) break\n      for (const info of confirmedSignatureInfos) {\n        const blockTime = info.blockTime\n        if (!blockTime || blockTime > secondTo) continue\n        if (blockTime < secondFrom) {\n          isStop = true\n          break\n        }\n        lastSignature = info.signature\n        signatures.push(info.signature)\n      }\n\n      if (limit && signatures.length >= limit) break\n      if (confirmedSignatureInfos?.length < DEFAULT_LIMIT) break\n    }\n    const confirmedTransactions = await this.fetchConfirmTransaction(signatures)\n    return confirmedTransactions\n  }\n}\n","export enum ParsedType {\n  Transfer = 'transfer',\n}\n\nexport type ParsedAction = {\n  type: ParsedType\n  info: ParsedInfoTransfer\n}\n\nexport type ParsedInfoTransfer = {\n  source: string\n  destination: string\n  amount: string\n  lamports: number\n}\n\nexport type OptionsFetchSignature = {\n  limit?: number\n  lastSignature?: string\n  secondFrom?: number\n  secondTo?: number\n}\n","import moment from 'moment'\n\nconst SECOND_PER_MILLISECOND = 1000\n\nexport enum TimeFormat {\n  YMD = 'YYYYMMDD',\n  SortableTimePattern = 'YYYY-MM-DD HH:mm:ss',\n}\n\nexport class DateHelper {\n  private milliSeconds: number = new Date().valueOf()\n\n  setMilliSeconds(milliSeconds: number) {\n    this.milliSeconds = milliSeconds\n  }\n\n  static fromSeconds(seconds: number): DateHelper {\n    const date = new DateHelper()\n    const milliSeconds = seconds * SECOND_PER_MILLISECOND\n    date.setMilliSeconds(milliSeconds)\n    return date\n  }\n\n  static fromYmd(ymd: number): DateHelper {\n    const date = new DateHelper()\n    const milliSeconds = moment(ymd, TimeFormat.YMD).valueOf()\n    date.setMilliSeconds(milliSeconds)\n    return date\n  }\n\n  static getListDate(ymdFrom: number, ymdTo: number): number[] {\n    const dates: number[] = []\n    let dateFrom = DateHelper.fromYmd(ymdFrom)\n    const dateTo = DateHelper.fromYmd(ymdTo)\n    while (dateFrom.ymd() <= dateTo.ymd()) {\n      dates.push(dateFrom.ymd())\n      dateFrom = dateFrom.addDay()\n    }\n    return dates\n  }\n\n  format(dateFormat: TimeFormat): string {\n    const date = new Date(this.milliSeconds)\n    return moment(date).format(dateFormat)\n  }\n\n  subtractDay(dayAmount: number = 1): DateHelper {\n    const milliSeconds = moment(this.milliSeconds)\n      .subtract(dayAmount, 'days')\n      .valueOf()\n    const date = DateHelper.fromSeconds(milliSeconds / SECOND_PER_MILLISECOND)\n    return date\n  }\n\n  addDay(dayAmount: number = 1): DateHelper {\n    const milliSeconds = moment(this.milliSeconds)\n      .add(dayAmount, 'days')\n      .valueOf()\n    const date = DateHelper.fromSeconds(milliSeconds / SECOND_PER_MILLISECOND)\n    return date\n  }\n\n  seconds(): number {\n    return (\n      (this.milliSeconds - (this.milliSeconds % SECOND_PER_MILLISECOND)) /\n      SECOND_PER_MILLISECOND\n    )\n  }\n\n  ymd(): number {\n    return Number(this.format(TimeFormat.YMD))\n  }\n\n  static today(format: string = TimeFormat.YMD): string {\n    return moment().format(format)\n  }\n}\n","import base58 from 'bs58'\n\nimport { TransLog } from '../entities/trans-log'\nimport { TransLogService } from './translog'\n\nconst { struct } = require('soprox-abi')\n\nconst TRANSLOG_PROGRAM_DATA_SCHEMA = { key: 'code', type: 'u8' }\n\nexport enum SwapActionType {\n  Route = 'SWAP',\n}\n\nconst ACTION_TYPE: Record<number, SwapActionType> = {\n  8: SwapActionType.Route,\n}\n\nexport default class SwapTranslogService extends TransLogService {\n  parseAction = (transLog: TransLog) => {\n    const programDataEncode = transLog.programInfo?.data\n    if (!programDataEncode) return ''\n\n    const dataBuffer = base58.decode(programDataEncode)\n    const actionLayout = new struct([TRANSLOG_PROGRAM_DATA_SCHEMA])\n    const programDataDecode: { code: number } = actionLayout.fromBuffer(\n      Buffer.from(dataBuffer),\n    )\n    return ACTION_TYPE[programDataDecode.code] || ''\n  }\n}\n","//@ts-ignore\nimport {\n  ParsedConfirmedTransaction,\n  ParsedInstruction,\n  ParsedMessageAccount,\n  PartiallyDecodedInstruction,\n  TokenBalance,\n} from '@solana/web3.js'\nimport { account } from '@senswap/sen-js'\n\nimport { ActionInfo, ActionTransfer, TransLog } from '../entities/trans-log'\nimport { Solana } from '../adapters/solana/client'\nimport {\n  OptionsFetchSignature,\n  ParsedAction,\n  ParsedInfoTransfer,\n  ParsedType,\n} from '../constants/transaction'\nimport { DateHelper } from '../helpers/date'\nimport { SOL_ADDRESS, SOL_DECIMALS } from '../constants/sol'\n\ntype InstructionData = ParsedInstruction | PartiallyDecodedInstruction\n\nexport class TransLogService {\n  solana: Solana\n  constructor() {\n    this.solana = new Solana()\n  }\n\n  protected parseAction = (transLog: TransLog) => {\n    return ''\n  }\n\n  async collect(\n    programId: string,\n    configs: OptionsFetchSignature,\n    funcFilter?: (transLog: TransLog) => boolean,\n  ): Promise<TransLog[]> {\n    let { lastSignature, limit } = configs\n\n    let isStop = false\n    let transLogs: Array<TransLog> = []\n    let lastSignatureTmp = lastSignature\n\n    while (!isStop) {\n      const confirmedTrans: ParsedConfirmedTransaction[] =\n        await this.solana.fetchTransactions(programId, {\n          ...configs,\n          lastSignature: lastSignatureTmp,\n        })\n\n      for (const trans of confirmedTrans) {\n        lastSignatureTmp = trans.transaction.signatures[0]\n        const log = this.parseTransLog(trans)\n        if (log) transLogs.push(log)\n      }\n\n      if (funcFilter) {\n        transLogs = transLogs.filter((trans) => funcFilter(trans))\n\n        if (!confirmedTrans.length || isStop) break\n        if (limit && transLogs.length >= limit) {\n          isStop = true\n          break\n        }\n      } else break\n    }\n    return transLogs\n  }\n  private parseTransLog(\n    confirmedTrans: ParsedConfirmedTransaction,\n  ): TransLog | undefined {\n    const { blockTime, meta, transaction } = confirmedTrans\n    if (!blockTime || !meta) return\n    const { postTokenBalances, preTokenBalances, postBalances, preBalances } =\n      meta\n    const { signatures, message } = transaction\n\n    const innerInstructionData = meta.innerInstructions?.[0]?.instructions || []\n    const instructionData = message.instructions[0] || []\n\n    const transLog = new TransLog()\n    transLog.signature = signatures[0]\n    transLog.blockTime = blockTime\n    transLog.time = DateHelper.fromSeconds(blockTime).ymd()\n    transLog.programId = instructionData.programId.toString()\n\n    const mapAccount = this.parseAccountInfo(\n      message.accountKeys,\n      postTokenBalances || [],\n      preTokenBalances || [],\n      postBalances,\n      preBalances,\n    )\n    // system program transaction\n    if (this.isParsedInstruction(instructionData)) {\n      transLog.programTransfer = this.parseListActionTransfer(\n        [instructionData],\n        mapAccount,\n      )\n      return transLog\n    }\n    // smart contract transaction\n    transLog.actionTransfers = this.parseListActionTransfer(\n      innerInstructionData,\n      mapAccount,\n    )\n    transLog.programInfo = {\n      programId: instructionData.programId.toString(),\n      data: (instructionData as PartiallyDecodedInstruction).data,\n    }\n    transLog.actionType = this.parseAction(transLog)\n    return transLog\n  }\n\n  private isParsedInstruction(instructionData: InstructionData) {\n    return (instructionData as ParsedInstruction).parsed !== undefined\n  }\n\n  private parseListActionTransfer(\n    actions: InstructionData[],\n    mapAccount: Map<string, ActionInfo>,\n  ) {\n    const actionTransfer: ActionTransfer[] = []\n    for (const action of actions) {\n      if (!this.isParsedInstruction(action)) continue\n      const actionParsed: ParsedAction =\n        (action as ParsedInstruction).parsed || {}\n      switch (actionParsed.type) {\n        case ParsedType.Transfer:\n          const info: ParsedInfoTransfer = actionParsed.info\n          const parsedAction = this.parseActionTransfer(info, mapAccount)\n          if (parsedAction) actionTransfer.push(parsedAction)\n          break\n        default:\n          break\n      }\n    }\n    return actionTransfer\n  }\n\n  private parseActionTransfer(\n    parsedTransfer: ParsedInfoTransfer,\n    mapAccount: Map<string, ActionInfo>,\n  ): ActionTransfer | undefined {\n    const { source, destination, amount, lamports } = parsedTransfer\n    const amountTransfer = amount || lamports.toString()\n\n    if (\n      !amountTransfer ||\n      !mapAccount.has(source) ||\n      !mapAccount.has(destination)\n    )\n      return\n\n    const actionTransfer = new ActionTransfer()\n    actionTransfer.source = mapAccount.get(source)\n    actionTransfer.destination = mapAccount.get(destination)\n    actionTransfer.amount = amountTransfer\n    return actionTransfer\n  }\n\n  private parseAccountInfo(\n    accountKeys: Array<ParsedMessageAccount>,\n    postTokenBalances: Array<TokenBalance>,\n    preTokenBalances: Array<TokenBalance>,\n    postBalances: number[],\n    preBalances: number[],\n  ): Map<string, ActionInfo> {\n    const mapAccountInfo = new Map<string, ActionInfo>()\n\n    // Associated Address\n    for (const postBalance of postTokenBalances) {\n      const { accountIndex, mint, uiTokenAmount } = postBalance\n      const info = new ActionInfo()\n      info.address = accountKeys[accountIndex].pubkey.toString()\n      info.postBalance = uiTokenAmount.amount\n      info.mint = mint\n      info.decimals = uiTokenAmount.decimals\n      mapAccountInfo.set(info.address, info)\n    }\n\n    for (const preBalance of preTokenBalances) {\n      const { accountIndex, uiTokenAmount } = preBalance\n      const address = accountKeys[accountIndex].pubkey.toString()\n      const info = mapAccountInfo.get(address) || new ActionInfo()\n      info.preBalance = uiTokenAmount.amount\n      mapAccountInfo.set(info.address, info)\n    }\n\n    // Wallet address\n    accountKeys.forEach((accountData, idx) => {\n      const address = accountData.pubkey.toString()\n      if (!account.isAssociatedAddress(address)) {\n        const info = mapAccountInfo.get(address) || new ActionInfo()\n        info.address = address\n        info.mint = SOL_ADDRESS\n        info.postBalance = String(postBalances[idx] || 0) // lamports\n        info.preBalance = String(preBalances[idx] || 0) // lamports\n        info.decimals = SOL_DECIMALS\n        mapAccountInfo.set(info.address, info)\n      }\n    })\n\n    return mapAccountInfo\n  }\n}\n","export const SOL_ADDRESS = '11111111111111111111111111111111'\n\nexport const SOL_DECIMALS = 9\n","import moment from 'moment'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nimport { utils } from '@senswap/sen-js'\n\nimport configs from 'os/configs'\nimport { TransLog } from 'app/lib/stat/entities/trans-log'\nimport SwapTranslogService from 'app/lib/stat/logic/translogSwap'\n\nexport type State = {\n  historySwap: HistorySwap[]\n}\n\n/**\n * Store constructor\n */\n\nexport type HistorySwap = {\n  time: string\n  transactionId: string\n  from?: string\n  to?: string\n  amountFrom?: number\n  amountTo?: number\n  key: string\n  status: string\n  decimals: number\n}\n\nconst LIMIT_HISTORY_SWAP = 20\n\nconst NAME = 'history'\nconst initialState: State = {\n  historySwap: [],\n}\n\nconst filterFunction = (transLog: TransLog) => {\n  if (!transLog.actionTransfers.length) return false\n  return transLog.actionType === 'SWAP'\n}\n\n/**\n * Actions\n */\nexport const fetchHistorySwap = createAsyncThunk<\n  { historySwap: HistorySwap[] },\n  { lastSignature?: string; isLoadMore?: boolean },\n  { state: { history: State } }\n>(\n  `${NAME}/fetchHistorySwap`,\n  async ({ lastSignature, isLoadMore }, { getState }) => {\n    const {\n      sol: { swapAddress },\n    } = configs\n\n    const {\n      history: { historySwap },\n    } = getState()\n\n    const myWalletAddress = await window.sentre.wallet?.getAddress()\n    if (!myWalletAddress) throw Error('Loggin first')\n\n    const options = {\n      limit: LIMIT_HISTORY_SWAP,\n      lastSignature,\n    }\n\n    const transLogService = new SwapTranslogService()\n    const transLogsData = await transLogService.collect(\n      myWalletAddress,\n      options,\n      filterFunction,\n    )\n    let history: HistorySwap[] = []\n\n    if (isLoadMore) history = [...historySwap]\n\n    for (const transLog of transLogsData) {\n      if (!transLog.actionType) continue\n      const historyItem = {} as HistorySwap\n      const actionTransfer = transLog.actionTransfers\n      let lastAction\n\n      const firstAction = actionTransfer[0]\n      if (actionTransfer.length > 1)\n        lastAction = actionTransfer[actionTransfer.length - 1]\n\n      const programId = transLog.programId\n\n      if (programId !== swapAddress) continue\n\n      const time = new Date(transLog.blockTime * 1000)\n\n      historyItem.time = moment(time).format('MMM DD, YYYY HH:mm')\n      historyItem.amountFrom = firstAction.destination\n        ? Number(\n            utils.undecimalize(\n              BigInt(firstAction.amount),\n              firstAction.destination.decimals,\n            ),\n          )\n        : undefined\n      historyItem.amountTo = lastAction?.destination\n        ? Number(\n            utils.undecimalize(\n              BigInt(lastAction.amount),\n              lastAction.destination.decimals,\n            ),\n          )\n        : undefined\n\n      historyItem.from = firstAction.destination?.mint\n      historyItem.to = lastAction?.destination?.mint\n      historyItem.transactionId = transLog.signature\n      historyItem.key = transLog.signature\n      historyItem.status =\n        !firstAction.destination || !lastAction?.destination\n          ? 'failed'\n          : 'success'\n      history.push(historyItem)\n    }\n    return { historySwap: history }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      fetchHistorySwap.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Card, Col, Row, Typography, Table, Button } from 'antd'\nimport { HISTORY_COLUMN } from './column'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { fetchHistorySwap } from 'app/model/history.controller'\nimport { AppDispatch, AppState } from 'app/model'\n\nimport './index.less'\n\nconst ROW_PER_PAGE = 5\nconst LIMIT_IN_STORE = 15\nconst TABLE_HEIGHT = 462\n\nconst History = () => {\n  const [amountRow, setAmountRow] = useState(ROW_PER_PAGE)\n  const [loading, setLoading] = useState(false)\n\n  const { historySwap } = useSelector((state: AppState) => state.history)\n  const dispatch = useDispatch<AppDispatch>()\n\n  const fetchHistory = useCallback(async () => {\n    setLoading(true)\n    await dispatch(fetchHistorySwap({})).unwrap()\n    setLoading(false)\n  }, [dispatch])\n\n  useEffect(() => {\n    fetchHistory()\n  }, [fetchHistory])\n\n  const onHandleViewMore = () => {\n    const currentTransactionDataLength = historySwap.slice(0, amountRow).length\n\n    if (historySwap.length - currentTransactionDataLength <= LIMIT_IN_STORE) {\n      const lastSignature = historySwap[historySwap.length - 1]?.transactionId\n      dispatch(\n        fetchHistorySwap({\n          lastSignature,\n          isLoadMore: true,\n        }),\n      )\n    }\n    setAmountRow(amountRow + ROW_PER_PAGE)\n  }\n\n  const onHandleRefeshTable = () => {\n    fetchHistory()\n    setAmountRow(ROW_PER_PAGE)\n  }\n\n  const style = useMemo(() => {\n    return amountRow > 5 ? { height: 'auto' } : { height: TABLE_HEIGHT }\n  }, [amountRow])\n\n  return (\n    <Card bordered={false} style={{ ...style }}>\n      <Row gutter={[16, 24]}>\n        <Col flex=\"auto\">\n          <Typography.Title level={5}>Swap history</Typography.Title>\n        </Col>\n        <Col>\n          <Button onClick={onHandleRefeshTable}>Refresh</Button>\n        </Col>\n        <Col span={24}>\n          <Row justify=\"center\" gutter={[16, 9]}>\n            <Col span={24} style={{ minHeight: 310 }}>\n              <Table\n                columns={HISTORY_COLUMN}\n                dataSource={historySwap.slice(0, amountRow)}\n                loading={loading}\n                pagination={false}\n                rowClassName={(record, index) =>\n                  index % 2 ? 'odd-row' : 'even-row'\n                }\n                scroll={{ x: 800 }}\n              />\n            </Col>\n            <Col>\n              <Button\n                onClick={onHandleViewMore}\n                type=\"text\"\n                icon={<IonIcon name=\"chevron-down-outline\" />}\n                disabled={amountRow >= historySwap.length}\n              >\n                View more\n              </Button>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default History\n","import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account } from '@senswap/sen-js'\n\nimport { Row, Col } from 'antd'\nimport SwapChart from './chart'\nimport Swap from './swap'\nimport History from './history'\n\nimport { usePool } from 'senhub/providers'\nimport { useMintSelection } from 'app/hooks/useMintSelection'\nimport { AppDispatch } from 'app/model'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { updateAskData } from 'app/model/ask.controller'\nimport { SenLpState } from 'app/constant/senLpState'\n\nconst Page = () => {\n  const { pools } = usePool()\n  const dispatch = useDispatch<AppDispatch>()\n  const { state } = useLocation<SenLpState>()\n  const [bid, setBid] = useState('')\n  const [ask, setAsk] = useState('')\n  const bidData = useMintSelection(bid)\n  const askData = useMintSelection(ask)\n  const poolAdress = state?.poolAddress\n\n  /** Check state when user come from sen LP */\n  const checkIsSenLpCome = useCallback(() => {\n    if (!account.isAddress(poolAdress)) return\n    const poolData = pools[poolAdress]\n    if (!poolData) return\n    setBid(poolData?.mint_a)\n    setAsk(poolData?.mint_b)\n  }, [poolAdress, pools])\n\n  useEffect(() => {\n    checkIsSenLpCome()\n  }, [checkIsSenLpCome])\n\n  useEffect(() => {\n    if (\n      !account.isAddress(bidData.accountAddress) ||\n      !account.isAddress(askData.accountAddress)\n    )\n      return\n    dispatch(updateBidData(bidData))\n    dispatch(updateAskData(askData))\n  }, [askData, bidData, dispatch])\n\n  return (\n    <Row gutter={[24, 24]} style={{ paddingBottom: 12 }}>\n      <Col lg={8} md={12} xs={24}>\n        <Swap />\n      </Col>\n      <Col lg={16} md={12} xs={24}>\n        <Row gutter={[24, 24]}>\n          <Col span={24}>\n            <SwapChart />\n          </Col>\n          <Col span={24}>\n            <History />\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Page\n","import { useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Row, Col, Typography, Space, Button, Popover } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport PreviewSwap from 'app/components/preview'\nimport SwapInput from 'app/components/swapForm/swapInput'\n\nimport { AppState } from 'app/model'\nimport usePriceImpact, { usePriceColor } from 'app/hooks/usePriceImpact'\nimport { numeric } from 'shared/util'\nimport ConfirmSwap from 'app/components/confirmSwap'\n\nconst Widget = () => {\n  const [visible, setVisible] = useState(false)\n  const {\n    route: { best },\n    bid: { amount: bidAmount },\n    ask: { amount: askAmount },\n  } = useSelector((state: AppState) => state)\n  const priceImpact = usePriceImpact()\n  const priceColor = usePriceColor()\n\n  const disabled = !best.length || !Number(bidAmount) || !Number(askAmount)\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={24}>\n        <SwapInput spacing={12} />\n      </Col>\n      <Col span={24}>\n        <Row align=\"bottom\">\n          <Col flex=\"auto\">\n            <Popover\n              placement=\"bottomLeft\"\n              content={<PreviewSwap />}\n              trigger=\"click\"\n            >\n              <Space\n                style={{ cursor: 'pointer' }}\n                direction=\"vertical\"\n                size={4}\n              >\n                <Space>\n                  <Typography.Text>\n                    <IonIcon\n                      name=\"information-circle-outline\"\n                      style={{ color: '#7A7B85' }}\n                    />\n                  </Typography.Text>\n                  <Typography.Text type=\"secondary\">\n                    Price impact\n                  </Typography.Text>\n                </Space>\n                <Typography.Text style={{ color: priceColor }}>\n                  {numeric(Number(priceImpact)).format('0.[0000]%')}\n                </Typography.Text>\n              </Space>\n            </Popover>\n          </Col>\n          <Col>\n            <Button\n              onClick={() => setVisible(true)}\n              size=\"large\"\n              block\n              type=\"primary\"\n              disabled={disabled}\n            >\n              Review & Swap\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n      <ConfirmSwap visible={visible} onCancle={setVisible} />\n    </Row>\n  )\n}\n\nexport default Widget\n","// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint'\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport ask from './ask.controller'\nimport bid from './bid.controller'\nimport settings from './settings.controller'\nimport route from './route.controller'\nimport history from './history.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools('myapp'),\n  reducer: {\n    ask,\n    bid,\n    settings,\n    route,\n    history,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport {\n  WalletProvider,\n  UIProvider,\n  AccountProvider,\n  PoolProvider,\n  MintProvider,\n} from 'senhub/providers'\n\nimport PageView from 'app/page'\nimport WidgetView from 'app/widget'\n\nimport model from 'app/model'\nimport configs from 'app/configs'\n\nimport 'app/static/styles/dark.less'\nimport 'app/static/styles/light.less'\nimport 'app/static/styles/index.less'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <MintProvider>\n        <PoolProvider>\n          <AccountProvider>\n            <WalletProvider>\n              <Provider store={model}>\n                <PageView />\n              </Provider>\n            </WalletProvider>\n          </AccountProvider>\n        </PoolProvider>\n      </MintProvider>\n    </UIProvider>\n  )\n}\n\nexport const widgetConfig: WidgetConfig = {\n  size: 'small',\n  type: 'solid',\n}\n\nexport const Widget = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <MintProvider>\n        <PoolProvider>\n          <AccountProvider>\n            <WalletProvider>\n              <Provider store={model}>\n                <WidgetView />\n              </Provider>\n            </WalletProvider>\n          </AccountProvider>\n        </PoolProvider>\n      </MintProvider>\n    </UIProvider>\n  )\n}\n","import { net, env } from 'shared/runtime'\nimport sol from './sol.config'\nimport register from './register.config'\n\nconst configs = {\n  sol: sol[net],\n  register: register[env],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_NAME !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string' ||\n  typeof process.env.REACT_APP_SENHUB !== 'string'\n)\n  throw new Error(\n    'Please add REACT_APP_ID, REACT_APP_NAME, REACT_APP_URL in .env.local!',\n  )\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  defaultAppId: string\n  extra: SenReg\n  senreg: string\n}\n\nconst DEFAULT_APP_ID = 'senhub'\nconst devApp = {\n  [process.env.REACT_APP_ID]: {\n    url: process.env.REACT_APP_URL,\n    appId: process.env.REACT_APP_ID,\n    name: process.env.REACT_APP_NAME,\n    author: {\n      name: process.env.REACT_APP_AUTHOR_NAME || '',\n      email: process.env.REACT_APP_AUTHOR_EMAIL || '',\n    },\n    supportedViews: (process.env.REACT_APP_SUPPORTED_VIEWS || '')\n      .split(',')\n      .map((view) => view.trim())\n      .filter((view) => ['page', 'widget'].includes(view)) as Array<\n      'widget' | 'page'\n    >,\n    tags: (process.env.REACT_APP_TAGS || '')\n      .split(',')\n      .map((tag) => tag.trim()),\n    description: process.env.REACT_APP_DESCRIPTION || '',\n    verified: false,\n  },\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: {},\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\nconst SOLVARS = {\n  spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n  splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n}\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  chainId: 101 | 102 | 103\n  sntrAddress: string\n  sntrPoolAddress: string\n  swapAddress: string\n  taxmanAddress: string\n} & typeof SOLVARS\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    ...SOLVARS,\n    node: 'https://api.devnet.solana.com',\n    chainId: 103,\n    sntrAddress: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n    sntrPoolAddress: '3EUPL7YQLbU6DNU5LZeQeHPXTf1MigJ2yASXA9rH5Ku4',\n    swapAddress: '4erFSLP7oBFSVC1t35jdxmbfxEhYCKfoM6XdG2BLR3UF',\n    taxmanAddress: '8UaZw2jDhJzv5V53569JbCd3bD4BnyCfBH3sjwgajGS9',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    ...SOLVARS,\n    node: 'https://api.testnet.solana.com',\n    chainId: 102,\n    sntrAddress: '',\n    sntrPoolAddress: '',\n    swapAddress: '',\n    taxmanAddress: '',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    ...SOLVARS,\n    node: 'https://api.mainnet-beta.solana.com',\n    chainId: 101,\n    sntrAddress: 'SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M',\n    sntrPoolAddress: 'Aa3WZX7Xunfebp2MuAcz9CNw8TYTDL7mVrmb11rjyVm6',\n    swapAddress: 'SSW7ooZ1EbEognq5GosbygA3uWW1Hq1NsFq6TsftCFV',\n    taxmanAddress: '9doo2HZQEmh2NgfT3Yx12M89aoBheycYqH1eaR5gKb3e',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","// Pseudo native sol info\n// It's for all networks\nexport const sol = (chainId: 101 | 102 | 103) => ({\n  symbol: 'SOL',\n  name: 'Solana',\n  address: '11111111111111111111111111111111',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'solana',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png',\n})\n\n// Pseudo SNTR info\n// Only for testnet and mainnet\nexport const sntr = (chainId: 102 | 103) => ({\n  symbol: 'SNTR',\n  name: 'Sentre',\n  address: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'sentre',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M/logo.png',\n})\n\n// Pseudo token infos for devnet\nconst supplementary = [\n  sol(103),\n  sntr(103),\n  {\n    symbol: 'wBTC',\n    name: 'Wrapped Bitcoin',\n    address: '8jk4eJymMfNZV9mkRNxJEt2VJ3pRvdJvD5FE94GXGBPM',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'bitcoin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/qfnqNqs3nCAHjnyCgLRDbBtq4p2MtHZxw8YjSyYhPoL/logo.png',\n  },\n  {\n    symbol: 'wETH',\n    name: 'Ethereum',\n    address: '27hdcZv7RtuMp75vupThR3T4KLsL61t476eosMdoec4c',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'ethereum',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/FeGn77dhg1KXRRFeSwwMiykZnZPw5JXW6naf2aQgZDQf/logo.png',\n  },\n  {\n    symbol: 'UNI',\n    name: 'Uniswap',\n    address: 'FVZFSXu3yn17YdcxLD72TFDUqkdE5xZvcW18EUpRQEbe',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'uniswap',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/3MVa4e32PaKmPxYUQ6n8vFkWtCma68Ld7e7fTktWDueQ/logo.png',\n  },\n  {\n    symbol: 'USDC',\n    name: 'USD Coin',\n    address: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'usd-coin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png',\n  },\n]\n\nexport default supplementary\n","import { Document } from 'flexsearch'\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry'\n\nimport { net } from 'shared/runtime'\nimport configs from 'os/configs'\nimport supplementary, { sntr, sol } from './supplementary'\n\nconst {\n  sol: { chainId },\n} = configs\nconst DELIMITER = /[\\W_]+/g\nconst PRESET = {\n  tokenize: 'full',\n  context: true,\n  minlength: 3,\n}\nconst DOCUMENT = {\n  document: {\n    id: 'address',\n    index: [\n      { field: 'symbol', ...PRESET },\n      { field: 'name', ...PRESET },\n    ],\n  },\n}\n\nclass TokenProvider {\n  private tokenMap: Map<string, TokenInfo>\n  private engine: typeof Document | undefined\n  readonly chainId: typeof chainId\n  readonly cluster: typeof net\n  private loading: boolean\n  private queue: Array<any>\n\n  constructor() {\n    this.tokenMap = new Map<string, TokenInfo>()\n    this.engine = undefined\n    this.chainId = chainId\n    this.cluster = net\n    this.loading = false\n    this.queue = []\n    // Init\n    this._init()\n  }\n\n  private _init = async (): Promise<[Map<string, TokenInfo>, any]> => {\n    if (this.tokenMap.size) return [this.tokenMap, this.engine]\n    return new Promise(async (resolve) => {\n      // Queue of getters to avoid race condition of multiple _init calling\n      if (this.loading) return this.queue.push(resolve)\n      // Start\n      this.loading = true\n      // Build token list\n      let tokenList = await (await new TokenListProvider().resolve())\n        .filterByChainId(this.chainId)\n        .getList()\n      if (this.cluster === 'devnet') tokenList = tokenList.concat(supplementary)\n      if (this.cluster === 'testnet')\n        tokenList = tokenList.concat([sntr(102), sol(102)])\n      else tokenList = tokenList.concat([sol(101)])\n      // Build token map\n      tokenList.forEach((token) => this.tokenMap.set(token.address, token))\n      // Build search engine\n      this.engine = new Document(DOCUMENT)\n      this.tokenMap.forEach(({ address, ...doc }) =>\n        this.engine.add(address, doc),\n      )\n      // Resolve the main getter\n      resolve([this.tokenMap, this.engine])\n      // Resolve the rest of getters\n      while (this.queue.length) this.queue.shift()([this.tokenMap, this.engine])\n      // Finish\n      this.loading = false\n    })\n  }\n\n  all = async (): Promise<TokenInfo[]> => {\n    const [tokenMap] = await this._init()\n    return Array.from(tokenMap.values())\n  }\n\n  findByAddress = async (addr: string): Promise<TokenInfo | undefined> => {\n    const [tokenMap] = await this._init()\n    return tokenMap.get(addr)\n  }\n\n  find = async (keyword: string, limit?: 10): Promise<TokenInfo[]> => {\n    const [tokenMap, engine] = await this._init()\n    let tokens: TokenInfo[] = []\n    keyword.split(DELIMITER).forEach((key) => {\n      const raw: Array<{ result: string[] }> = engine.search(key, limit)\n      return raw.forEach(({ result }) => {\n        return result.forEach((id: string) => {\n          if (tokens.findIndex(({ address }) => address === id) < 0) {\n            const token = tokenMap.get(id)\n            if (token) tokens.push(token)\n          }\n        })\n      })\n    })\n    return tokens\n  }\n}\n\nexport default TokenProvider\n","import storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  try {\n    if (!value) return null\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n"],"names":["CUSTOM_ICONS","forwardRef","name","className","props","ref","cln","src","DEFAULT_AVATARS","undefined","mintAddress","size","icon","reversed","avatars","setAvatars","useState","tokenProvider","useMint","pools","usePool","deriveAvatar","useCallback","async","token","findByAddress","address","logoURI","deriveAvatars","account","poolData","Object","values","find","mint_lpt","mint_a","mint_b","Promise","all","map","reverse","avatar","useEffect","length","Avatar","style","backgroundColor","border","display","whiteSpace","i","DEFAULT_NAME","separator","setName","deriveName","deriveNames","names","join","DEFAULT_SYMBOL","symbol","setSymbol","deriveSymbol","substring","deriveSymbols","symbols","bid","mintInfo","bidMintInfo","ask","askMintInfo","useSelector","state","bidMintAddress","askMintAddress","Space","Typography","DEFAULT_CACHE_CONFIG","ttl","DEFAULT_SINGLE_FLIGHT_CONFIG","limit","calls","time","cache","RequestQueue","constructor","key","resolveQueue","rejectQueue","this","add","resolve","reject","push","resolves","data","shift","rejects","error","SingleFlightCache","value","configs","mapCache","set","setTimeout","delete","get","Map","DataLoader","instanceKey","JSON","stringify","mapInstance","has","instance","newSingleFlight","SingleFlight","requestKey","callback","singleFlight","getSingleFlight","newRequest","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","assign","cacheData","isFetch","request","fetch","validateLimit","addRequestQueue","createTimeLogs","then","response","catch","finally","fetchRequestQueue","clearInterval","setInterval","now","Date","getTime","shortenAddress","num","delimiter","explorer","addressOrTxId","net","numeric","Number","isFinite","numbro","randomColor","seed","opacity","hash","Math","floor","random","charCodeAt","rgb","fetchCGK","ticket","utils","chartData","labels","type","disableAxe","chartId","isRebuildChart","setRebuildChart","formatData","label","background","datasets","chartRef","useRef","getBackground","ctx","current","canvas","getContext","gradient","createLinearGradient","addColorStop","chartInstance","dataInstace","compareData","isEqual","update","id","height","Chart","options","responsive","maintainAspectRatio","scales","xAxes","gridLines","drawBorder","ticks","yAxes","beginAtZero","maxTicksLimit","index","format","plugins","legend","hover","onHover","event","elements","target","document","getElementById","cursor","Row","align","justify","Col","Empty","TokenProvider","fetchMarketChart","params","axios","method","url","days","interval","prices","val","Interval","CHART_DATA_CONFIG","day","amount","unit","week","month","year","MARKET_CONFIG","CHART_CONFIGS","setChartData","bidData","askData","swapChartConfigs","borderColor","borderRadius","pointRadius","tooltip","pointHitRadius","pointHoverRadius","parseChartDay","marketData","displayTime","moment","chartTime","unshift","subtract","parseChartDaily","fetchChartData","bidTokenInfo","askTokenInfo","bidTicket","extensions","coingeckoId","askTicket","compareAddress","accountAddress","marketConfig","bidChartData","askChartData","idx","bidChart","askChart","price","priceUI","Card","bordered","bodyStyle","paddingTop","gutter","flex","Radio","defaultValue","onChange","e","span","level","decimals","setDecimals","getDecimals","fetchDecimals","er","buildResult","balance","BigInt","useAccountBalance","wallet","walletAddress","lamports","useWallet","accounts","useAccount","mint","useMintDecimals","DEFAULT_EMPTY_ADDRESS","extractReserve","reserve_a","reserve_b","Error","findAllRoutes","graph","deep","routes","clonedGraph","forEach","poolAddress","srcMintAddress","dstMintAddress","hop","route","ORACLE","Swap","curve","bidAmount","hopData","fee_ratio","tax_ratio","bidReserve","askReserve","askAmount","swap","inverseCurve","inverseSwap","PriceImpact","usePriceImpact","best","srcAmount","p","s","slippage","dstAmount","usePriceColor","priceImpact","goodSwap","acceptableSwap","DECIMALS","onCallback","forceSwap","loading","setLoading","_bidAmount","bidMintDecimals","bidAccountAddress","_askAmount","askMintDecimals","settings","advanced","bidBalance","wrapAmount","useMemo","DEFAULT_WSOL","availableBid","estimateFee","max","handleSwap","splt","window","sentre","routingAddresses","srcAddress","deriveAssociatedAddress","dstAddress","tooHighImpact","disabled","Button","onClick","wrapSol","handleWrapSol","txId","notify","description","open","message","block","chainMintAddresses","list","Fragment","setReversed","reversedPrice","shape","ExtraTypography","content","priceColor","color","minHeight","updateBidData","createAsyncThunk","prioritized","reset","getState","priority","prevPriority","refPriority","createSlice","initialState","poolAddresses","reducers","extraReducers","builder","addCase","fulfilled","payload","visible","onCancle","checked","setChecked","Modal","title","onCancel","footer","direction","fontSize","Checkbox","visivle","setVisivle","dispatch","useDispatch","DEFAULT_DATA","priceChange","rank","totalVolume","cgkData","setCgkData","fetchCgkData","MintPoolInfo","tvl","bidCgk","useMintCgk","askCgk","bidPoolData","askPoolData","getMintTVL","bidTVL","askTVL","wrap","Divider","spacing","iconSize","SentreIcon","Option","active","Tooltip","placement","Switch","checkedChildren","unCheckedChildren","textAlign","NAME","updateSettings","padding","Popover","overlayInnerStyle","width","marginTop","marginBottom","trigger","mintAddresses","setMintAddresses","keyword","setKeyword","sortMintAddresses","rawMintAddresses","flat","filter","item","pos","self","indexOf","lpMintAddresses","sortedMintAddresses","tokenInfo","Boolean","includes","sort","first","second","search","toLowerCase","Input","placeholder","suffix","marginRight","hoverable","marginLeft","margin","hiddenTokens","currentMintAddress","getAvailablePoolAddresses","keys","onMint","overflow","setVisible","history","useHistory","useLocation","forceCheck","closeIcon","destroyOnClose","centered","selectionInfo","replace","location","timeoutId","onValue","setError","setCursor","innerRef","onAmount","onError","clearTimeout","test","parseFloat","toString","setSelectionRange","selectionStart","shared","appId","process","senhub","devnet","node","spltAddress","splataAddress","testnet","mainnet","bidDefault","askDefault","wormholeAddress","assetsRoute","manifest","development","staging","production","env","sol","wormhole","updateAskData","DEFAULT_INFO","useMintSelection","setSelectionInfo","getSelectionInfo","bidAddress","maxBalance","selectionDefault","poolAdress","prefix","SOL_BRIDGE_ADDRESS","SOL_TOKEN_BRIDGE_ADDRESS","getSolNetwork","storage","checkAttestedWormhole","solContext","solNetWork","chainId","CHAIN_ID_SOLANA","tokenBridgeAddress","bridgeAddress","getSolContext","getIsWrappedAssetSol","connection","WORMHOLE_COLOR","wormholeSupported","setWormholeSupported","query","URLSearchParams","Tag","askAddress","amounts","updateRoute","prevRoute","bestRoute","setBestRoute","originalRoute","onSwitch","bidPriority","bidRest","askPriority","askRest","updateData","findRoute","bidPoolAddresses","askPoolAddresses","allRoutes","pool","buildPoolGraph","Array","maxAskAmount","findBestRouteFromBid","reversedRoute","minBidAmount","findBestRouteFromAsk","setRoute","STATUS_COLOR","success","pending","failed","tag","setColorTag","textTransform","FORMAT_AMOUNT","HISTORY_COLUMN","dataIndex","render","text","fontWeight","record","from","amountFrom","to","amountTo","status","TransLog","programId","programInfo","signature","blockTime","owner","actionType","actionTransfers","programTransfer","ActionInfo","preBalance","postBalance","ActionTransfer","source","destination","DEFAULT_LIMIT","Solana","conn","lastSignature","before","getConfirmedSignaturesForAddress2","signatures","confirmedTransactions","promiseTransGroup","offset","skip","signaturesGroup","slice","getParsedConfirmedTransactions","transGroups","transGroup","concat","currentTime","secondFrom","secondTo","programPublicKey","PublicKey","isStop","confirmedSignatureInfos","fetchSignatures","info","fetchConfirmTransaction","ParsedType","SECOND_PER_MILLISECOND","TimeFormat","DateHelper","milliSeconds","valueOf","setMilliSeconds","seconds","date","ymd","YMD","ymdFrom","ymdTo","dates","dateFrom","fromYmd","dateTo","addDay","dateFormat","subtractDay","dayAmount","fromSeconds","struct","require","TRANSLOG_PROGRAM_DATA_SCHEMA","SwapActionType","ACTION_TYPE","Route","SwapTranslogService","solana","parseAction","transLog","funcFilter","transLogs","lastSignatureTmp","confirmedTrans","fetchTransactions","trans","transaction","log","parseTransLog","meta","postTokenBalances","preTokenBalances","postBalances","preBalances","innerInstructionData","innerInstructions","instructions","instructionData","mapAccount","parseAccountInfo","accountKeys","isParsedInstruction","parseListActionTransfer","parsed","actions","actionTransfer","action","actionParsed","Transfer","parsedAction","parseActionTransfer","parsedTransfer","amountTransfer","mapAccountInfo","accountIndex","uiTokenAmount","pubkey","accountData","String","programDataEncode","dataBuffer","base58","programDataDecode","fromBuffer","Buffer","code","filterFunction","fetchHistorySwap","isLoadMore","swapAddress","historySwap","myWalletAddress","getAddress","transLogService","transLogsData","collect","historyItem","lastAction","firstAction","transactionId","amountRow","setAmountRow","fetchHistory","unwrap","Table","columns","dataSource","pagination","rowClassName","scroll","x","currentTransactionDataLength","setBid","setAsk","checkIsSenLpCome","paddingBottom","lg","md","xs","prototype","toJSON","bigintSerializationMiddleware","serializableCheck","isSerializable","isArray","obj","proto","getPrototypeOf","isPlainObject","configureStore","middleware","getDefaultMiddleware","devTools","reducer","Page","UIProvider","antd","MintProvider","PoolProvider","AccountProvider","WalletProvider","Provider","store","model","widgetConfig","Widget","register","DEFAULT_APP_ID","devApp","author","email","supportedViews","split","view","trim","tags","verified","defaultAppId","extra","senreg","SOLVARS","sntrAddress","sntrPoolAddress","taxmanAddress","sntr","DELIMITER","PRESET","tokenize","context","minlength","DOCUMENT","field","tokenMap","engine","cluster","queue","_init","tokenList","TokenListProvider","filterByChainId","getList","supplementary","Document","doc","addr","tokens","result","findIndex","getNetwork","KEY","driver","localStorage","convert","parse","getItem","setItem","clear"],"sourceRoot":""}