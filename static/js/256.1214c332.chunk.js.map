{"version":3,"file":"static/js/256.1214c332.chunk.js","mappings":"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","sources":["../../src/util/to-buffer.ts","../../node_modules/minimalistic-assert/index.js","../../node_modules/inherits/inherits_browser.js","../../node_modules/hash.js/lib/hash/utils.js","../../node_modules/hash.js/lib/hash/common.js","../../node_modules/hash.js/lib/hash/sha/common.js","../../node_modules/hash.js/lib/hash/sha/1.js","../../node_modules/hash.js/lib/hash/sha/256.js","../../node_modules/hash.js/lib/hash/sha/224.js","../../node_modules/hash.js/lib/hash/sha/512.js","../../node_modules/hash.js/lib/hash/sha/384.js","../../node_modules/hash.js/lib/hash/sha.js","../../node_modules/hash.js/lib/hash/ripemd.js","../../node_modules/hash.js/lib/hash/hmac.js","../../node_modules/hash.js/lib/hash.js","../../node_modules/@ethersproject/logger/lib.esm/index.js","../../node_modules/@ethersproject/logger/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/index.js","../../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../../node_modules/@ethersproject/sha2/lib.esm/_version.js","../../src/util/borsh-schema.ts","../../src/publickey.ts","../../src/account.ts","../../src/bpf-loader-deprecated.ts","../../src/layout.ts","../../src/util/shortvec-encoding.ts","../../src/message.ts","../../src/util/assert.ts","../../src/transaction.ts","../../src/sysvar.ts","../../src/util/send-and-confirm-transaction.ts","../../src/util/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/nonce-account.ts","../../src/system-program.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../node_modules/cross-fetch/dist/browser-ponyfill.js","../../src/epoch-schedule.ts","../../src/errors.ts","../../src/connection.ts","../../src/util/url.ts","../../src/util/promise-timeout.ts","../../src/keypair.ts","../../src/ed25519-program.ts","../../src/stake-program.ts","../../src/secp256k1-program.ts","../../src/validator-info.ts","../../src/vote-account.ts","../../src/util/send-and-confirm-raw-transaction.ts","../../src/util/cluster.ts","../../src/index.ts"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.5.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"bytes/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0\n    };\n    if (isBytesLike(signature)) {\n        const bytes = arrayify(signature);\n        if (bytes.length !== 65) {\n            logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n        }\n        // Get the r, s and v\n        result.r = hexlify(bytes.slice(0, 32));\n        result.s = hexlify(bytes.slice(32, 64));\n        result.v = bytes[64];\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","export const version = \"sha2/5.5.0\";\n//# sourceMappingURL=_version.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (\n  property: string = 'publicKey',\n): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  (rsl as any).alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport type {Response} from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: SimulatedTransactionAccountInfo[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          pick({\n            executable: boolean(),\n            owner: string(),\n            lamports: number(),\n            data: array(string()),\n            rentEpoch: optional(number()),\n          }),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger with signatures only\n */\nexport type ConfirmedBlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: (url: string, options: any) => Promise<Response>;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url: string, options: any) => {\n      return new Promise<Response>((resolve, reject) => {\n        fetchMiddleware(url, options, async (url: string, options: any) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch infor for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: Function,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a processed transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const result = await this.getBlock(slot, {commitment});\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const result = await this.getTransaction(signature, {commitment});\n    if (!result) return result;\n    const {message, signatures} = result.transaction;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        publicKeyOffset,\n        publicKeyInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw'\n  | 'Merge';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["toBuffer","arr","Buffer","assert","val","msg","Error","equal","l","r","Object","create","inherits_browserModule","ctor","superCtor","super_","prototype","constructor","value","enumerable","writable","configurable","TempCtor","require$$0","inherits","require$$1","isSurrogatePair","i","charCodeAt","length","htonl","w","zero2","word","zero8","enc","Array","isArray","slice","res","replace","push","parseInt","p","c","toString","endian","start","end","len","k","m","b","a","d","e","buf","pos","ah","al","bh","lo","hi","bl","ch","cl","dh","dl","carry","eh","el","num","utils","BlockHash","this","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","update","toArray","concat","join32","_update","digest","_pad","_digest","bytes","t","rotr32","ch32","x","y","z","maj32","p32","s","common","shaCommon","require$$2","rotl32","sum32","sum32_5","ft_1","sha1_K","SHA1","call","h","W","toHex32","split32","require$$3","sum32_4","s0_256","s1_256","g0_256","g1_256","sha256_K","SHA256","f","g","T1","T2","SHA224","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","SHA512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","SHA384","require$$4","sum32_3","RIPEMD160","j","K","Kh","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","Hmac","hash","key","Hash","inner","outer","_init","exports","sha","ripemd","hmac","sha1","sha256","sha224","sha384","sha512","ripemd160","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_normalizeError","missing","forEach","form","normalize","join","String","fromCharCode","message","_checkNormalize","LogLevel","ErrorCode","HEX","Logger","version","defineProperty","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","Uint8Array","hex","JSON","stringify","reason","throwError","name","INVALID_ARGUMENT","argument","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","NUMERIC_FAULT","fault","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","MISSING_NEW","checkAbstract","censorship","permanent","globalLogger","logger","addSlice","array","arguments","isInteger","arrayify","options","result","unshift","allowMissingPrefix","substring","toHexString","isHexable","match","isHexString","hexPad","v","isBytes","data","Struct","properties","encode","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Enum","super","enum","Map","MAX_SEED_LENGTH","PublicKey","_bn","isPublicKeyData","decoded","bs58","byteLength","equals","publicKey","eq","toBase58","toBytes","toArrayLike","zeroPad","buffer","fromPublicKey","programId","seeds","seed","TypeError","publicKeyBytes","is_on_curve","nonce","seedsWithNonce","address","createProgramAddress","err","pubkey","default","fields","naclLowLevel","nacl","chk","den","den2","den4","den6","neq25519","gf1","I","Account","secretKey","_keypair","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","_encode","str","chars","decodeLength","size","elem","encodeLength","rem_len","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","set","isAccountSigner","index","isAccountWritable","numRequiredSignatures","isProgramId","has","programIds","nonProgramIds","filter","_","numKeys","keyCount","shortvec","map","instruction","programIdIndex","keyIndicesCount","accounts","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","signDataLayout","Layout","transaction","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","signData","byteArray","accountCount","dataSlice","messageArgs","DEFAULT_SIGNATURE","PACKET_DATA_SIZE","TransactionInstruction","opts","Transaction","signature","signatures","feePayer","nonceInfo","add","items","item","compileMessage","accountMetas","accountMeta","isSigner","isWritable","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","feePayerIndex","payerMeta","signedKeys","unsignedKeys","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","setSigners","signers","seen","sign","uniqueSigners","signer","partialSign","_partialSign","addSignature","_addSignature","findIndex","sigpair","verifySignatures","_verifySignatures","config","requireAllSignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","sigPubkeyPair","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","connection","status","sleep","ms","Promise","resolve","setTimeout","encodeData","type","allocLength","alloc","layoutFields","decodeData","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","span","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","SystemInstruction","typeIndex","instructionTypeLayout","ixType","layout","SYSTEM_INSTRUCTION_LAYOUTS","fromPubkey","newAccountPubkey","lamports","toPubkey","basePubkey","space","accountPubkey","authorized","noncePubkey","newAuthorizedPubkey","SystemProgram","expectedLength","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","base","initParams","nonceInitialize","instructionData","CHUNK_SIZE","Loader","Math","balanceNeeded","programInfo","program","payer","dataLayout","chunkSize","offset","transactions","REQUESTS_PER_SECOND","BPF_LOADER_PROGRAM_ID","BpfLoader","global","self","__self__","F","fetch","DOMException","support","Symbol","Blob","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","indexOf","normalizeName","test","normalizeValue","iteratorFor","iterator","next","shift","done","undefined","Headers","headers","append","getOwnPropertyNames","consumed","body","bodyUsed","reject","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","view","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","_bodyArrayBuffer","get","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","readArrayBufferAsText","formData","decode","json","parse","oldValue","hasOwnProperty","callback","thisArg","values","entries","methods","Request","input","url","credentials","method","mode","signal","upcased","toUpperCase","normalizeMethod","referrer","trim","split","decodeURIComponent","parseHeaders","rawHeaders","line","parts","Response","bodyInit","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","stack","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","ponyfill","ctx","module","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","executable","owner","rentEpoch","unitsConsumed","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockSignaturesRpcResult","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcEndpoint","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","lastFetch","transactionSignatures","simulatedSignatures","_accountChangeSubscriptionCounter","_accountChangeSubscriptions","_programAccountChangeSubscriptionCounter","_programAccountChangeSubscriptions","_rootSubscriptionCounter","_rootSubscriptions","_signatureSubscriptionCounter","_signatureSubscriptions","_slotSubscriptionCounter","_slotSubscriptions","_logsSubscriptionCounter","_logsSubscriptions","_slotUpdateSubscriptionCounter","_slotUpdateSubscriptions","URL","client","commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","endpoint","useHttps","Number","makeWebsocketUrl","fetchWithMiddleware","too_many_requests_retries","waitTime","createRpcClient","requests","batch","createRpcBatchRequest","autoconnect","max_reconnects","Infinity","_wsOnOpen","bind","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_buildArgs","unsafeRes","getBalanceAndContext","configArg","tokenMintAddress","tokenAddress","_args","ownerAddress","arg","mintAddress","getAccountInfoAndContext","publicKeys","extra","configOrCommitment","encoding","decodedSignature","Date","subscriptionCommitment","confirmPromise","subscriptionId","onSignature","timeoutMs","timeoutPromise","timeoutId","clearTimeout","promiseTimeout","duration","startSlot","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","addresses","epochSchedule","limit","getRecentBlockhashAndContext","_buildArgsAtLeastConfirmed","getBlock","endSlot","transactionDetails","getTransaction","methodName","firstAvailableBlock","block","getConfirmedBlockSignatures","highestConfirmedRoot","getSlot","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","accountInfo","getNonceAndContext","to","disableCache","expired","startTime","getRecentBlockhash","MS_PER_SLOT","transactionOrMessage","_recentBlockhash","includes","encodedTransaction","traceIndent","logTrace","sendRawTransaction","sendEncodedTransaction","setInterval","clearInterval","sub","rpcMethod","unsubscribeId","_resetSubscriptions","_updateSubscriptions","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","filters","mentions","notification","onAccountChange","subInfo","_unsubscribe","accountId","onProgramAccountChange","onLogs","onSlotChange","onSlotUpdate","override","onSignatureWithOptions","onRootChange","Keypair","keypair","encoder","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","createInstructionWithPublicKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","lockup","STAKE_INSTRUCTION_LAYOUTS","stakePubkey","stakeAuthorizationType","o","authorityOwner","authorityBase","authoritySeed","splitStakePubkey","sourceStakePubKey","StakeProgram","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeAuthorizationLayout","Staker","Withdrawer","maybeLockup","initialize","custodianPubkey","newAuthorized","ecdsaSign","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","sha3","ethAddress","rawAddress","ethAddressInstructionIndex","recoveryId","pkey","publicKeyCreate","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedVoterPubkey","authorizedWithdrawerPubkey","votes","credits","lastEpochCredits","va","sendAndConfirmRawTransaction","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"sourceRoot":""}