{"version":3,"file":"static/js/204.e72d9a39.chunk.js","mappings":"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","sources":["os/configs/index.ts","os/configs/register.config.ts","os/configs/sol.config.ts","os/providers/ui.provider.tsx","os/providers/pool.provider.tsx","os/providers/wallet.provider.tsx","os/providers/account.provider.tsx","os/store/mints.reducer.ts","os/providers/mint.provider.tsx","os/providers/tokenProvider/supplementary.ts","os/providers/tokenProvider/index.ts","shared/runtime.ts","shared/storage.ts"],"sourcesContent":["import { net, env } from 'shared/runtime'\nimport sol from './sol.config'\nimport register from './register.config'\n\nconst configs = {\n  sol: sol[net],\n  register: register[env],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_NAME !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string' ||\n  typeof process.env.REACT_APP_SENHUB !== 'string'\n)\n  throw new Error(\n    'Please add REACT_APP_ID, REACT_APP_NAME, REACT_APP_URL in .env.local!',\n  )\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  extra: SenReg\n  senreg: string\n}\n\nconst devApp = {\n  [process.env.REACT_APP_ID]: {\n    url: process.env.REACT_APP_URL,\n    appId: process.env.REACT_APP_ID,\n    name: process.env.REACT_APP_NAME,\n    author: {\n      name: process.env.REACT_APP_AUTHOR_NAME || '',\n      email: process.env.REACT_APP_AUTHOR_EMAIL || '',\n    },\n    supportedViews: (process.env.REACT_APP_SUPPORTED_VIEWS || '')\n      .split(',')\n      .map((view) => view.trim())\n      .filter((view) => ['page', 'widget'].includes(view)) as Array<\n      'widget' | 'page'\n    >,\n    tags: (process.env.REACT_APP_TAGS || '')\n      .split(',')\n      .map((tag) => tag.trim()),\n    description: process.env.REACT_APP_DESCRIPTION || '',\n    verified: false,\n  },\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    extra: {},\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\nconst SOLVARS = {\n  spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n  splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n}\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  chainId: 101 | 102 | 103\n  senAddress: string\n  senPoolAddress: string\n  swapAddress: string\n  taxmanAddress: string\n} & typeof SOLVARS\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    ...SOLVARS,\n    node: 'https://api.devnet.solana.com',\n    chainId: 103,\n    senAddress: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n    senPoolAddress: '3EUPL7YQLbU6DNU5LZeQeHPXTf1MigJ2yASXA9rH5Ku4',\n    swapAddress: '4erFSLP7oBFSVC1t35jdxmbfxEhYCKfoM6XdG2BLR3UF',\n    taxmanAddress: '8UaZw2jDhJzv5V53569JbCd3bD4BnyCfBH3sjwgajGS9',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    ...SOLVARS,\n    node: 'https://api.testnet.solana.com',\n    chainId: 102,\n    senAddress: '',\n    senPoolAddress: '',\n    swapAddress: '',\n    taxmanAddress: '',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    ...SOLVARS,\n    node: 'https://api.mainnet-beta.solana.com',\n    chainId: 101,\n    senAddress: 'SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M',\n    senPoolAddress: '',\n    swapAddress: 'SSW7ooZ1EbEognq5GosbygA3uWW1Hq1NsFq6TsftCFV',\n    taxmanAddress: '9doo2HZQEmh2NgfT3Yx12M89aoBheycYqH1eaR5gKb3e',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n  CSSProperties,\n} from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { ConfigProvider } from 'antd'\n\nimport { RootState } from 'os/store'\nimport { State as UIState } from 'os/store/ui.reducer'\nimport { ConfigProviderProps } from 'antd/lib/config-provider'\n\nconst Context = createContext<UIProvider>({} as UIProvider)\n\nexport type UIProvider = {\n  ui: UIState\n}\n\n/**\n * UI Context Provider\n */\nconst UIContextProvider = ({\n  children,\n  appId,\n  style = {},\n  antd = false,\n}: {\n  children: ReactNode\n  appId: string\n  style?: CSSProperties\n  antd?: boolean | ConfigProviderProps\n}) => {\n  const ui = useSelector((state: RootState) => state.ui)\n  const provider = useMemo(() => ({ ui }), [ui])\n  const configProvider = antd\n    ? {\n        getPopupContainer: () => document.getElementById(appId) as HTMLElement,\n        ...(typeof antd === 'object' ? antd : {}),\n      }\n    : undefined\n\n  return (\n    <Context.Provider value={provider}>\n      <section\n        id={appId}\n        style={{ height: '100%', backgroundColor: 'transparent', ...style }}\n      >\n        {configProvider ? (\n          <ConfigProvider {...configProvider}>{children}</ConfigProvider>\n        ) : (\n          children\n        )}\n      </section>\n    </Context.Provider>\n  )\n}\nexport default UIContextProvider\n\n/**\n * UI Context Consumer\n */\nconst UIComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * UI HOC\n */\nexport const withUI = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <UIComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </UIComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * UI Hook\n */\nexport const useUI = () => {\n  return useContext<UIProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { RootState } from 'os/store'\nimport { State as PoolState } from 'os/store/pools.reducer'\n\nconst Context = createContext<PoolProvider>({} as PoolProvider)\n\nexport type PoolProvider = {\n  pools: PoolState\n}\n\n/**\n * Pool Context Provider\n */\nconst PoolContextProvider = ({ children }: { children: ReactNode }) => {\n  const pools = useSelector((state: RootState) => state.pools)\n  const provider = useMemo(() => ({ pools }), [pools])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default PoolContextProvider\n\n/**\n * Pool Context Consumer\n */\nconst PoolContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Pool HOC\n */\nexport const withPool = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <PoolContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </PoolContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Pool Hook\n */\nexport const usePool = () => {\n  return useContext<PoolProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { RootState } from 'os/store'\nimport { State as WalletState } from 'os/store/wallet.reducer'\n\nconst Context = createContext<WalletProvider>({} as WalletProvider)\n\nexport type WalletProvider = {\n  wallet: WalletState\n}\n\n/**\n * Wallet Context Provider\n */\nconst WalletContextProvider = ({ children }: { children: ReactNode }) => {\n  const wallet = useSelector((state: RootState) => state.wallet)\n  const provider = useMemo(() => ({ wallet }), [wallet])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default WalletContextProvider\n\n/**\n * Wallet Context Consumer\n */\nconst WalletContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Wallet HOC\n */\nexport const withWallet = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <WalletContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </WalletContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Wallet Hook\n */\nexport const useWallet = () => {\n  return useContext<WalletProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { RootState } from 'os/store'\nimport { State as AccountsState } from 'os/store/accounts.reducer'\n\nconst Context = createContext<AccountProvider>({} as AccountProvider)\n\nexport type AccountProvider = {\n  accounts: AccountsState\n}\n\n/**\n * Account Context Provider\n */\nconst AccountContextProvider = ({ children }: { children: ReactNode }) => {\n  const accounts = useSelector((state: RootState) => state.accounts)\n  const provider = useMemo(() => ({ accounts }), [accounts])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default AccountContextProvider\n\n/**\n * Account Context Consumer\n */\nconst AccountContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Account HOC\n */\nexport const withAccount = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <AccountContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </AccountContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Account Hook\n */\nexport const useAccount = () => {\n  return useContext<AccountProvider>(Context)\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, MintData } from '@senswap/sen-js'\n\n/**\n * Interface & Utility\n */\n\nexport type State = Record<string, MintData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'mints'\nconst initialState: State = {}\n\n/**\n * Actions\n */\n\nexport const getMint = createAsyncThunk<\n  State,\n  { address: string; force?: boolean },\n  { state: any }\n>(`${NAME}/getMint`, async ({ address, force = false }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid mint address')\n  if (!force) {\n    const {\n      accounts: { [address]: data },\n    } = getState()\n    if (data) return { [address]: data }\n  }\n  const { splt } = window.sentre\n  const raw = await splt.getMintData(address)\n  return { [address]: raw }\n})\n\nexport const upsetMint = createAsyncThunk<\n  State,\n  { address: string; data: MintData },\n  { state: any }\n>(`${NAME}/upsetMint`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteMint = createAsyncThunk(\n  `${NAME}/deleteMint`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        getMint.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetMint.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteMint.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  useCallback,\n  ReactNode,\n  useMemo,\n} from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { RootState, RootDispatch } from 'os/store'\nimport { getMint as _getMint, State as MintState } from 'os/store/mints.reducer'\nimport TokenProvider from './tokenProvider'\n\nconst tokenProvider = new TokenProvider()\nconst Context = createContext<MintProvider>({} as MintProvider)\n\nexport type MintProvider = {\n  mints: MintState\n  getMint: (...agrs: Parameters<typeof _getMint>) => Promise<MintState>\n  tokenProvider: TokenProvider\n}\n\n/**\n * Mint Context Provider\n */\nconst MintContextProvider = ({ children }: { children: ReactNode }) => {\n  const dispatch = useDispatch<RootDispatch>()\n  const mints = useSelector((state: RootState) => state.mints)\n  const getMint = useCallback(\n    async (...agrs: Parameters<typeof _getMint>) =>\n      await dispatch(_getMint(...agrs)).unwrap(),\n    [dispatch],\n  )\n  const provider = useMemo(\n    () => ({ mints, getMint, tokenProvider }),\n    [mints, getMint],\n  )\n  // Context provider\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default MintContextProvider\n\n/**\n * Mint Context Consumer\n */\nconst MintContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Mint HOC\n */\nexport const withMint = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <MintContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </MintContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Mint Hook\n */\nexport const useMint = () => {\n  return useContext<MintProvider>(Context)\n}\n","// Pseudo native sol info\n// It's for all networks\nexport const sol = (chainId: 101 | 102 | 103) => ({\n  symbol: 'SOL',\n  name: 'Solana',\n  address: '11111111111111111111111111111111',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'solana',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png',\n})\n\n// Pseudo sen info\n// Only for testnet and mainnet\nexport const sen = (chainId: 102 | 103) => ({\n  symbol: 'SEN',\n  name: 'Sen',\n  address: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'sen',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M/logo.png',\n})\n\n// Pseudo token infos for devnet\nconst supplementary = [\n  sol(103),\n  sen(103),\n  {\n    symbol: 'wBTC',\n    name: 'Wrapped Bitcoin',\n    address: '8jk4eJymMfNZV9mkRNxJEt2VJ3pRvdJvD5FE94GXGBPM',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'bitcoin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/qfnqNqs3nCAHjnyCgLRDbBtq4p2MtHZxw8YjSyYhPoL/logo.png',\n  },\n  {\n    symbol: 'wETH',\n    name: 'Ethereum',\n    address: '27hdcZv7RtuMp75vupThR3T4KLsL61t476eosMdoec4c',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'ethereum',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/FeGn77dhg1KXRRFeSwwMiykZnZPw5JXW6naf2aQgZDQf/logo.png',\n  },\n  {\n    symbol: 'UNI',\n    name: 'Uniswap',\n    address: 'FVZFSXu3yn17YdcxLD72TFDUqkdE5xZvcW18EUpRQEbe',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'uniswap',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/3MVa4e32PaKmPxYUQ6n8vFkWtCma68Ld7e7fTktWDueQ/logo.png',\n  },\n  {\n    symbol: 'USDC',\n    name: 'USD Coin',\n    address: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'usd-coin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png',\n  },\n]\n\nexport default supplementary\n","import { Document } from 'flexsearch'\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry'\n\nimport { net } from 'shared/runtime'\nimport configs from 'os/configs'\nimport supplementary, { sen, sol } from './supplementary'\n\nconst {\n  sol: { chainId },\n} = configs\nconst DELIMITER = /[\\W_]+/g\nconst PRESET = {\n  tokenize: 'full',\n  context: true,\n  minlength: 3,\n}\nconst DOCUMENT = {\n  document: {\n    id: 'address',\n    index: [\n      { field: 'symbol', ...PRESET },\n      { field: 'name', ...PRESET },\n    ],\n  },\n}\n\nclass TokenProvider {\n  private tokenMap: Map<string, TokenInfo>\n  private engine: typeof Document | undefined\n  readonly chainId: typeof chainId\n  readonly cluster: typeof net\n\n  constructor() {\n    this.tokenMap = new Map<string, TokenInfo>()\n    this.engine = undefined\n    this.chainId = chainId\n    this.cluster = net\n    // Init\n    this._init()\n  }\n\n  private _init = async (): Promise<Map<string, TokenInfo>> => {\n    if (this.tokenMap.size) return this.tokenMap\n    // Build token list\n    let tokenList = await (await new TokenListProvider().resolve())\n      .filterByChainId(this.chainId)\n      .getList()\n    if (this.cluster === 'devnet') tokenList = tokenList.concat(supplementary)\n    if (this.cluster === 'testnet')\n      tokenList = tokenList.concat([sen(102), sol(102)])\n    else tokenList = tokenList.concat([sol(101)])\n    // Build token map\n    tokenList.forEach((token) => this.tokenMap.set(token.address, token))\n    return this.tokenMap\n  }\n\n  private _engine = async () => {\n    if (this.engine) return this.engine\n    const tm = await this._init()\n    this.engine = new Document(DOCUMENT)\n    tm.forEach(({ address, ...doc }) => this.engine.add(address, doc))\n    return this.engine\n  }\n\n  all = async (): Promise<TokenInfo[]> => {\n    const tm = await this._init()\n    return Array.from(tm.values())\n  }\n\n  findByAddress = async (addr: string): Promise<TokenInfo | undefined> => {\n    const tm = await this._init()\n    return tm.get(addr)\n  }\n\n  find = async (keyword: string, limit?: 10): Promise<TokenInfo[]> => {\n    const tm = await this._init()\n    const engine = await this._engine()\n    let tokens: TokenInfo[] = []\n    keyword.split(DELIMITER).forEach((key) => {\n      const raw: Array<{ result: string[] }> = engine.search(key, limit)\n      return raw.forEach(({ result }) => {\n        return result.forEach((id: string) => {\n          if (tokens.findIndex(({ address }) => address === id) < 0) {\n            const token = tm.get(id)\n            if (token) tokens.push(token)\n          }\n        })\n      })\n    })\n    return tokens\n  }\n}\n\nexport default TokenProvider\n","import storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  if (!value) return null\n  try {\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n"],"names":["sol","net","register","env","devApp","url","process","appId","name","author","email","supportedViews","split","map","view","trim","filter","includes","tags","tag","description","verified","development","extra","senreg","staging","production","SOLVARS","spltAddress","splataAddress","devnet","node","chainId","senAddress","senPoolAddress","swapAddress","taxmanAddress","testnet","mainnet","Context","createContext","children","style","antd","ui","useSelector","state","provider","useMemo","configProvider","getPopupContainer","document","getElementById","undefined","Provider","value","id","height","backgroundColor","ConfigProvider","UIComsumer","Consumer","Children","child","cloneElement","withUI","WrappedComponent","HOC","Component","render","forwardedRef","rest","this","props","ref","forwardRef","useUI","useContext","pools","PoolContextComsumer","withPool","usePool","wallet","WalletContextComsumer","withWallet","useWallet","accounts","AccountContextComsumer","withAccount","useAccount","NAME","getMint","createAsyncThunk","async","address","force","getState","account","Error","data","splt","window","sentre","getMintData","upsetMint","deleteMint","createSlice","initialState","reducers","extraReducers","builder","addCase","fulfilled","payload","Object","assign","tokenProvider","TokenProvider","dispatch","useDispatch","mints","useCallback","agrs","_getMint","unwrap","MintContextComsumer","withMint","useMint","symbol","decimals","extensions","coingeckoId","logoURI","sen","configs","DELIMITER","PRESET","tokenize","context","minlength","DOCUMENT","index","field","constructor","tokenMap","engine","cluster","_init","size","tokenList","TokenListProvider","resolve","filterByChainId","getList","concat","supplementary","forEach","token","set","_engine","tm","Document","doc","add","all","Array","from","values","findByAddress","get","addr","find","keyword","limit","tokens","key","search","result","findIndex","push","Map","storage","getNetwork","KEY","driver","localStorage","convert","JSON","parse","e","getItem","setItem","stringify","clear"],"sourceRoot":""}