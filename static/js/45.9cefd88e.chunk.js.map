{"version":3,"file":"static/js/45.9cefd88e.chunk.js","mappings":"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","sources":["os/configs/sol.config.ts","os/configs/register.config.ts","os/configs/stat.config.ts","os/configs/index.ts","os/store/accounts.reducer.ts","os/store/flags.reducer.ts","os/store/index.ts","os/store/mints.reducer.ts","os/store/page.reducer.ts","os/store/pools.reducer.ts","os/store/search.reducer.ts","os/store/ui.reducer.ts","os/store/walkthrough.reducer.ts","os/store/wallet.reducer.ts","shared/devTools.ts","shared/pdb/ipfs.ts","shared/storage.ts","shared/dataloader/constant.ts","shared/dataloader/request.ts","shared/dataloader/cache.ts","shared/dataloader/index.ts","shared/util.ts"],"sourcesContent":["import { Net } from 'shared/runtime'\n\nconst SOLVARS = {\n  spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n  splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n}\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  sntrAddress: string\n  sntrPoolAddress: string\n  swapAddress: string\n  taxmanAddress: string\n} & typeof SOLVARS\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    ...SOLVARS,\n    node: 'https://api.devnet.solana.com',\n    sntrAddress: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n    sntrPoolAddress: '3EUPL7YQLbU6DNU5LZeQeHPXTf1MigJ2yASXA9rH5Ku4',\n    swapAddress: '4erFSLP7oBFSVC1t35jdxmbfxEhYCKfoM6XdG2BLR3UF',\n    taxmanAddress: '8UaZw2jDhJzv5V53569JbCd3bD4BnyCfBH3sjwgajGS9',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    ...SOLVARS,\n    node: 'https://api.testnet.solana.com',\n    sntrAddress: '',\n    sntrPoolAddress: '',\n    swapAddress: '',\n    taxmanAddress: '',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    ...SOLVARS,\n    node: 'https://sentre.genesysgo.net',\n    sntrAddress: 'SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M',\n    sntrPoolAddress: 'Aa3WZX7Xunfebp2MuAcz9CNw8TYTDL7mVrmb11rjyVm6',\n    swapAddress: 'SSW7ooZ1EbEognq5GosbygA3uWW1Hq1NsFq6TsftCFV',\n    taxmanAddress: '9doo2HZQEmh2NgfT3Yx12M89aoBheycYqH1eaR5gKb3e',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_NAME !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string'\n)\n  throw new Error(\n    'Please add REACT_APP_ID, REACT_APP_NAME, REACT_APP_URL in .env.local!',\n  )\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  defaultAppId: string\n  extra: SenReg\n  senreg: string\n}\n\nconst DEFAULT_APP_ID = process.env.REACT_APP_ID\nconst devApp = {\n  [DEFAULT_APP_ID]: {\n    url: process.env.REACT_APP_URL,\n    appId: DEFAULT_APP_ID,\n    name: process.env.REACT_APP_NAME,\n    author: {\n      name: process.env.REACT_APP_AUTHOR_NAME || '',\n      email: process.env.REACT_APP_AUTHOR_EMAIL || '',\n    },\n    tags: (process.env.REACT_APP_TAGS || '')\n      .split(',')\n      .map((tag) => tag.trim()),\n    description: process.env.REACT_APP_DESCRIPTION || '',\n    verified: false,\n  },\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: {},\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Config = {\n  baseURL: string\n}\n\nconst config: Record<Net, Config> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    baseURL: 'https://stat-dev.sentre.io',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    baseURL: 'https://stat-dev.sentre.io',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    baseURL: 'https://stat.sentre.io',\n  },\n}\n\n/**\n * Module exports\n */\nexport default config\n","import { net, env } from 'shared/runtime'\nimport sol from './sol.config'\nimport register from './register.config'\nimport stat from './stat.config'\n\nconst configs = {\n  sol: sol[net],\n  register: register[env],\n  stat: stat[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, AccountData } from '@senswap/sen-js'\n\n/**\n * Interface & Utility\n */\n\nexport type AccountsState = Record<string, AccountData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'accounts'\nconst initialState: AccountsState = {}\n\n/**\n * Actions\n */\n\nexport const getAccounts = createAsyncThunk(\n  `${NAME}/getAccounts`,\n  async ({ owner }: { owner: string }) => {\n    if (!account.isAddress(owner))\n      throw new Error('Invalid owner/wallet address')\n    const { splt } = window.sentre\n    const ownerPublicKey = account.fromAddress(owner)\n    const { value } = await splt.connection.getTokenAccountsByOwner(\n      ownerPublicKey,\n      { programId: splt.spltProgramId },\n    )\n    let bulk: AccountsState = {}\n    value.forEach(({ pubkey, account: { data: buf } }) => {\n      const address = pubkey.toBase58()\n      const data = splt.parseAccountData(buf)\n      return (bulk[address] = data)\n    })\n    return bulk\n  },\n)\n\nexport const getAccount = createAsyncThunk<\n  AccountsState,\n  { address: string },\n  { state: any }\n>(`${NAME}/getAccount`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid account address')\n  const {\n    accounts: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const { splt } = window.sentre\n  const raw = await splt.getAccountData(address)\n  return { [address]: raw }\n})\n\nexport const upsetAccount = createAsyncThunk<\n  AccountsState,\n  { address: string; data: AccountData },\n  { state: any }\n>(`${NAME}/upsetAccount`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteAccount = createAsyncThunk(\n  `${NAME}/deleteAccount`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getAccounts.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getAccount.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetAccount.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteAccount.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account } from '@senswap/sen-js'\n\nimport PDB from 'shared/pdb'\n\n/**\n * Interface & Utility\n */\n\ntype FlagsState = {\n  visited: boolean\n  loading: boolean\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'flags'\nconst initialState: FlagsState = {\n  visited: true,\n  loading: true,\n}\n\n/**\n * Actions\n */\n\nexport const loadVisited = createAsyncThunk<\n  Partial<FlagsState>,\n  void,\n  { state: any }\n>(`${NAME}/loadVisited`, async (_, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n  } = getState()\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet')\n  const db = new PDB(walletAddress).createInstance('sentre')\n  const visited: boolean = (await db.getItem('visited')) || false\n  return { visited }\n})\n\nexport const updateVisited = createAsyncThunk<\n  Partial<FlagsState>,\n  boolean,\n  { state: any }\n>(`${NAME}/updateVisited`, async (visited, { getState }) => {\n  const {\n    wallet: { address },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet')\n  const db = new PDB(address).createInstance('sentre')\n  await db.setItem('visited', visited)\n  return { visited }\n})\n\nexport const updateLoading = createAsyncThunk(\n  `${NAME}/updateLoading`,\n  async (loading: boolean) => {\n    return { loading }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        loadVisited.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateVisited.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateLoading.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import {\n  createDispatchHook,\n  createSelectorHook,\n  createStoreHook,\n  useDispatch,\n  useSelector,\n} from 'react-redux'\nimport { configureStore } from '@reduxjs/toolkit'\nimport { RootContext } from '@senhub/context'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport ui from './ui.reducer'\nimport flags from './flags.reducer'\nimport page from './page.reducer'\nimport wallet from './wallet.reducer'\nimport accounts from './accounts.reducer'\nimport mints from './mints.reducer'\nimport pools from './pools.reducer'\nimport search from './search.reducer'\nimport walkthrough from './walkthrough.reducer'\n\n/**\n * Root types\n */\nexport type RootState = ReturnType<typeof store.getState>\nexport type RootDispatch = typeof store.dispatch\n\n/**\n * Root hooks\n */\nexport const useRootStore = createStoreHook(RootContext)\nexport const useRootDispatch: typeof useDispatch =\n  createDispatchHook(RootContext)\nexport const useRootSelector: typeof useSelector =\n  createSelectorHook(RootContext)\n\n/**\n * Root store\n */\nconst store = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools('sentre'),\n  reducer: {\n    ui,\n    flags,\n    page,\n    wallet,\n    accounts,\n    mints,\n    pools,\n    search,\n    walkthrough,\n  },\n})\n\nexport default store\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, MintData } from '@senswap/sen-js'\n\n/**\n * Interface & Utility\n */\n\nexport type MintsState = Record<string, MintData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'mints'\nconst initialState: MintsState = {}\n\n/**\n * Actions\n */\n\nexport const getMint = createAsyncThunk<\n  MintsState,\n  { address: string; force?: boolean },\n  { state: any }\n>(`${NAME}/getMint`, async ({ address, force = false }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid mint address')\n  if (!force) {\n    const {\n      accounts: { [address]: data },\n    } = getState()\n    if (data) return { [address]: data }\n  }\n  const { splt } = window.sentre\n  const raw = await splt.getMintData(address)\n  return { [address]: raw }\n})\n\nexport const upsetMint = createAsyncThunk<\n  MintsState,\n  { address: string; data: MintData },\n  { state: any }\n>(`${NAME}/upsetMint`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteMint = createAsyncThunk(\n  `${NAME}/deleteMint`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        getMint.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetMint.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteMint.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account } from '@senswap/sen-js'\n\nimport PDB from 'shared/pdb'\nimport configs from 'os/configs'\n\nconst {\n  register: { senreg, extra },\n} = configs\n\n/**\n * Interface & Utility\n */\n\nexport type PageState = {\n  register: SenReg\n  appIds: AppIds\n}\n\nconst troubleshoot = (register: SenReg, appIds?: AppIds): AppIds => {\n  if (!appIds || !Array.isArray(appIds)) return []\n  return appIds.filter((appId) => register[appId])\n}\nconst fetchRegister = async () => {\n  try {\n    const res = await fetch(senreg)\n    return await res.json()\n  } catch (er) {\n    return {}\n  }\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'page'\nconst initialState: PageState = {\n  register: {},\n  appIds: [],\n}\n\n/**\n * Actions\n */\n\n// Must fetch register at very first of the process\nexport const loadRegister = createAsyncThunk(\n  `${NAME}/loadRegister`,\n  async () => {\n    const register = await fetchRegister()\n    return { register: { ...register, ...extra } }\n  },\n)\n\n// For sandbox only\nexport const installManifest = createAsyncThunk<\n  Partial<PageState>,\n  ComponentManifest,\n  { state: any }\n>(`${NAME}/installManifest`, async (manifest, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n    page: { appIds, register },\n  } = getState()\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet.')\n  if (appIds.includes(manifest.appId))\n    throw new Error('Cannot run sandbox for an installed application.')\n  const newAppIds: AppIds = [...appIds]\n  newAppIds.push(manifest.appId)\n  const newRegister: SenReg = { ...register }\n  newRegister[manifest.appId] = manifest\n  return { appIds: newAppIds, register: newRegister }\n})\n\n/**\n * App Actions\n */\nexport const loadPage = createAsyncThunk<\n  Partial<PageState>,\n  void,\n  { state: any }\n>(`${NAME}/loadPage`, async (_, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n    page: { register },\n  } = getState()\n\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet.')\n  // Fetch user's apps\n  const db = new PDB(walletAddress).createInstance('sentre')\n  const appIds = troubleshoot(\n    register,\n    (await db.getItem('appIds')) || initialState.appIds,\n  )\n  return { appIds }\n})\n\nexport const updatePage = createAsyncThunk<\n  Partial<PageState>,\n  AppIds,\n  { state: any }\n>(`${NAME}/updatePage`, async (appIds, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n    page: { register },\n  } = getState()\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet.')\n  appIds = troubleshoot(register, appIds)\n  const db = new PDB(walletAddress).createInstance('sentre')\n  await db.setItem('appIds', appIds)\n  return { appIds }\n})\n\nexport const installApp = createAsyncThunk<\n  Partial<PageState>,\n  string,\n  { state: any }\n>(`${NAME}/installApp`, async (appId, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n    page: { appIds },\n  } = getState()\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet.')\n  if (appIds.includes(appId)) return {}\n  const newAppIds: AppIds = [...appIds]\n  newAppIds.push(appId)\n  const db = new PDB(walletAddress).createInstance('sentre')\n  await db.setItem('appIds', newAppIds)\n  return { appIds: newAppIds }\n})\n\nexport const uninstallApp = createAsyncThunk<\n  Partial<PageState>,\n  string,\n  { state: any }\n>(`${NAME}/uninstallApp`, async (appId, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n    page: { appIds },\n  } = getState()\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet.')\n  if (!appIds.includes(appId)) return {}\n  const newAppIds = appIds.filter((_appId: string) => _appId !== appId)\n  const pdb = new PDB(walletAddress)\n  const db = pdb.createInstance('sentre')\n  await db.setItem('appIds', newAppIds)\n  await pdb.dropInstance(appId)\n  return { appIds: newAppIds }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        loadRegister.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        installManifest.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        loadPage.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updatePage.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        installApp.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        uninstallApp.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { AccountInfo, PublicKey } from '@solana/web3.js'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, PoolData } from '@senswap/sen-js'\nimport configs from 'os/configs'\n\nconst {\n  sol: { taxmanAddress },\n} = configs\n\n/**\n * Interface & Utility\n */\n\nexport type PoolsState = Record<string, PoolData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'pools'\nconst initialState: PoolsState = {}\n\n/**\n * Actions\n */\n\nexport const getPools = createAsyncThunk(`${NAME}/getPools`, async () => {\n  const { swap } = window.sentre\n  // Get all pools\n  const value: Array<{ pubkey: PublicKey; account: AccountInfo<Buffer> }> =\n    await swap.connection.getProgramAccounts(swap.swapProgramId, {\n      filters: [\n        { dataSize: 257 },\n        { memcmp: { bytes: taxmanAddress, offset: 65 } },\n      ],\n    })\n  let bulk: PoolsState = {}\n  value.forEach(({ pubkey, account: { data: buf } }) => {\n    const address = pubkey.toBase58()\n    const data = swap.parsePoolData(buf)\n    bulk[address] = data\n  })\n  return bulk\n})\n\nexport const getPool = createAsyncThunk<\n  PoolsState,\n  { address: string },\n  { state: any }\n>(`${NAME}/getPool`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid pool address')\n  const {\n    pools: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const { swap } = window.sentre\n  const raw = await swap.getPoolData(address)\n  return { [address]: raw }\n})\n\nexport const upsetPool = createAsyncThunk<\n  PoolsState,\n  { address: string; data: PoolData },\n  { state: any }\n>(`${NAME}/upsetPool`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid pool address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getPools.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\ntype SearchState = {\n  value: string\n  loading: boolean\n  disabled: boolean\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'search'\nconst initialState: SearchState = {\n  value: '',\n  loading: false,\n  disabled: false,\n}\n\n/**\n * Actions\n */\n\nexport const setValue = createAsyncThunk<\n  Partial<SearchState>,\n  string,\n  { state: any }\n>(`${NAME}/setValue`, async (value) => {\n  return { value }\n})\n\nexport const setLoading = createAsyncThunk<\n  Partial<SearchState>,\n  boolean,\n  { state: any }\n>(`${NAME}/setLoading`, async (loading) => {\n  return { loading }\n})\n\nexport const setDisabled = createAsyncThunk<\n  Partial<SearchState>,\n  boolean,\n  { state: any }\n>(`${NAME}/setDisabled`, async (disabled) => {\n  return { disabled }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setValue.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setLoading.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setDisabled.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\nexport type Infix = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\nexport type Theme = 'light' | 'dark'\n\nexport type UIState = {\n  theme: Theme\n  width: number\n  infix: Infix\n  touchable: boolean\n  visibleActionCenter: boolean\n  visibleInstaller: boolean\n}\n\nconst getInfix = (): Infix => {\n  const width = window.innerWidth\n  if (width < 576) return 'xs'\n  if (width < 768) return 'sm'\n  if (width < 992) return 'md'\n  if (width < 1200) return 'lg'\n  if (width < 1400) return 'xl'\n  return 'xxl'\n}\nconst isTouchable = () => {\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0\n}\nconst getTheme = (): Theme => {\n  if (window.matchMedia('(prefers-color-scheme: light)').matches) return 'light'\n  return 'dark'\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'ui'\nconst initialState: UIState = {\n  theme: getTheme(),\n  width: window.innerWidth,\n  infix: getInfix(),\n  touchable: isTouchable(),\n  visibleActionCenter: false,\n  visibleInstaller: false,\n}\n\n/**\n * Actions\n */\n\nexport const setTheme = createAsyncThunk(\n  `${NAME}/setTheme`,\n  async (theme: Theme) => {\n    return { theme }\n  },\n)\n\nexport const resize = createAsyncThunk(`${NAME}/resize`, async () => {\n  const width = window.innerWidth\n  const infix = getInfix()\n  return { width, infix }\n})\n\nexport const setVisibleActionCenter = createAsyncThunk(\n  `${NAME}/setVisibleActionCenter`,\n  async (visible: boolean) => {\n    return { visibleActionCenter: visible }\n  },\n)\n\nexport const setVisibleInstaller = createAsyncThunk(\n  `${NAME}/setVisibleInstaller`,\n  async (visible: boolean) => {\n    return { visibleInstaller: visible }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setTheme.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        resize.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setVisibleActionCenter.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setVisibleInstaller.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\nexport enum WalkThroughType {\n  Default,\n  NewComer,\n}\n\ntype WalkThorughState = {\n  type: WalkThroughType\n  run: boolean\n  step: number\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'walkthrough'\nconst initialState: WalkThorughState = {\n  type: WalkThroughType.Default,\n  run: false,\n  step: 0,\n}\n\n/**\n * Actions\n */\n\nexport const setWalkthrough = createAsyncThunk<\n  Partial<WalkThorughState>,\n  Partial<WalkThorughState>,\n  { state: any }\n>(`${NAME}/setWalkthrough`, async (state) => {\n  return { ...state }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      setWalkthrough.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { Lamports, SPLT, Swap, WalletInterface } from '@senswap/sen-js'\n\nimport configs from 'os/configs'\n\n/**\n * Interface & Utility\n */\n\nexport type WalletState = {\n  visible: boolean\n  address: string\n  lamports: bigint\n}\n\nconst initializeWindow = async (wallet: WalletInterface | undefined) => {\n  const {\n    sol: { node, spltAddress, splataAddress, swapAddress },\n  } = configs\n  window.sentre = {\n    wallet,\n    lamports: new Lamports(node),\n    splt: new SPLT(spltAddress, splataAddress, node),\n    swap: new Swap(swapAddress, spltAddress, splataAddress, node),\n  }\n}\n\nconst destroyWindow = async () => {\n  if (window.sentre?.wallet) window.sentre.wallet.disconnect()\n  await initializeWindow(undefined)\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'wallet'\nconst initialState: WalletState = {\n  visible: false,\n  address: '',\n  lamports: BigInt(0),\n}\n\n/**\n * Actions\n */\n\nexport const openWallet = createAsyncThunk(`${NAME}/openWallet`, async () => {\n  return { visible: true }\n})\n\nexport const closeWallet = createAsyncThunk(`${NAME}/closeWallet`, async () => {\n  return { visible: false }\n})\n\nexport const connectWallet = createAsyncThunk(\n  `${NAME}/connectWallet`,\n  async (wallet: any) => {\n    if (!wallet) throw new Error('Invalid wallet instance')\n    await initializeWindow(wallet)\n    const address = await wallet.getAddress()\n    const lamports = await window.sentre.lamports.getLamports(address)\n    return { address, lamports: BigInt(lamports), visible: false }\n  },\n)\n\nexport const updateWallet = createAsyncThunk(\n  `${NAME}/updateWallet`,\n  async ({ lamports }: Partial<WalletState>) => {\n    return { lamports }\n  },\n)\n\nexport const disconnectWallet = createAsyncThunk(\n  `${NAME}/disconnectWallet`,\n  async () => {\n    await destroyWindow()\n    window.location.reload() // Reset all redux store\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        openWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        closeWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        connectWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        disconnectWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint'\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { create, isIPFS } from 'ipfs-core'\nimport { asyncWait } from 'shared/util'\n\nclass IPFS {\n  private _ipfs: any = async () => {\n    try {\n      if (!window.ipfs) window.ipfs = await create()\n      return window.ipfs\n    } catch (er) {\n      await asyncWait(500)\n      return await this._ipfs()\n    }\n  }\n\n  static isCID = (cid: string | undefined | null): boolean => {\n    try {\n      if (!cid) return false\n      return isIPFS.multihash(cid)\n    } catch (er) {\n      return false\n    }\n  }\n\n  get = async (cid: string) => {\n    if (!IPFS.isCID(cid)) throw new Error('Invalid CID')\n    const ipfs = await this._ipfs()\n    const stream = await ipfs.cat(cid)\n    let raw = ''\n    for await (const chunk of stream) raw += Buffer.from(chunk).toString()\n    const data = JSON.parse(raw)\n    return data\n  }\n\n  set = async (data: object): Promise<string> => {\n    if (!data) throw new Error('Empty data')\n    const raw = JSON.stringify(data)\n    const ipfs = await this._ipfs()\n    const { path: cid } = await ipfs.add(raw)\n    return cid as string\n  }\n}\n\nexport default IPFS\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  try {\n    if (!value) return null\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n","export type LimitConfig = {\n  calls: number\n  time: number\n}\n\nexport type CacheConfig = {\n  ttl: number // millisecond\n}\n\nexport type SingleFlightConfig = {\n  limit?: LimitConfig\n  cache?: CacheConfig\n}\n\n// 10 request per 1 second\nexport const DEFAULT_LIMIT_CONFIG: LimitConfig = {\n  calls: 10,\n  time: 1000,\n}\n\n// 10 request per 1 second\nexport const DEFAULT_CACHE_CONFIG: CacheConfig = {\n  ttl: 30000,\n}\n\nexport const DEFAULT_SINGLE_FLIGHT_CONFIG: SingleFlightConfig = {\n  limit : DEFAULT_LIMIT_CONFIG,\n  cache: DEFAULT_CACHE_CONFIG\n}","export interface IRequestQueue {\n  key: string\n  add(resolve: any, reject: any): void\n  resolves(data: any): void\n  rejects(error: any): void\n}\n\nexport class RequestQueue implements IRequestQueue {\n  key = ''\n  private resolveQueue: any[] = []\n  private rejectQueue: any[] = []\n  constructor(key: string) {\n    this.key = key\n  }\n\n  add(resolve: any, reject: any) {\n    this.resolveQueue.push(resolve)\n    this.rejectQueue.push(reject)\n  }\n\n  resolves(data: any) {\n    while (this.resolveQueue.length > 0) {\n      const resolve = this.resolveQueue.shift()\n      resolve(data)\n    }\n  }\n\n  rejects(error: any) {\n    while (this.rejectQueue.length > 0) {\n      const reject = this.rejectQueue.shift()\n      reject(error)\n    }\n  }\n}\n","import { DEFAULT_CACHE_CONFIG } from './constant'\nimport { CacheConfig } from './constant'\n\nexport class SingleFlightCache {\n  private static mapCache = new Map<string, any>()\n\n  static set(\n    key: string,\n    value: any,\n    configs: CacheConfig = DEFAULT_CACHE_CONFIG,\n  ) {\n    this.mapCache.set(key, value)\n    setTimeout(() => {\n      this.mapCache.delete(key)\n    }, configs.ttl)\n  }\n\n  static get(key: string) {\n    return this.mapCache.get(key)\n  }\n}\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey)\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(\n    request: IRequestQueue,\n    callback: () => Promise<any>,\n  ) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    return true\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import { account, utils } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport { net } from 'shared/runtime'\nimport { DataLoader } from './dataloader'\n\n/**\n * Delay by async/await\n * @param ms - milisenconds\n * @returns\n */\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Shorten a long address\n * @param address - The long address\n * @param num - The number of the heading and trailing characters\n * @param delimiter - The delimiter\n * @returns Shortened address\n */\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\n/**\n * Build a explorer url by context including addresses or transaction ids\n * @param addressOrTxId - Address or TxId\n * @returns\n */\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\n/**\n * Wrapped Numbro - https://numbrojs.com/old-format.html\n * @param value - value\n * @returns\n */\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value || !Number.isFinite(Number(value))) return numbro('0')\n  return numbro(value)\n}\n\n/**\n * Generate a random color\n * @param seed - Seed\n * @param opacity - Opacity\n * @returns\n */\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n\n/**\n * Fetch coingecko data with cache\n * @param ticket - Token ticket\n * @returns\n */\nexport const fetchCGK = async (ticket = '') => {\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n"],"names":["SOLVARS","spltAddress","splataAddress","devnet","node","sntrAddress","sntrPoolAddress","swapAddress","taxmanAddress","testnet","mainnet","DEFAULT_APP_ID","process","devApp","url","appId","name","author","email","tags","split","map","tag","trim","description","verified","development","defaultAppId","extra","senreg","staging","production","baseURL","sol","net","register","env","stat","NAME","getAccounts","createAsyncThunk","async","owner","account","Error","splt","window","sentre","ownerPublicKey","value","connection","getTokenAccountsByOwner","programId","spltProgramId","bulk","forEach","pubkey","data","buf","address","toBase58","parseAccountData","getAccount","getState","accounts","getAccountData","upsetAccount","deleteAccount","createSlice","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","payload","Object","assign","loadVisited","_","wallet","walletAddress","db","PDB","createInstance","visited","getItem","updateVisited","setItem","updateLoading","loading","createStoreHook","RootContext","useRootDispatch","createDispatchHook","useRootSelector","createSelectorHook","store","configureStore","middleware","getDefaultMiddleware","bigintSerializationMiddleware","devTools","reducer","ui","flags","page","mints","pools","search","walkthrough","getMint","force","getMintData","upsetMint","deleteMint","configs","troubleshoot","appIds","Array","isArray","filter","loadRegister","res","fetch","json","er","fetchRegister","installManifest","manifest","includes","newAppIds","push","newRegister","loadPage","updatePage","installApp","uninstallApp","_appId","pdb","dropInstance","getPools","swap","getProgramAccounts","swapProgramId","filters","dataSize","memcmp","bytes","offset","parsePoolData","getPool","getPoolData","upsetPool","setValue","setLoading","setDisabled","disabled","getInfix","width","innerWidth","theme","matchMedia","matches","infix","touchable","navigator","maxTouchPoints","visibleActionCenter","visibleInstaller","setTheme","resize","setVisibleActionCenter","visible","setVisibleInstaller","WalkThroughType","type","Default","run","step","setWalkthrough","initializeWindow","lamports","Lamports","SPLT","Swap","BigInt","openWallet","closeWallet","connectWallet","getAddress","getLamports","updateWallet","disconnectWallet","disconnect","undefined","destroyWindow","location","reload","appName","prototype","toJSON","this","toString","serializableCheck","isSerializable","val","obj","proto","getPrototypeOf","isPlainObject","IPFS","_ipfs","ipfs","create","asyncWait","get","isCID","cid","stream","cat","raw","chunk","Buffer","from","JSON","parse","set","stringify","path","add","isIPFS","KEY","driver","localStorage","convert","e","storage","key","clear","DEFAULT_CACHE_CONFIG","ttl","DEFAULT_SINGLE_FLIGHT_CONFIG","limit","calls","time","cache","RequestQueue","constructor","resolveQueue","rejectQueue","resolve","reject","resolves","length","shift","rejects","error","SingleFlightCache","mapCache","setTimeout","delete","Map","DataLoader","instanceKey","mapInstance","has","instance","newSingleFlight","SingleFlight","requestKey","callback","singleFlight","getSingleFlight","newRequest","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","cacheData","Promise","isFetch","request","validateLimit","addRequestQueue","createTimeLogs","then","response","catch","finally","fetchRequestQueue","clearInterval","setInterval","now","Date","getTime","ms","shortenAddress","num","delimiter","substring","explorer","addressOrTxId","numeric","Number","isFinite","numbro","randomColor","seed","opacity","hash","Math","floor","random","i","charCodeAt","rgb","fetchCGK","ticket","utils"],"sourceRoot":""}