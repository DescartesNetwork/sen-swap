{"version":3,"file":"static/js/929.8a3c6e89.chunk.js","mappings":"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","sources":["shared/antd/ionicon/assets/icon-telegram.svg","shared/antd/ionicon/customs.tsx","shared/antd/ionicon/index.tsx","shared/antd/mint/mintAvatar.tsx","shared/antd/mint/mintName.tsx","shared/antd/mint/mintSymbol.tsx","app/page/chart/cross.tsx","app/page/chart/chart.tsx","app/page/chart/chartEmpty.tsx","app/helper/cgk.ts","app/page/chart/index.tsx","shared/hooks/useMintDecimals.ts","shared/hooks/useAccountBalance.ts","app/helper/router.ts","app/helper/oracle.ts","app/constant/swap.ts","app/hooks/usePriceImpact.ts","app/components/swapAction/index.tsx","app/components/preview/routeAvatar.tsx","app/components/preview/price.tsx","app/components/preview/index.tsx","app/model/bid.controller.ts","app/components/confirmSwap.tsx","app/page/swap/swapReview.tsx","app/hooks/useMintCgk.ts","app/page/swap/swapPoolInfo.tsx","app/static/images/sen.svg","app/components/poweredBy.tsx","app/components/settings/slippage.tsx","app/components/settings/advanced.tsx","app/model/settings.controller.ts","app/components/settings/index.tsx","app/components/selection/search.tsx","app/components/selection/mint.tsx","app/components/selection/mintSelection.tsx","app/components/selection/index.tsx","shared/antd/numericInput.tsx","app/configs/manifest.config.ts","app/configs/sol.config.ts","app/configs/swap.config.ts","app/configs/wormhole.config.ts","app/configs/route.config.ts","app/configs/index.ts","app/model/ask.controller.ts","app/hooks/useMintSelection.ts","app/components/ask/index.tsx","app/constant/ethConfig.ts","app/constant/solConfig.ts","app/helper/wormhole.ts","app/components/bid/wormholeSupported.tsx","app/components/bid/index.tsx","app/model/route.controller.ts","app/components/swapForm/swapInput.tsx","app/components/swapForm/index.tsx","app/page/swap/index.tsx","app/page/history/statusTag.tsx","app/page/history/column.tsx","app/lib/stat/entities/trans-log.ts","app/lib/stat/adapters/solana/client.ts","app/lib/stat/constants/transaction.ts","app/lib/stat/helpers/date.ts","app/lib/stat/logic/translogSwap.ts","app/lib/stat/logic/translog.ts","app/lib/stat/constants/sol.ts","app/model/history.controller.ts","app/page/history/index.tsx","app/page/index.tsx","app/widget/index.tsx","app/model/index.ts","app/bootstrap.app.tsx","os/configs/sol.config.ts","os/configs/register.config.ts","os/configs/index.ts","os/providers/tokenProvider/supplementary.ts","os/providers/tokenProvider/index.ts","shared/dataloader/cache.ts","shared/dataloader/constant.ts","shared/dataloader/index.ts","shared/dataloader/request.ts","shared/devTools.ts","shared/runtime.ts","shared/storage.ts","shared/util.ts"],"sourcesContent":["var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgIconTelegram({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"inherit\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\",\n    width: \"50px\",\n    height: \"50px\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.137,6.552c-0.75-0.636-1.928-0.727-3.146-0.238l-0.002,0C41.708,6.828,6.728,21.832,5.304,22.445 c-0.259,0.09-2.521,0.934-2.288,2.814c0.208,1.695,2.026,2.397,2.248,2.478l8.893,3.045c0.59,1.964,2.765,9.21,3.246,10.758 c0.3,0.965,0.789,2.233,1.646,2.494c0.752,0.29,1.5,0.025,1.984-0.355l5.437-5.043l8.777,6.845l0.209,0.125 c0.596,0.264,1.167,0.396,1.712,0.396c0.421,0,0.825-0.079,1.211-0.237c1.315-0.54,1.841-1.793,1.896-1.935l6.556-34.077 C47.231,7.933,46.675,7.007,46.137,6.552z M22,32l-3,8l-3-10l23-17L22,32z\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgIconTelegram);\nexport default __webpack_public_path__ + \"static/media/icon-telegram.2450489f40d03000fe65fc1c6f238d85.svg\";\nexport { ForwardRef as ReactComponent };","import IconTele from './assets/icon-telegram.svg'\n\nexport const CUSTOM_ICONS: Record<string, string> = {\n  'logo-telegram': IconTele,\n}\n","/**\n * IonIcon 5\n * Credit https://ionic.io/ionicons\n */\n\nimport { forwardRef } from 'react'\nimport { CUSTOM_ICONS } from './customs'\n\n/**\n * IonIcon\n * @param name The icon name. You can find it here https://ionic.io/ionicons\n * @param className To modify the span class\n */\nconst IonIcon = forwardRef<\n  HTMLElement,\n  { name: string; className?: string } & any\n>(({ name, className, ...props }, ref) => {\n  const cln = className ? 'anticon ' + className : 'anticon'\n\n  return (\n    <span className={cln} {...props}>\n      {CUSTOM_ICONS[name] ? (\n        <ion-icon ref={ref} src={CUSTOM_ICONS[name]} />\n      ) : (\n        <ion-icon ref={ref} name={name} />\n      )}\n    </span>\n  )\n})\n\nexport default IonIcon\n","import { ReactNode, useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\nimport { useMint, usePool } from '@senhub/providers'\n\nimport { Avatar } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst DEFAULT_AVATARS: Array<string | undefined> = [undefined]\n\nexport type MintAvatarProps = {\n  mintAddress: string\n  size?: number\n  icon?: ReactNode\n  reversed?: boolean\n}\n\n/**\n * Mint/Token avatar, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param size - Avatar size. Default 24px.\n * @param icon - Fallback icon for unknown token\n * @param reversed - (Optional) The default LP token avatar is A-B. The reversed is to change it to B-A\n * @returns name\n */\nconst MintAvatar = ({\n  mintAddress,\n  size = 24,\n  icon = <IonIcon name=\"diamond-outline\" />,\n  reversed = false,\n  ...props\n}: MintAvatarProps) => {\n  const [avatars, setAvatars] = useState(DEFAULT_AVATARS)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveAvatar = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.logoURI) return token.logoURI\n      return undefined\n    },\n    [tokenProvider],\n  )\n\n  const deriveAvatars = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setAvatars(DEFAULT_AVATARS)\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const avatars = await Promise.all([mint_a, mint_b].map(deriveAvatar))\n      if (reversed) avatars.reverse()\n      return setAvatars(avatars)\n    }\n    // Normal mint\n    const avatar = await deriveAvatar(mintAddress)\n    return setAvatars([avatar])\n  }, [mintAddress, reversed, deriveAvatar, pools])\n\n  useEffect(() => {\n    deriveAvatars()\n  }, [deriveAvatars])\n\n  if (avatars.length === 1)\n    return (\n      <Avatar\n        src={avatars[0]}\n        size={size}\n        style={{ backgroundColor: '#2D3355', border: 'none' }}\n        {...props}\n      >\n        {icon}\n      </Avatar>\n    )\n  return (\n    <Avatar.Group style={{ display: 'block', whiteSpace: 'nowrap' }} {...props}>\n      {avatars.map((avatar, i) => (\n        <Avatar\n          key={i}\n          src={avatar}\n          size={size}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n        >\n          {icon}\n        </Avatar>\n      ))}\n    </Avatar.Group>\n  )\n}\n\nexport default MintAvatar\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\nimport { useMint, usePool } from '@senhub/providers'\n\nconst DEFAULT_NAME = 'Unknown Token'\n\n/**\n * Mint/Token name, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param separator - (Optional) In case of LP tokens, the names is combined by 2 token names. The separator is to separate them.\n * @param reversed - (Optional) The default LP token names is A-B. The reversed is to change it to B-A\n * @returns name\n */\nconst MintName = ({\n  mintAddress,\n  separator = ' • ',\n  reversed = false,\n}: {\n  mintAddress: string\n  separator?: string\n  reversed?: boolean\n}) => {\n  const [name, setName] = useState(DEFAULT_NAME)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveName = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.name) return token.name\n      return DEFAULT_NAME\n    },\n    [tokenProvider],\n  )\n\n  const deriveNames = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setName(DEFAULT_NAME)\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const names = await Promise.all([mint_a, mint_b].map(deriveName))\n      if (reversed) names.reverse()\n      return setName(`${names.join(separator)} LP`)\n    }\n    // Normal mint\n    const name = await deriveName(mintAddress)\n    return setName(name)\n  }, [mintAddress, reversed, deriveName, pools, separator])\n\n  useEffect(() => {\n    deriveNames()\n  }, [deriveNames])\n\n  return <span>{name}</span>\n}\n\nexport default MintName\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\nimport { useMint, usePool } from '@senhub/providers'\n\nconst DEFAULT_SYMBOL = 'TOKN'\n\n/**\n * Mint/Token symbol, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param separator - (Optional) In case of LP tokens, the symbols is combined by 2 token symbols. The separator is to separate them.\n * @param reversed - (Optional) The default LP token symbol is A-B. The reversed is to change it to B-A\n * @returns symbol\n */\nconst MintSymbol = ({\n  mintAddress,\n  separator = ' • ',\n  reversed = false,\n}: {\n  mintAddress: string\n  separator?: string\n  reversed?: boolean\n}) => {\n  const [symbol, setSymbol] = useState(DEFAULT_SYMBOL)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveSymbol = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.symbol) return token.symbol\n      return address.substring(0, 4)\n    },\n    [tokenProvider],\n  )\n\n  const deriveSymbols = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setSymbol(DEFAULT_SYMBOL)\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const symbols = await Promise.all([mint_a, mint_b].map(deriveSymbol))\n      if (reversed) symbols.reverse()\n      return setSymbol(symbols.join(separator))\n    }\n    // Normal mint\n    const symbol = await deriveSymbol(mintAddress)\n    return setSymbol(symbol)\n  }, [mintAddress, reversed, deriveSymbol, pools, separator])\n\n  useEffect(() => {\n    deriveSymbols()\n  }, [deriveSymbols])\n\n  return <span>{symbol}</span>\n}\n\nexport default MintSymbol\n","import { useSelector } from 'react-redux'\n\nimport { Avatar, Space, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\n\nimport { AppState } from 'app/model'\n\nconst Cross = () => {\n  const {\n    bid: { mintInfo: bidMintInfo },\n    ask: { mintInfo: askMintInfo },\n  } = useSelector((state: AppState) => state)\n\n  const bidMintAddress = bidMintInfo?.address || ''\n  const askMintAddress = askMintInfo?.address || ''\n  return (\n    <Space>\n      <Avatar.Group>\n        <MintAvatar mintAddress={bidMintAddress} />\n        <MintAvatar mintAddress={askMintAddress} />\n      </Avatar.Group>\n      <Typography.Text>\n        <MintSymbol mintAddress={bidMintAddress} />\n        {' / '}\n        <MintSymbol mintAddress={askMintAddress} />\n      </Typography.Text>\n    </Space>\n  )\n}\n\nexport default Cross\n","import { useCallback, useState, useRef, useEffect } from 'react'\nimport Chart from 'chart.js'\nimport isEqual from 'react-fast-compare'\n\nimport { numeric } from 'shared/util'\ninterface Props {\n  labels?: (number | string)[]\n  chartData?: (number | string)[]\n  configs?: { backgroundColor?: string } & object\n  type?: string\n  disableAxe?: boolean\n  chartHeight?: string\n  chartId?: string\n}\n\nconst DEFAULT_BACKGROUND_COLOR = '#dadada'\n\nconst SenChart = ({\n  chartData = [],\n  labels = [],\n  type = 'line',\n  configs,\n  disableAxe = false,\n  chartId = 'sen_chart',\n}: Props) => {\n  const { backgroundColor } = configs || {}\n  const [isRebuildChart, setRebuildChart] = useState<boolean>(false)\n\n  const formatData = useCallback(\n    (\n      data: Array<number | number[] | undefined | null | any>,\n      label: Array<string | number>,\n      background?: string | CanvasGradient | undefined,\n    ): Chart.ChartData => ({\n      labels: label,\n      datasets: [{ ...configs, data, backgroundColor: background }],\n    }),\n    [configs],\n  )\n  // use a ref to store the chart instance since it it mutable\n  const chartRef = useRef<Chart | null>(null)\n\n  // callback creates the chart on the canvas element\n  const canvasCallback = (canvas: HTMLCanvasElement | null) => {\n    if (!canvas) return\n    const ctx = canvas.getContext('2d')\n    if (ctx && !isRebuildChart) {\n      // create new chart\n      chartRef.current = new Chart(ctx, {\n        type: type,\n        data: {\n          labels: [],\n          datasets: [\n            {\n              data: [],\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            xAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                },\n              },\n            ],\n            yAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                  beginAtZero: false,\n                  maxTicksLimit: 8,\n                  callback: function (value, index, values) {\n                    return numeric(value).format('0,0.[0]a')\n                  },\n                },\n              },\n            ],\n          },\n          plugins: {\n            legend: false,\n          },\n          hover: {\n            onHover: (event, elements) => {\n              const target = document.getElementById(chartId)\n              if (!target) return\n              target.style.cursor = elements[0] ? 'pointer' : 'default'\n            },\n          },\n        },\n      })\n      setRebuildChart(true)\n    }\n  }\n\n  const getBackground = useCallback(() => {\n    if (!chartRef || !backgroundColor) return DEFAULT_BACKGROUND_COLOR\n    const ctx = chartRef?.current?.canvas?.getContext('2d')\n    const gradient = ctx?.createLinearGradient(0, 0, 0, 180)\n    gradient?.addColorStop(0, backgroundColor)\n    gradient?.addColorStop(1, `${backgroundColor}00`)\n    const background = type === 'line' ? gradient : backgroundColor\n    return background\n  }, [backgroundColor, type])\n\n  useEffect(() => {\n    const chartInstance = chartRef.current\n    const dataInstace = chartInstance?.data.datasets?.find(({ data }) => data)\n    const compareData = isEqual(dataInstace?.data, chartData)\n    if (chartInstance && !compareData) {\n      chartInstance.data = formatData(chartData, labels, getBackground())\n      chartInstance?.update()\n    }\n  }, [chartData, formatData, getBackground, labels])\n\n  return <canvas id={chartId} height=\"180px\" ref={canvasCallback}></canvas>\n}\n\nexport default SenChart\n","import { Col, Empty, Row } from 'antd'\n\nconst ChartEmpty = () => {\n  return (\n    <Row style={{ height: 170 }} align=\"middle\" justify=\"center\">\n      <Col>\n        <Empty />\n      </Col>\n    </Row>\n  )\n}\n\nexport default ChartEmpty\n","import TokenProvider from 'os/providers/tokenProvider'\nimport { fetchCGK } from 'shared/util'\nimport axios from 'axios'\n\nexport interface MintInfo {\n  address: string\n  symbol: string\n  price: number\n  decimals: number\n}\n\nexport type ChartParamsCGK = {\n  days: number\n  interval: string\n}\n\nconst DEFAULT_TOKEN_INFO = {\n  address: '',\n  chainId: 0,\n  decimals: 0,\n  name: '',\n  symbol: 'TOKEN',\n  extensions: undefined,\n  logoURI: '',\n  tags: [],\n}\n\nconst TOKEN_PROVIDER = new TokenProvider()\n\nconst cgk = {\n  getMintInfos: async (mintsAddress: string[]) => {\n    if (!TOKEN_PROVIDER || !mintsAddress) return\n    const promise = mintsAddress.map(async (mint) => {\n      let tokenInfo = await TOKEN_PROVIDER.findByAddress(mint)\n      if (!tokenInfo) tokenInfo = DEFAULT_TOKEN_INFO\n      const { address, symbol, decimals, extensions } = tokenInfo\n      const ticket = extensions?.coingeckoId\n\n      if (!ticket) return { address, symbol, decimals, price: 0 } // some mints don't have a ticket, so the price in cgk is 0\n\n      const { price } = await fetchCGK(ticket)\n      return { address, symbol, decimals, price }\n    })\n    const mintsDetails = await Promise.all(promise)\n    const mapMintsDetails = new Map<string, MintInfo>()\n    mintsDetails.forEach((mint) => {\n      mapMintsDetails.set(mint.address, mint)\n    })\n    return mapMintsDetails\n  },\n}\nexport default cgk\n\nexport const fetchMarketChart = async (\n  ticket: string,\n  params: ChartParamsCGK,\n) => {\n  try {\n    const data: any = await axios({\n      method: 'get',\n      url: `https://api.coingecko.com/api/v3/coins/${ticket}/market_chart?vs_currency=usd&days=${params.days}&interval=${params.interval}`,\n    })\n    const priceData: [number /*time*/, number /*price*/][] = data.data.prices\n    return priceData.map((data) => ({ time: data[0], val: data[1] }))\n  } catch (error) {\n    return []\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport moment from 'moment'\nimport { useMint } from '@senhub/providers'\n\nimport { Card, Col, Radio, Row, Typography } from 'antd'\nimport Cross from './cross'\n\nimport { AppState } from 'app/model'\nimport SenChart from './chart'\nimport ChartEmpty from './chartEmpty'\nimport { ChartParamsCGK, fetchMarketChart } from 'app/helper/cgk'\nimport { numeric } from 'shared/util'\n\ntype ChartData = { label: string; val: number }\nenum Interval {\n  day = 'day',\n  week = 'week',\n  month = 'month',\n  year = 'year',\n}\nconst CHART_DATA_CONFIG: Record<\n  Interval,\n  {\n    amount: number\n    unit: moment.unitOfTime.DurationConstructor\n    format: string\n  }\n> = {\n  day: { amount: 4, unit: 'hours', format: 'HH:00' },\n  week: { amount: 1, unit: 'days', format: 'MMM DD' },\n  month: { amount: 5, unit: 'days', format: 'MMM DD' },\n  year: { amount: 2, unit: 'months', format: 'MMM DD' },\n}\nconst MARKET_CONFIG: Record<Interval, ChartParamsCGK> = {\n  day: { days: 1, interval: 'hourly' },\n  week: { days: 7, interval: 'daily' },\n  month: { days: 31, interval: 'daily' },\n  year: { days: 365, interval: 'daily' },\n}\n\nconst CHART_CONFIGS = {\n  color: '#3E8C6A',\n  radius: 0,\n  hitRadius: 14,\n  tooltip: 'TVL',\n  transparent: 'transparent',\n}\n\nconst SwapChart = () => {\n  const [interval, setInterval] = useState(Interval.week)\n  const [chartData, setChartData] = useState<{ label: string; val: number }[]>(\n    [],\n  )\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const { tokenProvider } = useMint()\n\n  const swapChartConfigs = {\n    borderColor: CHART_CONFIGS.transparent,\n    borderRadius: CHART_CONFIGS.radius,\n    pointRadius: CHART_CONFIGS.radius,\n    tooltip: CHART_CONFIGS.tooltip,\n    pointHitRadius: CHART_CONFIGS.hitRadius,\n    pointHoverRadius: CHART_CONFIGS.radius,\n    backgroundColor: CHART_CONFIGS.color,\n  }\n\n  const parseChartDay = useCallback(\n    (marketData: { time: number; val: number }[]) => {\n      const chartData: ChartData[] = []\n      const { format, amount, unit } = CHART_DATA_CONFIG[interval]\n      let displayTime = moment()\n      // parser data\n      for (const data of marketData.reverse()) {\n        const chartTime = moment(data.time).format(format)\n        if (chartTime === displayTime.format(format)) {\n          const now = moment().format(format)\n          let label = chartTime\n          if (chartTime === now) label = moment().format('HH:mm')\n          if (displayTime)\n            chartData.unshift({\n              label: label,\n              val: data.val,\n            })\n          displayTime = displayTime.subtract(amount, unit)\n        } else if (chartTime === '00:00') {\n          chartData.unshift({\n            label: displayTime.format('MMM DD'),\n            val: data.val,\n          })\n        }\n      }\n      setChartData(chartData)\n    },\n    [interval],\n  )\n\n  const parseChartDaily = useCallback(\n    (marketData: { time: number; val: number }[]) => {\n      const chartData: ChartData[] = []\n      const { format, amount, unit } = CHART_DATA_CONFIG[interval]\n      let displayTime = moment()\n      // parser data\n      for (const data of marketData.reverse()) {\n        const chartTime = moment(data.time).format(format)\n        if (chartTime === displayTime.format(format)) {\n          displayTime = displayTime.subtract(amount, unit)\n          chartData.unshift({\n            label: chartTime,\n            val: data.val,\n          })\n          continue\n        }\n      }\n      setChartData(chartData)\n    },\n    [interval],\n  )\n\n  const fetchChartData = useCallback(async () => {\n    // fetch data market from coingecko\n    const bidTokenInfo = await tokenProvider.findByAddress(\n      bidData.mintInfo?.address || '',\n    )\n    const askTokenInfo = await tokenProvider.findByAddress(\n      askData.mintInfo?.address || '',\n    )\n    const bidTicket = bidTokenInfo?.extensions?.coingeckoId\n    const askTicket = askTokenInfo?.extensions?.coingeckoId\n    // return when bid & ask address is same\n    const compareAddress = bidData.accountAddress === askData.accountAddress\n    if (!askTicket || !bidTicket || compareAddress) return setChartData([])\n\n    const marketConfig = MARKET_CONFIG[interval]\n    const [bidChartData, askChartData] = await Promise.all([\n      fetchMarketChart(bidTicket, marketConfig),\n      fetchMarketChart(askTicket, marketConfig),\n    ])\n    // parser market data\n    const marketData: { time: number; val: number }[] = []\n    for (let idx = bidChartData.length - 1; idx >= 0; idx--) {\n      const bidChart = bidChartData[idx]\n      const askChart =\n        askChartData[askChartData.length - bidChartData.length + idx]\n      if (!bidChart || !askChart) continue\n      marketData.unshift({\n        time: bidChart.time,\n        val: bidChart.val / askChart.val,\n      })\n    }\n    if (interval === Interval.day) return parseChartDay(marketData)\n    return parseChartDaily(marketData)\n  }, [\n    askData.accountAddress,\n    askData.mintInfo?.address,\n    bidData.accountAddress,\n    bidData.mintInfo?.address,\n    interval,\n    parseChartDaily,\n    parseChartDay,\n    tokenProvider,\n  ])\n\n  useEffect(() => {\n    fetchChartData()\n  }, [fetchChartData])\n\n  const price = chartData[chartData.length - 1]?.val || 0\n  const priceUI = numeric(price).format(\n    price > 1 ? '0,0.[00]' : '0,0.[00000000]',\n  )\n\n  return (\n    <Card bordered={false} className=\"card-swap\" bodyStyle={{ paddingTop: 28 }}>\n      <Row gutter={[24, 24]}>\n        <Col flex=\"auto\">\n          <Row gutter={[20, 20]}>\n            <Col flex=\"auto\">\n              <Cross />\n            </Col>\n            {chartData && !!chartData.length && (\n              <Col>\n                <Radio.Group\n                  defaultValue={Interval.week}\n                  onChange={(e) => setInterval(e.target.value)}\n                  className=\"chart-radio-btn\"\n                >\n                  <Radio.Button value={Interval.day}>1D</Radio.Button>\n                  <Radio.Button value={Interval.week}>1W</Radio.Button>\n                  <Radio.Button value={Interval.month}>1M</Radio.Button>\n                  <Radio.Button value={Interval.year}>1Y</Radio.Button>\n                </Radio.Group>\n              </Col>\n            )}\n            <Col span={24}>\n              <Typography.Title level={2}>\n                {price ? priceUI : ''}\n              </Typography.Title>\n            </Col>\n          </Row>\n        </Col>\n        <Col span={24}>\n          {chartData && !!chartData.length ? (\n            <SenChart\n              chartData={chartData?.map((data) => data.val)}\n              labels={chartData?.map((data) => data.label)}\n              configs={swapChartConfigs}\n            />\n          ) : (\n            <ChartEmpty />\n          )}\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapChart\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from '@senhub/providers'\n\n/**\n * Get token decimals from multiple resources. This hook needs MintProvider for work.\n * MintProvider Ref: https://docs.sentre.io/senhub/development/providers/mint-provider\n * @param mintAddress Mint address\n * @returns Decimals\n */\nconst useMintDecimals = (mintAddress: string) => {\n  const [decimals, setDecimals] = useState<number | undefined>(undefined)\n  const { getDecimals } = useMint()\n\n  const fetchDecimals = useCallback(async () => {\n    try {\n      const decimals = await getDecimals(mintAddress)\n      return setDecimals(decimals)\n    } catch (er: any) {\n      return setDecimals(undefined)\n    }\n  }, [mintAddress, getDecimals])\n\n  useEffect(() => {\n    fetchDecimals()\n  }, [fetchDecimals])\n\n  return decimals\n}\n\nexport default useMintDecimals\n","import { useEffect, useState } from 'react'\nimport { account, DEFAULT_EMPTY_ADDRESS, utils } from '@senswap/sen-js'\nimport { useAccount, useWallet } from '@senhub/providers'\n\nimport useMintDecimals from './useMintDecimals'\n\nexport type AccountBalanceReturn = {\n  amount: bigint\n  decimals: number\n  balance: number\n  mintAddress: string\n}\n\nconst buildResult = (\n  mintAddress?: string,\n  amount?: bigint,\n  decimals?: number,\n) => {\n  if (\n    !account.isAddress(mintAddress) ||\n    amount === undefined ||\n    decimals === undefined\n  )\n    return { amount: BigInt(0), decimals: 0, balance: 0 }\n  return {\n    mintAddress,\n    amount,\n    decimals,\n    balance: Number(utils.undecimalize(amount, decimals)),\n  }\n}\n\n/**\n * Get account balance. This hook needs WalletProvider, MintProvider, and AccountProvider for work.\n * WalletProvider Ref: https://docs.sentre.io/senhub/development/providers/wallet-provider\n * MintProvider Ref: https://docs.sentre.io/senhub/development/providers/mint-provider\n * AccountProvider Ref: https://docs.sentre.io/senhub/development/providers/account-provider\n * @param accountAddress Associated account address\n * @returns AccountBalanceReturn\n * - AccountBalanceReturn.amount: The amount with decimals\n * - AccountBalanceReturn.decimals: The corresponding mint decimals\n * - AccountBalanceReturn.balance: The human-readable balance (undecimalized amount)\n * - AccountBalanceReturn.mintAddress: The corresponding mint\n */\nconst useAccountBalance = (accountAddress: string) => {\n  const {\n    wallet: { address: walletAddress, lamports },\n  } = useWallet()\n  const { accounts } = useAccount()\n  const { amount, mint: mintAddress } = accounts[accountAddress] || {}\n  const decimals = useMintDecimals(mintAddress) || 0\n\n  if (!account.isAddress(walletAddress) || !account.isAddress(accountAddress))\n    return buildResult()\n  if (accountAddress === walletAddress)\n    return buildResult(DEFAULT_EMPTY_ADDRESS, lamports, 9)\n\n  return buildResult(mintAddress, amount, decimals)\n}\n\nexport default useAccountBalance\n\n/**\n * The same as useAccountBalance but the input is mint address\n * @param mintAddress Mint address\n * @returns AccountBalanceReturn\n */\nexport const useAccountBalanceByMintAddress = (mintAddress: string) => {\n  const [accountAddress, setAccountAddress] = useState('')\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n  const data = useAccountBalance(accountAddress)\n\n  useEffect(() => {\n    ;(async () => {\n      if (!account.isAddress(walletAddress) || !account.isAddress(mintAddress))\n        return setAccountAddress('')\n      const {\n        sentre: { splt },\n      } = window\n      try {\n        const address = await splt.deriveAssociatedAddress(\n          walletAddress,\n          mintAddress,\n        )\n        return setAccountAddress(address)\n      } catch (er) {\n        return setAccountAddress('')\n      }\n    })()\n  })\n\n  return data\n}\n","import { PoolData, utils } from '@senswap/sen-js'\n\nimport { curve } from './oracle'\nimport { State as BidState } from 'app/model/bid.controller'\nimport { State as AskState } from 'app/model/ask.controller'\nimport { inverseCurve } from './oracle'\nimport { HopData } from 'app/components/preview/index'\nimport { State as RouteState } from 'app/model/route.controller'\n\nconst POOL_ACTIVITY_STATUS = 1\nconst LIMIT_POOL_IN_ROUTE = 3\n\nexport type GraphPool = Map<string, Map<string, PoolData>>\nexport type RouteTrace = HopData[]\n\n/**\n * Extract reserve from pool data\n * @param extractReserve\n * @param poolData\n * @returns\n */\nexport const extractReserve = (\n  mintAddress: string,\n  poolData: PoolData,\n): bigint => {\n  const { mint_a, mint_b, reserve_a, reserve_b } = poolData\n  if (mintAddress === mint_a) return reserve_a\n  if (mintAddress === mint_b) return reserve_b\n  throw new Error('Cannot find reserves')\n}\n\n/**\n *\n * @param param0\n * @param param1\n * @returns\n */\ntype Point = { point: bigint }\nexport const pointSorting = (\n  { point: firstPoint }: Point,\n  { point: secondPoint }: Point,\n) => {\n  if (firstPoint < secondPoint) return 1\n  if (firstPoint > secondPoint) return -1\n  return 0\n}\n\nexport const buildPoolGraph = (pools: Record<string, PoolData>): GraphPool => {\n  const graph = new Map<\n    /*mint_address*/ string,\n    Map</*pool_address*/ string, PoolData>\n  >()\n  for (const poolAddress in pools) {\n    const pool = pools[poolAddress]\n    if (pool?.state !== POOL_ACTIVITY_STATUS) continue\n    const mints = [pool.mint_a, pool.mint_b]\n    mints.forEach((mint) => {\n      if (!graph.has(mint)) graph.set(mint, new Map<string, PoolData>())\n      graph.get(mint)?.set(poolAddress, pool)\n    })\n  }\n  return graph\n}\n\n// because of Solana is limiting the number of calculation unit, so the system\n// must limit the list pool of root. Currently, the system set 3 pools in route\nexport const findAllRoutes = (\n  graph: GraphPool,\n  bidMintAddress: string,\n  askMintAddress: string,\n  deep = 0,\n) => {\n  const routes: RouteTrace[] = []\n  const clonedGraph = new Map(graph)\n  const pools = graph.get(bidMintAddress)\n\n  // Too deep\n  if (deep >= LIMIT_POOL_IN_ROUTE) return routes\n\n  clonedGraph.delete(bidMintAddress)\n  pools?.forEach((poolData, poolAddress) => {\n    // Build sub params\n    const srcMintAddress = bidMintAddress\n    const dstMintAddress =\n      srcMintAddress === poolData.mint_a ? poolData.mint_b : poolData.mint_a\n    const hop: HopData = {\n      srcMintAddress,\n      dstMintAddress,\n      poolData: { ...poolData, address: poolAddress },\n    }\n    // Termination\n    if (dstMintAddress === askMintAddress) return routes.push([hop])\n    // Recursive call\n    const subRoutes = findAllRoutes(\n      clonedGraph,\n      dstMintAddress,\n      askMintAddress,\n      deep++,\n    )\n    subRoutes.forEach((route) => routes.push([hop, ...route]))\n  })\n\n  return routes\n}\n\nexport const findBestRouteFromBid = (\n  routes: RouteTrace[],\n  { amount: bidAmount, mintInfo }: BidState,\n): RouteState => {\n  let bestRoute: RouteState = { best: [], amounts: [], amount: BigInt(0) }\n  routes.forEach((route) => {\n    let amount = utils.decimalize(bidAmount, mintInfo.decimals)\n    const amounts = new Array<bigint>()\n    route.forEach((hop) => {\n      amounts.push(amount)\n      amount = curve(amount, hop)\n    })\n    const maxAskAmount = bestRoute.amount\n    if (amount > maxAskAmount) bestRoute = { best: route, amounts, amount }\n  })\n  return bestRoute\n}\n\nexport const findBestRouteFromAsk = (\n  routes: RouteTrace[],\n  { amount: askAmount, mintInfo }: AskState,\n): RouteState => {\n  let bestRoute: RouteState = { best: [], amounts: [], amount: BigInt(0) }\n  for (const route of routes) {\n    const reversedRoute = [...route].reverse()\n    let amount = utils.decimalize(askAmount, mintInfo.decimals)\n    const amounts = new Array<bigint>()\n\n    for (const hop of reversedRoute) {\n      amount = inverseCurve(amount, hop)\n      if (amount <= BigInt(0)) break\n      amounts.unshift(amount)\n    }\n    if (amount <= BigInt(0)) continue\n    const minBidAmount = bestRoute.amount\n    if (amount < minBidAmount || !minBidAmount)\n      bestRoute = { best: route, amounts, amount }\n  }\n  return bestRoute\n}\n","import { Swap } from '@senswap/sen-js'\nimport { HopData } from 'app/components/preview/index'\nimport { extractReserve } from './router'\n\nexport const ORACLE = Swap.oracle\n\nexport const curve = (bidAmount: bigint, hopData: HopData): bigint => {\n  if (!bidAmount) return BigInt(0)\n  const { srcMintAddress, dstMintAddress, poolData } = hopData\n  const { fee_ratio, tax_ratio } = poolData\n  const bidReserve = extractReserve(srcMintAddress, poolData)\n  const askReserve = extractReserve(dstMintAddress, poolData)\n  if (!bidReserve || !askReserve) return BigInt(0)\n\n  const { askAmount } = ORACLE.swap(\n    bidAmount,\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return askAmount\n}\n\nexport const inverseCurve = (askAmount: bigint, hopData: HopData): bigint => {\n  if (!askAmount) return BigInt(0)\n  const { srcMintAddress, dstMintAddress, poolData } = hopData\n  const { fee_ratio, tax_ratio } = poolData\n  const bidReserve = extractReserve(srcMintAddress, poolData)\n  const askReserve = extractReserve(dstMintAddress, poolData)\n  if (!bidReserve || !askReserve) return BigInt(0)\n\n  const bidAmount = ORACLE.inverseSwap(\n    askAmount,\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return bidAmount\n}\n\nexport const slippage = (bidAmount: bigint, hopData: HopData): bigint => {\n  if (!bidAmount) return BigInt(0)\n  const { srcMintAddress, dstMintAddress, poolData } = hopData\n  const { fee_ratio, tax_ratio } = poolData\n  const bidReserve = extractReserve(srcMintAddress, poolData)\n  const askReserve = extractReserve(dstMintAddress, poolData)\n  if (!bidReserve || !askReserve) return BigInt(0)\n\n  const slippage = ORACLE.slippage(\n    bidAmount,\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return slippage\n}\n","export enum PriceImpact {\n  goodSwap = 0.01, // price impact lower than 1%\n  acceptableSwap = 0.05, // price impact lower than 5%\n}\n","import { useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\n\nimport { AppState } from 'app/model'\nimport { curve, slippage } from 'app/helper/oracle'\nimport { PriceImpact } from 'app/constant/swap'\n\nconst PRECISION = 9\n\nconst usePriceImpact = () => {\n  const {\n    route: { best },\n    bid: { amount: bidAmount, mintInfo: bidMintInfo },\n    ask: { amount: askAmount },\n  } = useSelector((state: AppState) => state)\n\n  if (!Number(bidAmount) || !Number(askAmount)) return 0\n  let srcAmount = utils.decimalize(bidAmount, bidMintInfo.decimals)\n  let p = 1\n  best.forEach((hopData) => {\n    const s = Number(\n      utils.undecimalize(slippage(srcAmount, hopData), PRECISION),\n    )\n    p = p * (1 - s)\n    const dstAmount = curve(srcAmount, hopData)\n    srcAmount = dstAmount\n  })\n\n  return 1 - p\n}\n\nexport const usePriceColor = () => {\n  const priceImpact = usePriceImpact()\n  if (priceImpact < PriceImpact.goodSwap) return '#14E041'\n  if (priceImpact > PriceImpact.acceptableSwap) return '#D72311'\n  return '#FA8C16'\n}\n\nexport default usePriceImpact\n","import { useCallback, useMemo, useState } from 'react'\nimport { DEFAULT_WSOL, utils } from '@senswap/sen-js'\nimport { useSelector } from 'react-redux'\nimport { useWallet } from '@senhub/providers'\n\nimport { Button } from 'antd'\n\nimport { AppState } from 'app/model'\nimport { explorer } from 'shared/util'\nimport useAccountBalance from 'shared/hooks/useAccountBalance'\nimport usePriceImpact from 'app/hooks/usePriceImpact'\nimport { PriceImpact } from 'app/constant/swap'\n\nconst DECIMALS = BigInt(1000000000)\n\nconst SwapButton = ({\n  onCallback = () => {},\n  forceSwap = false,\n}: {\n  onCallback?: () => void\n  forceSwap?: boolean\n}) => {\n  const [loading, setLoading] = useState(false)\n  const {\n    route: { best },\n    bid: {\n      amount: _bidAmount,\n      mintInfo: { address: bidMintAddress, decimals: bidMintDecimals },\n      accountAddress: bidAccountAddress,\n    },\n    ask: {\n      amount: _askAmount,\n      mintInfo: { decimals: askMintDecimals },\n    },\n    settings: { slippage, advanced },\n  } = useSelector((state: AppState) => state)\n  const {\n    wallet: { address: walletAddress, lamports },\n  } = useWallet()\n  const { amount: bidBalance } = useAccountBalance(bidAccountAddress)\n  const priceImpact = usePriceImpact()\n\n  const wrapAmount = useMemo(() => {\n    if (!Number(_bidAmount) || bidMintAddress !== DEFAULT_WSOL) return BigInt(0)\n    const amount = utils.decimalize(_bidAmount, bidMintDecimals)\n    if (amount <= bidBalance) return BigInt(0)\n    return amount - bidBalance\n  }, [bidBalance, _bidAmount, bidMintAddress, bidMintDecimals])\n\n  const availableBid = useMemo((): string => {\n    if (bidMintAddress !== DEFAULT_WSOL)\n      return utils.undecimalize(bidBalance, bidMintDecimals)\n    // So estimate max = 0.01 fee -> multi transaction.\n    const estimateFee = utils.decimalize(0.01, bidMintDecimals)\n    const max = lamports + bidBalance - estimateFee\n    if (max <= bidBalance)\n      return utils.undecimalize(bidBalance, bidMintDecimals)\n    return utils.undecimalize(max, bidMintDecimals)\n  }, [bidBalance, bidMintAddress, bidMintDecimals, lamports])\n\n  const handleSwap = useCallback(async () => {\n    const { swap, splt, wallet } = window.sentre\n    if (!wallet) throw new Error('Wallet is not connected')\n    // Synthetize routings\n    const routingAddresses = await Promise.all(\n      best.map(\n        async ({\n          srcMintAddress,\n          dstMintAddress,\n          poolData: { address: poolAddress },\n        }) => {\n          const srcAddress = await splt.deriveAssociatedAddress(\n            walletAddress,\n            srcMintAddress,\n          )\n          const dstAddress = await splt.deriveAssociatedAddress(\n            walletAddress,\n            dstMintAddress,\n          )\n          return {\n            poolAddress: poolAddress,\n            srcAddress: srcAddress,\n            dstAddress: dstAddress,\n          }\n        },\n      ),\n    )\n    // Compute limit\n    const bidAmount = utils.decimalize(_bidAmount, bidMintDecimals)\n    const askAmount = utils.decimalize(_askAmount, askMintDecimals)\n    const limit =\n      (askAmount * (DECIMALS - utils.decimalize(slippage, 9))) / DECIMALS\n    // Execute swap\n    return await swap.route(bidAmount, limit, routingAddresses, wallet)\n  }, [\n    best,\n    bidMintDecimals,\n    askMintDecimals,\n    slippage,\n    walletAddress,\n    _bidAmount,\n    _askAmount,\n  ])\n\n  const handleWrapSol = async () => {\n    const { swap, wallet } = window.sentre\n    if (!wallet) throw new Error('Wallet is not connected')\n    if (wrapAmount) return await swap.wrapSol(wrapAmount, wallet)\n  }\n\n  const onSwap = async () => {\n    try {\n      setLoading(true)\n      await handleWrapSol()\n      const { txId } = await handleSwap()\n      window.notify({\n        type: 'success',\n        description: 'Swap successfully. Click to view details.',\n        onClick: () => window.open(explorer(txId), '_blank'),\n      })\n      return onCallback()\n    } catch (er: any) {\n      return window.notify({ type: 'error', description: er.message })\n    } finally {\n      return setLoading(false)\n    }\n  }\n\n  const tooHighImpact =\n    !advanced && priceImpact > PriceImpact.acceptableSwap && !forceSwap\n  const disabled =\n    tooHighImpact ||\n    !best.length ||\n    !Number(_bidAmount) ||\n    !Number(_askAmount) ||\n    Number(_bidAmount) > Number(availableBid)\n  return (\n    <Button\n      type=\"primary\"\n      onClick={onSwap}\n      disabled={disabled}\n      loading={loading}\n      block\n    >\n      {tooHighImpact\n        ? 'Too High Price Impact'\n        : forceSwap\n        ? 'Swap Anyway'\n        : 'Swap'}\n    </Button>\n  )\n}\n\nexport default SwapButton\n","import { Fragment, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Space } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { AppState } from 'app/model'\nimport { account } from '@senswap/sen-js'\nimport { MintAvatar } from 'shared/antd/mint'\n\nconst RouteAvatar = () => {\n  const {\n    bid: { mintInfo },\n    route: { best },\n  } = useSelector((state: AppState) => state)\n\n  const srcMintAddress = mintInfo?.address\n  const chainMintAddresses = useMemo(() => {\n    if (!best.length || !account.isAddress(srcMintAddress)) return []\n    let list = [srcMintAddress]\n    for (const hop of best) {\n      const { dstMintAddress } = hop\n      if (account.isAddress(dstMintAddress)) list.push(dstMintAddress)\n    }\n    return list\n  }, [srcMintAddress, best])\n\n  return (\n    <Space>\n      {chainMintAddresses?.map((mintAddress, i) => (\n        <Fragment key={i}>\n          <MintAvatar mintAddress={mintAddress} />\n          {chainMintAddresses.length > i + 1 && (\n            <IonIcon name=\"chevron-forward-outline\" />\n          )}\n        </Fragment>\n      ))}\n    </Space>\n  )\n}\nexport default RouteAvatar\n","import { useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Button, Space, Typography } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport { MintSymbol } from 'shared/antd/mint'\n\nimport { numeric } from 'shared/util'\nimport { AppState } from 'app/model'\n\nconst Price = () => {\n  const [reversed, setReversed] = useState(false)\n  const {\n    bid: { mintInfo: bidMintInfo, amount: bidAmount },\n    ask: { mintInfo: askMintInfo, amount: askAmount },\n  } = useSelector((state: AppState) => state)\n\n  const bidMintAddress = bidMintInfo?.address || ''\n  const askMintAddress = askMintInfo?.address || ''\n  const price = numeric(Number(askAmount) / Number(bidAmount)).format(\n    '0,0.[000000]',\n  )\n  const reversedPrice = numeric(Number(bidAmount) / Number(askAmount)).format(\n    '0,0.[000000]',\n  )\n\n  return (\n    <Space>\n      <Button\n        type=\"text\"\n        onClick={() => setReversed(!reversed)}\n        shape=\"circle\"\n        icon={<IonIcon name=\"swap-horizontal-outline\" />}\n      />\n      <Typography.Text>{!reversed ? price : reversedPrice}</Typography.Text>\n      <Typography.Text>\n        {!reversed ? (\n          <MintSymbol mintAddress={askMintAddress} />\n        ) : (\n          <MintSymbol mintAddress={bidMintAddress} />\n        )}\n        {' / '}\n        {!reversed ? (\n          <MintSymbol mintAddress={bidMintAddress} />\n        ) : (\n          <MintSymbol mintAddress={askMintAddress} />\n        )}\n      </Typography.Text>\n    </Space>\n  )\n}\n\nexport default Price\n","import { ReactNode } from 'react'\nimport { useSelector } from 'react-redux'\nimport { PoolData } from '@senswap/sen-js'\n\nimport { Col, Row, Typography } from 'antd'\nimport RouteAvatar from './routeAvatar'\n\nimport { AppState } from 'app/model'\nimport { numeric } from 'shared/util'\nimport usePriceImpact, { usePriceColor } from 'app/hooks/usePriceImpact'\nimport Price from './price'\n\nexport type LiteMintInfo = {\n  address: string\n  decimals: number\n}\n\nexport type HopData = {\n  poolData: PoolData & { address: string }\n  srcMintAddress: string\n  dstMintAddress: string\n}\n\nconst ExtraTypography = ({\n  label = '',\n  content = '',\n}: {\n  label?: string\n  content?: string | ReactNode\n}) => {\n  return (\n    <Row>\n      <Col flex=\"auto\">\n        <Typography.Text type=\"secondary\">{label}</Typography.Text>\n      </Col>\n      <Col>\n        <span>{content}</span>\n      </Col>\n    </Row>\n  )\n}\n\nconst PreviewSwap = () => {\n  const {\n    settings: { slippage },\n  } = useSelector((state: AppState) => state)\n  const priceImpact = usePriceImpact()\n  const priceColor = usePriceColor()\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Price impact\"\n          content={\n            <Typography.Text style={{ color: priceColor }}>\n              {numeric(Number(priceImpact)).format('0.[0000]%')}\n            </Typography.Text>\n          }\n        />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography label=\"Price\" content={<Price />} />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Slippage Tolerance\"\n          content={numeric(slippage).format('0.[00]%')}\n        />\n      </Col>\n      <Col span={24} style={{ minHeight: 24 }}>\n        <ExtraTypography label=\"Route\" content={<RouteAvatar />} />\n      </Col>\n    </Row>\n  )\n}\n\nexport default PreviewSwap\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { LiteMintInfo } from 'app/components/preview'\n\nexport type State = {\n  amount: string // Desired amount\n  accountAddress: string // Associated account to the selected token\n  mintInfo: LiteMintInfo // Selected token\n  poolAddresses: string[] // List of available pools\n  priority: number\n}\n\nconst NAME = 'bid'\nconst initialState: State = {\n  amount: '',\n  mintInfo: {\n    address: '',\n    decimals: 0,\n  },\n  accountAddress: '',\n  poolAddresses: [],\n  priority: 0,\n}\n\n/**\n * Actions\n */\n\nexport const updateBidData = createAsyncThunk<\n  Partial<State>,\n  Partial<State> & { prioritized?: boolean; reset?: boolean },\n  { state: any }\n>(\n  `${NAME}/updateBidData`,\n  async ({ prioritized, reset, ...bidData }, { getState }) => {\n    const {\n      bid: { priority: prevPriority },\n      ask: { priority: refPriority },\n    } = getState()\n    if (Number(bidData.amount) < 0) bidData.amount = ''\n    const priority = reset ? 0 : prioritized ? refPriority + 1 : prevPriority\n    return { ...bidData, priority }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateBidData.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Row, Col, Space, Typography, Modal, Card, Checkbox } from 'antd'\nimport Preview from 'app/components/preview'\nimport IonIcon from 'shared/antd/ionicon'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport SwapAction from 'app/components/swapAction'\n\nimport { AppState } from 'app/model'\nimport usePriceImpact from 'app/hooks/usePriceImpact'\nimport { PriceImpact } from 'app/constant/swap'\n\nconst ConfirmSwap = ({\n  visible = false,\n  onCancle = () => {},\n}: {\n  visible?: boolean\n  onCancle?: (visible: boolean) => void\n}) => {\n  const [checked, setChecked] = useState(false)\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const priceImpact = usePriceImpact()\n\n  const tooHighImpact = priceImpact > PriceImpact.acceptableSwap\n\n  return (\n    <Modal\n      title={<Typography.Title level={4}> Confirm swap</Typography.Title>}\n      onCancel={() => onCancle(false)}\n      footer={null}\n      visible={visible}\n    >\n      <Row gutter={[16, 24]}>\n        <Col span={24}>\n          <Row align=\"middle\" justify=\"space-between\">\n            <Col>\n              <Space direction=\"vertical\">\n                <Typography.Text>From</Typography.Text>\n                <Space>\n                  <MintAvatar mintAddress={bidData.mintInfo?.address} />\n                  <Typography.Text>\n                    <MintSymbol mintAddress={bidData.mintInfo?.address} />\n                  </Typography.Text>\n                </Space>\n                <Typography.Title level={4}>{bidData.amount}</Typography.Title>\n              </Space>\n            </Col>\n            <Col>\n              <IonIcon name=\"arrow-forward-outline\" style={{ fontSize: 24 }} />\n            </Col>\n            <Col>\n              <Space direction=\"vertical\" align=\"end\">\n                <Typography.Text>To</Typography.Text>\n                <Space>\n                  <MintAvatar mintAddress={askData.mintInfo?.address} />\n                  <Typography.Text>\n                    <MintSymbol mintAddress={askData.mintInfo?.address} />\n                  </Typography.Text>\n                </Space>\n                <Typography.Title level={4}>{askData.amount}</Typography.Title>\n              </Space>\n            </Col>\n          </Row>\n        </Col>\n        <Col>\n          <Card bordered={false} className=\"confirm-info\">\n            <Preview />\n          </Card>\n        </Col>\n        {tooHighImpact && (\n          <Col span={24}>\n            <Checkbox checked={checked} onChange={() => setChecked(!checked)}>\n              The price impact is currently high. Tick the checkbox to accept\n              the swap.\n            </Checkbox>\n          </Col>\n        )}\n        <Col span={24}>\n          <SwapAction onCallback={() => onCancle(false)} forceSwap={checked} />\n        </Col>\n      </Row>\n    </Modal>\n  )\n}\nexport default ConfirmSwap\n","import { useState } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { Button, Card, Col, Row, Typography } from 'antd'\nimport SwapAction from 'app/components/swapAction'\nimport Preview from 'app/components/preview'\n\nimport { updateBidData } from 'app/model/bid.controller'\nimport usePriceImpact from 'app/hooks/usePriceImpact'\nimport { PriceImpact } from 'app/constant/swap'\nimport ConfirmSwap from 'app/components/confirmSwap'\n\nconst SwapActions = () => {\n  const [visivle, setVisivle] = useState(false)\n  const dispatch = useDispatch()\n  const onCallback = () =>\n    dispatch(updateBidData({ amount: '', prioritized: true }))\n  const priceImpact = usePriceImpact()\n\n  const tooHighImpact = priceImpact > PriceImpact.acceptableSwap\n\n  return (\n    <Card bordered={false}>\n      <Row gutter={[24, 24]}>\n        <Col span={24}>\n          <Typography.Title level={5}>Review & Swap</Typography.Title>\n        </Col>\n        <Col span={24}>\n          <Preview />\n        </Col>\n        <Col span={24} /> {/* Safe sapce */}\n        <Col span={24}>\n          {tooHighImpact ? (\n            <Button type=\"primary\" onClick={() => setVisivle(true)} block>\n              Review & Swap\n            </Button>\n          ) : (\n            <SwapAction onCallback={onCallback} />\n          )}\n        </Col>\n        {tooHighImpact && (\n          <ConfirmSwap visible={visivle} onCancle={setVisivle} />\n        )}\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapActions\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from '@senhub/providers'\nimport { fetchCGK } from 'shared/util'\n\nconst DEFAULT_DATA = {\n  address: '',\n  icon: '',\n  name: 'TOKEN',\n  price: 0,\n  priceChange: 0,\n  rank: 0,\n  symbol: 'TOKEN',\n  totalVolume: 0,\n}\n\nconst useMintCgk = (mintAddress?: string): CgkData => {\n  const [cgkData, setCgkData] = useState<CgkData>(DEFAULT_DATA)\n  const { tokenProvider } = useMint()\n\n  const fetchCgkData = useCallback(async () => {\n    if (!mintAddress) return setCgkData(DEFAULT_DATA)\n    try {\n      const token = await tokenProvider.findByAddress(mintAddress)\n      const ticket = token?.extensions?.coingeckoId\n      const cgkData = await fetchCGK(ticket)\n      return setCgkData(cgkData)\n    } catch (error) {\n      return setCgkData(DEFAULT_DATA)\n    }\n  }, [mintAddress, tokenProvider])\n\n  useEffect(() => {\n    fetchCgkData()\n  }, [fetchCgkData])\n\n  return cgkData\n}\nexport default useMintCgk\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { account, PoolData, utils } from '@senswap/sen-js'\n\nimport { Card, Col, Divider, Row, Space, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\n\nimport { AppState } from 'app/model'\nimport { extractReserve } from 'app/helper/router'\nimport { numeric } from 'shared/util'\nimport useMintCgk from 'app/hooks/useMintCgk'\n\nconst MintPoolInfo = ({\n  mintAddress,\n  tvl = '',\n  price,\n  format = '0,0.[00]a',\n}: {\n  mintAddress: string\n  tvl?: string | number\n  price?: number\n  format?: string\n}) => {\n  return (\n    <Space direction=\"vertical\" size={4}>\n      <MintAvatar mintAddress={mintAddress} />\n      <Space>\n        <Typography.Text>TVL:</Typography.Text>\n        <Typography.Title level={5}>\n          {numeric(tvl).format(format)}\n        </Typography.Title>\n        <Typography.Title level={5}>\n          <MintSymbol mintAddress={mintAddress} />\n        </Typography.Title>\n      </Space>\n      <Typography.Text className=\"caption\" type=\"secondary\">\n        ~ ${numeric(price).format(format)}\n      </Typography.Text>\n    </Space>\n  )\n}\n\nconst SwapPoolInfo = () => {\n  const {\n    route: { best },\n    bid: { mintInfo: bidMintInfo },\n    ask: { mintInfo: askMintInfo },\n  } = useSelector((state: AppState) => state)\n  const bidCgk = useMintCgk(bidMintInfo.address)\n  const askCgk = useMintCgk(askMintInfo.address)\n\n  const { poolData: bidPoolData } = best[0] || {}\n  const { poolData: askPoolData } = best[best.length - 1] || {}\n\n  const getMintTVL = (mintAddress?: string, poolData?: PoolData) => {\n    try {\n      if (!account.isAddress(mintAddress) || !poolData) return BigInt(0)\n      return extractReserve(mintAddress, poolData)\n    } catch (er) {\n      return BigInt(0)\n    }\n  }\n\n  // Bid TVL\n  const bidTVL = useMemo(() => {\n    if (!bidMintInfo.decimals) return 0\n    const bid = getMintTVL(bidMintInfo.address, bidPoolData)\n    return Number(utils.undecimalize(bid, bidMintInfo.decimals))\n  }, [bidMintInfo, bidPoolData])\n  // Ask TVL\n  const askTVL = useMemo(() => {\n    if (!askMintInfo.decimals) return 0\n    const ask = getMintTVL(askMintInfo.address, askPoolData)\n    return Number(utils.undecimalize(ask, askMintInfo.decimals))\n  }, [askMintInfo, askPoolData])\n\n  return (\n    <Card bordered={false}>\n      <Row gutter={[16, 16]} wrap={false}>\n        <Col span={11}>\n          <MintPoolInfo\n            mintAddress={bidMintInfo?.address || ''}\n            tvl={bidTVL}\n            price={bidTVL * bidCgk.price}\n          />\n        </Col>\n        <Col>\n          <Divider type=\"vertical\" style={{ height: '100%' }} />\n        </Col>\n        <Col span={11}>\n          <MintPoolInfo\n            mintAddress={askMintInfo?.address || ''}\n            tvl={askTVL}\n            price={askTVL * askCgk.price}\n          />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapPoolInfo\n","var _defs, _path, _path2;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgSen({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    \"data-name\": \"Layer 1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    viewBox: \"0 0 283.465 283.465\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"linear-gradient\",\n    x1: -1222.504,\n    y1: -2883.343,\n    x2: -1135.428,\n    y2: -2970.419,\n    gradientTransform: \"translate(1300.837 3068.613)\",\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    stopColor: \"#f9575e\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.27,\n    stopColor: \"#f8555b\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.486,\n    stopColor: \"#f44f51\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.685,\n    stopColor: \"#ee4540\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.871,\n    stopColor: \"#e63728\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#de2a13\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"linear-gradient-2\",\n    x1: 1314.111,\n    y1: -895.144,\n    x2: 1389.882,\n    y2: -811.556,\n    gradientTransform: \"translate(1516.988 -707.868) rotate(180)\",\n    xlinkHref: \"#linear-gradient\"\n  }))), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Senswap logo FINAL\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.179,85.127H114a92.562,92.562,0,0,1,92.562,92.562v20.648a0,0,0,0,1,0,0H129.741a92.562,92.562,0,0,1-92.562-92.562V85.127A0,0,0,0,1,37.179,85.127Z\",\n    transform: \"translate(107.828 328.128) rotate(-135)\",\n    fill: \"url(#linear-gradient)\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M169.462,85.127h76.823a0,0,0,0,1,0,0v20.648a92.562,92.562,0,0,1-92.562,92.562H76.9a0,0,0,0,1,0,0V177.689a92.562,92.562,0,0,1,92.562-92.562Z\",\n    transform: \"translate(-52.89 155.776) rotate(-45)\",\n    fill: \"url(#linear-gradient-2)\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSen);\nexport default __webpack_public_path__ + \"static/media/sen.f2d012c907167ba613b035621b6423cb.svg\";\nexport { ForwardRef as ReactComponent };","import { Avatar, Space, Typography } from 'antd'\nimport SentreIcon from 'app/static/images/sen.svg'\n\nconst PoweredBy = ({\n  spacing = 4,\n  iconSize = 20,\n}: {\n  spacing?: number\n  iconSize?: number\n}) => {\n  return (\n    <Space size={spacing}>\n      <Typography.Text style={{ fontSize: 12, color: '#7A7B85' }}>\n        Powered by\n      </Typography.Text>\n      <Avatar src={SentreIcon} size={iconSize} />\n    </Space>\n  )\n}\n\nexport default PoweredBy\n","import { Row, Col, Button, Typography, Tooltip } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Option = ({\n  label,\n  value,\n  onClick,\n  active = false,\n}: {\n  label: string\n  value: number\n  onClick: (value: number) => void\n  active?: boolean\n}) => {\n  return (\n    <Typography.Text\n      style={{ cursor: 'pointer', color: active ? '#F9575E' : 'inherit' }}\n      onClick={() => onClick(value)}\n    >\n      {label}\n    </Typography.Text>\n  )\n}\n\nconst Slippage = ({\n  value,\n  onChange,\n}: {\n  value: number\n  onChange: (value: number) => void\n}) => {\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false}>\n          <Col flex=\"auto\">\n            <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>\n              Slippage Tolerance\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Tooltip\n              placement=\"right\"\n              title={\n                <span>\n                  Your transaction will be canceled if the confirmed price\n                  breaks the limited range of{' '}\n                  <strong style={{ color: '#f9575e' }}>{`${\n                    value * 100\n                  }%.`}</strong>\n                </span>\n              }\n            >\n              <Button\n                type=\"text\"\n                shape=\"circle\"\n                size=\"small\"\n                icon={<IonIcon name=\"information-circle-outline\" />}\n              />\n            </Tooltip>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false} justify=\"space-between\">\n          {[0.001, 0.005, 0.01, 0.05, 1].map((e, i) => (\n            <Col key={i}>\n              <Option\n                label={e === 1 ? 'Freely' : `${e * 100}%`}\n                value={e}\n                onClick={onChange}\n                active={e === value}\n              />\n            </Col>\n          ))}\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Slippage\n","import { Row, Col, Typography, Switch } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Advanced = ({\n  value,\n  onChange,\n}: {\n  value: boolean\n  onChange: (value: boolean) => void\n}) => {\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false}>\n          <Col flex=\"auto\">\n            <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>\n              Advanced Mode\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Switch\n              size=\"small\"\n              checkedChildren={<IonIcon name=\"calculator-outline\" />}\n              unCheckedChildren={<IonIcon name=\"sparkles-outline\" />}\n              checked={value}\n              onChange={onChange}\n            />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Typography.Paragraph style={{ fontSize: 12, textAlign: 'justify' }}>\n          <IonIcon name=\"warning-outline\" /> This advanced mode will disable the\n          automatic protection that often results in bad rates and lost funds.\n          Only use this mode if you know what you are doing.\n        </Typography.Paragraph>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Advanced\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nexport type State = {\n  slippage: number\n  advanced: boolean\n}\n\nconst NAME = 'settings'\nconst initialState: State = {\n  slippage: 0.01,\n  advanced: false,\n}\n\n/**\n * Actions\n */\n\nexport const updateSettings = createAsyncThunk(\n  `${NAME}/updateSettings`,\n  async (settings: Partial<State>) => ({ ...settings }),\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateSettings.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useDispatch, useSelector } from 'react-redux'\n\nimport { Row, Col, Button, Popover, Typography, Divider } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport PoweredBy from 'app/components/poweredBy'\nimport Slippage from './slippage'\nimport Advanced from './advanced'\n\nimport { updateSettings } from 'app/model/settings.controller'\nimport { AppDispatch, AppState } from 'app/model'\n\nconst Settings = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const { slippage, advanced } = useSelector(\n    (state: AppState) => state.settings,\n  )\n\n  const onSlippage = (slippage: number) => {\n    return dispatch(updateSettings({ slippage }))\n  }\n  const onAdvanced = (advanced: boolean) => {\n    return dispatch(updateSettings({ advanced }))\n  }\n\n  return (\n    <Row gutter={[4, 4]} justify=\"end\" align=\"middle\" wrap={false}>\n      <Col>\n        <PoweredBy />\n      </Col>\n      <Col>\n        <Divider type=\"vertical\" style={{ padding: 0 }} />\n      </Col>\n      <Col>\n        <Popover\n          placement=\"bottomRight\"\n          overlayInnerStyle={{ width: 300 }}\n          content={\n            <Row gutter={[8, 8]}>\n              <Col span={24}>\n                <Typography.Title level={5}>Settings</Typography.Title>\n              </Col>\n              <Col span={24}>\n                <Slippage value={slippage} onChange={onSlippage} />\n              </Col>\n              <Divider style={{ marginTop: 8, marginBottom: 8 }} />\n              <Col span={24}>\n                <Advanced value={advanced} onChange={onAdvanced} />\n              </Col>\n            </Row>\n          }\n          trigger=\"click\"\n        >\n          <Button\n            type=\"text\"\n            shape=\"circle\"\n            size=\"small\"\n            icon={<IonIcon name=\"settings-outline\" />}\n          />\n        </Popover>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Settings\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { useMint, usePool } from '@senhub/providers'\n\nimport { Card, Input, Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst KEYSIZE = 3\n\nconst Search = ({\n  onChange,\n  disabled = false,\n}: {\n  onChange: (data: string[]) => void\n  disabled?: boolean\n}) => {\n  const [mintAddresses, setMintAddresses] = useState<string[]>([])\n  const [keyword, setKeyword] = useState('')\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const sortMintAddresses = useCallback(async () => {\n    // Get all mints in pools\n    const rawMintAddresses = Object.values(pools)\n      .map(({ mint_a, mint_b }) => [mint_a, mint_b])\n      .flat()\n      .filter((item, pos, self) => self.indexOf(item) === pos)\n    // Get all lp mints\n    const lpMintAddresses = Object.values(pools).map(({ mint_lpt }) => mint_lpt)\n    // Check mint addresses (token info, mint lp)\n    const checkedMintAddresses = await Promise.all(\n      rawMintAddresses.map(async (mintAddress) => {\n        const tokenInfo = await tokenProvider.findByAddress(mintAddress)\n        const data = {\n          address: mintAddress,\n          checked: Boolean(tokenInfo) || lpMintAddresses.includes(mintAddress),\n        }\n        return data\n      }),\n    )\n    // Sort mint addresses by checking flags\n    const sortedMintAddresses = checkedMintAddresses\n      .sort((first, second) => {\n        if (!first.checked && second.checked) return 1\n        if (first.checked && !second.checked) return -1\n        return 0\n      })\n      .map(({ address }) => address)\n    // Return\n    return setMintAddresses(sortedMintAddresses)\n  }, [tokenProvider, pools])\n\n  useEffect(() => {\n    sortMintAddresses()\n  }, [sortMintAddresses])\n\n  const search = useCallback(async () => {\n    if (!keyword || keyword.length < KEYSIZE) return onChange(mintAddresses)\n    const raw = await tokenProvider.find(keyword)\n    const data = raw\n      .filter(({ address }) => mintAddresses.includes(address))\n      .map(({ address }) => address)\n    // Search by address\n    mintAddresses.forEach((mintAddress) => {\n      if (data.includes(mintAddress)) return\n      if (!mintAddress.toLowerCase().includes(keyword.toLowerCase())) return\n      return data.push(mintAddress)\n    })\n    return onChange(data)\n  }, [keyword, onChange, tokenProvider, mintAddresses])\n\n  useEffect(() => {\n    search()\n  }, [search])\n\n  return (\n    <Card className=\"card-child\" bodyStyle={{ padding: 8 }} bordered={false}>\n      <Input\n        placeholder=\"Search\"\n        value={keyword}\n        size=\"small\"\n        bordered={false}\n        suffix={\n          <Button\n            type=\"text\"\n            style={{ marginRight: -7 }}\n            size=\"small\"\n            onClick={keyword ? () => setKeyword('') : () => {}}\n            icon={\n              <IonIcon name={keyword ? 'close-outline' : 'search-outline'} />\n            }\n            disabled={disabled}\n          />\n        }\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          setKeyword(e.target.value)\n        }\n        disabled={disabled}\n      />\n    </Card>\n  )\n}\n\nexport default Search\n","import { Row, Col, Space, Typography, Card, Divider } from 'antd'\nimport { MintAvatar, MintName, MintSymbol } from 'shared/antd/mint'\n\nconst Mint = ({\n  mintAddress,\n  onClick,\n  active = false,\n}: {\n  mintAddress: string\n  onClick: () => void\n  active?: boolean\n}) => {\n  return (\n    <Card\n      className={`card-child${active ? ' active' : ''}`}\n      bodyStyle={{ padding: `8px 16px`, cursor: 'pointer' }}\n      bordered={active}\n      onClick={onClick}\n      hoverable\n    >\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Space size={12} style={{ marginLeft: -4 }}>\n            <MintAvatar mintAddress={mintAddress} size={32} />\n            <Typography.Text style={{ margin: 0 }}>\n              <MintSymbol mintAddress={mintAddress} />\n            </Typography.Text>\n            <Divider type=\"vertical\" style={{ margin: 0 }} />\n            <Typography.Text\n              type=\"secondary\"\n              style={{ margin: 0, fontSize: 12 }}\n            >\n              <MintName mintAddress={mintAddress} />\n            </Typography.Text>\n          </Space>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default Mint\n","import { useState, useCallback } from 'react'\nimport { account } from '@senswap/sen-js'\nimport LazyLoad from '@senswap/react-lazyload'\nimport { useMint, usePool } from '@senhub/providers'\n\nimport { Row, Col, Typography, Divider } from 'antd'\nimport Search from './search'\nimport Mint from './mint'\n\nimport { LiteMintInfo } from '../preview'\n\nexport type SelectionInfo = {\n  mintInfo?: LiteMintInfo\n  poolAddresses: string[]\n}\n\nconst MintSelection = ({\n  value,\n  onChange,\n  hiddenTokens,\n}: {\n  value: SelectionInfo\n  onChange: (value: SelectionInfo) => void\n  hiddenTokens?: string[]\n}) => {\n  const [mintAddresses, setMintAddresses] = useState<string[]>([])\n  const { address: currentMintAddress } = value.mintInfo || {}\n  const { pools } = usePool()\n  const { getDecimals } = useMint()\n\n  // Compute available pools\n  const getAvailablePoolAddresses = useCallback(\n    (mintAddress: string) => {\n      if (!account.isAddress(mintAddress)) return []\n      return Object.keys(pools).filter((poolAddress) => {\n        const { mint_a, mint_b } = pools[poolAddress]\n        return [mint_a, mint_b].includes(mintAddress)\n      })\n    },\n    [pools],\n  )\n\n  // Return data to parent\n  const onMint = useCallback(\n    async (mintAddress: string) => {\n      const poolAddresses = getAvailablePoolAddresses(mintAddress)\n      const decimals = await getDecimals(mintAddress)\n      return onChange({\n        mintInfo: {\n          address: mintAddress,\n          decimals,\n        },\n        poolAddresses,\n      })\n    },\n    [getAvailablePoolAddresses, onChange, getDecimals],\n  )\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        <Typography.Title level={5}>Token Selection</Typography.Title>\n      </Col>\n      <Col span={24}>\n        <Divider style={{ margin: 0 }} />\n      </Col>\n      <Col span={24}>\n        <Search onChange={setMintAddresses} />\n      </Col>\n      <Col span={24}>\n        <Row gutter={[16, 16]} style={{ height: 300 }} className=\"scrollbar\">\n          <Col span={24}>\n            <Row gutter={[16, 16]}>\n              {mintAddresses.map((mintAddress, i) => {\n                if (hiddenTokens?.includes(mintAddress)) return null\n                return (\n                  <Col span={24} key={i}>\n                    <LazyLoad height={48} overflow>\n                      <Mint\n                        mintAddress={mintAddress}\n                        onClick={() => onMint(mintAddress)}\n                        active={currentMintAddress === mintAddress}\n                      />\n                    </LazyLoad>\n                  </Col>\n                )\n              })}\n            </Row>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default MintSelection\n","import { useState, Fragment, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { forceCheck } from '@senswap/react-lazyload'\n\nimport { Row, Col, Space, Typography, Divider, Modal } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport MintSelection, { SelectionInfo } from './mintSelection'\n\nimport { SenLpState } from 'app/constant/senLpState'\n\nconst Selection = ({\n  value,\n  onChange,\n  hiddenTokens,\n}: {\n  value: SelectionInfo\n  onChange: (value: SelectionInfo) => void\n  hiddenTokens?: string[]\n}) => {\n  const [visible, setVisible] = useState(false)\n  const history = useHistory()\n  const { state } = useLocation<SenLpState>()\n  useEffect(() => {\n    if (visible) setTimeout(forceCheck, 500)\n  }, [visible])\n\n  const onSelection = (selectionInfo: SelectionInfo) => {\n    setVisible(false)\n\n    // Clear state of senlp come to\n    if (state) history.replace({ ...history.location, state: {} })\n\n    return onChange(selectionInfo)\n  }\n\n  const mintAddress = value?.mintInfo?.address || ''\n\n  return (\n    <Fragment>\n      <Space style={{ cursor: 'pointer' }} onClick={() => setVisible(true)}>\n        <MintAvatar mintAddress={mintAddress} />\n        <Typography.Text type=\"secondary\">\n          <MintSymbol mintAddress={mintAddress} />\n        </Typography.Text>\n        <Divider type=\"vertical\" style={{ marginLeft: 4 }} />\n      </Space>\n      <Modal\n        visible={visible}\n        onCancel={() => setVisible(false)}\n        closeIcon={<IonIcon name=\"close\" />}\n        footer={null}\n        destroyOnClose={true}\n        centered={true}\n      >\n        <Row gutter={[16, 16]}>\n          <Col span={24} />\n          <Col span={24}>\n            <MintSelection\n              hiddenTokens={hiddenTokens}\n              value={value}\n              onChange={onSelection}\n            />\n          </Col>\n        </Row>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default Selection\n","import { ChangeEvent, useState, forwardRef, useCallback, useRef } from 'react'\n\nimport { Input, Tooltip, Space, InputProps } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nlet timeoutId: ReturnType<typeof setTimeout> | undefined\n\n/**\n * Numeric Input\n * - Check balance based on the max\n * - Only accept numeric characters\n * @remarks The props of input follows the same as https://ant.design/components/input/#API. Extra & Overrided props\n * @param max - Maximum\n * @param onValue - A triggerred function if a valid number\n */\nconst NumericInput = forwardRef(\n  (\n    {\n      max,\n      onValue = () => {},\n      onChange = () => {},\n      ...props\n    }: InputProps & {\n      onValue?: (val: string) => void\n      max?: string | number\n    },\n    ref: any,\n  ) => {\n    const [error, setError] = useState('')\n    const [cursor, setCursor] = useState<number | null>(null)\n    const innerRef = useRef(ref)\n\n    // Handle amount\n    const onAmount = useCallback(\n      (val: string) => {\n        const onError = (er: string) => {\n          if (timeoutId) {\n            clearTimeout(timeoutId)\n            timeoutId = undefined\n          }\n          setError(er)\n          timeoutId = setTimeout(() => setError(''), 500)\n        }\n        const reg = /^\\d*(\\.\\d*)?$/\n        if (!reg.test(val)) return onError('Invalid character')\n        if (max && parseFloat(val) > parseFloat(max.toString()))\n          return onError('Not enough balance')\n        return onValue(val)\n      },\n      [max, onValue],\n    )\n\n    // Handle cursor jumping\n    // To prevent autofocus on mobile, we must strictly check cursor different from null\n    if (cursor !== null) innerRef?.current?.setSelectionRange(cursor, cursor)\n\n    return (\n      <Tooltip\n        title={\n          <Space>\n            <IonIcon name=\"warning\" />\n            {error}\n          </Space>\n        }\n        visible={!!error}\n      >\n        <Input\n          {...props}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            onChange(e)\n            setCursor(e.target.selectionStart)\n            onAmount(e.target.value || '')\n          }}\n          ref={innerRef}\n        />\n      </Tooltip>\n    )\n  },\n)\n\nexport default NumericInput\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  spltAddress: string\n  splataAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: 'https://api.devnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: 'https://api.testnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: 'https://api.mainnet-beta.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  bidDefault: string\n  askDefault: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    bidDefault: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    askDefault: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    bidDefault: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    askDefault: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    bidDefault: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    askDefault: 'SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  wormholeAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Config = {\n  assetsRoute: string\n}\n\nconst config: Record<Net, Config> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    assetsRoute: '/app/sen_assets',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    assetsRoute: '/app/sen_assets',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    assetsRoute: '/app/sen_assets',\n  },\n}\n\nexport default config\n","import { env, net } from 'shared/runtime'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\nimport swap from './swap.config'\nimport wormhole from './wormhole.config'\nimport route from './route.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n  swap: swap[net],\n  wormhole: wormhole[net],\n  route: route[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { LiteMintInfo } from 'app/components/preview'\n\nexport type State = {\n  amount: string // Desired amount\n  accountAddress: string // Associated account to the selected token\n  mintInfo: LiteMintInfo // Selected token\n  poolAddresses: string[] // List of available pools\n  priority: number\n}\n\nconst NAME = 'ask'\nconst initialState: State = {\n  amount: '',\n  mintInfo: {\n    address: '',\n    decimals: 0,\n  },\n  accountAddress: '',\n  poolAddresses: [],\n  priority: 0,\n}\n\n/**\n * Actions\n */\n\nexport const updateAskData = createAsyncThunk<\n  Partial<State>,\n  Partial<State> & { prioritized?: boolean; reset?: boolean },\n  { state: any }\n>(\n  `${NAME}/updateAskData`,\n  async ({ prioritized, reset, ...askData }, { getState }) => {\n    const {\n      bid: { priority: refPriority },\n      ask: { priority: prevPriority },\n    } = getState()\n    if (Number(askData.amount) < 0) askData.amount = ''\n    const priority = reset ? 0 : prioritized ? refPriority + 1 : prevPriority\n    return { ...askData, priority }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateAskData.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\nimport { useMint, usePool, useWallet } from '@senhub/providers'\n\nimport { SelectionInfo } from 'app/components/selection/mintSelection'\n\nconst DEFAULT_INFO = {\n  accountAddress: '',\n  poolAddresses: [],\n}\n\ntype MintSelection = SelectionInfo & {\n  accountAddress?: string\n}\n\nexport const useMintSelection = (mintAddress: string): MintSelection => {\n  const { wallet } = useWallet()\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n  const [selectionInfo, setSelectionInfo] =\n    useState<MintSelection>(DEFAULT_INFO)\n\n  const getSelectionInfo = useCallback(async () => {\n    if (!account.isAddress(mintAddress) || !Object.keys(pools).length)\n      return setSelectionInfo(DEFAULT_INFO)\n\n    const mintInfo = await tokenProvider.findByAddress(mintAddress)\n    if (!mintInfo) return setSelectionInfo(DEFAULT_INFO)\n    const { splt } = window.sentre\n    // get mint account\n    const accountAddress = await splt.deriveAssociatedAddress(\n      wallet.address,\n      mintAddress,\n    )\n    // get pools\n    const poolAddresses = Object.keys(pools).filter((poolAddress) => {\n      const { mint_a, mint_b } = pools[poolAddress]\n      return [mint_a, mint_b].includes(mintAddress)\n    })\n    setSelectionInfo({\n      accountAddress,\n      mintInfo,\n      poolAddresses,\n    })\n  }, [mintAddress, pools, tokenProvider, wallet.address])\n\n  useEffect(() => {\n    getSelectionInfo()\n  }, [getSelectionInfo])\n\n  return selectionInfo\n}\n","import { useMemo, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account } from '@senswap/sen-js'\nimport { useWallet } from '@senhub/providers'\n\nimport { Row, Col, Typography, Space } from 'antd'\nimport { SelectionInfo } from '../selection/mintSelection'\nimport Selection from '../selection'\nimport NumericInput from 'shared/antd/numericInput'\nimport { MintSymbol } from 'shared/antd/mint'\n\nimport configs from 'app/configs'\nimport { numeric } from 'shared/util'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateAskData } from 'app/model/ask.controller'\nimport { useMintSelection } from 'app/hooks/useMintSelection'\nimport { SenLpState } from 'app/constant/senLpState'\nimport useAccountBalance from 'shared/hooks/useAccountBalance'\n\nconst Ask = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const { wallet } = useWallet()\n  const {\n    ask: { amount, accountAddress, mintInfo, poolAddresses },\n    bid: {\n      mintInfo: { address: bidAddress },\n    },\n  } = useSelector((state: AppState) => state)\n  const { state } = useLocation<SenLpState>()\n  const { balance: maxBalance } = useAccountBalance(accountAddress)\n  const selectionDefault = useMintSelection(configs.swap.askDefault)\n  const poolAdress = state?.poolAddress\n\n  // Select default\n  useEffect(() => {\n    if (account.isAddress(accountAddress) || account.isAddress(poolAdress))\n      return\n    dispatch(updateAskData(selectionDefault))\n  }, [accountAddress, dispatch, poolAdress, selectionDefault])\n\n  // Compute selection info\n  const selectionInfo: SelectionInfo = useMemo(\n    () => ({ mintInfo, poolAddresses }),\n    [mintInfo, poolAddresses],\n  )\n\n  // Handle amount\n  const onAmount = (val: string) =>\n    dispatch(updateAskData({ amount: val, prioritized: true }))\n\n  // Update ask data\n  const onSelectionInfo = async (selectionInfo: SelectionInfo) => {\n    const { splt } = window.sentre\n    const { address: mintAddress } = selectionInfo.mintInfo || {}\n    if (!account.isAddress(mintAddress))\n      return dispatch(\n        updateAskData({ amount: '', prioritized: true, ...selectionInfo }),\n      )\n    const accountAddress = await splt.deriveAssociatedAddress(\n      wallet.address,\n      mintAddress,\n    )\n    dispatch(\n      updateAskData({\n        amount: '',\n        prioritized: true,\n        accountAddress,\n        ...selectionInfo,\n      }),\n    )\n  }\n\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Typography.Text>To</Typography.Text>\n      </Col>\n      <Col span={24}>\n        <NumericInput\n          placeholder=\"0\"\n          value={amount}\n          onValue={onAmount}\n          size=\"large\"\n          prefix={\n            <Selection\n              hiddenTokens={[bidAddress]}\n              value={selectionInfo}\n              onChange={onSelectionInfo}\n            />\n          }\n        />\n      </Col>\n      <Col flex=\"auto\" />\n      <Col>\n        <Space className=\"caption\">\n          <Typography.Text type=\"secondary\">Available:</Typography.Text>\n          <Typography.Text type=\"secondary\">\n            {numeric(maxBalance).format('0,0.[00]')}\n          </Typography.Text>\n          <Typography.Text type=\"secondary\">\n            <MintSymbol mintAddress={selectionInfo.mintInfo?.address || ''} />\n          </Typography.Text>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Ask\n","export type EthAddressConfig = {\n  mainnet: string\n  goerli: string\n  ropsten: string\n}\n\nexport type EthChainIdConfig = {\n  mainnet: number\n  goerli: number\n  ropsten: number\n}\n\nexport type EtherNetwork = 'mainnet' | 'goerli'\n\nexport type EtherConfigSet = {\n  mainnet: string\n  goerli: string\n  ropsten: string\n}\n\nexport type MoralisStructure = {\n  url: string\n  apiKey: string\n}\n\nexport const ETH_BRIDGE_ADDRESS: EthAddressConfig = {\n  mainnet: '0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B',\n  goerli: '0x706abc4E45D419950511e474C7B9Ed348A4a716c',\n  ropsten: '0xC89Ce4735882C9F0f0FE26686c53074E09B0D550',\n}\n\nexport const ETH_TOKEN_BRIDGE_ADDRESS: EthAddressConfig = {\n  mainnet: '0x3ee18B2214AFF97000D974cf647E7C347E8fa585',\n  goerli: '0xf890982f9310df57d00f659cf4fd87e65aded8d7',\n  ropsten: '0x0290FB167208Af455bB137780163b7B7a9a10C16',\n}\n\nexport const CHAIN_ID_ETH: EthChainIdConfig = {\n  mainnet: 1,\n  goerli: 5,\n  ropsten: 3,\n}\n\nexport const MORALIS_INFO: MoralisStructure = {\n  url: 'https://deep-index.moralis.io/api/v2',\n  apiKey: 'N6yeIUl1FxCPZWbXyxLHWPAjSr6ahQeJTX3d19pSKCwHsLCzpWE7z1hilon4xDOd',\n}\n\nexport const INFURA_API_KEY: String = '5eb1b92f2065414d9dd21858fac54257'\n\nexport const INFURA_API_HTTP_URL: EtherConfigSet = {\n  mainnet: `https://mainnet.infura.io/v3/${INFURA_API_KEY}`,\n  goerli: `https://goerli.infura.io/v3/${INFURA_API_KEY}`,\n  ropsten: `https://ropsten.infura.io/v3/${INFURA_API_KEY}`,\n}\n\nexport const INFURA_API_WSS_URL: EtherConfigSet = {\n  mainnet: `wss://mainnet.infura.io/ws/v3/${INFURA_API_KEY}`,\n  goerli: `wss://goerli.infura.io/ws/v3/${INFURA_API_KEY}`,\n  ropsten: `wss://ropsten.infura.io/ws/v3/${INFURA_API_KEY}`,\n}\n","export type SolNetWork = 'mainnet' | 'devnet'\n\nexport type SolAddressConfig = {\n  mainnet: string\n  testnet: string\n  devnet: string\n}\n\nexport const SOL_BRIDGE_ADDRESS: SolAddressConfig = {\n  mainnet: 'worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth',\n  testnet: 'Brdguy7BmNB4qwEbcqqMbyV5CyJd2sxQNUn6NEpMSsUb',\n  devnet: '3u8hJUVTA4jH1wYAyUur7FFZVQ8H635K3tSHHF4ssjQ5',\n}\n\nexport const SOL_TOKEN_BRIDGE_ADDRESS: SolAddressConfig = {\n  mainnet: 'wormDTUJ6AWPNvk59vGQbDvGJmqbDTdgWgAqcLBCgUb',\n  testnet: 'A4Us8EhCC76XdGAN17L4KpRNEK423nMivVHZzZqFqqBg',\n  devnet: 'DZnkkTmCiFWfYTfT41X3Rd1kDgozqzxWaHqsw6W4x2oe',\n}\n","import {\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from '@certusone/wormhole-sdk'\nimport storage from 'shared/storage'\n\nimport {\n  EtherNetwork,\n  ETH_BRIDGE_ADDRESS,\n  ETH_TOKEN_BRIDGE_ADDRESS,\n} from 'app/constant/ethConfig'\nimport {\n  SolNetWork,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n} from 'app/constant/solConfig'\nimport { getIsWrappedAssetSol } from '@certusone/wormhole-sdk'\n\nexport const getSolNetwork = () => {\n  const solNetwork = storage.get('network') || 'mainnet'\n  return solNetwork\n}\n\nexport const getEtherNetwork = () => {\n  const solNetwork = getSolNetwork()\n  const etherNetwork = solNetwork === 'mainnet' ? 'mainnet' : 'goerli'\n  return etherNetwork\n}\n\nexport const getEtherContext = () => {\n  const etherNetwork: EtherNetwork = getEtherNetwork()\n  return {\n    chainId: CHAIN_ID_ETH,\n    tokenBridgeAddress: ETH_TOKEN_BRIDGE_ADDRESS[etherNetwork],\n    bridgeAddress: ETH_BRIDGE_ADDRESS[etherNetwork],\n  }\n}\n\nexport const getSolContext = () => {\n  const solNetWork: SolNetWork = getSolNetwork()\n  return {\n    chainId: CHAIN_ID_SOLANA,\n    tokenBridgeAddress: SOL_TOKEN_BRIDGE_ADDRESS[solNetWork],\n    bridgeAddress: SOL_BRIDGE_ADDRESS[solNetWork],\n  }\n}\n\nexport const checkAttestedWormhole = async (mintAddress: string) => {\n  const solContext = getSolContext()\n  return getIsWrappedAssetSol(\n    window.sentre.splt.connection,\n    solContext.tokenBridgeAddress,\n    mintAddress,\n  )\n}\n","import { lazy, Suspense, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { account } from '@senswap/sen-js'\n\nimport { Popover, Tag } from 'antd'\n\nimport { AppState } from 'app/model'\nimport { checkAttestedWormhole } from 'app/helper/wormhole'\nimport { randomColor } from 'shared/util'\n\nconst WORMHOLE_COLOR = '#F9575E'\n\nconst FrameWormhole = () => {\n  const FrameWormhole = lazy(() =>\n    // @ts-ignore\n    import('@frame/sen_assets/bootstrap').then((module) => ({\n      default: module.FrameWormhole,\n    })),\n  )\n  return (\n    <Suspense fallback=\"Loading...\">\n      <FrameWormhole />\n    </Suspense>\n  )\n}\n\nconst WormholeSupported = () => {\n  const [wormholeSupported, setWormholeSupported] = useState(false)\n  const {\n    bid: { mintInfo },\n  } = useSelector((state: AppState) => state)\n  const { address: mintAddress } = mintInfo || {}\n\n  useEffect(() => {\n    ;(async () => {\n      if (!account.isAddress(mintAddress)) return setWormholeSupported(false)\n      const wormholeSupported = await checkAttestedWormhole(mintAddress)\n      return setWormholeSupported(wormholeSupported)\n    })()\n  }, [mintAddress])\n\n  if (!wormholeSupported) return null\n  return (\n    <Popover\n      overlayInnerStyle={{\n        background: 'transparent',\n        width: 375,\n        boxShadow: 'none',\n      }}\n      trigger=\"click\"\n      content={<FrameWormhole />}\n    >\n      <Tag\n        style={{\n          margin: 0,\n          borderRadius: 4,\n          color: randomColor(WORMHOLE_COLOR),\n          cursor: 'pointer',\n        }}\n        color={randomColor(WORMHOLE_COLOR, 0.2)}\n      >\n        Wormhole Bridge\n      </Tag>\n    </Popover>\n  )\n}\n\nexport default WormholeSupported\n","import { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account, DEFAULT_WSOL, utils } from '@senswap/sen-js'\nimport { useWallet } from '@senhub/providers'\n\nimport { Row, Col, Typography, Button, Space } from 'antd'\nimport Selection from '../selection'\nimport NumericInput from 'shared/antd/numericInput'\nimport { MintSymbol } from 'shared/antd/mint'\nimport WormholeSupported from './wormholeSupported'\n\nimport configs from 'app/configs'\nimport { numeric } from 'shared/util'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { SelectionInfo } from '../selection/mintSelection'\nimport { useMintSelection } from 'app/hooks/useMintSelection'\nimport { SenLpState } from 'app/constant/senLpState'\nimport useAccountBalance from 'shared/hooks/useAccountBalance'\n\nconst {\n  swap: { bidDefault },\n} = configs\n\nconst Bid = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const {\n    wallet: { address: walletAddress, lamports },\n  } = useWallet()\n  const {\n    bid: { amount: bidAmount, accountAddress, mintInfo, poolAddresses },\n    ask: {\n      mintInfo: { address: askAddress },\n    },\n  } = useSelector((state: AppState) => state)\n  const { amount: balance } = useAccountBalance(accountAddress)\n  const selectionDefault = useMintSelection(bidDefault)\n  const { state } = useLocation<SenLpState>()\n  const poolAdress = state?.poolAddress\n  const { address: mintAddress, decimals } = mintInfo\n\n  // Select default\n  useEffect(() => {\n    if (account.isAddress(accountAddress) || account.isAddress(poolAdress))\n      return\n    dispatch(updateBidData(selectionDefault))\n  }, [accountAddress, dispatch, poolAdress, selectionDefault])\n\n  // Compute selection info\n  const selectionInfo: SelectionInfo = useMemo(\n    () => ({ mintInfo, poolAddresses }),\n    [mintInfo, poolAddresses],\n  )\n\n  // Compute human-readable balance\n  const maxBalance = useMemo((): string => {\n    if (mintAddress !== DEFAULT_WSOL)\n      return utils.undecimalize(balance, decimals)\n    // So estimate max = 0.01 fee -> multi transaction.\n    const estimateFee = utils.decimalize(0.01, decimals)\n    const max = lamports + balance - estimateFee\n    if (max <= balance) return utils.undecimalize(balance, decimals)\n    return utils.undecimalize(max, decimals)\n  }, [balance, decimals, lamports, mintAddress])\n\n  // Handle amount\n  const onAmount = (val: string) =>\n    dispatch(updateBidData({ amount: val, prioritized: true }))\n  // All in :)))\n  const onMax = () => onAmount(maxBalance)\n\n  // Update bid data\n  const onSelectionInfo = async (selectionInfo: SelectionInfo) => {\n    const { splt } = window.sentre\n    const { address: mintAddress } = selectionInfo.mintInfo || {}\n    if (!account.isAddress(mintAddress))\n      return dispatch(\n        updateBidData({ amount: '', prioritized: true, ...selectionInfo }),\n      )\n    const accountAddress = await splt.deriveAssociatedAddress(\n      walletAddress,\n      mintAddress,\n    )\n    return dispatch(\n      updateBidData({\n        amount: '',\n        prioritized: true,\n        accountAddress,\n        ...selectionInfo,\n      }),\n    )\n  }\n\n  return (\n    <Row gutter={[8, 8]}>\n      <Col flex=\"auto\">\n        <Typography.Text>From</Typography.Text>\n      </Col>\n      <Col>\n        <WormholeSupported />\n      </Col>\n      <Col span={24}>\n        <NumericInput\n          placeholder=\"0\"\n          value={bidAmount}\n          onValue={onAmount}\n          size=\"large\"\n          prefix={\n            <Selection\n              hiddenTokens={[askAddress]}\n              value={selectionInfo}\n              onChange={onSelectionInfo}\n            />\n          }\n          suffix={\n            <Button\n              type=\"text\"\n              size=\"small\"\n              style={{ fontSize: 12, marginRight: -7 }}\n              onClick={onMax}\n            >\n              MAX\n            </Button>\n          }\n        />\n      </Col>\n      <Col flex=\"auto\" />\n      <Col>\n        <Space className=\"caption\">\n          <Typography.Text type=\"secondary\">Available:</Typography.Text>\n          <Typography.Text type=\"secondary\">\n            {numeric(maxBalance || 0).format('0,0.[00]')}\n          </Typography.Text>\n          <Typography.Text type=\"secondary\">\n            <MintSymbol mintAddress={selectionInfo.mintInfo?.address || ''} />\n          </Typography.Text>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Bid\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { RouteTrace } from 'app/helper/router'\n\nexport type State = {\n  best: RouteTrace\n  amounts: bigint[]\n  amount: bigint\n}\n\nconst NAME = 'route'\nconst initialState: State = {\n  amount: BigInt(0),\n  amounts: [],\n  best: [],\n}\n\n/**\n * Actions\n */\nexport const updateRoute = createAsyncThunk<\n  Partial<State>,\n  Partial<State>,\n  { state: any }\n>(`${NAME}/updateRoute`, async (route, { getState }) => {\n  const { route: prevRoute } = getState()\n  if (!route) return { ...prevRoute }\n  return { ...prevRoute, ...route }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateRoute.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account, utils } from '@senswap/sen-js'\nimport { usePool } from '@senhub/providers'\n\nimport { Button, Col, Row } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport Ask from '../ask'\nimport Bid from '../bid'\n\nimport {\n  buildPoolGraph,\n  findAllRoutes,\n  findBestRouteFromAsk,\n  findBestRouteFromBid,\n} from 'app/helper/router'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateAskData } from 'app/model/ask.controller'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { State as RouteState, updateRoute } from 'app/model/route.controller'\nimport { SenLpState } from 'app/constant/senLpState'\n\nconst SwapInput = ({ spacing = 12 }: { spacing?: number }) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const [bestRoute, setBestRoute] = useState<RouteState>({\n    best: [],\n    amounts: [],\n    amount: BigInt(0),\n  })\n  const { bid: bidData, ask: askData } = useSelector((state: AppState) => state)\n  const { pools } = usePool()\n  const { state } = useLocation<SenLpState>()\n  const poolAddress = state?.poolAddress\n  const originalRoute = state?.originalRoute\n\n  /**\n   * Switch tokens\n   */\n  const onSwitch = useCallback(async () => {\n    const { amount: bidAmount, priority: bidPriority, ...bidRest } = bidData\n    const { amount: askAmount, priority: askPriority, ...askRest } = askData\n    const amount = bidPriority > askPriority ? bidAmount : askAmount\n    const updateData = bidPriority > askPriority ? updateAskData : updateBidData\n    await dispatch(updateBidData({ ...askRest, amount: '', reset: true }))\n    await dispatch(updateAskData({ ...bidRest, amount: '', reset: true }))\n    await dispatch(updateData({ amount, prioritized: true }))\n  }, [dispatch, askData, bidData])\n\n  /**\n   * Find optimal route\n   */\n  const findRoute = useCallback(async () => {\n    const {\n      poolAddresses: bidPoolAddresses,\n      mintInfo: { address: bidMintAddress },\n      amount: bidAmount,\n      priority: bidPriority,\n    } = bidData\n    const {\n      poolAddresses: askPoolAddresses,\n      mintInfo: { address: askMintAddress },\n      amount: askAmount,\n      priority: askPriority,\n    } = askData\n\n    // Initialize an instance for the best route\n    // The best route return a route that user can receive maximum ask amount when swap\n    let bestRoute: RouteState = { best: [], amounts: [], amount: BigInt(0) }\n    // Return empty default\n    if (\n      (!Number(bidAmount) && !Number(askAmount)) ||\n      !account.isAddress(bidMintAddress) ||\n      !account.isAddress(askMintAddress) ||\n      !bidPoolAddresses.length ||\n      !askPoolAddresses.length\n    )\n      return setBestRoute(bestRoute)\n\n    // All possible routes\n    let allRoutes = findAllRoutes(\n      buildPoolGraph(pools),\n      bidMintAddress,\n      askMintAddress,\n    )\n    // No available route\n    if (!allRoutes.length) return setBestRoute(bestRoute)\n    // When user select original route from senlp\n    if (originalRoute)\n      allRoutes = allRoutes.filter(\n        (route) =>\n          route.length === 1 && route[0].poolData.address === poolAddress,\n      )\n\n    if (askPriority < bidPriority)\n      bestRoute = findBestRouteFromBid(allRoutes, bidData)\n    else bestRoute = findBestRouteFromAsk(allRoutes, askData)\n    return setBestRoute(bestRoute)\n  }, [askData, bidData, originalRoute, poolAddress, pools])\n\n  const setRoute = useCallback(() => {\n    const bidPriority = bidData.priority\n    const askPriority = askData.priority\n    if (askPriority < bidPriority) {\n      dispatch(\n        updateAskData({\n          amount: utils.undecimalize(\n            bestRoute.amount,\n            askData.mintInfo.decimals,\n          ),\n        }),\n      )\n    }\n    if (bidPriority < askPriority) {\n      dispatch(\n        updateBidData({\n          amount: utils.undecimalize(\n            bestRoute.amount,\n            bidData.mintInfo.decimals,\n          ),\n        }),\n      )\n    }\n    dispatch(updateRoute({ ...bestRoute }))\n  }, [\n    askData.priority,\n    bestRoute,\n    bidData.priority,\n    dispatch,\n    bidData.mintInfo?.decimals,\n    askData.mintInfo?.decimals,\n  ])\n\n  useEffect(() => {\n    setRoute()\n  }, [setRoute])\n\n  useEffect(() => {\n    findRoute()\n  }, [findRoute])\n\n  return (\n    <Row gutter={[spacing, spacing]} justify=\"center\">\n      <Col span={24}>\n        <Bid />\n      </Col>\n      <Col>\n        <Button\n          size=\"small\"\n          icon={<IonIcon name=\"git-compare-outline\" />}\n          onClick={onSwitch}\n        />\n      </Col>\n      <Col span={24}>\n        <Ask />\n      </Col>\n    </Row>\n  )\n}\n\nexport default SwapInput\n","import { Col, Row } from 'antd'\nimport Settings from '../settings'\nimport SwapInput from './swapInput'\n\nconst SwapForm = () => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} justify=\"end\" align=\"middle\" wrap={false}>\n          <Col>\n            <Settings />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <SwapInput />\n      </Col>\n    </Row>\n  )\n}\n\nexport default SwapForm\n","import { Card, Col, Row } from 'antd'\nimport SwapReview from './swapReview'\nimport SwapPoolInfo from './swapPoolInfo'\nimport SwapForm from 'app/components/swapForm'\n\nconst Swap = () => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Card bordered={false} className=\"card-swap\">\n          <SwapForm />\n        </Card>\n      </Col>\n      <Col span={24}>\n        <SwapReview />\n      </Col>\n      <Col span={24}>\n        <SwapPoolInfo />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Swap\n","import { Tag } from 'antd'\n\nconst STATUS_COLOR: Record<string, number[]> = {\n  success: [20, 224, 65],\n  pending: [212, 177, 6],\n  error: [215, 35, 17],\n  failed: [215, 35, 17],\n}\n\nconst StatusTag = ({ tag }: { tag: string }) => {\n  const setColorTag = (opacity?: number) => {\n    let color = STATUS_COLOR[tag]\n    return `rgba(${color[0]},  ${color[1]}, ${color[2]},${opacity || 1})`\n  }\n\n  return (\n    <Tag\n      style={{\n        margin: 0,\n        borderRadius: 4,\n        color: setColorTag(),\n        textTransform: 'capitalize',\n      }}\n      color={setColorTag(0.1)}\n    >\n      {tag}\n    </Tag>\n  )\n}\n\nexport default StatusTag\n","import { Button, Space, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport IonIcon from 'shared/antd/ionicon'\nimport StatusTag from './statusTag'\n\nimport { explorer, numeric, shortenAddress } from 'shared/util'\n\nconst FORMAT_AMOUNT = '0,00.[0000]a'\n\nexport const HISTORY_COLUMN = [\n  {\n    title: 'TIME',\n    dataIndex: 'time',\n  },\n  {\n    title: 'TRANSACTION',\n    dataIndex: 'transactionId',\n    render: (text: string) => (\n      <Space align=\"baseline\">\n        <Typography.Text\n          onClick={() => window.open(explorer(text), '_blank')}\n          style={{ fontWeight: 700, cursor: 'pointer' }}\n        >\n          {shortenAddress(text, 3, '...')}\n        </Typography.Text>\n        <Button\n          type=\"text\"\n          size=\"small\"\n          onClick={() => window.open(explorer(text), '_blank')}\n          icon={<IonIcon name=\"open-outline\" />}\n        />\n      </Space>\n    ),\n  },\n\n  {\n    title: 'BID',\n    dataIndex: 'bid',\n    render: (text: string, record: any) =>\n      !record.from ? (\n        '--'\n      ) : (\n        <Space size={8}>\n          <MintAvatar mintAddress={record.from} />\n          {numeric(record.amountFrom).format(FORMAT_AMOUNT)}\n          <MintSymbol mintAddress={record.from} />\n        </Space>\n      ),\n  },\n  {\n    title: 'ASK',\n    dataIndex: 'ask',\n    render: (text: string, record: any) =>\n      !record.to ? (\n        '--'\n      ) : (\n        <Space size={8}>\n          <MintAvatar mintAddress={record.to} />\n          {numeric(record.amountTo).format(FORMAT_AMOUNT)}\n          <MintSymbol mintAddress={record.to} />\n        </Space>\n      ),\n  },\n  {\n    title: 'STATUS',\n    dataIndex: 'status',\n    width: 100,\n    render: (text: string, record: any) => <StatusTag tag={record.status} />,\n  },\n]\n","export class TransLog {\n  programId: string = ''\n\n  programInfo: ProgramInfo | undefined\n\n  signature: string = ''\n\n  blockTime: number = 0\n\n  time: number = 0\n\n  owner: string = ''\n\n  actionType: string = ''\n\n  actionTransfers: Array<ActionTransfer> = []\n\n  programTransfer: Array<ActionTransfer> = []\n}\n\nexport class ActionInfo {\n  address: string = ''\n\n  // pool: string = ''\n\n  mint: string = ''\n\n  decimals: number = 0\n\n  preBalance: string = '0'\n\n  postBalance: string = '0'\n}\n/**\n * Amount is not same postBalance - preBalance\n * @postBalance and @preBalance are balance after all action (transaction)\n * @postBalance = @preBalance +- all @amount (multi amount in transaction)\n * @amount is value in 1 action\n */\nexport class ActionTransfer {\n  source: ActionInfo | undefined\n\n  destination: ActionInfo | undefined\n\n  amount: string = '0'\n}\ntype ProgramInfo = {\n  programId: string\n  data: string\n}\n","import {\n  ConfirmedSignatureInfo,\n  ConfirmedSignaturesForAddress2Options,\n  Connection,\n  ParsedConfirmedTransaction,\n  PublicKey,\n} from '@solana/web3.js'\n\nimport { OptionsFetchSignature } from '../../constants/transaction'\n\nconst DEFAULT_LIMIT = 700\nconst TRANSACTION_LIMIT = 150\n\nexport class Solana {\n  private conn: Connection = window.sentre.splt.connection\n\n  //Search for all signatures from last Signature and earlier\n  //So: If new collection (to now) -> last Signature = null\n  private async fetchSignatures(\n    address: PublicKey,\n    lastSignature?: string,\n    limit: number = DEFAULT_LIMIT,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    if (limit > DEFAULT_LIMIT) limit = DEFAULT_LIMIT\n    const options: ConfirmedSignaturesForAddress2Options = {\n      limit: limit,\n      before: lastSignature,\n    }\n    return this.conn.getConfirmedSignaturesForAddress2(address, options)\n  }\n\n  private async fetchConfirmTransaction(signatures: string[]) {\n    let confirmedTransactions: ParsedConfirmedTransaction[] = []\n    let limit = TRANSACTION_LIMIT\n\n    const promiseTransGroup = []\n    for (let offset = 0; offset <= signatures.length / limit; offset++) {\n      const skip = offset * limit\n      const signaturesGroup = signatures.slice(skip, skip + limit)\n      promiseTransGroup.push(\n        this.conn.getParsedConfirmedTransactions(signaturesGroup),\n      )\n    }\n\n    const transGroups = await Promise.all(promiseTransGroup)\n    for (const transGroup of transGroups) {\n      //@ts-ignore\n      confirmedTransactions = confirmedTransactions.concat(transGroup)\n    }\n    return confirmedTransactions\n  }\n\n  async fetchTransactions(\n    programId: string,\n    options: OptionsFetchSignature,\n  ): Promise<ParsedConfirmedTransaction[]> {\n    const currentTime = new Date().getTime() / 1000\n    let { secondFrom, secondTo, lastSignature, limit } = options\n    secondFrom = Math.floor(secondFrom || 0)\n    secondTo = Math.floor(secondTo || currentTime)\n\n    const programPublicKey = new PublicKey(programId)\n    let signatures: string[] = []\n    let isStop = false\n\n    while (!isStop) {\n      const confirmedSignatureInfos: ConfirmedSignatureInfo[] =\n        await this.fetchSignatures(programPublicKey, lastSignature, limit)\n      if (!confirmedSignatureInfos?.length || isStop) break\n      for (const info of confirmedSignatureInfos) {\n        const blockTime = info.blockTime\n        if (!blockTime || blockTime > secondTo) continue\n        if (blockTime < secondFrom) {\n          isStop = true\n          break\n        }\n        lastSignature = info.signature\n        signatures.push(info.signature)\n      }\n\n      if (limit && signatures.length >= limit) break\n      if (confirmedSignatureInfos?.length < DEFAULT_LIMIT) break\n    }\n    const confirmedTransactions = await this.fetchConfirmTransaction(signatures)\n    return confirmedTransactions\n  }\n}\n","export enum ParsedType {\n  Transfer = 'transfer',\n}\n\nexport type ParsedAction = {\n  type: ParsedType\n  info: ParsedInfoTransfer\n}\n\nexport type ParsedInfoTransfer = {\n  source: string\n  destination: string\n  amount: string\n  lamports: number\n}\n\nexport type OptionsFetchSignature = {\n  limit?: number\n  lastSignature?: string\n  secondFrom?: number\n  secondTo?: number\n}\n","import moment from 'moment'\n\nconst SECOND_PER_MILLISECOND = 1000\n\nexport enum TimeFormat {\n  YMD = 'YYYYMMDD',\n  SortableTimePattern = 'YYYY-MM-DD HH:mm:ss',\n}\n\nexport class DateHelper {\n  private milliSeconds: number = new Date().valueOf()\n\n  setMilliSeconds(milliSeconds: number) {\n    this.milliSeconds = milliSeconds\n  }\n\n  static fromSeconds(seconds: number): DateHelper {\n    const date = new DateHelper()\n    const milliSeconds = seconds * SECOND_PER_MILLISECOND\n    date.setMilliSeconds(milliSeconds)\n    return date\n  }\n\n  static fromYmd(ymd: number): DateHelper {\n    const date = new DateHelper()\n    const milliSeconds = moment(ymd, TimeFormat.YMD).valueOf()\n    date.setMilliSeconds(milliSeconds)\n    return date\n  }\n\n  static getListDate(ymdFrom: number, ymdTo: number): number[] {\n    const dates: number[] = []\n    let dateFrom = DateHelper.fromYmd(ymdFrom)\n    const dateTo = DateHelper.fromYmd(ymdTo)\n    while (dateFrom.ymd() <= dateTo.ymd()) {\n      dates.push(dateFrom.ymd())\n      dateFrom = dateFrom.addDay()\n    }\n    return dates\n  }\n\n  format(dateFormat: TimeFormat): string {\n    const date = new Date(this.milliSeconds)\n    return moment(date).format(dateFormat)\n  }\n\n  subtractDay(dayAmount: number = 1): DateHelper {\n    const milliSeconds = moment(this.milliSeconds)\n      .subtract(dayAmount, 'days')\n      .valueOf()\n    const date = DateHelper.fromSeconds(milliSeconds / SECOND_PER_MILLISECOND)\n    return date\n  }\n\n  addDay(dayAmount: number = 1): DateHelper {\n    const milliSeconds = moment(this.milliSeconds)\n      .add(dayAmount, 'days')\n      .valueOf()\n    const date = DateHelper.fromSeconds(milliSeconds / SECOND_PER_MILLISECOND)\n    return date\n  }\n\n  seconds(): number {\n    return (\n      (this.milliSeconds - (this.milliSeconds % SECOND_PER_MILLISECOND)) /\n      SECOND_PER_MILLISECOND\n    )\n  }\n\n  ymd(): number {\n    return Number(this.format(TimeFormat.YMD))\n  }\n\n  static today(format: string = TimeFormat.YMD): string {\n    return moment().format(format)\n  }\n}\n","import base58 from 'bs58'\n\nimport { TransLog } from '../entities/trans-log'\nimport { TransLogService } from './translog'\n\nconst { struct } = require('soprox-abi')\n\nconst TRANSLOG_PROGRAM_DATA_SCHEMA = { key: 'code', type: 'u8' }\n\nexport enum SwapActionType {\n  Route = 'SWAP',\n}\n\nconst ACTION_TYPE: Record<number, SwapActionType> = {\n  8: SwapActionType.Route,\n}\n\nexport default class SwapTranslogService extends TransLogService {\n  parseAction = (transLog: TransLog) => {\n    const programDataEncode = transLog.programInfo?.data\n    if (!programDataEncode) return ''\n\n    const dataBuffer = base58.decode(programDataEncode)\n    const actionLayout = new struct([TRANSLOG_PROGRAM_DATA_SCHEMA])\n    const programDataDecode: { code: number } = actionLayout.fromBuffer(\n      Buffer.from(dataBuffer),\n    )\n    return ACTION_TYPE[programDataDecode.code] || ''\n  }\n}\n","//@ts-ignore\nimport {\n  ParsedConfirmedTransaction,\n  ParsedInstruction,\n  ParsedMessageAccount,\n  PartiallyDecodedInstruction,\n  TokenBalance,\n} from '@solana/web3.js'\nimport { account } from '@senswap/sen-js'\n\nimport { ActionInfo, ActionTransfer, TransLog } from '../entities/trans-log'\nimport { Solana } from '../adapters/solana/client'\nimport {\n  OptionsFetchSignature,\n  ParsedAction,\n  ParsedInfoTransfer,\n  ParsedType,\n} from '../constants/transaction'\nimport { DateHelper } from '../helpers/date'\nimport { SOL_ADDRESS, SOL_DECIMALS } from '../constants/sol'\n\ntype InstructionData = ParsedInstruction | PartiallyDecodedInstruction\n\nexport class TransLogService {\n  solana: Solana\n  constructor() {\n    this.solana = new Solana()\n  }\n\n  protected parseAction = (transLog: TransLog) => {\n    return ''\n  }\n\n  async collect(\n    programId: string,\n    configs: OptionsFetchSignature,\n    funcFilter?: (transLog: TransLog) => boolean,\n  ): Promise<TransLog[]> {\n    let { lastSignature, limit } = configs\n\n    let isStop = false\n    let transLogs: Array<TransLog> = []\n    let lastSignatureTmp = lastSignature\n\n    while (!isStop) {\n      const confirmedTrans: ParsedConfirmedTransaction[] =\n        await this.solana.fetchTransactions(programId, {\n          ...configs,\n          lastSignature: lastSignatureTmp,\n        })\n\n      for (const trans of confirmedTrans) {\n        lastSignatureTmp = trans.transaction.signatures[0]\n        const log = this.parseTransLog(trans)\n        if (log) transLogs.push(log)\n      }\n\n      if (funcFilter) {\n        transLogs = transLogs.filter((trans) => funcFilter(trans))\n\n        if (!confirmedTrans.length || isStop) break\n        if (limit && transLogs.length >= limit) {\n          isStop = true\n          break\n        }\n      } else break\n    }\n    return transLogs\n  }\n  private parseTransLog(\n    confirmedTrans: ParsedConfirmedTransaction,\n  ): TransLog | undefined {\n    const { blockTime, meta, transaction } = confirmedTrans\n    if (!blockTime || !meta) return\n    const { postTokenBalances, preTokenBalances, postBalances, preBalances } =\n      meta\n    const { signatures, message } = transaction\n\n    const innerInstructionData = meta.innerInstructions?.[0]?.instructions || []\n    const instructionData = message.instructions[0] || []\n\n    const transLog = new TransLog()\n    transLog.signature = signatures[0]\n    transLog.blockTime = blockTime\n    transLog.time = DateHelper.fromSeconds(blockTime).ymd()\n    transLog.programId = instructionData.programId.toString()\n\n    const mapAccount = this.parseAccountInfo(\n      message.accountKeys,\n      postTokenBalances || [],\n      preTokenBalances || [],\n      postBalances,\n      preBalances,\n    )\n    // system program transaction\n    if (this.isParsedInstruction(instructionData)) {\n      transLog.programTransfer = this.parseListActionTransfer(\n        [instructionData],\n        mapAccount,\n      )\n      return transLog\n    }\n    // smart contract transaction\n    transLog.actionTransfers = this.parseListActionTransfer(\n      innerInstructionData,\n      mapAccount,\n    )\n    transLog.programInfo = {\n      programId: instructionData.programId.toString(),\n      data: (instructionData as PartiallyDecodedInstruction).data,\n    }\n    transLog.actionType = this.parseAction(transLog)\n    return transLog\n  }\n\n  private isParsedInstruction(instructionData: InstructionData) {\n    return (instructionData as ParsedInstruction).parsed !== undefined\n  }\n\n  private parseListActionTransfer(\n    actions: InstructionData[],\n    mapAccount: Map<string, ActionInfo>,\n  ) {\n    const actionTransfer: ActionTransfer[] = []\n    for (const action of actions) {\n      if (!this.isParsedInstruction(action)) continue\n      const actionParsed: ParsedAction =\n        (action as ParsedInstruction).parsed || {}\n      switch (actionParsed.type) {\n        case ParsedType.Transfer:\n          const info: ParsedInfoTransfer = actionParsed.info\n          const parsedAction = this.parseActionTransfer(info, mapAccount)\n          if (parsedAction) actionTransfer.push(parsedAction)\n          break\n        default:\n          break\n      }\n    }\n    return actionTransfer\n  }\n\n  private parseActionTransfer(\n    parsedTransfer: ParsedInfoTransfer,\n    mapAccount: Map<string, ActionInfo>,\n  ): ActionTransfer | undefined {\n    const { source, destination, amount, lamports } = parsedTransfer\n    const amountTransfer = amount || lamports.toString()\n\n    if (\n      !amountTransfer ||\n      !mapAccount.has(source) ||\n      !mapAccount.has(destination)\n    )\n      return\n\n    const actionTransfer = new ActionTransfer()\n    actionTransfer.source = mapAccount.get(source)\n    actionTransfer.destination = mapAccount.get(destination)\n    actionTransfer.amount = amountTransfer\n    return actionTransfer\n  }\n\n  private parseAccountInfo(\n    accountKeys: Array<ParsedMessageAccount>,\n    postTokenBalances: Array<TokenBalance>,\n    preTokenBalances: Array<TokenBalance>,\n    postBalances: number[],\n    preBalances: number[],\n  ): Map<string, ActionInfo> {\n    const mapAccountInfo = new Map<string, ActionInfo>()\n\n    // Associated Address\n    for (const postBalance of postTokenBalances) {\n      const { accountIndex, mint, uiTokenAmount } = postBalance\n      const info = new ActionInfo()\n      info.address = accountKeys[accountIndex].pubkey.toString()\n      info.postBalance = uiTokenAmount.amount\n      info.mint = mint\n      info.decimals = uiTokenAmount.decimals\n      mapAccountInfo.set(info.address, info)\n    }\n\n    for (const preBalance of preTokenBalances) {\n      const { accountIndex, uiTokenAmount } = preBalance\n      const address = accountKeys[accountIndex].pubkey.toString()\n      const info = mapAccountInfo.get(address) || new ActionInfo()\n      info.preBalance = uiTokenAmount.amount\n      mapAccountInfo.set(info.address, info)\n    }\n\n    // Wallet address\n    accountKeys.forEach((accountData, idx) => {\n      const address = accountData.pubkey.toString()\n      if (!account.isAssociatedAddress(address)) {\n        const info = mapAccountInfo.get(address) || new ActionInfo()\n        info.address = address\n        info.mint = SOL_ADDRESS\n        info.postBalance = String(postBalances[idx] || 0) // lamports\n        info.preBalance = String(preBalances[idx] || 0) // lamports\n        info.decimals = SOL_DECIMALS\n        mapAccountInfo.set(info.address, info)\n      }\n    })\n\n    return mapAccountInfo\n  }\n}\n","export const SOL_ADDRESS = '11111111111111111111111111111111'\n\nexport const SOL_DECIMALS = 9\n","import moment from 'moment'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nimport { utils } from '@senswap/sen-js'\n\nimport configs from 'os/configs'\nimport { TransLog } from 'app/lib/stat/entities/trans-log'\nimport SwapTranslogService from 'app/lib/stat/logic/translogSwap'\n\nexport type State = {\n  historySwap: HistorySwap[]\n}\n\n/**\n * Store constructor\n */\n\nexport type HistorySwap = {\n  time: string\n  transactionId: string\n  from?: string\n  to?: string\n  amountFrom?: number\n  amountTo?: number\n  key: string\n  status: string\n  decimals: number\n}\n\nconst LIMIT_HISTORY_SWAP = 20\n\nconst NAME = 'history'\nconst initialState: State = {\n  historySwap: [],\n}\n\nconst filterFunction = (transLog: TransLog) => {\n  if (!transLog.actionTransfers.length) return false\n  return transLog.actionType === 'SWAP'\n}\n\n/**\n * Actions\n */\nexport const fetchHistorySwap = createAsyncThunk<\n  { historySwap: HistorySwap[] },\n  { lastSignature?: string; isLoadMore?: boolean },\n  { state: { history: State } }\n>(\n  `${NAME}/fetchHistorySwap`,\n  async ({ lastSignature, isLoadMore }, { getState }) => {\n    const {\n      sol: { swapAddress },\n    } = configs\n\n    const {\n      history: { historySwap },\n    } = getState()\n\n    const myWalletAddress = await window.sentre.wallet?.getAddress()\n    if (!myWalletAddress) throw Error('Loggin first')\n\n    const options = {\n      limit: LIMIT_HISTORY_SWAP,\n      lastSignature,\n    }\n\n    const transLogService = new SwapTranslogService()\n    const transLogsData = await transLogService.collect(\n      myWalletAddress,\n      options,\n      filterFunction,\n    )\n    let history: HistorySwap[] = []\n\n    if (isLoadMore) history = [...historySwap]\n\n    for (const transLog of transLogsData) {\n      if (!transLog.actionType) continue\n      const historyItem = {} as HistorySwap\n      const actionTransfer = transLog.actionTransfers\n      let lastAction\n\n      const firstAction = actionTransfer[0]\n      if (actionTransfer.length > 1)\n        lastAction = actionTransfer[actionTransfer.length - 1]\n\n      const programId = transLog.programId\n\n      if (programId !== swapAddress) continue\n\n      const time = new Date(transLog.blockTime * 1000)\n\n      historyItem.time = moment(time).format('MMM DD, YYYY HH:mm')\n      historyItem.amountFrom = firstAction.destination\n        ? Number(\n            utils.undecimalize(\n              BigInt(firstAction.amount),\n              firstAction.destination.decimals,\n            ),\n          )\n        : undefined\n      historyItem.amountTo = lastAction?.destination\n        ? Number(\n            utils.undecimalize(\n              BigInt(lastAction.amount),\n              lastAction.destination.decimals,\n            ),\n          )\n        : undefined\n\n      historyItem.from = firstAction.destination?.mint\n      historyItem.to = lastAction?.destination?.mint\n      historyItem.transactionId = transLog.signature\n      historyItem.key = transLog.signature\n      historyItem.status =\n        !firstAction.destination || !lastAction?.destination\n          ? 'failed'\n          : 'success'\n      history.push(historyItem)\n    }\n    return { historySwap: history }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      fetchHistorySwap.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Card, Col, Row, Typography, Table, Button } from 'antd'\nimport { HISTORY_COLUMN } from './column'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { fetchHistorySwap } from 'app/model/history.controller'\nimport { AppDispatch, AppState } from 'app/model'\n\nimport './index.less'\n\nconst ROW_PER_PAGE = 5\nconst LIMIT_IN_STORE = 15\nconst TABLE_HEIGHT = 462\n\nconst History = () => {\n  const [amountRow, setAmountRow] = useState(ROW_PER_PAGE)\n  const [loading, setLoading] = useState(false)\n\n  const { historySwap } = useSelector((state: AppState) => state.history)\n  const dispatch = useDispatch<AppDispatch>()\n\n  const fetchHistory = useCallback(async () => {\n    setLoading(true)\n    await dispatch(fetchHistorySwap({})).unwrap()\n    setLoading(false)\n  }, [dispatch])\n\n  useEffect(() => {\n    fetchHistory()\n  }, [fetchHistory])\n\n  const onHandleViewMore = () => {\n    const currentTransactionDataLength = historySwap.slice(0, amountRow).length\n\n    if (historySwap.length - currentTransactionDataLength <= LIMIT_IN_STORE) {\n      const lastSignature = historySwap[historySwap.length - 1]?.transactionId\n      dispatch(\n        fetchHistorySwap({\n          lastSignature,\n          isLoadMore: true,\n        }),\n      )\n    }\n    setAmountRow(amountRow + ROW_PER_PAGE)\n  }\n\n  const onHandleRefeshTable = () => {\n    fetchHistory()\n    setAmountRow(ROW_PER_PAGE)\n  }\n\n  const style = useMemo(() => {\n    return amountRow > 5 ? { height: 'auto' } : { height: TABLE_HEIGHT }\n  }, [amountRow])\n\n  return (\n    <Card bordered={false} style={{ ...style }}>\n      <Row gutter={[16, 24]}>\n        <Col flex=\"auto\">\n          <Typography.Title level={5}>Swap history</Typography.Title>\n        </Col>\n        <Col>\n          <Button onClick={onHandleRefeshTable}>Refresh</Button>\n        </Col>\n        <Col span={24}>\n          <Row justify=\"center\" gutter={[16, 9]}>\n            <Col span={24} style={{ minHeight: 310 }}>\n              <Table\n                columns={HISTORY_COLUMN}\n                dataSource={historySwap.slice(0, amountRow)}\n                loading={loading}\n                pagination={false}\n                rowClassName={(record, index) =>\n                  index % 2 ? 'odd-row' : 'even-row'\n                }\n                scroll={{ x: 800 }}\n              />\n            </Col>\n            <Col>\n              <Button\n                onClick={onHandleViewMore}\n                type=\"text\"\n                icon={<IonIcon name=\"chevron-down-outline\" />}\n                disabled={amountRow >= historySwap.length}\n              >\n                View more\n              </Button>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default History\n","import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account } from '@senswap/sen-js'\nimport { usePool } from '@senhub/providers'\n\nimport { Row, Col } from 'antd'\nimport SwapChart from './chart'\nimport Swap from './swap'\nimport History from './history'\n\nimport { useMintSelection } from 'app/hooks/useMintSelection'\nimport { AppDispatch } from 'app/model'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { updateAskData } from 'app/model/ask.controller'\nimport { SenLpState } from 'app/constant/senLpState'\n\nconst Page = () => {\n  const { pools } = usePool()\n  const dispatch = useDispatch<AppDispatch>()\n  const { state } = useLocation<SenLpState>()\n  const [bid, setBid] = useState('')\n  const [ask, setAsk] = useState('')\n  const bidData = useMintSelection(bid)\n  const askData = useMintSelection(ask)\n  const poolAdress = state?.poolAddress\n\n  /** Check state when user come from sen LP */\n  const checkIsSenLpCome = useCallback(() => {\n    if (!account.isAddress(poolAdress)) return\n    const poolData = pools[poolAdress]\n    if (!poolData) return\n    setBid(poolData?.mint_a)\n    setAsk(poolData?.mint_b)\n  }, [poolAdress, pools])\n\n  useEffect(() => {\n    checkIsSenLpCome()\n  }, [checkIsSenLpCome])\n\n  useEffect(() => {\n    if (\n      !account.isAddress(bidData.accountAddress) ||\n      !account.isAddress(askData.accountAddress)\n    )\n      return\n    dispatch(updateBidData(bidData))\n    dispatch(updateAskData(askData))\n  }, [askData, bidData, dispatch])\n\n  return (\n    <Row gutter={[24, 24]} style={{ paddingBottom: 12 }}>\n      <Col lg={8} md={12} xs={24}>\n        <Swap />\n      </Col>\n      <Col lg={16} md={12} xs={24}>\n        <Row gutter={[24, 24]}>\n          <Col span={24}>\n            <SwapChart />\n          </Col>\n          <Col span={24}>\n            <History />\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Page\n","import { useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Row, Col, Typography, Space, Button, Popover } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport PreviewSwap from 'app/components/preview'\nimport SwapInput from 'app/components/swapForm/swapInput'\n\nimport { AppState } from 'app/model'\nimport usePriceImpact, { usePriceColor } from 'app/hooks/usePriceImpact'\nimport { numeric } from 'shared/util'\nimport ConfirmSwap from 'app/components/confirmSwap'\n\nconst Widget = () => {\n  const [visible, setVisible] = useState(false)\n  const {\n    route: { best },\n    bid: { amount: bidAmount },\n    ask: { amount: askAmount },\n  } = useSelector((state: AppState) => state)\n  const priceImpact = usePriceImpact()\n  const priceColor = usePriceColor()\n\n  const disabled = !best.length || !Number(bidAmount) || !Number(askAmount)\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={24}>\n        <SwapInput spacing={12} />\n      </Col>\n      <Col span={24}>\n        <Row align=\"bottom\">\n          <Col flex=\"auto\">\n            <Popover\n              placement=\"bottomLeft\"\n              content={<PreviewSwap />}\n              trigger=\"click\"\n            >\n              <Space\n                style={{ cursor: 'pointer' }}\n                direction=\"vertical\"\n                size={4}\n              >\n                <Space>\n                  <Typography.Text>\n                    <IonIcon\n                      name=\"information-circle-outline\"\n                      style={{ color: '#7A7B85' }}\n                    />\n                  </Typography.Text>\n                  <Typography.Text type=\"secondary\">\n                    Price impact\n                  </Typography.Text>\n                </Space>\n                <Typography.Text style={{ color: priceColor }}>\n                  {numeric(Number(priceImpact)).format('0.[0000]%')}\n                </Typography.Text>\n              </Space>\n            </Popover>\n          </Col>\n          <Col>\n            <Button\n              onClick={() => setVisible(true)}\n              size=\"large\"\n              block\n              type=\"primary\"\n              disabled={disabled}\n            >\n              Review & Swap\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n      <ConfirmSwap visible={visible} onCancle={setVisible} />\n    </Row>\n  )\n}\n\nexport default Widget\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport ask from './ask.controller'\nimport bid from './bid.controller'\nimport settings from './settings.controller'\nimport route from './route.controller'\nimport history from './history.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools(process.env.REACT_APP_ID as string),\n  reducer: {\n    ask,\n    bid,\n    settings,\n    route,\n    history,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport {\n  WalletProvider,\n  UIProvider,\n  AccountProvider,\n  PoolProvider,\n  MintProvider,\n} from '@senhub/providers'\n\nimport PageView from 'app/page'\nimport WidgetView from 'app/widget'\n\nimport model from 'app/model'\nimport configs from 'app/configs'\n\nimport 'app/static/styles/dark.less'\nimport 'app/static/styles/light.less'\nimport 'app/static/styles/index.less'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <MintProvider>\n        <PoolProvider>\n          <AccountProvider>\n            <WalletProvider>\n              <Provider store={model}>\n                <PageView />\n              </Provider>\n            </WalletProvider>\n          </AccountProvider>\n        </PoolProvider>\n      </MintProvider>\n    </UIProvider>\n  )\n}\n\nexport const widgetConfig: WidgetConfig = {\n  size: 'small',\n  type: 'solid',\n}\n\nexport const Widget = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <MintProvider>\n        <PoolProvider>\n          <AccountProvider>\n            <WalletProvider>\n              <Provider store={model}>\n                <WidgetView />\n              </Provider>\n            </WalletProvider>\n          </AccountProvider>\n        </PoolProvider>\n      </MintProvider>\n    </UIProvider>\n  )\n}\n","import { Net } from 'shared/runtime'\n\nconst SOLVARS = {\n  spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n  splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n}\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  chainId: 101 | 102 | 103\n  sntrAddress: string\n  sntrPoolAddress: string\n  swapAddress: string\n  taxmanAddress: string\n} & typeof SOLVARS\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    ...SOLVARS,\n    node: 'https://api.devnet.solana.com',\n    chainId: 103,\n    sntrAddress: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n    sntrPoolAddress: '3EUPL7YQLbU6DNU5LZeQeHPXTf1MigJ2yASXA9rH5Ku4',\n    swapAddress: '4erFSLP7oBFSVC1t35jdxmbfxEhYCKfoM6XdG2BLR3UF',\n    taxmanAddress: '8UaZw2jDhJzv5V53569JbCd3bD4BnyCfBH3sjwgajGS9',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    ...SOLVARS,\n    node: 'https://api.testnet.solana.com',\n    chainId: 102,\n    sntrAddress: '',\n    sntrPoolAddress: '',\n    swapAddress: '',\n    taxmanAddress: '',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    ...SOLVARS,\n    node: 'https://api.mainnet-beta.solana.com',\n    chainId: 101,\n    sntrAddress: 'SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M',\n    sntrPoolAddress: 'Aa3WZX7Xunfebp2MuAcz9CNw8TYTDL7mVrmb11rjyVm6',\n    swapAddress: 'SSW7ooZ1EbEognq5GosbygA3uWW1Hq1NsFq6TsftCFV',\n    taxmanAddress: '9doo2HZQEmh2NgfT3Yx12M89aoBheycYqH1eaR5gKb3e',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_NAME !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string'\n)\n  throw new Error(\n    'Please add REACT_APP_ID, REACT_APP_NAME, REACT_APP_URL in .env.local!',\n  )\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  defaultAppId: string\n  extra: SenReg\n  senreg: string\n}\n\nconst DEFAULT_APP_ID = process.env.REACT_APP_ID\nconst devApp = {\n  [DEFAULT_APP_ID]: {\n    url: process.env.REACT_APP_URL,\n    appId: DEFAULT_APP_ID,\n    name: process.env.REACT_APP_NAME,\n    author: {\n      name: process.env.REACT_APP_AUTHOR_NAME || '',\n      email: process.env.REACT_APP_AUTHOR_EMAIL || '',\n    },\n    supportedViews: (process.env.REACT_APP_SUPPORTED_VIEWS || '')\n      .split(',')\n      .map((view) => view.trim())\n      .filter((view) => ['page', 'widget'].includes(view)) as Array<\n      'widget' | 'page'\n    >,\n    tags: (process.env.REACT_APP_TAGS || '')\n      .split(',')\n      .map((tag) => tag.trim()),\n    description: process.env.REACT_APP_DESCRIPTION || '',\n    verified: false,\n  },\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: {},\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { net, env } from 'shared/runtime'\nimport sol from './sol.config'\nimport register from './register.config'\n\nconst configs = {\n  sol: sol[net],\n  register: register[env],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","// Pseudo native sol info\n// It's for all networks\nexport const sol = (chainId: 101 | 102 | 103) => ({\n  symbol: 'SOL',\n  name: 'Solana',\n  address: '11111111111111111111111111111111',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'solana',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png',\n})\n\n// Pseudo SNTR info\n// Only for testnet and mainnet\nexport const sntr = (chainId: 102 | 103) => ({\n  symbol: 'SNTR',\n  name: 'Sentre',\n  address: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'sentre',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M/logo.png',\n})\n\n// Pseudo token infos for devnet\nconst supplementary = [\n  sol(103),\n  sntr(103),\n  {\n    symbol: 'wBTC',\n    name: 'Wrapped Bitcoin',\n    address: '8jk4eJymMfNZV9mkRNxJEt2VJ3pRvdJvD5FE94GXGBPM',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'bitcoin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/qfnqNqs3nCAHjnyCgLRDbBtq4p2MtHZxw8YjSyYhPoL/logo.png',\n  },\n  {\n    symbol: 'wETH',\n    name: 'Ethereum',\n    address: '27hdcZv7RtuMp75vupThR3T4KLsL61t476eosMdoec4c',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'ethereum',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/FeGn77dhg1KXRRFeSwwMiykZnZPw5JXW6naf2aQgZDQf/logo.png',\n  },\n  {\n    symbol: 'UNI',\n    name: 'Uniswap',\n    address: 'FVZFSXu3yn17YdcxLD72TFDUqkdE5xZvcW18EUpRQEbe',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'uniswap',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/3MVa4e32PaKmPxYUQ6n8vFkWtCma68Ld7e7fTktWDueQ/logo.png',\n  },\n  {\n    symbol: 'USDC',\n    name: 'USD Coin',\n    address: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'usd-coin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png',\n  },\n]\n\nexport default supplementary\n","import { Document } from 'flexsearch'\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry'\n\nimport { net } from 'shared/runtime'\nimport configs from 'os/configs'\nimport supplementary, { sntr, sol } from './supplementary'\n\nconst {\n  sol: { chainId },\n} = configs\nconst DELIMITER = /[\\W_]+/g\nconst PRESET = {\n  tokenize: 'full',\n  context: true,\n  minlength: 3,\n}\nconst DOCUMENT = {\n  document: {\n    id: 'address',\n    index: [\n      { field: 'symbol', ...PRESET },\n      { field: 'name', ...PRESET },\n    ],\n  },\n}\n\nclass TokenProvider {\n  private tokenMap: Map<string, TokenInfo>\n  private engine: typeof Document | undefined\n  readonly chainId: typeof chainId\n  readonly cluster: typeof net\n  private loading: boolean\n  private queue: Array<any>\n\n  constructor() {\n    this.tokenMap = new Map<string, TokenInfo>()\n    this.engine = undefined\n    this.chainId = chainId\n    this.cluster = net\n    this.loading = false\n    this.queue = []\n    // Init\n    this._init()\n  }\n\n  private _init = async (): Promise<[Map<string, TokenInfo>, any]> => {\n    if (this.tokenMap.size) return [this.tokenMap, this.engine]\n    return new Promise(async (resolve) => {\n      // Queue of getters to avoid race condition of multiple _init calling\n      if (this.loading) return this.queue.push(resolve)\n      // Start\n      this.loading = true\n      // Build token list\n      let tokenList = await (await new TokenListProvider().resolve())\n        .filterByChainId(this.chainId)\n        .getList()\n      if (this.cluster === 'devnet') tokenList = tokenList.concat(supplementary)\n      if (this.cluster === 'testnet')\n        tokenList = tokenList.concat([sntr(102), sol(102)])\n      else tokenList = tokenList.concat([sol(101)])\n      // Build token map\n      tokenList.forEach((token) => this.tokenMap.set(token.address, token))\n      // Build search engine\n      this.engine = new Document(DOCUMENT)\n      this.tokenMap.forEach(({ address, ...doc }) =>\n        this.engine.add(address, doc),\n      )\n      // Resolve the main getter\n      resolve([this.tokenMap, this.engine])\n      // Resolve the rest of getters\n      while (this.queue.length) this.queue.shift()([this.tokenMap, this.engine])\n      // Finish\n      this.loading = false\n    })\n  }\n\n  all = async (): Promise<TokenInfo[]> => {\n    const [tokenMap] = await this._init()\n    return Array.from(tokenMap.values())\n  }\n\n  findByAddress = async (addr: string): Promise<TokenInfo | undefined> => {\n    const [tokenMap] = await this._init()\n    return tokenMap.get(addr)\n  }\n\n  find = async (keyword: string, limit?: 10): Promise<TokenInfo[]> => {\n    const [tokenMap, engine] = await this._init()\n    let tokens: TokenInfo[] = []\n    keyword.split(DELIMITER).forEach((key) => {\n      const raw: Array<{ result: string[] }> = engine.search(key, limit)\n      return raw.forEach(({ result }) => {\n        return result.forEach((id: string) => {\n          if (tokens.findIndex(({ address }) => address === id) < 0) {\n            const token = tokenMap.get(id)\n            if (token) tokens.push(token)\n          }\n        })\n      })\n    })\n    return tokens\n  }\n}\n\nexport default TokenProvider\n","import { DEFAULT_CACHE_CONFIG } from './constant'\nimport { CacheConfig } from './constant'\n\nexport class SingleFlightCache {\n  private static mapCache = new Map<string, any>()\n\n  static set(\n    key: string,\n    value: any,\n    configs: CacheConfig = DEFAULT_CACHE_CONFIG,\n  ) {\n    this.mapCache.set(key, value)\n    setTimeout(() => {\n      this.mapCache.delete(key)\n    }, configs.ttl)\n  }\n\n  static get(key: string) {\n    return this.mapCache.get(key)\n  }\n}\n","export type LimitConfig = {\n  calls: number\n  time: number\n}\n\nexport type CacheConfig = {\n  ttl: number // millisecond\n}\n\nexport type SingleFlightConfig = {\n  limit?: LimitConfig\n  cache?: CacheConfig\n}\n\n// 10 request per 1 second\nexport const DEFAULT_LIMIT_CONFIG: LimitConfig = {\n  calls: 10,\n  time: 1000,\n}\n\n// 10 request per 1 second\nexport const DEFAULT_CACHE_CONFIG: CacheConfig = {\n  ttl: 30000,\n}\n\nexport const DEFAULT_SINGLE_FLIGHT_CONFIG: SingleFlightConfig = {\n  limit : DEFAULT_LIMIT_CONFIG,\n  cache: DEFAULT_CACHE_CONFIG\n}","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey)\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(\n    request: IRequestQueue,\n    callback: () => Promise<any>,\n  ) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    return true\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","export interface IRequestQueue {\n  key: string\n  add(resolve: any, reject: any): void\n  resolves(data: any): void\n  rejects(error: any): void\n}\n\nexport class RequestQueue implements IRequestQueue {\n  key = ''\n  private resolveQueue: any[] = []\n  private rejectQueue: any[] = []\n  constructor(key: string) {\n    this.key = key\n  }\n\n  add(resolve: any, reject: any) {\n    this.resolveQueue.push(resolve)\n    this.rejectQueue.push(reject)\n  }\n\n  resolves(data: any) {\n    while (this.resolveQueue.length > 0) {\n      const resolve = this.resolveQueue.shift()\n      resolve(data)\n    }\n  }\n\n  rejects(error: any) {\n    while (this.rejectQueue.length > 0) {\n      const reject = this.rejectQueue.shift()\n      reject(error)\n    }\n  }\n}\n","// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint'\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  try {\n    if (!value) return null\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n","import { account, utils } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport { net } from 'shared/runtime'\nimport { DataLoader } from './dataloader'\n\n/**\n * Delay by async/await\n * @param ms - milisenconds\n * @returns\n */\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Shorten a long address\n * @param address - The long address\n * @param num - The number of the heading and trailing characters\n * @param delimiter - The delimiter\n * @returns Shortened address\n */\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\n/**\n * Build a explorer url by context including addresses or transaction ids\n * @param addressOrTxId - Address or TxId\n * @returns\n */\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\n/**\n * Wrapped Numbro - https://numbrojs.com/old-format.html\n * @param value - value\n * @returns\n */\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value || !Number.isFinite(Number(value))) return numbro('0')\n  return numbro(value)\n}\n\n/**\n * Generate a random color\n * @param seed - Seed\n * @param opacity - Opacity\n * @returns\n */\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n\n/**\n * Fetch coingecko data with cache\n * @param ticket - Token ticket\n * @returns\n */\nexport const fetchCGK = async (ticket = '') => {\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n"],"names":["CUSTOM_ICONS","forwardRef","name","className","props","ref","cln","src","DEFAULT_AVATARS","undefined","mintAddress","size","icon","reversed","avatars","setAvatars","useState","tokenProvider","useMint","pools","usePool","deriveAvatar","useCallback","async","token","findByAddress","address","logoURI","deriveAvatars","account","poolData","Object","values","find","mint_lpt","mint_a","mint_b","Promise","all","map","reverse","avatar","useEffect","length","Avatar","style","backgroundColor","border","display","whiteSpace","i","DEFAULT_NAME","separator","setName","deriveName","deriveNames","names","join","DEFAULT_SYMBOL","symbol","setSymbol","deriveSymbol","substring","deriveSymbols","symbols","bid","mintInfo","bidMintInfo","ask","askMintInfo","useSelector","state","bidMintAddress","askMintAddress","Space","Typography","chartData","labels","type","configs","disableAxe","chartId","isRebuildChart","setRebuildChart","formatData","data","label","background","datasets","chartRef","useRef","getBackground","ctx","current","canvas","getContext","gradient","createLinearGradient","addColorStop","chartInstance","dataInstace","compareData","isEqual","update","id","height","Chart","options","responsive","maintainAspectRatio","scales","xAxes","gridLines","drawBorder","ticks","yAxes","beginAtZero","maxTicksLimit","callback","value","index","numeric","format","plugins","legend","hover","onHover","event","elements","target","document","getElementById","cursor","Row","align","justify","Col","Empty","TokenProvider","fetchMarketChart","ticket","params","axios","method","url","days","interval","prices","time","val","error","Interval","CHART_DATA_CONFIG","day","amount","unit","week","month","year","MARKET_CONFIG","CHART_CONFIGS","setInterval","setChartData","bidData","askData","swapChartConfigs","borderColor","borderRadius","pointRadius","tooltip","pointHitRadius","pointHoverRadius","parseChartDay","marketData","displayTime","moment","chartTime","unshift","subtract","parseChartDaily","fetchChartData","bidTokenInfo","askTokenInfo","bidTicket","extensions","coingeckoId","askTicket","compareAddress","accountAddress","marketConfig","bidChartData","askChartData","idx","bidChart","askChart","price","priceUI","Card","bordered","bodyStyle","paddingTop","gutter","flex","Radio","defaultValue","onChange","e","span","level","decimals","setDecimals","getDecimals","fetchDecimals","er","buildResult","balance","Number","utils","BigInt","useAccountBalance","wallet","walletAddress","lamports","useWallet","accounts","useAccount","mint","useMintDecimals","DEFAULT_EMPTY_ADDRESS","extractReserve","reserve_a","reserve_b","Error","findAllRoutes","graph","deep","routes","clonedGraph","Map","get","delete","forEach","poolAddress","srcMintAddress","dstMintAddress","hop","push","route","ORACLE","Swap","curve","bidAmount","hopData","fee_ratio","tax_ratio","bidReserve","askReserve","askAmount","swap","inverseCurve","inverseSwap","PriceImpact","usePriceImpact","best","srcAmount","p","s","slippage","dstAmount","usePriceColor","priceImpact","goodSwap","acceptableSwap","DECIMALS","onCallback","forceSwap","loading","setLoading","_bidAmount","bidMintDecimals","bidAccountAddress","_askAmount","askMintDecimals","settings","advanced","bidBalance","wrapAmount","useMemo","DEFAULT_WSOL","availableBid","estimateFee","max","handleSwap","splt","window","sentre","routingAddresses","srcAddress","deriveAssociatedAddress","dstAddress","limit","tooHighImpact","disabled","Button","onClick","wrapSol","handleWrapSol","txId","notify","description","open","explorer","message","block","chainMintAddresses","list","Fragment","setReversed","reversedPrice","shape","ExtraTypography","content","priceColor","color","minHeight","updateBidData","createAsyncThunk","prioritized","reset","getState","priority","prevPriority","refPriority","createSlice","initialState","poolAddresses","reducers","extraReducers","builder","addCase","fulfilled","payload","assign","visible","onCancle","checked","setChecked","Modal","title","onCancel","footer","direction","fontSize","Checkbox","visivle","setVisivle","dispatch","useDispatch","DEFAULT_DATA","priceChange","rank","totalVolume","cgkData","setCgkData","fetchCgkData","fetchCGK","MintPoolInfo","tvl","bidCgk","useMintCgk","askCgk","bidPoolData","askPoolData","getMintTVL","bidTVL","askTVL","wrap","Divider","spacing","iconSize","SentreIcon","Option","active","Tooltip","placement","Switch","checkedChildren","unCheckedChildren","textAlign","NAME","updateSettings","padding","Popover","overlayInnerStyle","width","marginTop","marginBottom","trigger","mintAddresses","setMintAddresses","keyword","setKeyword","sortMintAddresses","rawMintAddresses","flat","filter","item","pos","self","indexOf","lpMintAddresses","sortedMintAddresses","tokenInfo","Boolean","includes","sort","first","second","search","toLowerCase","Input","placeholder","suffix","marginRight","hoverable","marginLeft","margin","hiddenTokens","currentMintAddress","getAvailablePoolAddresses","keys","onMint","overflow","setVisible","history","useHistory","useLocation","setTimeout","forceCheck","closeIcon","destroyOnClose","centered","selectionInfo","replace","location","timeoutId","onValue","setError","setCursor","innerRef","onAmount","onError","clearTimeout","test","parseFloat","toString","setSelectionRange","selectionStart","shared","appId","process","devnet","node","spltAddress","splataAddress","testnet","mainnet","bidDefault","askDefault","wormholeAddress","assetsRoute","manifest","development","staging","production","env","sol","net","wormhole","updateAskData","DEFAULT_INFO","useMintSelection","setSelectionInfo","getSelectionInfo","bidAddress","maxBalance","selectionDefault","poolAdress","prefix","SOL_BRIDGE_ADDRESS","SOL_TOKEN_BRIDGE_ADDRESS","getSolNetwork","storage","checkAttestedWormhole","solContext","solNetWork","chainId","CHAIN_ID_SOLANA","tokenBridgeAddress","bridgeAddress","getSolContext","getIsWrappedAssetSol","connection","WORMHOLE_COLOR","FrameWormhole","lazy","then","module","default","Suspense","fallback","wormholeSupported","setWormholeSupported","boxShadow","Tag","randomColor","askAddress","amounts","updateRoute","prevRoute","bestRoute","setBestRoute","originalRoute","onSwitch","bidPriority","bidRest","askPriority","askRest","updateData","findRoute","bidPoolAddresses","askPoolAddresses","allRoutes","pool","has","set","buildPoolGraph","Array","maxAskAmount","findBestRouteFromBid","reversedRoute","minBidAmount","findBestRouteFromAsk","setRoute","STATUS_COLOR","success","pending","failed","tag","setColorTag","opacity","textTransform","FORMAT_AMOUNT","HISTORY_COLUMN","dataIndex","render","text","fontWeight","shortenAddress","record","from","amountFrom","to","amountTo","status","TransLog","programId","programInfo","signature","blockTime","owner","actionType","actionTransfers","programTransfer","ActionInfo","preBalance","postBalance","ActionTransfer","source","destination","DEFAULT_LIMIT","Solana","conn","lastSignature","before","this","getConfirmedSignaturesForAddress2","signatures","confirmedTransactions","promiseTransGroup","offset","skip","signaturesGroup","slice","getParsedConfirmedTransactions","transGroups","transGroup","concat","currentTime","Date","getTime","secondFrom","secondTo","Math","floor","programPublicKey","PublicKey","isStop","confirmedSignatureInfos","fetchSignatures","info","fetchConfirmTransaction","ParsedType","SECOND_PER_MILLISECOND","TimeFormat","DateHelper","milliSeconds","valueOf","setMilliSeconds","seconds","date","ymd","YMD","ymdFrom","ymdTo","dates","dateFrom","fromYmd","dateTo","addDay","dateFormat","subtractDay","dayAmount","fromSeconds","add","struct","require","TRANSLOG_PROGRAM_DATA_SCHEMA","key","SwapActionType","ACTION_TYPE","Route","SwapTranslogService","constructor","solana","parseAction","transLog","funcFilter","transLogs","lastSignatureTmp","confirmedTrans","fetchTransactions","trans","transaction","log","parseTransLog","meta","postTokenBalances","preTokenBalances","postBalances","preBalances","innerInstructionData","innerInstructions","instructions","instructionData","mapAccount","parseAccountInfo","accountKeys","isParsedInstruction","parseListActionTransfer","parsed","actions","actionTransfer","action","actionParsed","Transfer","parsedAction","parseActionTransfer","parsedTransfer","amountTransfer","mapAccountInfo","accountIndex","uiTokenAmount","pubkey","accountData","String","programDataEncode","dataBuffer","base58","programDataDecode","fromBuffer","Buffer","code","filterFunction","fetchHistorySwap","isLoadMore","swapAddress","historySwap","myWalletAddress","getAddress","transLogService","transLogsData","collect","historyItem","lastAction","firstAction","transactionId","amountRow","setAmountRow","fetchHistory","unwrap","Table","columns","dataSource","pagination","rowClassName","scroll","x","currentTransactionDataLength","setBid","setAsk","checkIsSenLpCome","paddingBottom","lg","md","xs","configureStore","middleware","getDefaultMiddleware","bigintSerializationMiddleware","devTools","reducer","Page","UIProvider","antd","MintProvider","PoolProvider","AccountProvider","WalletProvider","Provider","store","model","widgetConfig","Widget","SOLVARS","sntrAddress","sntrPoolAddress","taxmanAddress","DEFAULT_APP_ID","devApp","author","email","supportedViews","split","view","trim","tags","verified","defaultAppId","extra","senreg","register","sntr","DELIMITER","PRESET","tokenize","context","minlength","DOCUMENT","field","tokenMap","engine","cluster","queue","_init","resolve","tokenList","TokenListProvider","filterByChainId","getList","supplementary","Document","doc","shift","addr","tokens","result","findIndex","SingleFlightCache","DEFAULT_CACHE_CONFIG","mapCache","ttl","DEFAULT_SINGLE_FLIGHT_CONFIG","calls","cache","DataLoader","instanceKey","JSON","stringify","mapInstance","instance","newSingleFlight","SingleFlight","requestKey","singleFlight","getSingleFlight","newRequest","RequestQueue","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","cacheData","isFetch","request","reject","fetch","validateLimit","addRequestQueue","createTimeLogs","response","resolves","catch","rejects","finally","fetchRequestQueue","clearInterval","now","resolveQueue","rejectQueue","appName","prototype","toJSON","serializableCheck","isSerializable","isArray","obj","proto","getPrototypeOf","isPlainObject","getNetwork","KEY","driver","localStorage","convert","parse","getItem","setItem","clear","asyncWait","ms","num","delimiter","addressOrTxId","isFinite","numbro","seed","hash","random","charCodeAt","rgb"],"sourceRoot":""}