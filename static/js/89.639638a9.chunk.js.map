{"version":3,"file":"static/js/89.639638a9.chunk.js","mappings":"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","sources":["app/shared/components/numericInput.tsx","app/page/chart/chart.tsx","app/page/chart/GroupAvatar.tsx","app/page/chart/index.tsx","app/components/swapButton.tsx","app/helper/router.ts","app/helper/oracle.ts","app/components/swapInfo.tsx","app/page/swap/swapActions.tsx","app/helper/cgk.ts","app/model/bid.controller.ts","app/components/selection/search.tsx","app/components/selection/mint.tsx","app/components/selection/pool.tsx","app/components/selection/mintSelection.tsx","app/components/selection/index.tsx","app/components/bid/index.tsx","app/model/ask.controller.ts","app/components/ask/index.tsx","app/components/refreshButton.tsx","app/components/settings/slippage.tsx","app/components/settings/advanced.tsx","app/model/settings.controller.ts","app/components/settings/index.tsx","app/page/swap/swapSettings.tsx","app/model/route.controller.ts","app/components/swap.tsx","app/page/swap/swapForm.tsx","app/shared/hooks/useTokenProvider.ts","app/shared/components/mint/mintAvatar.tsx","app/page/swap/tokenInfo.tsx","app/page/swap/index.tsx","app/page/history/statusTag.tsx","app/page/history/column.tsx","app/page/history/index.tsx","app/page/index.tsx","app/model/main.controller.tsx","app/widget/index.tsx","app/model/index.ts","app/configs/manifest.config.ts","app/configs/sol.config.ts","app/bootstrap.app.tsx","app/configs/index.ts","os/configs/index.ts","os/store/accounts.reducer.ts","os/store/index.ts","os/store/mints.reducer.ts","os/store/page.reducer.ts","os/store/pools.reducer.ts","os/store/search.reducer.ts","os/store/ui.reducer.ts","os/store/wallet.reducer.ts","shared/dataloader/index.ts","shared/runtime.ts","shared/util.ts"],"sourcesContent":["import React, { useState, forwardRef, useCallback, useRef } from 'react'\n\nimport { Input, Tooltip, Space } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nlet timeoutId: ReturnType<typeof setTimeout> | undefined\n\nconst NumericInput = forwardRef(\n  ({ max, onChange, ...props }: any, ref: any) => {\n    const [error, setError] = useState('')\n    const [cursor, setCursor] = useState<number | null>(null)\n    const innerRef = useRef(ref)\n\n    // Handle amount\n    const onAmount = useCallback(\n      (val: string) => {\n        const onError = (er: string) => {\n          if (timeoutId) {\n            clearTimeout(timeoutId)\n            timeoutId = undefined\n          }\n          setError(er)\n          timeoutId = setTimeout(() => setError(''), 500)\n        }\n        const reg = /^\\d*(\\.\\d*)?$/\n        if (!reg.test(val)) return onError('Invalid character')\n        if (max && parseFloat(val) > parseFloat(max))\n          return onError('Not enough balance')\n        return onChange(val)\n      },\n      [max, onChange],\n    )\n    // Handle cursor\n    innerRef?.current?.setSelectionRange(cursor, cursor)\n    return (\n      <Tooltip\n        title={\n          <Space>\n            <IonIcon name=\"warning\" />\n            {error}\n          </Space>\n        }\n        visible={!!error}\n      >\n        <Input\n          {...props}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setCursor(e.target.selectionStart)\n            onAmount(e.target.value || '')\n          }}\n          ref={innerRef}\n        />\n      </Tooltip>\n    )\n  },\n)\n\nexport default NumericInput\n","import { useCallback, useState, useRef, useEffect } from 'react'\nimport Chart from 'chart.js'\nimport isEqual from 'react-fast-compare'\n\nimport { numeric } from 'shared/util'\ninterface Props {\n  labels?: (number | string)[]\n  chartData?: (number | string)[]\n  configs?: { backgroundColor?: string } & object\n  type?: string\n  disableAxe?: boolean\n  chartHeight?: string\n  chartId?: string\n}\n\nconst DEFAULT_BACKGROUND_COLOR = '#dadada'\n\nconst SenChart = ({\n  chartData = [],\n  labels = [],\n  type = 'line',\n  configs,\n  disableAxe = false,\n  chartId = 'sen_chart',\n}: Props) => {\n  const { backgroundColor } = configs || {}\n  const [isRebuildChart, setRebuildChart] = useState<boolean>(false)\n\n  const formatData = useCallback(\n    (\n      data: Array<number | number[] | undefined | null | any>,\n      label: Array<string | number>,\n      background?: string | CanvasGradient | undefined,\n    ): Chart.ChartData => ({\n      labels: label,\n      datasets: [{ ...configs, data, backgroundColor: background }],\n    }),\n    [configs],\n  )\n  // use a ref to store the chart instance since it it mutable\n  const chartRef = useRef<Chart | null>(null)\n\n  // callback creates the chart on the canvas element\n  const canvasCallback = (canvas: HTMLCanvasElement | null) => {\n    if (!canvas) return\n    const ctx = canvas.getContext('2d')\n    if (ctx && !isRebuildChart) {\n      // create new chart\n      chartRef.current = new Chart(ctx, {\n        type: type,\n        data: {\n          labels: [],\n          datasets: [\n            {\n              data: [],\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            xAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                },\n              },\n            ],\n            yAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                  beginAtZero: true,\n                  maxTicksLimit: 8,\n                  callback: function (value, index, values) {\n                    return numeric(value).format('0,0.[0]a')\n                  },\n                },\n              },\n            ],\n          },\n          plugins: {\n            legend: false,\n          },\n          hover: {\n            onHover: (event, elements) => {\n              const target = document.getElementById(chartId)\n              if (!target) return\n              target.style.cursor = elements[0] ? 'pointer' : 'default'\n            },\n          },\n        },\n      })\n      setRebuildChart(true)\n    }\n  }\n\n  const getBackground = useCallback(() => {\n    if (!chartRef || !backgroundColor) return DEFAULT_BACKGROUND_COLOR\n    const ctx = chartRef?.current?.canvas?.getContext('2d')\n    const gradient = ctx?.createLinearGradient(0, 0, 0, 180)\n    gradient?.addColorStop(0, backgroundColor)\n    gradient?.addColorStop(1, `${backgroundColor}00`)\n    const background = type === 'line' ? gradient : backgroundColor\n    return background\n  }, [backgroundColor, type])\n\n  useEffect(() => {\n    const chartInstance = chartRef.current\n    const dataInstace = chartInstance?.data.datasets?.find(({ data }) => data)\n    const compareData = isEqual(dataInstace?.data, chartData)\n    if (chartInstance && !compareData) {\n      chartInstance.data = formatData(chartData, labels, getBackground())\n      chartInstance?.update()\n    }\n  }, [chartData, formatData, getBackground, labels])\n\n  return <canvas id={chartId} height=\"180px\" ref={canvasCallback}></canvas>\n}\n\nexport default SenChart\n","import { ReactNode } from 'react'\n\nimport { Avatar, AvatarProps } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst GroupAvatar = ({\n  icons = [],\n  defaultIcon = <IonIcon name=\"help-outline\" />,\n  ...rest\n}: {\n  icons?: (string | undefined)[]\n  defaultIcon?: ReactNode\n} & AvatarProps) => {\n  return (\n    <Avatar.Group>\n      {icons?.map((iconURI, idx) => (\n        <Avatar\n          src={iconURI}\n          key={idx}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n          {...rest}\n        >\n          {defaultIcon}\n        </Avatar>\n      ))}\n    </Avatar.Group>\n  )\n}\n\nexport default GroupAvatar\n","import { useSelector } from 'react-redux'\n\nimport { Card, Col, Radio, Row, Space, Typography } from 'antd'\nimport { AppState } from 'app/model'\nimport SenChart from './chart'\nimport GroupAvatar from './GroupAvatar'\nimport { useMemo } from 'react'\n\nconst CHART_CONFIGS = {\n  color: '#5D6CCF',\n  radius: 0,\n  hitRadius: 14,\n  tooltip: 'TVL',\n  transparent: 'transparent',\n}\nconst DEFAULT_TOKEN = 'UNKN'\n\nconst SwapChart = () => {\n  const swapChartConfigs = {\n    borderColor: CHART_CONFIGS.transparent,\n    borderRadius: CHART_CONFIGS.radius,\n    pointRadius: CHART_CONFIGS.radius,\n    tooltip: CHART_CONFIGS.tooltip,\n    pointHitRadius: CHART_CONFIGS.hitRadius,\n    pointHoverRadius: CHART_CONFIGS.radius,\n    backgroundColor: CHART_CONFIGS.color,\n  }\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n\n  const icons = useMemo(() => {\n    return [bidData.mintInfo?.logoURI, askData.mintInfo?.logoURI]\n  }, [askData.mintInfo?.logoURI, bidData.mintInfo?.logoURI])\n  const symbols = useMemo(() => {\n    return [\n      bidData.mintInfo?.symbol || DEFAULT_TOKEN,\n      askData.mintInfo?.symbol || DEFAULT_TOKEN,\n    ]\n  }, [askData.mintInfo?.symbol, bidData.mintInfo?.symbol])\n\n  return (\n    <Card bordered={false} className=\"card-swap\" bodyStyle={{ paddingTop: 28 }}>\n      <Row gutter={[24, 24]}>\n        <Col flex=\"auto\">\n          <Space direction=\"vertical\" size={20}>\n            <Space size={4} align=\"baseline\">\n              <GroupAvatar icons={icons} size={24} />\n              <Typography.Text>{symbols.join('/')}</Typography.Text>\n            </Space>\n            <Typography.Title level={2}>0.24 </Typography.Title>\n          </Space>\n        </Col>\n        <Col>\n          <Radio.Group defaultValue=\"week\">\n            <Radio.Button value=\"day\">Day</Radio.Button>\n            <Radio.Button value=\"week\">Week</Radio.Button>\n            <Radio.Button value=\"month\">Month</Radio.Button>\n            <Radio.Button value=\"year\">Year</Radio.Button>\n          </Radio.Group>\n        </Col>\n        <Col span={24}>\n          <SenChart\n            chartData={[12, 123, 141, 2, 512, 12, 113]}\n            labels={['01/12', '02/12', '03/12', '04/12', '05/12']}\n            configs={swapChartConfigs}\n          />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapChart\n","import { useCallback, useState } from 'react'\nimport { utils } from '@senswap/sen-js'\nimport { useSelector } from 'react-redux'\n\nimport { Button } from 'antd'\nimport { HopData } from './preview/hop'\nimport { AppState } from 'app/model'\nimport { useWallet } from 'senhub/providers'\nimport { explorer } from 'shared/util'\n\nconst DECIMALS = BigInt(1000000000)\n\nconst SwapButton = ({\n  hops,\n  onCallback = () => {},\n  disabled = false,\n  wrapAmount = BigInt(0),\n}: {\n  hops: HopData[]\n  onCallback?: () => void\n  disabled?: boolean\n  wrapAmount: bigint\n}) => {\n  const [loading, setLoading] = useState(false)\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const { slippage } = useSelector((state: AppState) => state.settings)\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  /**\n   * Swap function\n   */\n  const handleSwap = useCallback(async () => {\n    const { swap, splt, wallet } = window.sentre\n    if (!wallet) return\n    // Synthetize routings\n    const routingAddresses = await Promise.all(\n      hops.map(\n        async ({\n          srcMintInfo: { address: srcMintAddress },\n          dstMintInfo: { address: dstMintAddress },\n          poolData: { address: poolAddress },\n        }) => {\n          const srcAddress = await splt.deriveAssociatedAddress(\n            walletAddress,\n            srcMintAddress,\n          )\n          const dstAddress = await splt.deriveAssociatedAddress(\n            walletAddress,\n            dstMintAddress,\n          )\n          return {\n            poolAddress: poolAddress,\n            srcAddress: srcAddress,\n            dstAddress: dstAddress,\n          }\n        },\n      ),\n    )\n    // Compute limit\n    const {\n      srcMintInfo: { decimals: bidDecimals },\n    } = hops[0]\n    const bidAmount = utils.decimalize(bidData.amount, bidDecimals)\n    const {\n      dstMintInfo: { decimals: askDecimals },\n    } = hops[hops.length - 1]\n    const askAmount = utils.decimalize(askData.amount, askDecimals)\n    const limit =\n      (askAmount * (DECIMALS - utils.decimalize(slippage, 9))) / DECIMALS\n    // Execute swap\n    return await swap.route(bidAmount, limit, routingAddresses, wallet)\n  }, [hops, bidData, askData, slippage, walletAddress])\n\n  const handleWrapSol = async () => {\n    if (!wrapAmount) return\n    const { swap, wallet } = window.sentre\n    if (!wallet) return\n    return await swap.wrapSol(wrapAmount, wallet)\n  }\n\n  const onSwap = async () => {\n    try {\n      setLoading(true)\n      await handleWrapSol()\n      const { txId } = (await handleSwap()) || {}\n      window.notify({\n        type: 'success',\n        description: `Swap successfully. Click to view details.`,\n        onClick: () => window.open(explorer(txId || ''), '_blank'),\n      })\n      return onCallback()\n    } catch (er: any) {\n      return window.notify({ type: 'error', description: er.message })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Button\n      type=\"primary\"\n      onClick={onSwap}\n      disabled={disabled}\n      loading={loading}\n      block\n    >\n      Swap\n    </Button>\n  )\n}\n\nexport default SwapButton\n","import { account, PoolData } from '@senswap/sen-js'\n\nimport { curve } from './oracle'\nimport { State as BidState } from 'app/model/bid.controller'\nimport { State as AskState } from 'app/model/ask.controller'\nimport { inverseCurve } from './oracle'\nimport { HopData } from 'app/components/preview/hop'\nimport TokenProvider from 'os/providers/tokenProvider'\n\nconst POOL_ACTIVITY_STATUS = 1\nconst LIMIT_POOL_IN_ROUTE = 3\nconst TOKEN_PROVIDER = new TokenProvider()\n\nexport type ExtendedPoolData = PoolData & { address: string }\nexport type GraphPool = Map<string, Map<string, PoolData>>\nexport type RouteTrace = {\n  pools: string[]\n  mints: string[]\n}\nexport class BestRouteInfo {\n  hops: HopData[] = []\n  amounts: string[] = []\n  amount: string = ''\n}\n\n/**\n * Extract reserve from pool data\n * @param extractReserve\n * @param poolData\n * @returns\n */\nexport const extractReserve = (\n  mintAddress: string,\n  poolData: PoolData,\n): bigint => {\n  const { mint_a, mint_b, reserve_a, reserve_b } = poolData\n  if (mintAddress === mint_a) return reserve_a\n  if (mintAddress === mint_b) return reserve_b\n  throw new Error('Cannot find reserves')\n}\n\n/**\n *\n * @param param0\n * @param param1\n * @returns\n */\ntype Point = { point: bigint }\nexport const pointSorting = (\n  { point: firstPoint }: Point,\n  { point: secondPoint }: Point,\n) => {\n  if (firstPoint < secondPoint) return 1\n  if (firstPoint > secondPoint) return -1\n  return 0\n}\n\nexport const buildPoolGraph = (pools: Record<string, PoolData>): GraphPool => {\n  const graph = new Map<\n    /*mint_address*/ string,\n    Map</*pool_address*/ string, PoolData>\n  >()\n  for (const poolAddress in pools) {\n    const pool = pools[poolAddress]\n    if (pool?.state !== POOL_ACTIVITY_STATUS) continue\n    const mints = [pool.mint_a, pool.mint_b]\n    mints.forEach((mint) => {\n      if (!graph.has(mint)) graph.set(mint, new Map<string, PoolData>())\n      graph.get(mint)?.set(poolAddress, pool)\n    })\n  }\n  return graph\n}\n\n// because of Solana is limiting the number of calculation unit, so the system\n// must limit the list pool of root. Currently, the system set 3 pools in route\nexport const findAllRoute = (\n  routes: Array<RouteTrace>,\n  graph: GraphPool,\n  startMint: string,\n  endMint: string,\n  pathTrace: RouteTrace,\n) => {\n  const { pools, mints } = pathTrace\n  if (pools.length === LIMIT_POOL_IN_ROUTE) return\n  const mapPool = graph.get(startMint)\n  mapPool?.forEach((pool, poolAddress) => {\n    if (pools.includes(poolAddress)) return\n\n    let { mint_b: askMint } = pool\n    if (pool.mint_a !== startMint) {\n      askMint = pool.mint_a\n    }\n    if (mints.includes(askMint)) return\n\n    const newPathTrace = {\n      pools: [...pools, poolAddress],\n      mints: [...mints, askMint],\n    }\n    if (askMint === endMint) {\n      routes.push(newPathTrace)\n      return\n    }\n    findAllRoute(routes, graph, askMint, endMint, newPathTrace)\n  })\n}\n\nconst parseHops = async (\n  mapPoolData: Record<string, PoolData>,\n  pools: string[],\n  bidData: BidState,\n  askData: AskState,\n): Promise<HopData[]> => {\n  const bidMintAddress = bidData.mintInfo?.address\n  const askMintAddress = askData.mintInfo?.address\n  if (!account.isAddress(bidMintAddress) || !account.isAddress(askMintAddress))\n    return []\n\n  const hops: HopData[] = []\n  let srcMintAddress = bidMintAddress\n  let dstMintAddress = ''\n  for (const poolAddress of pools) {\n    const poolData = mapPoolData[poolAddress]\n    const { mint_a, mint_b } = poolData\n\n    if (srcMintAddress !== mint_a && srcMintAddress !== mint_b) return []\n\n    dstMintAddress = srcMintAddress === mint_a ? mint_b : mint_a\n    const srcMintInfo = await TOKEN_PROVIDER.findByAddress(srcMintAddress)\n    const dstMintInfo = await TOKEN_PROVIDER.findByAddress(dstMintAddress)\n    if (!srcMintInfo || !dstMintInfo) return []\n\n    const hop: HopData = {\n      poolData: { address: poolAddress, ...poolData },\n      srcMintInfo,\n      dstMintInfo,\n    }\n    srcMintAddress = dstMintAddress\n    hops.push(hop)\n  }\n  return hops\n}\n\nexport const findBestRouteFromBid = async (\n  mapPoolData: Record<string, PoolData>,\n  routes: RouteTrace[],\n  bidData: BidState,\n  askData: AskState,\n): Promise<BestRouteInfo> => {\n  let bestRoute = new BestRouteInfo()\n  for (let route of routes) {\n    const hops = await parseHops(mapPoolData, route.pools, bidData, askData)\n    let amount = bidData.amount\n    const amounts = new Array<string>()\n\n    hops.forEach((hop) => {\n      amounts.push(amount)\n      amount = curve(amount, hop)\n    })\n    const maxAskAmount = Number(bestRoute.amount)\n    if (Number(amount) > maxAskAmount) {\n      bestRoute = {\n        hops,\n        amounts,\n        amount,\n      }\n    }\n  }\n  return bestRoute\n}\n\nexport const findBestRouteFromAsk = async (\n  mapPoolData: Record<string, PoolData>,\n  routes: RouteTrace[],\n  bidData: BidState,\n  askData: AskState,\n): Promise<BestRouteInfo> => {\n  let bestRoute = new BestRouteInfo()\n  for (let route of routes) {\n    const hops = await parseHops(mapPoolData, route.pools, bidData, askData)\n    const reversedHops = [...hops].reverse()\n    let amount = askData.amount\n    const amounts = new Array<string>()\n\n    for (const reversedHop of reversedHops) {\n      amount = inverseCurve(amount, reversedHop)\n      if (Number(amount) < 0) break\n      amounts.unshift(amount)\n    }\n    if (Number(amount) < 0) continue\n\n    const minBidAmount = Number(bestRoute.amount)\n    if (!minBidAmount || Number(amount) < minBidAmount) {\n      bestRoute = {\n        hops,\n        amounts,\n        amount,\n      }\n    }\n  }\n  return bestRoute\n}\n","import { utils, Swap } from '@senswap/sen-js'\nimport { HopData } from 'app/components/preview/hop'\nimport { extractReserve } from './router'\n\nexport const ORACLE = Swap.oracle\n\nexport const curve = (bidAmount: string, data: HopData): string => {\n  const {\n    srcMintInfo: { address: srcMintAddress, decimals: bidDecimals },\n    dstMintInfo: { address: dstMintAddress, decimals: askDecimals },\n  } = data\n  const { fee_ratio, tax_ratio } = data.poolData\n  const bidReserve = extractReserve(srcMintAddress, data.poolData)\n  const askReserve = extractReserve(dstMintAddress, data.poolData)\n  if (!bidReserve || !askReserve) return '0'\n\n  const { askAmount } = ORACLE.swap(\n    utils.decimalize(bidAmount, bidDecimals),\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return utils.undecimalize(askAmount, askDecimals)\n}\n\nexport const inverseCurve = (askAmount: string, data: HopData): string => {\n  const {\n    srcMintInfo: { address: srcMintAddress, decimals: bidDecimals },\n    dstMintInfo: { address: dstMintAddress, decimals: askDecimals },\n  } = data\n  const { fee_ratio, tax_ratio } = data.poolData\n  const bidReserve = extractReserve(srcMintAddress, data.poolData)\n  const askReserve = extractReserve(dstMintAddress, data.poolData)\n  const bidAmount = ORACLE.inverseSwap(\n    utils.decimalize(askAmount, askDecimals),\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return utils.undecimalize(bidAmount, bidDecimals)\n}\n\nexport const slippage = (bidAmount: string, data: HopData): bigint => {\n  const {\n    srcMintInfo: { address: srcMintAddress, decimals: bidDecimals },\n    dstMintInfo: { address: dstMintAddress },\n  } = data\n  const { fee_ratio, tax_ratio } = data.poolData\n  const bidReserve = extractReserve(srcMintAddress, data.poolData)\n  const askReserve = extractReserve(dstMintAddress, data.poolData)\n\n  const slippage = ORACLE.slippage(\n    utils.decimalize(bidAmount, bidDecimals),\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return slippage\n}\n","import { Fragment, ReactNode, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { DEFAULT_WSOL, utils } from '@senswap/sen-js'\n\nimport { Avatar, Col, Row, Space, Typography } from 'antd'\n\nimport { slippage } from 'app/helper/oracle'\nimport { AppState } from 'app/model'\nimport { useAccount } from 'senhub/providers'\nimport { numeric } from 'shared/util'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst ExtraTypography = ({\n  label = '',\n  content = '',\n}: {\n  label?: string\n  content?: string | ReactNode\n}) => {\n  return (\n    <Row>\n      <Col flex=\"auto\">\n        <Typography.Text type=\"secondary\">{label}</Typography.Text>\n      </Col>\n      <Col>\n        <span>{content}</span>\n      </Col>\n    </Row>\n  )\n}\nconst RouteAvatar = ({\n  icons = ['', ''],\n  size = 24,\n  defaultIcon = <IonIcon size={size} name=\"help-outline\" />,\n}: {\n  icons?: (string | undefined)[]\n  defaultIcon?: ReactNode\n  size?: number\n}) => {\n  return (\n    <Space>\n      {icons?.map((icon, idx) => (\n        <Fragment key={idx}>\n          <Avatar src={icon} size={size}>\n            {defaultIcon}\n          </Avatar>\n          {icons.length > idx + 1 && <IonIcon name=\"chevron-forward-outline\" />}\n        </Fragment>\n      ))}\n    </Space>\n  )\n}\n\nconst SwapInfo = () => {\n  const { route } = useSelector((state: AppState) => state.route)\n  const bidData = useSelector((state: AppState) => state.bid)\n  const { accounts } = useAccount()\n  const { mintInfo: bidMintInfo } = bidData\n\n  const wrapAmount = useMemo(() => {\n    const bidAccount = accounts[bidData.accountAddress]\n    const bidBalance = bidAccount?.amount || BigInt(0)\n\n    if (!bidMintInfo || !Number(bidData.amount)) return BigInt(0)\n    if (bidMintInfo.address !== DEFAULT_WSOL) return BigInt(0)\n\n    const bidAmount = utils.decimalize(bidData.amount, bidMintInfo.decimals)\n    if (bidAmount <= bidBalance) return BigInt(0)\n\n    return bidAmount - bidBalance\n  }, [accounts, bidData.accountAddress, bidData.amount, bidMintInfo])\n  const hopLastRoute = route?.hops.at(-1) // get lasted route hop\n  const bidAmoutLastRoute = route?.amounts.at(-1) || '' // laseted route bid amount\n\n  // const askAmountLastRoute = useMemo(() => {\n  //   if (!hopLastRoute) return 0\n  //   return curve(bidAmoutLastRoute, hopLastRoute)\n  // }, [bidAmoutLastRoute, hopLastRoute])\n  const slippageRate = useMemo(() => {\n    if (!hopLastRoute) return 0\n    return utils.undecimalize(slippage(bidAmoutLastRoute, hopLastRoute), 9)\n  }, [bidAmoutLastRoute, hopLastRoute])\n\n  const routeIcons = useMemo(() => {\n    if (!route?.hops) return\n    const { logoURI } = bidMintInfo || {}\n    let listRouteIcons = [logoURI]\n    for (const hop of route?.hops) {\n      const {\n        dstMintInfo: { logoURI },\n      } = hop\n      if (logoURI) listRouteIcons.push(logoURI)\n    }\n    return listRouteIcons\n  }, [bidMintInfo, route?.hops])\n\n  console.log(route, wrapAmount, route?.hops.at(-1), 'route')\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Price impart\"\n          content={`${numeric(Number(slippageRate) * 100).format('0.[0000]')}%`}\n        />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography label=\"Price\" content=\"0 SOL = 0 ETH\" />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography label=\"Inverse price\" content=\"0 SOL = 0 ETH\" />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography label=\"Slippage toleance\" content=\" 0.5%\" />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography label=\"Protocol Fee\" content=\"0.25%\" />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Route\"\n          content={<RouteAvatar icons={routeIcons} />}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default SwapInfo\n","import { DEFAULT_WSOL, utils } from '@senswap/sen-js'\nimport { Card, Col, Row, Typography } from 'antd'\nimport SwapButton from 'app/components/swapButton'\nimport SwapInfo from 'app/components/swapInfo'\nimport { AppState } from 'app/model'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAccount } from 'senhub/providers'\n\nconst SwapActions = () => {\n  const { route } = useSelector((state: AppState) => state.route)\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const { accounts } = useAccount()\n\n  const wrapAmount = useMemo(() => {\n    const bidMint = bidData.mintInfo\n    const bidAccount = accounts[bidData.accountAddress]\n    const bidBalance = bidAccount?.amount || BigInt(0)\n\n    if (!bidMint || !Number(bidData.amount)) return BigInt(0)\n    if (bidMint.address !== DEFAULT_WSOL) return BigInt(0)\n\n    const bidAmount = utils.decimalize(bidData.amount, bidMint.decimals)\n    if (bidAmount <= bidBalance) return BigInt(0)\n\n    return bidAmount - bidBalance\n  }, [accounts, bidData.accountAddress, bidData.amount, bidData.mintInfo])\n\n  const disabled =\n    !route?.hops.length ||\n    !parseFloat(bidData.amount) ||\n    parseFloat(bidData.amount) < 0 ||\n    !parseFloat(askData?.amount) ||\n    parseFloat(askData?.amount) < 0\n\n  return (\n    <Card bordered={false}>\n      <Row gutter={[24, 24]}>\n        <Col span={24}>\n          <Typography.Title level={5}>Review & Swap</Typography.Title>\n        </Col>\n        <Col span={24}>\n          <SwapInfo />\n        </Col>\n        <Col span={24}>\n          <SwapButton\n            hops={route?.hops || []}\n            wrapAmount={wrapAmount}\n            disabled={disabled}\n          />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapActions\n","import TokenProvider from 'os/providers/tokenProvider'\nimport { fetchCGK } from 'shared/helper'\n\nexport interface MintInfo {\n  address: string\n  symbol: string\n  price: number\n  decimals: number\n}\n\nconst DEFAULT_TOKEN_INFO = {\n  address: '',\n  chainId: 0,\n  decimals: 0,\n  name: '',\n  symbol: 'TOKEN',\n  extensions: undefined,\n  logoURI: '',\n  tags: [],\n}\n\nconst TOKEN_PROVIDER = new TokenProvider()\n\nconst cgk = {\n  getMintInfos: async (mintsAddress: string[]) => {\n    if (!TOKEN_PROVIDER || !mintsAddress) return\n    const promise = mintsAddress.map(async (mint) => {\n      let tokenInfo = await TOKEN_PROVIDER.findByAddress(mint)\n      if (!tokenInfo) tokenInfo = DEFAULT_TOKEN_INFO\n      const { address, symbol, decimals, extensions } = tokenInfo\n      const ticket = extensions?.coingeckoId\n\n      if (!ticket) return { address, symbol, decimals, price: 0 } // some mints don't have a ticket, so the price in cgk is 0\n\n      const { price } = await fetchCGK(ticket)\n      return { address, symbol, decimals, price }\n    })\n    const mintsDetails = await Promise.all(promise)\n    const mapMintsDetails = new Map<string, MintInfo>()\n    mintsDetails.forEach((mint) => {\n      mapMintsDetails.set(mint.address, mint)\n    })\n    return mapMintsDetails\n  },\n}\n\nexport default cgk\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { TokenInfo } from '@solana/spl-token-registry'\n\nexport type State = {\n  amount: string // Desired amount\n  accountAddress: string // Associated account to the selected token\n  mintInfo?: TokenInfo // Selected token\n  poolAddress?: string // Selected pool (for advanced mode)\n  poolAddresses: string[] // List of available pools\n  priority: number\n}\n\nconst NAME = 'sen-swap'\nconst initialState: State = {\n  amount: '',\n  accountAddress: '',\n  poolAddresses: [],\n  priority: 0,\n}\n\n/**\n * Actions\n */\n\nexport const updateBidData = createAsyncThunk<\n  Partial<State>,\n  Partial<State> & { prioritized?: boolean; reset?: boolean },\n  { state: any }\n>(\n  `${NAME}/updateBidData`,\n  async ({ prioritized, reset, ...bidData }, { getState }) => {\n    const {\n      bid: { priority: prevPriority },\n      ask: { priority: refPriority },\n    } = getState()\n    if (Number(bidData.amount) < 0) bidData.amount = undefined\n    const priority = reset ? 0 : prioritized ? refPriority + 1 : prevPriority\n    return { ...bidData, priority }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateBidData.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import React, { useCallback, useEffect, useState } from 'react'\n\nimport { Card, Input, Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { TokenInfo } from '@solana/spl-token-registry'\nimport { useMint } from 'senhub/providers'\n\nconst KEYSIZE = 3\n\nconst Search = ({\n  onChange,\n  isSupportedMint,\n  disabled = false,\n}: {\n  onChange: (data: TokenInfo[] | null) => void\n  isSupportedMint: (mintAddress: string) => boolean\n  disabled?: boolean\n}) => {\n  const [keyword, setKeyword] = useState('')\n  const { tokenProvider } = useMint()\n\n  const search = useCallback(async () => {\n    if (!keyword || keyword.length < KEYSIZE) return onChange(null)\n    const raw = await tokenProvider.find(keyword)\n    const data = raw.filter(({ address }) => isSupportedMint(address))\n    return onChange(data)\n  }, [keyword, tokenProvider, onChange, isSupportedMint])\n\n  useEffect(() => {\n    search()\n  }, [search])\n\n  return (\n    <Card\n      className=\"card-child bg-white\"\n      bodyStyle={{ padding: 8 }}\n      bordered={false}\n    >\n      <Input\n        placeholder=\"Search\"\n        value={keyword}\n        size=\"small\"\n        bordered={false}\n        suffix={\n          <Button\n            type=\"text\"\n            style={{ marginRight: -7 }}\n            size=\"small\"\n            onClick={keyword ? () => setKeyword('') : () => {}}\n            icon={\n              <IonIcon name={keyword ? 'close-outline' : 'search-outline'} />\n            }\n            disabled={disabled}\n          />\n        }\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          setKeyword(e.target.value)\n        }\n        disabled={disabled}\n      />\n    </Card>\n  )\n}\n\nexport default Search\n","import React from 'react'\n\nimport {\n  Row,\n  Col,\n  Space,\n  Avatar,\n  Typography,\n  Card,\n  Divider,\n  Button,\n} from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Mint = ({\n  logoURI,\n  symbol,\n  name,\n  onClick,\n  advanced = false,\n  onAdvanced = () => {},\n  active = false,\n}: {\n  logoURI: string | undefined\n  symbol: string\n  name: string\n  onClick: () => void\n  advanced?: boolean\n  onAdvanced?: () => void\n  active?: boolean\n}) => {\n  const onPools = (e: React.MouseEvent) => {\n    e.stopPropagation()\n    return onAdvanced()\n  }\n\n  return (\n    <Card\n      className=\"card-child bg-white\"\n      bodyStyle={{ padding: `8px 16px`, cursor: 'pointer' }}\n      bordered={active}\n      onClick={onClick}\n      hoverable\n    >\n      <Row gutter={[16, 16]} wrap={false}>\n        <Col flex=\"auto\">\n          <Space size={12} style={{ marginLeft: -4 }}>\n            <Avatar src={logoURI} size={32}>\n              <IonIcon name=\"diamond-outline\" />\n            </Avatar>\n            <Typography.Text style={{ margin: 0 }}>{symbol}</Typography.Text>\n            <Divider type=\"vertical\" style={{ margin: 0 }} />\n            <Typography.Text\n              type=\"secondary\"\n              style={{ margin: 0, fontSize: 12 }}\n            >\n              {name}\n            </Typography.Text>\n          </Space>\n        </Col>\n        <Col>\n          {advanced ? (\n            <Button\n              type=\"text\"\n              className=\"contained\"\n              icon={<IonIcon name=\"arrow-forward-circle-outline\" />}\n              style={{ marginRight: -7 }}\n              onClick={onPools}\n            >\n              View Pools\n            </Button>\n          ) : null}\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default Mint\n","import { useCallback, useEffect, useState } from 'react'\nimport { account, PoolData, utils } from '@senswap/sen-js'\nimport { TokenInfo } from '@solana/spl-token-registry'\n\nimport { Space, Avatar, Typography, Card, Divider, Tooltip } from 'antd'\nimport { useMint } from 'senhub/providers'\nimport { fetchCGK } from 'shared/helper'\nimport { numeric } from 'shared/util'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Pool = ({\n  value,\n  onClick,\n  active = false,\n}: {\n  value: PoolData | undefined\n  onClick: () => void\n  active?: boolean\n}) => {\n  const [tvl, setTVL] = useState(0)\n  const [tokenInfos, setTokenInfos] = useState<Array<TokenInfo | any>>([\n    {},\n    {},\n    {},\n  ])\n  const { tokenProvider } = useMint()\n\n  // Get in-pool token info\n  const getTokenInfos = useCallback(async () => {\n    const { mint_a, mint_b } = value || {}\n    const tokenInfos = await Promise.all(\n      [mint_a, mint_b].map((mintAddress) => {\n        if (!account.isAddress(mintAddress)) return {}\n        return tokenProvider.findByAddress(mintAddress)\n      }),\n    )\n    const formatTokenInfos = tokenInfos.map((token) => token || {})\n    return setTokenInfos(formatTokenInfos)\n  }, [value, tokenProvider])\n  // Compute total locked value\n  const getTVL = useCallback(async () => {\n    const { reserve_a, reserve_b } = value || {}\n    const reserves = [reserve_a, reserve_b]\n    const decimals = tokenInfos.map(({ decimals }) => decimals)\n    const data = await Promise.all(\n      tokenInfos.map(({ extensions }) => {\n        if (!extensions?.coingeckoId) return {} as any\n        return fetchCGK(extensions?.coingeckoId)\n      }),\n    )\n    const prices = data.map(({ price }) => price)\n    let tvl = 0\n    ;[0, 1, 2].forEach((i) => {\n      if (reserves[i] && decimals[i] && prices[i])\n        tvl =\n          tvl +\n          Number(utils.undecimalize(reserves[i] as bigint, decimals[i])) *\n            prices[i]\n    })\n    return setTVL(tvl)\n  }, [tokenInfos, value])\n\n  useEffect(() => {\n    getTokenInfos()\n  }, [getTokenInfos])\n  useEffect(() => {\n    getTVL()\n  }, [getTVL])\n\n  return (\n    <Card\n      bodyStyle={{ padding: `8px 12px`, cursor: 'pointer', lineHeight: 1 }}\n      bordered={active}\n      onClick={onClick}\n      hoverable\n    >\n      <Space size={12} style={{ fontSize: 12 }}>\n        <Avatar.Group style={{ marginTop: 4, marginBottom: 4 }}>\n          {tokenInfos.map(({ address, logoURI }, i) => (\n            <Avatar\n              key={address + i}\n              src={logoURI}\n              size={32}\n              style={{ backgroundColor: '#2D3355', border: 'none' }}\n            >\n              <IonIcon name=\"diamond-outline\" />\n            </Avatar>\n          ))}\n        </Avatar.Group>\n        <Typography.Text>\n          {tokenInfos.map(({ symbol }) => symbol).join(' • ')}\n        </Typography.Text>\n        <Divider type=\"vertical\" style={{ margin: 0 }} />\n        <Space size={6}>\n          <Tooltip title=\"The TVL here is roughly estimated and perhaps inaccurate because unknown tokens ain't involved in the computation.\">\n            <Space size={4}>\n              <Typography.Text type=\"secondary\">\n                <IonIcon name=\"information-circle-outline\" />\n              </Typography.Text>\n              <Typography.Text type=\"secondary\">TVL:</Typography.Text>\n            </Space>\n          </Tooltip>\n          <Typography.Text>${numeric(tvl).format('0.[00]a')}</Typography.Text>\n        </Space>\n      </Space>\n    </Card>\n  )\n}\n\nexport default Pool\n","import { useState, useCallback, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { TokenInfo } from '@solana/spl-token-registry'\nimport { account } from '@senswap/sen-js'\nimport LazyLoad from 'react-lazyload'\n\nimport { Row, Col, Typography, Button } from 'antd'\nimport Search from './search'\nimport Mint from './mint'\nimport Pool from './pool'\n\nimport { AppState } from 'app/model'\nimport { extractReserve, pointSorting } from 'app/helper/router'\nimport IonIcon from 'shared/antd/ionicon'\nimport { useMint, usePool } from 'senhub/providers'\n\nexport type SelectionInfo = {\n  mintInfo?: TokenInfo\n  poolAddress?: string\n  poolAddresses: string[]\n}\n\nconst MintSelection = ({\n  value,\n  onChange,\n}: {\n  value: SelectionInfo\n  onChange: (value: SelectionInfo) => void\n}) => {\n  const [tempTokenInfo, setTempTokenInfo] = useState<TokenInfo>()\n  const [mints, setMints] = useState<Array<TokenInfo>>([])\n  const settings = useSelector((state: AppState) => state.settings)\n  const { pools } = usePool()\n  const { tokenProvider } = useMint()\n\n  // Compute mints that appear in all pools\n  const supportedMints = useMemo(() => {\n    if (!pools) return []\n    return Object.keys(pools)\n      .map((poolAddress) => {\n        const { mint_a, mint_b } = pools[poolAddress]\n        return [mint_a, mint_b]\n      })\n      .flat()\n      .filter((item, pos, self) => self.indexOf(item) === pos)\n  }, [pools])\n  const isSupportedMint = useCallback(\n    (mintAddress) => supportedMints.includes(mintAddress),\n    [supportedMints],\n  )\n  // Compoute mint list\n  const onMints = useCallback(\n    async (value: null | Array<TokenInfo>) => {\n      if (value) return setMints(value)\n      const raw = await tokenProvider.all()\n      const allMints = raw.filter(({ address }) => isSupportedMint(address))\n      return setMints(allMints)\n    },\n    [tokenProvider, isSupportedMint],\n  )\n  // Compute available pools\n  const getAvailablePoolAddresses = useCallback(\n    (tokenInfo: TokenInfo | undefined) => {\n      const mintAddress = tokenInfo?.address\n      if (!account.isAddress(mintAddress)) return []\n      return Object.keys(pools).filter((poolAddress) => {\n        const { mint_a, mint_b } = pools[poolAddress]\n        return [mint_a, mint_b].includes(mintAddress)\n      })\n    },\n    [pools],\n  )\n  // Auto pool selection\n  const onAuto = useCallback(() => {\n    const poolAddresses = getAvailablePoolAddresses(tempTokenInfo)\n    return onChange({\n      mintInfo: tempTokenInfo,\n      poolAddress: undefined,\n      poolAddresses,\n    })\n  }, [getAvailablePoolAddresses, tempTokenInfo, onChange])\n\n  /**\n   * Render mint list\n   */\n  const mintList = useMemo(() => {\n    // Return data to parent (users didn't select pool)\n    const onMint = (tokenInfo: TokenInfo) => {\n      const poolAddresses = getAvailablePoolAddresses(tokenInfo)\n      return onChange({\n        mintInfo: tokenInfo,\n        poolAddress: undefined,\n        poolAddresses,\n      })\n    }\n    return (\n      <Row gutter={[16, 16]}>\n        {mints.map((mint, i) => {\n          const { logoURI, symbol, name, address } = mint\n          const { address: currentMintAddress } = value.mintInfo || {}\n          return (\n            <Col span={24} key={name + i}>\n              <LazyLoad height={48} overflow>\n                <Mint\n                  logoURI={logoURI}\n                  symbol={symbol}\n                  name={name}\n                  onClick={() => onMint(mint)}\n                  advanced={settings.advanced}\n                  onAdvanced={() => setTempTokenInfo(mint)}\n                  active={currentMintAddress === address}\n                />\n              </LazyLoad>\n            </Col>\n          )\n        })}\n      </Row>\n    )\n  }, [getAvailablePoolAddresses, onChange, mints, value, settings.advanced])\n\n  /**\n   * Render pool list\n   */\n  const poolList = useMemo(() => {\n    // Return data to parent (users specified a pool)\n    const onPool = (poolAddress: string) => {\n      const poolAddresses = getAvailablePoolAddresses(tempTokenInfo)\n      return onChange({\n        mintInfo: tempTokenInfo,\n        poolAddress,\n        poolAddresses,\n      })\n    }\n    return (\n      <Row gutter={[16, 16]}>\n        {getAvailablePoolAddresses(tempTokenInfo)\n          .map((poolAddress) => ({\n            address: poolAddress,\n            ...pools[poolAddress],\n          }))\n          .map(({ address, ...poolData }) => {\n            const { address: mintAddress } = tempTokenInfo || {}\n            return {\n              address,\n              point: extractReserve(mintAddress as string, poolData),\n            }\n          })\n          .sort(pointSorting)\n          .map(({ address: poolAddress }, i) => {\n            const { poolAddress: currentPoolAddress } = value\n            const poolData = pools[poolAddress]\n            return (\n              <Col span={24} key={poolAddress + i}>\n                <LazyLoad height={56} overflow>\n                  <Pool\n                    value={poolData}\n                    onClick={() => onPool(poolAddress)}\n                    active={poolAddress === currentPoolAddress}\n                  />\n                </LazyLoad>\n              </Col>\n            )\n          })}\n      </Row>\n    )\n  }, [getAvailablePoolAddresses, tempTokenInfo, pools, onChange, value])\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        <Typography.Title level={5}>Token Selection</Typography.Title>\n      </Col>\n      <Col span={24}>\n        <Search\n          onChange={onMints}\n          isSupportedMint={isSupportedMint}\n          disabled={Boolean(tempTokenInfo)}\n        />\n      </Col>\n      <Col span={24}>\n        <Row gutter={[16, 16]} style={{ height: 300, overflow: 'auto' }}>\n          {tempTokenInfo ? (\n            <Col span={24}>\n              <Row gutter={[8, 8]} wrap={false} align=\"middle\">\n                <Col flex=\"auto\">\n                  <Button\n                    type=\"text\"\n                    className=\"contained\"\n                    icon={<IonIcon name=\"arrow-back-outline\" />}\n                    onClick={() => setTempTokenInfo(undefined)}\n                  >\n                    Back\n                  </Button>\n                </Col>\n                <Col>\n                  <Typography.Text type=\"secondary\">\n                    Choose one favorite pool or\n                  </Typography.Text>\n                </Col>\n                <Col>\n                  <Button\n                    type=\"primary\"\n                    icon={<IonIcon name=\"sparkles-outline\" />}\n                    onClick={onAuto}\n                  >\n                    Auto\n                  </Button>\n                </Col>\n              </Row>\n            </Col>\n          ) : null}\n          <Col span={24}>{!tempTokenInfo ? mintList : poolList}</Col>\n          <Col span={24} />\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default MintSelection\n","import { useState, Fragment, useEffect } from 'react'\nimport { forceCheck } from 'react-lazyload'\n\nimport { Row, Col, Avatar, Space, Typography, Divider, Modal } from 'antd'\nimport MintSelection, { SelectionInfo } from './mintSelection'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Selection = ({\n  value,\n  onChange,\n}: {\n  value: SelectionInfo\n  onChange: (value: SelectionInfo) => void\n}) => {\n  const [visible, setVisible] = useState(false)\n\n  useEffect(() => {\n    if (visible) setTimeout(forceCheck, 500)\n  }, [visible])\n\n  const onSelection = (selectionInfo: SelectionInfo) => {\n    setVisible(false)\n    return onChange(selectionInfo)\n  }\n\n  const { logoURI, symbol } = value?.mintInfo || {}\n  return (\n    <Fragment>\n      <Space\n        style={{ marginLeft: -6, cursor: 'pointer' }}\n        onClick={() => setVisible(true)}\n      >\n        <Avatar size={24} src={logoURI}>\n          <IonIcon name=\"diamond-outline\" />\n        </Avatar>\n        <Typography.Text type=\"secondary\" style={{ margin: 0 }}>\n          {symbol || 'TOKEN'}\n        </Typography.Text>\n        <Divider type=\"vertical\" style={{ marginLeft: 4 }} />\n      </Space>\n      <Modal\n        visible={visible}\n        onCancel={() => setVisible(false)}\n        closeIcon={<IonIcon name=\"close\" />}\n        footer={null}\n        destroyOnClose={true}\n        centered={true}\n      >\n        <Row gutter={[16, 16]}>\n          <Col span={24}>\n            <MintSelection value={value} onChange={onSelection} />\n          </Col>\n        </Row>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default Selection\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account, DEFAULT_WSOL, utils } from '@senswap/sen-js'\n\nimport { Row, Col, Typography, Button, Card, Space, Tooltip, Tag } from 'antd'\n\nimport { AppDispatch, AppState } from 'app/model'\nimport cgk, { MintInfo } from 'app/helper/cgk'\nimport { SelectionInfo } from '../selection/mintSelection'\nimport { useAccount, useWallet } from 'senhub/providers'\nimport { updateBidData } from 'app/model/bid.controller'\nimport Selection from '../selection'\nimport IonIcon from 'shared/antd/ionicon'\nimport { numeric } from 'shared/util'\nimport NumericInput from 'app/shared/components/numericInput'\nimport { randomColor } from 'shared/helper'\n\nconst WORMHOLE_COLOR = '#F9575E'\n\nconst Bid = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const bidData = useSelector((state: AppState) => state.bid)\n  const settings = useSelector((state: AppState) => state.settings)\n  const [mapMintInfos, setMapMintInfos] = useState<Map<string, MintInfo>>()\n  const { accounts } = useAccount()\n  const {\n    wallet: { lamports, address: walletAddress },\n  } = useWallet()\n\n  // Compute selection info\n  const selectionInfo: SelectionInfo = useMemo(\n    () => ({\n      mintInfo: bidData.mintInfo,\n      poolAddress: bidData.poolAddress,\n      poolAddresses: bidData.poolAddresses,\n    }),\n    [bidData],\n  )\n  // Compute human-readable balance\n  const balance = useMemo((): string => {\n    if (!accounts) return '0'\n    const bidAccount = accounts[bidData.accountAddress]\n    const bidMint = bidData.mintInfo\n    if (!bidMint || !bidAccount) return '0'\n    const bidBalance = bidAccount?.amount || BigInt(0)\n    if (bidMint.address !== DEFAULT_WSOL)\n      return utils.undecimalize(bidBalance, bidMint.decimals)\n    // So estimate max = 0.01 fee -> multi transaction.\n    const estimateFee = utils.decimalize(0.01, bidMint.decimals)\n    const max = lamports + bidBalance - estimateFee\n    if (max <= bidBalance)\n      return utils.undecimalize(bidBalance, bidMint.decimals)\n    return utils.undecimalize(max, bidMint.decimals)\n  }, [accounts, bidData, lamports])\n\n  // Handle amount\n  const onAmount = useCallback(\n    (val: string) => {\n      return dispatch(updateBidData({ amount: val, prioritized: true }))\n    },\n    [dispatch],\n  )\n  // All in :)))\n  const onMax = () => onAmount(balance)\n  // Update bid data\n  const onSelectionInfo = async (selectionInfo: SelectionInfo) => {\n    const { splt } = window.sentre\n    const { address: mintAddress } = selectionInfo.mintInfo || {}\n    if (!account.isAddress(mintAddress))\n      return dispatch(updateBidData({ ...selectionInfo }))\n    const accountAddress = await splt.deriveAssociatedAddress(\n      walletAddress,\n      mintAddress,\n    )\n    return dispatch(updateBidData({ accountAddress, ...selectionInfo }))\n  }\n\n  const priceCGK = useMemo(() => {\n    const { mintInfo } = selectionInfo || {}\n    const { amount } = bidData\n    if (!mapMintInfos || !mintInfo || !amount) return\n    const { address } = mintInfo\n    let priceInfo\n    if (mapMintInfos.has(address)) priceInfo = mapMintInfos.get(address)\n    const { price: priceCGK } = priceInfo || {}\n    const price = Number(amount) * (priceCGK || 0)\n    return price\n  }, [bidData, mapMintInfos, selectionInfo])\n\n  useEffect(() => {\n    if (!settings.advanced) dispatch(updateBidData({ poolAddress: undefined }))\n  }, [settings, dispatch])\n\n  useEffect(() => {\n    const { mintInfo } = selectionInfo || {}\n    if (!mintInfo) return\n    ;(async () => {\n      const infos = await cgk.getMintInfos([mintInfo.address])\n      setMapMintInfos(infos)\n    })()\n  }, [selectionInfo])\n\n  return (\n    <Row gutter={[8, 8]}>\n      <Col flex=\"auto\">\n        <Typography.Text>From</Typography.Text>\n      </Col>\n      <Col>\n        <Space size={4}>\n          <Typography.Text type=\"secondary\">Supported</Typography.Text>\n          <Tag\n            style={{\n              margin: 0,\n              borderRadius: 4,\n              color: randomColor(WORMHOLE_COLOR),\n            }}\n            color={randomColor(WORMHOLE_COLOR, 0.2)}\n          >\n            Wormhole Bridge\n          </Tag>\n        </Space>\n      </Col>\n      <Col span={24}>\n        <Card\n          bordered={false}\n          className=\"card-child card-input\"\n          bodyStyle={{ padding: 4 }}\n        >\n          <NumericInput\n            placeholder=\"0\"\n            value={bidData.amount}\n            onChange={onAmount}\n            prefix={\n              <Selection value={selectionInfo} onChange={onSelectionInfo} />\n            }\n            suffix={\n              <Button\n                type=\"text\"\n                size=\"small\"\n                style={{ fontSize: 12, marginRight: -7 }}\n                onClick={onMax}\n              >\n                MAX\n              </Button>\n            }\n            bordered={false}\n            max={balance}\n          />\n        </Card>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[4, 4]} style={{ fontSize: 12, marginLeft: 2 }}>\n          <Col flex=\"auto\">\n            {priceCGK ? (\n              <Tooltip title=\"The estimation is based on CoinGecko API.\">\n                <Space size={4}>\n                  <IonIcon name=\"information-circle-outline\" />\n                  <Typography.Text type=\"secondary\">\n                    {numeric(bidData.amount).format('0,0.[0000]a')}{' '}\n                    {selectionInfo.mintInfo?.symbol || 'TOKEN'} ~ $\n                    {numeric(priceCGK).format('0,0.[00]a')}\n                  </Typography.Text>\n                </Space>\n              </Tooltip>\n            ) : null}\n          </Col>\n          <Col>\n            <Typography.Text type=\"secondary\">\n              Available: {numeric(balance || 0).format('0,0.[00]')}{' '}\n              {selectionInfo.mintInfo?.symbol || 'TOKEN'}\n            </Typography.Text>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Bid\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { TokenInfo } from '@solana/spl-token-registry'\n\nexport type State = {\n  amount: string // Desired amount\n  accountAddress: string // Associated account to the selected token\n  mintInfo?: TokenInfo // Selected token\n  poolAddress?: string // Selected pool (for advanced mode)\n  poolAddresses: string[] // List of available pools\n  priority: number\n}\n\nconst NAME = 'sen-swap'\nconst initialState: State = {\n  amount: '',\n  accountAddress: '',\n  poolAddresses: [],\n  priority: 0,\n}\n\n/**\n * Actions\n */\nexport const updateAskData = createAsyncThunk<\n  Partial<State>,\n  Partial<State> & { prioritized?: boolean; reset?: boolean },\n  { state: any }\n>(\n  `${NAME}/updateAskData`,\n  async ({ prioritized, reset, ...askData }, { getState }) => {\n    const {\n      bid: { priority: refPriority },\n      ask: { priority: prevPriority },\n    } = getState()\n    const priority = reset ? 0 : prioritized ? refPriority + 1 : prevPriority\n    return { ...askData, priority }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateAskData.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useMemo, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account, utils } from '@senswap/sen-js'\n\nimport { Row, Col, Typography, Card, Space, Tooltip } from 'antd'\nimport { SelectionInfo } from '../selection/mintSelection'\n\nimport { AppDispatch, AppState } from 'app/model'\nimport { useAccount, useWallet } from 'senhub/providers'\nimport { updateAskData } from 'app/model/ask.controller'\nimport IonIcon from 'shared/antd/ionicon'\nimport { numeric } from 'shared/util'\nimport cgk, { MintInfo } from 'app/helper/cgk'\nimport NumericInput from 'app/shared/components/numericInput'\nimport Selection from '../selection'\n\nconst Ask = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const askData = useSelector((state: AppState) => state.ask)\n  const settings = useSelector((state: AppState) => state.settings)\n  const [mapMintInfos, setMapMintInfos] = useState<Map<string, MintInfo>>()\n  const { accounts } = useAccount()\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  // Compute selection info\n  const selectionInfo: SelectionInfo = useMemo(\n    () => ({\n      mintInfo: askData.mintInfo,\n      poolAddress: askData.poolAddress,\n      poolAddresses: askData.poolAddresses,\n    }),\n    [askData],\n  )\n  // Compute human-readable balance\n  const balance = useMemo((): string => {\n    if (!account.isAddress(askData.accountAddress)) return '0'\n    const { amount } = accounts[askData.accountAddress] || {}\n    const { decimals } = askData.mintInfo || {}\n    if (!amount || !decimals) return '0'\n    return utils.undecimalize(amount, decimals)\n  }, [accounts, askData])\n  // Handle amount\n  const onAmount = (val: string) => {\n    return dispatch(updateAskData({ amount: val, prioritized: true }))\n  }\n  // Update ask data\n  const onSelectionInfo = async (selectionInfo: SelectionInfo) => {\n    const { splt } = window.sentre\n    const { address: mintAddress } = selectionInfo.mintInfo || {}\n    if (!account.isAddress(mintAddress))\n      return dispatch(updateAskData({ ...selectionInfo }))\n    const accountAddress = await splt.deriveAssociatedAddress(\n      walletAddress,\n      mintAddress,\n    )\n    dispatch(updateAskData({ accountAddress, ...selectionInfo }))\n  }\n\n  const priceCGK = useMemo(() => {\n    const { mintInfo } = selectionInfo\n    const { amount } = askData\n    if (!mapMintInfos || !mintInfo || !amount) return\n    const { address } = mintInfo\n    let priceInfo\n    if (mapMintInfos.has(address)) priceInfo = mapMintInfos.get(address)\n    const { price: priceCGK } = priceInfo || {}\n    const price = Number(amount) * (priceCGK || 0)\n    return price\n  }, [askData, mapMintInfos, selectionInfo])\n\n  useEffect(() => {\n    if (!settings.advanced) dispatch(updateAskData({ poolAddress: undefined }))\n  }, [settings, dispatch])\n  useEffect(() => {\n    const { mintInfo } = selectionInfo || {}\n    if (!mintInfo) return\n    ;(async () => {\n      const infos = await cgk.getMintInfos([mintInfo.address])\n      setMapMintInfos(infos)\n    })()\n  }, [selectionInfo])\n\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Typography.Text>To</Typography.Text>\n      </Col>\n      <Col span={24}>\n        <Card\n          bordered={false}\n          className=\"card-child card-input\"\n          bodyStyle={{ padding: 4 }}\n        >\n          <NumericInput\n            placeholder=\"0\"\n            value={askData.amount}\n            onChange={onAmount}\n            prefix={\n              <Selection value={selectionInfo} onChange={onSelectionInfo} />\n            }\n            bordered={false}\n          />\n        </Card>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[4, 4]} style={{ fontSize: 12, marginLeft: 2 }}>\n          <Col flex=\"auto\">\n            {priceCGK ? (\n              <Tooltip title=\"The estimation is based on CoinGecko API.\">\n                <Space size={4}>\n                  <IonIcon name=\"information-circle-outline\" />\n                  <Typography.Text type=\"secondary\">\n                    {numeric(askData.amount).format('0,0.[0000]a')}{' '}\n                    {selectionInfo.mintInfo?.symbol || 'TOKEN'} ~ $\n                    {numeric(priceCGK).format('0,0.[0]a')}\n                  </Typography.Text>\n                </Space>\n              </Tooltip>\n            ) : null}\n          </Col>\n          <Col>\n            <Typography.Text type=\"secondary\">\n              Available: {numeric(balance || 0).format('0,0.[00]')}{' '}\n              {selectionInfo.mintInfo?.symbol || 'TOKEN'}\n            </Typography.Text>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Ask\n","import { Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst RefreshButton = () => {\n  return <Button type=\"text\" icon={<IonIcon name=\"refresh-outline\" />} />\n}\n\nexport default RefreshButton\n","import { Row, Col, Button, Typography, Tooltip } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Option = ({\n  label,\n  value,\n  onClick,\n  active = false,\n}: {\n  label: string\n  value: number\n  onClick: (value: number) => void\n  active?: boolean\n}) => {\n  return (\n    <Typography.Text\n      style={{ cursor: 'pointer', color: active ? '#F9575E' : 'inherit' }}\n      onClick={() => onClick(value)}\n    >\n      {label}\n    </Typography.Text>\n  )\n}\n\nconst Slippage = ({\n  value,\n  onChange,\n}: {\n  value: number\n  onChange: (value: number) => void\n}) => {\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false}>\n          <Col flex=\"auto\">\n            <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>\n              Slippage Tolerance\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Tooltip\n              placement=\"right\"\n              title={\n                <span>\n                  Your transaction will be canceled if the confirmed price\n                  breaks the limited range of{' '}\n                  <strong style={{ color: '#f9575e' }}>{`${\n                    value * 100\n                  }%.`}</strong>\n                </span>\n              }\n            >\n              <Button\n                type=\"text\"\n                shape=\"circle\"\n                size=\"small\"\n                icon={<IonIcon name=\"information-circle-outline\" />}\n              />\n            </Tooltip>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false} justify=\"space-between\">\n          {[0.001, 0.005, 0.01, 0.05, 1].map((e, i) => (\n            <Col key={i}>\n              <Option\n                label={e === 1 ? 'Freely' : `${e * 100}%`}\n                value={e}\n                onClick={onChange}\n                active={e === value}\n              />\n            </Col>\n          ))}\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Slippage\n","import { Row, Col, Typography, Switch } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Advanced = ({\n  value,\n  onChange,\n}: {\n  value: boolean\n  onChange: (value: boolean) => void\n}) => {\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false}>\n          <Col flex=\"auto\">\n            <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>\n              Advanced Mode\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Switch\n              size=\"small\"\n              checkedChildren={<IonIcon name=\"calculator-outline\" />}\n              unCheckedChildren={<IonIcon name=\"sparkles-outline\" />}\n              checked={value}\n              onChange={onChange}\n            />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Typography.Paragraph style={{ fontSize: 12, textAlign: 'justify' }}>\n          <IonIcon name=\"warning-outline\" /> This advanced mode will disable the\n          automatic optimization that often results in bad rates and lost funds.\n          Only use this mode if you know what you are doing.{' '}\n          <strong style={{ color: '#f9575e' }}>\n            The advanced mode will display in the token list.\n          </strong>\n        </Typography.Paragraph>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Advanced\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nexport type State = {\n  slippage: number\n  advanced: boolean\n}\n\nconst NAME = 'sen-swap'\nconst initialState: State = {\n  slippage: 0.01,\n  advanced: false,\n}\n\n/**\n * Actions\n */\n\nexport const updateSettings = createAsyncThunk(\n  `${NAME}/updateSettings`,\n  async (settings: Partial<State>) => {\n    return settings\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateSettings.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useDispatch, useSelector } from 'react-redux'\n\nimport { Row, Col, Button, Popover, Typography, Divider } from 'antd'\nimport Slippage from './slippage'\nimport Advanced from './advanced'\n\nimport { updateSettings } from 'app/model/settings.controller'\nimport { AppDispatch, AppState } from 'app/model'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Settings = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const settings = useSelector((state: AppState) => state.settings)\n\n  const onSlippage = (slippage: number) => {\n    return dispatch(updateSettings({ ...settings, slippage }))\n  }\n  const onAdvanced = (advanced: boolean) => {\n    return dispatch(updateSettings({ ...settings, advanced }))\n  }\n\n  return (\n    <Popover\n      placement=\"bottomRight\"\n      overlayInnerStyle={{ width: 300 }}\n      content={\n        <Row gutter={[8, 8]}>\n          <Col span={24}>\n            <Typography.Title level={5}>Settings</Typography.Title>\n          </Col>\n          <Col span={24}>\n            <Slippage value={settings.slippage} onChange={onSlippage} />\n          </Col>\n          <Divider style={{ marginTop: 8, marginBottom: 8 }} />\n          <Col span={24}>\n            <Advanced value={settings.advanced} onChange={onAdvanced} />\n          </Col>\n        </Row>\n      }\n      trigger=\"click\"\n    >\n      <Button\n        type=\"text\"\n        shape=\"circle\"\n        size=\"small\"\n        icon={<IonIcon name=\"settings-outline\" />}\n      />\n    </Popover>\n  )\n}\n\nexport default Settings\n","import { Col, Divider, Row } from 'antd'\nimport RefreshButton from 'app/components/refreshButton'\nimport Settings from 'app/components/settings'\n//import PoweredBy from 'os/components/poweredBy'\n\nconst SwapSettings = () => {\n  return (\n    <Row gutter={[4, 4]} justify=\"end\" align=\"middle\">\n      <Col>\n        {/* <PoweredBy /> */}\n      </Col>\n      <Col>\n        <Divider type=\"vertical\" style={{ padding: 0 }} />\n      </Col>\n      <Col>\n        <RefreshButton />\n      </Col>\n      <Col>\n        <Settings />\n      </Col>\n    </Row>\n  )\n}\n\nexport default SwapSettings\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { HopData } from 'app/components/preview/hop'\n\ntype RouteInfo = {\n  hops: HopData[]\n  amounts: string[]\n  amount: string\n}\n\nexport type State = {\n  route?: RouteInfo\n}\nconst ROUTE_DEFAULT = {\n  amount: '',\n  amounts: [],\n  hops: [],\n}\nconst NAME = 'sen-swap'\nconst initialState: State = {\n  route: ROUTE_DEFAULT,\n}\n\n/**\n * Actions\n */\nexport const updateRouteInfo = createAsyncThunk<\n  State,\n  { route: RouteInfo },\n  { state: any }\n>(`${NAME}/updateRouteInfo`, async ({ route }, { getState }) => {\n  const { route: routeState } = getState()\n  if (!route) return { route: routeState }\n  return { route }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateRouteInfo.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useState, useCallback, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account } from '@senswap/sen-js'\n\nimport { Row, Col, Button } from 'antd'\nimport Bid from './bid'\nimport IonIcon from 'shared/antd/ionicon'\nimport Ask from './ask'\n\nimport {\n  BestRouteInfo,\n  buildPoolGraph,\n  ExtendedPoolData,\n  findAllRoute,\n  findBestRouteFromAsk,\n  findBestRouteFromBid,\n  RouteTrace,\n} from 'app/helper/router'\nimport { AppDispatch, AppState } from 'app/model'\nimport { usePool } from 'senhub/providers'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { updateAskData } from 'app/model/ask.controller'\nimport SwapSettings from 'app/page/swap/swapSettings'\nimport { updateRouteInfo } from 'app/model/route.controller'\n\nconst Swap = ({\n  onChange = () => {},\n}: {\n  onChange: (route: BestRouteInfo) => void\n}) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const [bestRoute, setBestRoute] = useState(new BestRouteInfo())\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const { advanced } = useSelector((state: AppState) => state.settings)\n  const { pools } = usePool()\n  /**\n   * Switch tokens\n   */\n  const onSwitch = useCallback(async () => {\n    const { amount: bidAmount, priority: bidPriority, ...bidRest } = bidData\n    const { amount: askAmount, priority: askPriority, ...askRest } = askData\n    const amount = bidPriority > askPriority ? bidAmount : askAmount\n    const updateData = bidPriority > askPriority ? updateAskData : updateBidData\n    await dispatch(updateBidData({ ...askRest, amount: '', reset: true }))\n    await dispatch(updateAskData({ ...bidRest, amount: '', reset: true }))\n    await dispatch(updateData({ amount, prioritized: true }))\n  }, [dispatch, askData, bidData])\n\n  const parsePools = useCallback(\n    (\n      poolAddress: string | undefined,\n      poolAddresses: string[],\n    ): ExtendedPoolData[] => {\n      return account.isAddress(poolAddress)\n        ? [\n            {\n              address: poolAddress,\n              ...pools[poolAddress],\n            },\n          ]\n        : poolAddresses.map((address) => ({ address, ...pools[address] }))\n    },\n    [pools],\n  )\n\n  /**\n   * Find optimal route\n   */\n  const findRoute = useCallback(async () => {\n    const {\n      poolAddress: bidPoolAddress,\n      poolAddresses: bidPoolAddresses,\n      mintInfo: bidMintInfo,\n      amount: bidAmount,\n      priority: bidPriority,\n    } = bidData\n    const {\n      poolAddress: askPoolAddress,\n      poolAddresses: askPoolAddresses,\n      mintInfo: askMintInfo,\n      amount: askAmount,\n      priority: askPriority,\n    } = askData\n\n    const { address: bidMintAddress } = bidMintInfo || {}\n    const bidPools = parsePools(bidPoolAddress, bidPoolAddresses)\n    const { address: askMintAddress } = askMintInfo || {}\n    const askPools = parsePools(askPoolAddress, askPoolAddresses)\n    let bestRoute = new BestRouteInfo()\n\n    if (\n      (!Number(bidAmount) && !Number(askAmount)) ||\n      !account.isAddress(bidMintAddress) ||\n      !account.isAddress(askMintAddress) ||\n      !bidPools.length ||\n      !askPools.length ||\n      !bidMintInfo\n    )\n      return setBestRoute(bestRoute)\n    // Use mode to find best route this mean the system find best route for end user.\n    // the best route return a route that user can receive maximum ask amount when swap\n    let routes = new Array<RouteTrace>()\n\n    const pathTrace: RouteTrace = {\n      mints: [bidMintAddress],\n      pools: [],\n    }\n    const graph = buildPoolGraph(pools)\n    findAllRoute(routes, graph, bidMintAddress, askMintAddress, pathTrace)\n    // No available route\n    if (!routes.length) return setBestRoute(bestRoute)\n    // If advance is true this mean end user want to use manual mode.\n    // They can select the pool of token pair to swap.\n    if (advanced) {\n      routes = routes.filter((route) => {\n        const length = route.pools.length\n        if (\n          account.isAddress(bidPoolAddress) &&\n          route.pools[0] !== bidPoolAddress\n        )\n          return false\n        if (\n          account.isAddress(askPoolAddress) &&\n          route.pools[length - 1] !== askPoolAddress\n        )\n          return false\n        return true\n      })\n    }\n\n    if (askPriority < bidPriority) {\n      bestRoute = await findBestRouteFromBid(pools, routes, bidData, askData)\n    } else\n      bestRoute = await findBestRouteFromAsk(pools, routes, bidData, askData)\n    return setBestRoute(bestRoute)\n  }, [advanced, askData, bidData, parsePools, pools])\n\n  const updateRoute = useCallback(() => {\n    const bidPriority = bidData.priority\n    const askPriority = askData.priority\n    if (askPriority < bidPriority) {\n      dispatch(updateAskData({ amount: bestRoute.amount }))\n    }\n    if (bidPriority < askPriority) {\n      dispatch(updateBidData({ amount: bestRoute.amount }))\n    }\n    onChange(bestRoute)\n    dispatch(updateRouteInfo({ route: { ...bestRoute } }))\n  }, [askData.priority, bestRoute, bidData.priority, dispatch, onChange])\n\n  useEffect(() => {\n    updateRoute()\n  }, [updateRoute])\n\n  useEffect(() => {\n    findRoute()\n  }, [findRoute])\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} justify=\"end\" align=\"middle\" wrap={false}>\n          <Col>\n            <SwapSettings />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Bid />\n      </Col>\n      <Col span={24}>\n        <Row gutter={[8, 8]} justify=\"center\">\n          <Col>\n            <Button\n              size=\"small\"\n              icon={<IonIcon name=\"git-compare-outline\" />}\n              onClick={onSwitch}\n            />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Ask />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Swap\n","import { Card } from 'antd'\nimport Swap from 'app/components/swap'\n\nconst SwapForm = () => {\n  return (\n    <Card bordered={false} className=\"card-swap\">\n      <Swap onChange={() => {}} />\n    </Card>\n  )\n}\n\nexport default SwapForm\n","import { useCallback, useEffect, useState } from 'react'\nimport { TokenInfo } from '@solana/spl-token-registry'\n\nimport { useMint, usePool } from 'senhub/providers'\n\nconst useTokenProvider = (mintAddress: string) => {\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n  const [tokenInfo, setTokenInfo] = useState<(TokenInfo | undefined)[]>([])\n\n  const fetchTokenInfo = useCallback(async () => {\n    if (!mintAddress) return setTokenInfo([undefined])\n    // Normal mint\n    const token = await tokenProvider.findByAddress(mintAddress)\n    if (token) return setTokenInfo([token])\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (!poolData) return setTokenInfo([undefined])\n    const { mint_a, mint_b } = poolData\n    const tokenA = await tokenProvider.findByAddress(mint_a)\n    const tokenB = await tokenProvider.findByAddress(mint_b)\n    return setTokenInfo([tokenA, tokenB])\n  }, [mintAddress, pools, tokenProvider])\n\n  useEffect(() => {\n    fetchTokenInfo()\n  }, [fetchTokenInfo])\n\n  return tokenInfo\n}\n\nexport default useTokenProvider\n","import { ReactNode } from 'react'\n\nimport { Avatar } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport useTokenProvider from '../../hooks/useTokenProvider'\n\nconst MintAvatar = ({\n  mintAddress,\n  size = 24,\n  icon = <IonIcon name=\"diamond-outline\" />,\n}: {\n  mintAddress: string\n  size?: number\n  icon?: ReactNode\n}) => {\n  const tokens = useTokenProvider(mintAddress)\n  return (\n    <Avatar.Group style={{ display: 'block' }} >\n      {tokens.map((token, i) => (\n        <Avatar\n          key={token?.address || i}\n          src={token?.logoURI}\n          size={size}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n        >\n          {icon}\n        </Avatar>\n      ))}\n    </Avatar.Group>\n  )\n}\n\nexport default MintAvatar\n","import { Card, Col, Row, Space, Typography } from 'antd'\nimport { MintAvatar } from 'app/shared/components/mint'\n\nconst TokenInfo = () => {\n  return (\n    <Card bordered={false}>\n      <Row gutter={[16, 16]}>\n        <Col span={12}>\n          <Space direction=\"vertical\" size={4}>\n            <MintAvatar mintAddress={''} />\n            <Space>\n              <Typography.Text>TVL:</Typography.Text>\n              <Typography.Title level={5}>18.5 SOL</Typography.Title>\n            </Space>\n            <Typography.Text className=\"caption\" type=\"secondary\">\n              ~ $1000\n            </Typography.Text>\n          </Space>\n        </Col>\n        <Col span={12}>\n          <Space direction=\"vertical\" size={4}>\n            <MintAvatar mintAddress={''} />\n            <Space>\n              <Typography.Text>TVL:</Typography.Text>\n              <Typography.Title level={5}>18.5 SOL</Typography.Title>\n            </Space>\n            <Typography.Text className=\"caption\" type=\"secondary\">\n              ~ $1000\n            </Typography.Text>\n          </Space>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default TokenInfo\n","import { Col, Row } from 'antd'\nimport SwapActions from './swapActions'\nimport SwapForm from './swapForm'\nimport TokenInfo from './tokenInfo'\n\nconst Swap = () => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <SwapForm />\n      </Col>\n      <Col span={24}>\n        <SwapActions />\n      </Col>\n      <Col span={24}>\n        <TokenInfo />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Swap\n","import { Tag } from 'antd'\n\nconst STATUS_COLOR: Record<string, number[]> = {\n  success: [20, 224, 65],\n  pending: [212, 177, 6],\n  error: [215, 35, 17],\n  failed: [215, 35, 17],\n}\n\nconst StatusTag = ({ tag }: { tag: string }) => {\n  const setColorTag = (opacity?: number) => {\n    let color = STATUS_COLOR[tag]\n    return `rgba(${color[0]},  ${color[1]}, ${color[2]},${opacity || 1})`\n  }\n\n  return (\n    <Tag\n      style={{\n        margin: 0,\n        borderRadius: 4,\n        color: setColorTag(),\n        textTransform: 'capitalize',\n      }}\n      color={setColorTag(0.1)}\n    >\n      {tag}\n    </Tag>\n  )\n}\n\nexport default StatusTag\n","import { Space, Typography } from 'antd'\nimport { MintAvatar } from 'app/shared/components/mint'\nimport StatusTag from './statusTag'\n\nexport const HISTORY_COLUMN = [\n  {\n    title: 'TIME',\n    dataIndex: 'time',\n  },\n  {\n    title: 'TRANSACTION',\n    className: 'transaction',\n    dataIndex: 'transaction',\n  },\n  {\n    title: 'PAID',\n    dataIndex: 'paid',\n    render: (text: string) => (\n      <Space>\n        <MintAvatar mintAddress={text} />\n        <Typography.Text>SOL</Typography.Text> -\n        <MintAvatar mintAddress={text} />\n        <Typography.Text>ETH</Typography.Text>\n      </Space>\n    ),\n  },\n  {\n    title: 'AMOUNT',\n    dataIndex: 'amount',\n  },\n  {\n    title: 'STATUS',\n    dataIndex: 'status',\n    render: (text: string) => <StatusTag tag=\"success\" />,\n  },\n]\n","import moment from 'moment'\n\nimport { Card, Col, Row, Typography, Table, Button } from 'antd'\nimport { HISTORY_COLUMN } from './column'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport './index.less'\n\nconst History = () => {\n  const data = {\n    key: 0,\n    time: moment().format('DD MMM, YYYY hh:mm'),\n    transaction: 'Swap Solana',\n    paid: 'Solana - Ethereum',\n    amount: '',\n    status: 'success',\n  }\n  const sources = [1, 2, 3, 4, 5, 6, 7].map((e) => {\n    data.key = e\n    data.amount = `${e} SOL`\n    return { ...data }\n  })\n\n  return (\n    <Card bordered={false}>\n      <Row gutter={[16, 16]} justify=\"center\">\n        <Col>\n          <Typography.Text>Swap history</Typography.Text>\n        </Col>\n        <Col span={24}>\n          <Table\n            columns={HISTORY_COLUMN}\n            dataSource={sources}\n            pagination={false}\n            rowClassName={(record, index) =>\n              index % 2 ? 'odd-row' : 'even-row'\n            }\n            scroll={{ x: 800, y: 300 }}\n          />\n        </Col>\n        <Col>\n          <Button type=\"text\" icon={<IonIcon name=\"chevron-down-outline\" />}>\n            View more\n          </Button>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default History\n","import { Row, Col } from 'antd'\nimport SwapChart from './chart'\nimport Swap from './swap'\nimport History from './history'\n\nimport 'app/static/styles/index.less'\n\nconst Page = () => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col lg={8} md={12} xs={24}>\n        <Swap />\n      </Col>\n      <Col lg={16} md={12} xs={24}>\n        <Row gutter={[24, 24]}>\n          <Col span={24}>\n            <SwapChart />\n          </Col>\n          <Col span={24}>\n            <History />\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Page\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\nexport type State = {\n  counter: number\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'main'\nconst initialState: State = {\n  counter: 0,\n}\n\n/**\n * Actions\n */\n\nexport const increaseCounter = createAsyncThunk<State, void, { state: any }>(\n  `${NAME}/increaseCounter`,\n  async (_, { getState }) => {\n    const {\n      main: { counter },\n    } = getState()\n    return { counter: counter + 1 }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      increaseCounter.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Row, Col, Typography, Space, Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { AppDispatch, AppState } from 'app/model'\nimport { increaseCounter } from 'app/model/main.controller'\nimport { env } from 'shared/runtime'\nimport { useUI } from 'senhub/providers'\n\nconst Widget = () => {\n  const {\n    ui: { width, infix },\n  } = useUI()\n  const dispatch = useDispatch<AppDispatch>()\n  const { counter } = useSelector((state: AppState) => state.main)\n  const increase = useCallback(() => dispatch(increaseCounter()), [dispatch])\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Space align=\"center\">\n          <IonIcon name=\"apps-outline\" />\n          <Typography.Title level={4}>Widget</Typography.Title>\n        </Space>\n      </Col>\n      <Col span={24}>\n        <Typography.Text>\n          Env: {env} - {width}px - {infix}\n        </Typography.Text>\n      </Col>\n      <Col>\n        <Typography.Text>Counter: {counter}</Typography.Text>\n      </Col>\n      <Col>\n        <Button onClick={increase}>Increase</Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Widget\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport main from './main.controller'\nimport ask from './ask.controller'\nimport bid from './bid.controller'\nimport settings from './settings.controller'\nimport route from './route.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools('myapp'),\n  reducer: {\n    main,\n    ask,\n    bid,\n    settings,\n    route,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string' ||\n  typeof process.env.REACT_APP_SENHUB !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n  senhub: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n  senhub: process.env.REACT_APP_SENHUB,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  spltAddress: string\n  splataAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: 'https://api.devnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: 'https://api.testnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: 'https://api.mainnet-beta.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Provider } from 'react-redux'\nimport {\n  WalletProvider,\n  UIProvider,\n  AccountProvider,\n  PoolProvider,\n  MintProvider,\n} from 'senhub/providers'\n\nimport PageView from 'app/page'\nimport WidgetView from 'app/widget'\n\nimport model from 'app/model'\nimport configs from 'app/configs'\n\nimport 'app/static/styles/dark.less'\nimport 'app/static/styles/light.less'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId}>\n      <MintProvider>\n        <PoolProvider>\n          <AccountProvider>\n            <WalletProvider>\n              <Provider store={model}>\n                <PageView />\n              </Provider>\n            </WalletProvider>\n          </AccountProvider>\n        </PoolProvider>\n      </MintProvider>\n    </UIProvider>\n  )\n}\n\nexport const widgetConfig: WidgetConfig = {\n  size: 'small',\n  type: 'solid',\n}\n\nexport const Widget = () => {\n  return (\n    <UIProvider appId={appId}>\n      <Provider store={model}>\n        <WidgetView />\n      </Provider>\n    </UIProvider>\n  )\n}\n","import { env, net } from 'shared/runtime'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { net, env } from 'shared/runtime'\nimport sol from './sol.config'\nimport register from './register.config'\n\nconst configs = {\n  sol: sol[net],\n  register: register[env],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, AccountData } from '@senswap/sen-js'\n\n/**\n * Interface & Utility\n */\n\nexport type State = Record<string, AccountData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'accounts'\nconst initialState: State = {}\n\n/**\n * Actions\n */\n\nexport const getAccounts = createAsyncThunk(\n  `${NAME}/getAccounts`,\n  async ({ owner }: { owner: string }) => {\n    if (!account.isAddress(owner))\n      throw new Error('Invalid owner/wallet address')\n    const { splt } = window.sentre\n    const ownerPublicKey = account.fromAddress(owner)\n    const { value } = await splt.connection.getTokenAccountsByOwner(\n      ownerPublicKey,\n      { programId: splt.spltProgramId },\n    )\n    let bulk: State = {}\n    value.forEach(({ pubkey, account: { data: buf } }) => {\n      const address = pubkey.toBase58()\n      const data = splt.parseAccountData(buf)\n      return (bulk[address] = data)\n    })\n    return bulk\n  },\n)\n\nexport const getAccount = createAsyncThunk<\n  State,\n  { address: string },\n  { state: any }\n>(`${NAME}/getAccount`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid account address')\n  const {\n    accounts: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const { splt } = window.sentre\n  const raw = await splt.getAccountData(address)\n  return { [address]: raw }\n})\n\nexport const upsetAccount = createAsyncThunk<\n  State,\n  { address: string; data: AccountData },\n  { state: any }\n>(`${NAME}/upsetAccount`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteAccount = createAsyncThunk(\n  `${NAME}/deleteAccount`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getAccounts.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getAccount.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetAccount.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteAccount.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport ui from './ui.reducer'\nimport flags from './flags.reducer'\nimport page from './page.reducer'\nimport wallet from './wallet.reducer'\nimport accounts from './accounts.reducer'\nimport mints from './mints.reducer'\nimport pools from './pools.reducer'\nimport search from './search.reducer'\n\n/**\n * Root store\n */\nconst store = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools('sentre'),\n  reducer: {\n    ui,\n    flags,\n    page,\n    wallet,\n    accounts,\n    mints,\n    pools,\n    search,\n  },\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type RootDispatch = typeof store.dispatch\nexport default store\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, MintData } from '@senswap/sen-js'\n\n/**\n * Interface & Utility\n */\n\nexport type State = Record<string, MintData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'mints'\nconst initialState: State = {}\n\n/**\n * Actions\n */\n\nexport const getMint = createAsyncThunk<\n  State,\n  { address: string; force?: boolean },\n  { state: any }\n>(`${NAME}/getMint`, async ({ address, force = false }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid mint address')\n  if (!force) {\n    const {\n      accounts: { [address]: data },\n    } = getState()\n    if (data) return { [address]: data }\n  }\n  const { splt } = window.sentre\n  const raw = await splt.getMintData(address)\n  return { [address]: raw }\n})\n\nexport const upsetMint = createAsyncThunk<\n  State,\n  { address: string; data: MintData },\n  { state: any }\n>(`${NAME}/upsetMint`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteMint = createAsyncThunk(\n  `${NAME}/deleteMint`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        getMint.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetMint.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteMint.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account } from '@senswap/sen-js'\n\nimport PDB from 'shared/pdb'\nimport configs from 'os/configs'\n\nconst {\n  register: { senreg, extra },\n} = configs\n\n/**\n * Interface & Utility\n */\n\nexport type State = {\n  register: SenReg\n  appIds: AppIds\n  widgetIds: AppIds\n}\n\nconst troubleshoot = (register: SenReg, appIds?: AppIds): AppIds => {\n  if (!appIds || !Array.isArray(appIds)) return []\n  return appIds.filter((appId) => register[appId])\n}\nconst fetchRegister = async () => {\n  try {\n    const res = await fetch(senreg)\n    return await res.json()\n  } catch (er) {\n    return {}\n  }\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'page'\nconst initialState: State = {\n  register: {},\n  appIds: [],\n  widgetIds: [],\n}\n\n/**\n * Actions\n */\n\n// Must fetch register at very first of the process\nexport const loadRegister = createAsyncThunk(\n  `${NAME}/loadRegister`,\n  async () => {\n    const register = await fetchRegister()\n    return { register: { ...register, ...extra } }\n  },\n)\n\n// For sandbox only\nexport const installManifest = createAsyncThunk<\n  Partial<State>,\n  ComponentManifest,\n  { state: any }\n>(`${NAME}/installManifest`, async (manifest, { getState }) => {\n  const {\n    wallet: { address },\n    page: { appIds, widgetIds, register },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  if (appIds.includes(manifest.appId))\n    throw new Error('Cannot run sandbox for an installed application.')\n  const newAppIds: AppIds = [...appIds]\n  newAppIds.push(manifest.appId)\n  const newWidgetIds: AppIds = [...widgetIds]\n  if (manifest.supportedViews.includes('widget'))\n    newWidgetIds.push(manifest.appId)\n  const newRegister: SenReg = { ...register }\n  newRegister[manifest.appId] = manifest\n  return { appIds: newAppIds, widgetIds: newWidgetIds, register: newRegister }\n})\n\n/**\n * App Actions\n */\nexport const loadPage = createAsyncThunk<Partial<State>, void, { state: any }>(\n  `${NAME}/loadPage`,\n  async (_, { getState }) => {\n    const {\n      wallet: { address },\n      page: { register },\n    } = getState()\n\n    if (!account.isAddress(address))\n      throw new Error('Wallet is not connected yet.')\n    // Fetch user's apps\n    const db = new PDB(address).createInstance('sentre')\n    const appIds = troubleshoot(\n      register,\n      (await db.getItem('appIds')) || initialState.appIds,\n    )\n    const widgetIds = troubleshoot(\n      register,\n      (await db.getItem('widgetIds')) || initialState.widgetIds,\n    )\n    return { appIds, widgetIds }\n  },\n)\n\nexport const updatePage = createAsyncThunk<\n  Partial<State>,\n  AppIds,\n  { state: any }\n>(`${NAME}/updatePage`, async (appIds, { getState }) => {\n  const {\n    wallet: { address },\n    page: { register },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  appIds = troubleshoot(register, appIds)\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('appIds', appIds)\n  return { appIds }\n})\n\nexport const installApp = createAsyncThunk<\n  Partial<State>,\n  string,\n  { state: any }\n>(`${NAME}/installApp`, async (appId, { getState }) => {\n  const {\n    wallet: { address },\n    page: { register, appIds, widgetIds },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  if (appIds.includes(appId)) return {}\n  const newAppIds: AppIds = [...appIds]\n  newAppIds.push(appId)\n  const newWidgetIds = register[appId]?.supportedViews?.includes('widget')\n    ? [...widgetIds, appId]\n    : [...widgetIds]\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('appIds', newAppIds)\n  await pdb.createInstance('sentre').setItem('widgetIds', newWidgetIds)\n  return { appIds: newAppIds, widgetIds: newWidgetIds }\n})\n\nexport const uninstallApp = createAsyncThunk<\n  Partial<State>,\n  string,\n  { state: any }\n>(`${NAME}/uninstallApp`, async (appId, { getState }) => {\n  const {\n    wallet: { address },\n    page: { appIds, widgetIds },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  if (!appIds.includes(appId)) return {}\n  const newAppIds = appIds.filter((_appId: string) => _appId !== appId)\n  const newWidgetIds = widgetIds.filter((_appId: string) => _appId !== appId)\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('appIds', newAppIds)\n  await pdb.createInstance('sentre').setItem('widgetIds', newWidgetIds)\n  await pdb.dropInstance(appId)\n  return { appIds: newAppIds, widgetIds: newWidgetIds }\n})\n\n/**\n * Dashboard Actions\n */\nexport const updateDashboard = createAsyncThunk<\n  Partial<State>,\n  AppIds,\n  { state: any }\n>(`${NAME}/updateDashboard`, async (widgetIds, { getState }) => {\n  const {\n    wallet: { address },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('widgetIds', widgetIds)\n  return { widgetIds }\n})\n\nexport const addWidgets = createAsyncThunk<\n  Partial<State>,\n  AppIds,\n  { state: any }\n>(`${NAME}/addWidgets`, async (appIds, { getState }) => {\n  const {\n    wallet: { address },\n    page: { widgetIds },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet')\n  const newWidgetIds: AppIds = [...widgetIds, ...appIds]\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('widgetIds', newWidgetIds)\n  return { widgetIds: newWidgetIds }\n})\n\nexport const removeWidget = createAsyncThunk<\n  Partial<State>,\n  string,\n  { state: any }\n>(`${NAME}/removeWidget`, async (appId, { getState }) => {\n  const {\n    wallet: { address },\n    page: { widgetIds },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  if (!widgetIds.includes(appId)) return {}\n  const newWidgetIds = widgetIds.filter((_appId: string) => _appId !== appId)\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('widgetIds', newWidgetIds)\n  return { widgetIds: newWidgetIds }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        loadRegister.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        installManifest.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        loadPage.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updatePage.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        installApp.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        uninstallApp.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateDashboard.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        addWidgets.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        removeWidget.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { AccountInfo, PublicKey } from '@solana/web3.js'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, PoolData } from '@senswap/sen-js'\nimport configs from 'os/configs'\n\nconst {\n  sol: { taxmanAddress },\n} = configs\n\n/**\n * Interface & Utility\n */\n\nexport type State = Record<string, PoolData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'pools'\nconst initialState: State = {}\n\n/**\n * Actions\n */\n\nexport const getPools = createAsyncThunk(`${NAME}/getPools`, async () => {\n  const { swap } = window.sentre\n  // Get all pools\n  const value: Array<{ pubkey: PublicKey; account: AccountInfo<Buffer> }> =\n    await swap.connection.getProgramAccounts(swap.swapProgramId, {\n      filters: [\n        { dataSize: 257 },\n        { memcmp: { bytes: taxmanAddress, offset: 65 } },\n      ],\n    })\n  let bulk: State = {}\n  value.forEach(({ pubkey, account: { data: buf } }) => {\n    const address = pubkey.toBase58()\n    const data = swap.parsePoolData(buf)\n    bulk[address] = data\n  })\n  return bulk\n})\n\nexport const getPool = createAsyncThunk<\n  State,\n  { address: string },\n  { state: any }\n>(`${NAME}/getPool`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid pool address')\n  const {\n    pools: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const { swap } = window.sentre\n  const raw = await swap.getPoolData(address)\n  return { [address]: raw }\n})\n\nexport const upsetPool = createAsyncThunk<\n  State,\n  { address: string; data: PoolData },\n  { state: any }\n>(`${NAME}/upsetPool`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid pool address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getPools.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\ntype State = {\n  value: string\n  loading: boolean\n  disabled: boolean\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'search'\nconst initialState: State = {\n  value: '',\n  loading: false,\n  disabled: false,\n}\n\n/**\n * Actions\n */\n\nexport const setValue = createAsyncThunk<\n  Partial<State>,\n  string,\n  { state: any }\n>(`${NAME}/setValue`, async (value) => {\n  return { value }\n})\n\nexport const setLoading = createAsyncThunk<\n  Partial<State>,\n  boolean,\n  { state: any }\n>(`${NAME}/setLoading`, async (loading) => {\n  return { loading }\n})\n\nexport const setDisabled = createAsyncThunk<\n  Partial<State>,\n  boolean,\n  { state: any }\n>(`${NAME}/setDisabled`, async (disabled) => {\n  return { disabled }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setValue.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setLoading.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setDisabled.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\nconst TIME_ZONE_MORNING = 6\nconst TIME_ZONE_NIGHT = 18\n\nexport type Infix = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\nexport type Theme = 'light' | 'dark'\n\nexport type State = {\n  theme: Theme\n  width: number\n  infix: Infix\n  touchable: boolean\n  visibleActionCenter: boolean\n}\n\nconst getInfix = (): Infix => {\n  const width = window.innerWidth\n  if (width < 576) return 'xs'\n  if (width < 768) return 'sm'\n  if (width < 992) return 'md'\n  if (width < 1200) return 'lg'\n  if (width < 1400) return 'xl'\n  return 'xxl'\n}\nconst isTouchable = () => {\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0\n}\nconst getTheme = (): Theme => {\n  const hour = new Date().getHours()\n  if (hour >= TIME_ZONE_MORNING && hour < TIME_ZONE_NIGHT) return 'light'\n  return 'dark'\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'ui'\nconst initialState: State = {\n  theme: getTheme(),\n  width: window.innerWidth,\n  infix: getInfix(),\n  touchable: isTouchable(),\n  visibleActionCenter: false,\n}\n\n/**\n * Actions\n */\n\nexport const setTheme = createAsyncThunk(\n  `${NAME}/setTheme`,\n  async (theme: Theme) => {\n    return { theme }\n  },\n)\n\nexport const resize = createAsyncThunk(`${NAME}/resize`, async () => {\n  const width = window.innerWidth\n  const infix = getInfix()\n  return { width, infix }\n})\n\nexport const setVisibleActionCenter = createAsyncThunk(\n  `${NAME}/setVisibleActionCenter`,\n  async (visible: boolean) => {\n    return { visibleActionCenter: visible }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setTheme.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        resize.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setVisibleActionCenter.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { Lamports, SPLT, Swap, WalletInterface } from '@senswap/sen-js'\n\nimport configs from 'os/configs'\n\n/**\n * Interface & Utility\n */\n\nexport type State = {\n  visible: boolean\n  address: string\n  lamports: bigint\n}\n\nconst initializeWindow = async (wallet: WalletInterface | undefined) => {\n  const {\n    sol: { node, spltAddress, splataAddress, swapAddress },\n  } = configs\n  window.sentre = {\n    wallet,\n    lamports: new Lamports(node),\n    splt: new SPLT(spltAddress, splataAddress, node),\n    swap: new Swap(swapAddress, spltAddress, splataAddress, node),\n  }\n}\n\nconst destroyWindow = async () => {\n  if (window.sentre?.wallet) window.sentre.wallet.disconnect()\n  await initializeWindow(undefined)\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'wallet'\nconst initialState: State = {\n  visible: false,\n  address: '',\n  lamports: BigInt(0),\n}\n\n/**\n * Actions\n */\n\nexport const openWallet = createAsyncThunk(`${NAME}/openWallet`, async () => {\n  return { visible: true }\n})\n\nexport const closeWallet = createAsyncThunk(`${NAME}/closeWallet`, async () => {\n  return { visible: false }\n})\n\nexport const connectWallet = createAsyncThunk(\n  `${NAME}/connectWallet`,\n  async (wallet: any) => {\n    if (!wallet) throw new Error('Invalid wallet instance')\n    await initializeWindow(wallet)\n    const address = await wallet.getAddress()\n    const lamports = await window.sentre.lamports.getLamports(address)\n    return { address, lamports: BigInt(lamports), visible: false }\n  },\n)\n\nexport const updateWallet = createAsyncThunk(\n  `${NAME}/updateWallet`,\n  async ({ lamports }: Partial<State>) => {\n    return { lamports }\n  },\n)\n\nexport const disconnectWallet = createAsyncThunk(\n  `${NAME}/disconnectWallet`,\n  async () => {\n    await destroyWindow()\n    window.location.reload() // Reset all redux store\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        openWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        closeWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        connectWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        disconnectWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey);\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(request: IRequestQueue, callback: () => Promise<any>) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    if (!this.config.limit) return false\n\n    const timeFarthest = this.timeLogs[0] || 0\n    const timeNow = new Date().getTime()\n    if (this.timeLogs.length < this.config.limit.calls) {\n      return true\n    }\n    const timeRange = timeNow - timeFarthest\n    const minTimeRange = this.config.limit.time\n    return timeRange > minTimeRange\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n","import { account } from '@senswap/sen-js'\nimport numbro from 'numbro'\nimport { net } from 'shared/runtime'\n\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value) return numbro('0')\n  return numbro(value)\n}\n"],"names":["timeoutId","chartData","labels","type","configs","disableAxe","chartId","backgroundColor","useState","isRebuildChart","setRebuildChart","formatData","useCallback","data","label","background","datasets","chartRef","useRef","getBackground","ctx","current","canvas","getContext","gradient","createLinearGradient","addColorStop","useEffect","chartInstance","dataInstace","find","compareData","isEqual","update","id","height","ref","Chart","options","responsive","maintainAspectRatio","scales","xAxes","gridLines","drawBorder","display","ticks","yAxes","beginAtZero","maxTicksLimit","callback","value","index","values","numeric","format","plugins","legend","hover","onHover","event","elements","target","document","getElementById","style","cursor","icons","defaultIcon","name","rest","Avatar","map","iconURI","idx","src","border","CHART_CONFIGS","DEFAULT_TOKEN","swapChartConfigs","borderColor","borderRadius","pointRadius","tooltip","pointHitRadius","pointHoverRadius","bidData","useSelector","state","bid","askData","ask","useMemo","mintInfo","logoURI","symbols","symbol","Card","bordered","className","bodyStyle","paddingTop","Row","gutter","Col","flex","Space","direction","size","align","Typography","join","level","Radio","defaultValue","span","DECIMALS","BigInt","hops","onCallback","disabled","wrapAmount","loading","setLoading","slippage","settings","walletAddress","useWallet","wallet","address","handleSwap","window","sentre","swap","splt","Promise","all","srcMintAddress","srcMintInfo","dstMintAddress","dstMintInfo","poolAddress","poolData","deriveAssociatedAddress","srcAddress","dstAddress","routingAddresses","bidDecimals","decimals","bidAmount","utils","amount","askDecimals","length","askAmount","limit","route","handleWrapSol","wrapSol","onSwap","txId","notify","description","onClick","open","explorer","message","Button","block","TOKEN_PROVIDER","TokenProvider","BestRouteInfo","amounts","extractReserve","mintAddress","mint_a","mint_b","reserve_a","reserve_b","Error","pointSorting","firstPoint","point","secondPoint","buildPoolGraph","pools","graph","Map","pool","forEach","mint","has","set","get","findAllRoute","routes","startMint","endMint","pathTrace","mints","mapPool","includes","askMint","newPathTrace","push","parseHops","mapPoolData","bidMintAddress","askMintAddress","account","findByAddress","hop","findBestRouteFromBid","bestRoute","Array","curve","maxAskAmount","Number","findBestRouteFromAsk","reversedHops","reverse","reversedHop","inverseCurve","unshift","minBidAmount","ORACLE","Swap","fee_ratio","tax_ratio","bidReserve","askReserve","inverseSwap","ExtraTypography","content","RouteAvatar","icon","Fragment","accounts","useAccount","bidMintInfo","bidAccount","accountAddress","bidBalance","DEFAULT_WSOL","hopLastRoute","at","bidAmoutLastRoute","slippageRate","routeIcons","listRouteIcons","console","log","bidMint","parseFloat","DEFAULT_TOKEN_INFO","chainId","extensions","undefined","tags","cgk","getMintInfos","mintsAddress","promise","tokenInfo","ticket","coingeckoId","price","fetchCGK","mintsDetails","mapMintsDetails","NAME","updateBidData","createAsyncThunk","prioritized","reset","getState","prevPriority","priority","refPriority","createSlice","initialState","poolAddresses","reducers","extraReducers","builder","addCase","fulfilled","payload","Object","assign","onChange","isSupportedMint","keyword","setKeyword","tokenProvider","useMint","search","raw","filter","padding","Input","placeholder","suffix","marginRight","e","advanced","onAdvanced","active","hoverable","wrap","marginLeft","margin","Divider","fontSize","stopPropagation","tvl","setTVL","tokenInfos","setTokenInfos","getTokenInfos","formatTokenInfos","token","getTVL","reserves","prices","i","lineHeight","marginTop","marginBottom","Tooltip","title","tempTokenInfo","setTempTokenInfo","setMints","usePool","supportedMints","keys","flat","item","pos","self","indexOf","onMints","allMints","getAvailablePoolAddresses","onAuto","mintList","currentMintAddress","overflow","onMint","poolList","sort","currentPoolAddress","onPool","Boolean","visible","setVisible","setTimeout","forceCheck","Modal","onCancel","closeIcon","footer","destroyOnClose","centered","selectionInfo","forwardRef","max","props","error","setError","setCursor","innerRef","onAmount","val","onError","er","clearTimeout","test","setSelectionRange","selectionStart","WORMHOLE_COLOR","dispatch","useDispatch","mapMintInfos","setMapMintInfos","lamports","balance","estimateFee","onSelectionInfo","priceCGK","priceInfo","infos","Tag","color","randomColor","prefix","updateAskData","Option","placement","shape","justify","Switch","checkedChildren","unCheckedChildren","checked","textAlign","updateSettings","Popover","overlayInnerStyle","width","trigger","updateRouteInfo","routeState","setBestRoute","onSwitch","bidPriority","bidRest","askPriority","askRest","updateData","parsePools","findRoute","bidPoolAddress","bidPoolAddresses","askPoolAddress","askPoolAddresses","askMintInfo","bidPools","askPools","updateRoute","setTokenInfo","fetchTokenInfo","mint_lpt","tokenA","tokenB","tokens","useTokenProvider","STATUS_COLOR","success","pending","failed","tag","setColorTag","opacity","textTransform","HISTORY_COLUMN","dataIndex","render","text","key","time","moment","transaction","paid","status","sources","Table","columns","dataSource","pagination","rowClassName","record","scroll","x","y","lg","md","xs","increaseCounter","_","counter","main","useUI","ui","infix","increase","env","configureStore","middleware","getDefaultMiddleware","bigintSerializationMiddleware","devTools","reducer","shared","appId","process","url","senhub","devnet","node","spltAddress","splataAddress","testnet","mainnet","manifest","development","staging","production","sol","net","Page","UIProvider","MintProvider","PoolProvider","AccountProvider","WalletProvider","Provider","store","model","widgetConfig","Widget","register","getAccounts","owner","ownerPublicKey","connection","getTokenAccountsByOwner","programId","spltProgramId","bulk","pubkey","buf","toBase58","parseAccountData","getAccount","getAccountData","upsetAccount","deleteAccount","slice","flags","page","getMint","force","getMintData","upsetMint","deleteMint","senreg","extra","troubleshoot","appIds","isArray","fetchRegister","fetch","res","json","widgetIds","loadRegister","installManifest","newAppIds","newWidgetIds","supportedViews","newRegister","loadPage","db","PDB","createInstance","getItem","updatePage","pdb","setItem","installApp","uninstallApp","_appId","dropInstance","updateDashboard","addWidgets","removeWidget","taxmanAddress","getPools","getProgramAccounts","swapProgramId","filters","dataSize","memcmp","bytes","offset","parsePoolData","getPool","getPoolData","upsetPool","setValue","setDisabled","getInfix","innerWidth","theme","hour","Date","getHours","getTheme","touchable","navigator","maxTouchPoints","visibleActionCenter","setTheme","resize","setVisibleActionCenter","initializeWindow","swapAddress","Lamports","SPLT","destroyWindow","disconnect","openWallet","closeWallet","connectWallet","getAddress","getLamports","updateWallet","disconnectWallet","location","reload","DataLoader","instanceKey","JSON","stringify","this","mapInstance","instance","newSingleFlight","SingleFlight","requestKey","singleFlight","getSingleFlight","newRequest","RequestQueue","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","DEFAULT_SINGLE_FLIGHT_CONFIG","cacheData","SingleFlightCache","resolve","isFetch","request","reject","add","validateLimit","addRequestQueue","createTimeLogs","then","response","cache","resolves","catch","rejects","finally","delete","fetchRequestQueue","shift","clearInterval","setInterval","timeFarthest","timeNow","getTime","calls","now","storage","getNetwork","asyncWait","ms","addressOrTxId","numbro"],"sourceRoot":""}