{"version":3,"file":"static/js/199.e728060e.chunk.js","mappings":"sQA0BA,MCxBaA,EAAuC,CAClD,gBDwBa,IAA0B,mE,eEdzC,MAiBA,GAjBgBC,EAAAA,EAAAA,aAGd,EAAGC,KAAAA,EAAMC,UAAAA,KAAcC,GAASC,KAChC,MAAMC,EAAMH,EAAY,WAAaA,EAAY,UAEjD,OACE,iBAAMA,UAAWG,KAASF,EAA1B,SACGJ,EAAaE,IACZ,qBAAUG,IAAKA,EAAKE,IAAKP,EAAaE,MAEtC,qBAAUG,IAAKA,EAAKH,KAAMA,SChB5BM,EAA6C,MAACC,GAuEpD,EA7DmB,EACjBC,YAAAA,EACAC,KAAAA,EAAO,GACPC,KAAAA,GAAO,SAAC,EAAD,CAASV,KAAK,oBACrBW,SAAAA,GAAW,MAOX,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,UAASR,IACjC,cAAES,IAAkBC,EAAAA,EAAAA,YACpB,MAAEC,IAAUC,EAAAA,EAAAA,WAEZC,GAAeC,EAAAA,EAAAA,cACnBC,MAAAA,IACE,MAAMC,QAAcP,EAAcQ,cAAcC,GAChD,UAAIF,QAAJ,IAAIA,GAAAA,EAAOG,QAAS,OAAOH,EAAMG,UAGnC,CAACV,IAGGW,GAAgBN,EAAAA,EAAAA,cAAYC,UAChC,IAAKM,EAAAA,QAAAA,UAAkBnB,GAAc,OAAOK,EAAWP,GAEvD,MAAMsB,EAAWC,OAAOC,OAAOb,GAAOc,MACpC,EAAGC,SAAAA,KAAeA,IAAaxB,IAEjC,GAAIoB,EAAU,CACZ,MAAM,OAAEK,EAAF,OAAUC,GAAWN,EACrBhB,QAAgBuB,QAAQC,IAAI,CAACH,EAAQC,GAAQG,IAAIlB,IAEvD,OADIR,GAAUC,EAAQ0B,UACfzB,EAAWD,GAGpB,MAAM2B,QAAepB,EAAaX,GAClC,OAAOK,EAAW,CAAC0B,MAClB,CAAC/B,EAAaG,EAAUQ,EAAcF,IAMzC,OAJAuB,EAAAA,EAAAA,YAAU,KACRd,MACC,CAACA,KAGF,SAAC,EAAAe,OAAA,MAAD,CAAcC,MAAO,CAAEC,QAAS,QAASC,WAAY,UAArD,SACGhC,EAAQyB,KAAI,CAACE,EAAQM,KACpB,SAAC,EAAAJ,OAAD,CAEEpC,IAAKkC,EACL9B,KAAMA,EACNiC,MAAO,CAAEI,gBAAiB,UAAWC,OAAQ,QAJ/C,SAMGrC,GALImC,QC9DTG,EAAe,gBAuDrB,EA9CiB,EACfxC,YAAAA,EACAyC,UAAAA,EAAY,WACZtC,SAAAA,GAAW,MAMX,MAAOX,EAAMkD,IAAWpC,EAAAA,EAAAA,UAASkC,IAC3B,cAAEjC,IAAkBC,EAAAA,EAAAA,YACpB,MAAEC,IAAUC,EAAAA,EAAAA,WAEZiC,GAAa/B,EAAAA,EAAAA,cACjBC,MAAAA,IACE,MAAMC,QAAcP,EAAcQ,cAAcC,GAChD,cAAIF,QAAJ,IAAIA,GAAAA,EAAOtB,KAAasB,EAAMtB,KACvBgD,IAET,CAACjC,IAGGqC,GAAchC,EAAAA,EAAAA,cAAYC,UAC9B,IAAKM,EAAAA,QAAAA,UAAkBnB,GAAc,OAAO0C,EAAQF,GAEpD,MAAMpB,EAAWC,OAAOC,OAAOb,GAAOc,MACpC,EAAGC,SAAAA,KAAeA,IAAaxB,IAEjC,GAAIoB,EAAU,CACZ,MAAM,OAAEK,EAAF,OAAUC,GAAWN,EACrByB,QAAclB,QAAQC,IAAI,CAACH,EAAQC,GAAQG,IAAIc,IAErD,OADIxC,GAAU0C,EAAMf,UACbY,EAAS,GAAEG,EAAMC,KAAKL,SAG/B,MAAMjD,QAAamD,EAAW3C,GAC9B,OAAO0C,EAAQlD,KACd,CAACQ,EAAaG,EAAUwC,EAAYlC,EAAOgC,IAM9C,OAJAT,EAAAA,EAAAA,YAAU,KACRY,MACC,CAACA,KAEG,0BAAOpD,KCpDVuD,EAAiB,OAuDvB,EA9CmB,EACjB/C,YAAAA,EACAyC,UAAAA,EAAY,WACZtC,SAAAA,GAAW,MAMX,MAAO6C,EAAQC,IAAa3C,EAAAA,EAAAA,UAASyC,IAC/B,cAAExC,IAAkBC,EAAAA,EAAAA,YACpB,MAAEC,IAAUC,EAAAA,EAAAA,WAEZwC,GAAetC,EAAAA,EAAAA,cACnBC,MAAAA,IACE,MAAMC,QAAcP,EAAcQ,cAAcC,GAChD,cAAIF,QAAJ,IAAIA,GAAAA,EAAOkC,OAAelC,EAAMkC,OACzBhC,EAAQmC,UAAU,EAAG,KAE9B,CAAC5C,IAGG6C,GAAgBxC,EAAAA,EAAAA,cAAYC,UAChC,IAAKM,EAAAA,QAAAA,UAAkBnB,GAAc,OAAOiD,EAAUF,GAEtD,MAAM3B,EAAWC,OAAOC,OAAOb,GAAOc,MACpC,EAAGC,SAAAA,KAAeA,IAAaxB,IAEjC,GAAIoB,EAAU,CACZ,MAAM,OAAEK,EAAF,OAAUC,GAAWN,EACrBiC,QAAgB1B,QAAQC,IAAI,CAACH,EAAQC,GAAQG,IAAIqB,IAEvD,OADI/C,GAAUkD,EAAQvB,UACfmB,EAAUI,EAAQP,KAAKL,IAGhC,MAAMO,QAAeE,EAAalD,GAClC,OAAOiD,EAAUD,KAChB,CAAChD,EAAaG,EAAU+C,EAAczC,EAAOgC,IAMhD,OAJAT,EAAAA,EAAAA,YAAU,KACRoB,MACC,CAACA,KAEG,0BAAOJ,KC3BhB,EAvBc,KACZ,MACEM,KAAOC,SAAUC,GACjBC,KAAOF,SAAUG,KACfC,EAAAA,EAAAA,cAAaC,GAAoBA,IAE/BC,GAA4B,OAAXL,QAAW,IAAXA,OAAA,EAAAA,EAAaxC,UAAW,GACzC8C,GAA4B,OAAXJ,QAAW,IAAXA,OAAA,EAAAA,EAAa1C,UAAW,GAC/C,OACE,UAAC,EAAA+C,MAAD,YACE,UAAC,EAAA9B,OAAA,MAAD,YACE,SAAC,EAAD,CAAYjC,YAAa6D,KACzB,SAAC,EAAD,CAAY7D,YAAa8D,QAE3B,UAAC,EAAAE,WAAA,KAAD,YACE,SAAC,EAAD,CAAYhE,YAAa6D,IACxB,OACD,SAAC,EAAD,CAAY7D,YAAa8D,W,2ECT1B,MAMMG,EAAoC,CAC/CC,IAAK,KAGMC,EAAmD,CAC9DC,MAX+C,CAC/CC,MAAO,GACPC,KAAM,KAUNC,MAAON,GCpBF,MAAMO,EAIXC,YAAYC,GAAc,KAH1BA,IAAM,GAGmB,KAFjBC,aAAsB,GAEL,KADjBC,YAAqB,GAE3BC,KAAKH,IAAMA,EAGbI,IAAIC,EAAcC,GAChBH,KAAKF,aAAaM,KAAKF,GACvBF,KAAKD,YAAYK,KAAKD,GAGxBE,SAASC,GACP,KAAON,KAAKF,aAAaS,OAAS,GAAG,CACnBP,KAAKF,aAAaU,OAClCN,CAAQI,IAIZG,QAAQC,GACN,KAAOV,KAAKD,YAAYQ,OAAS,GAAG,CACnBP,KAAKD,YAAYS,OAChCL,CAAOO,KC3BN,MAAMC,EAGD,WACRd,EACAe,EACAC,EAAuBzB,GAEvBY,KAAKc,SAASC,IAAIlB,EAAKe,GACvBI,YAAW,KACThB,KAAKc,SAASG,OAAOpB,KACpBgB,EAAQxB,KAGH,WAACQ,GACT,OAAOG,KAAKc,SAASI,IAAIrB,IAfhBc,EACIG,SAAW,IAAIK,ICCzB,MAAMC,EAGmB,uBAACP,GAC7B,MAAMQ,EAAcC,KAAKC,UAAUV,GACnC,GAAIb,KAAKwB,YAAYC,IAAIJ,GAAc,CACrC,MAAMK,EAAW1B,KAAKwB,YAAYN,IAAIG,GACtC,GAAIK,EAAU,OAAOA,EAGvB,IAAIC,EAAkB,IAAIC,EAAaf,GAEvC,OADAb,KAAKwB,YAAYT,IAAIM,EAAaM,GAC3BA,EAGQ,kBACfE,EACAC,EACAjB,EAA8B,IAEJ,kBAAfgB,IAAyBA,EAAaP,KAAKC,UAAUM,IAEhE,IAAIE,EAAeX,EAAWY,gBAAgBnB,GAC9CO,EAAWI,YAAYT,IAAIc,EAAYE,GACvC,MAAME,EAAa,IAAItC,EAAakC,GACpC,OAAOE,EAAaG,KAAQD,EAAYH,IAzB/BV,EACJI,YAAc,IAAIL,IA4B3B,MAAMS,EAQJhC,YAAYiB,GAA8B,KAPlCsB,YAOiC,OANjCC,qBAMiC,OALjCC,SAAqB,GAKY,KAHjCC,kBAAoB,IAAInB,IAGS,KAFjCoB,aAAgC,GAGtCvC,KAAKmC,OAAS3F,OAAOgG,OAAOlD,EAA8BuB,GAGlD,WAAIoB,EAA2BH,GACvC,MAAMW,EAAY9B,EAAkBO,IAAIe,EAAWpC,KACnD,GAAI4C,EAAW,OAAO3F,QAAQoD,QAAQuC,GAEtC,IAAIC,GAAU,EACVC,EAAU3C,KAAKsC,kBAAkBpB,IAAIe,EAAWpC,KAOpD,OANK8C,IACHA,EAAUV,EACVS,GAAU,EACV1C,KAAKsC,kBAAkBvB,IAAI4B,EAAQ9C,IAAK8C,IAGnC,IAAI7F,SAAQ,CAACoD,EAASC,KAC3B,IAAKwC,EAAS,OAAOxC,EAAO,sBAC5BwC,EAAQ1C,IAAIC,EAASC,GACjBuC,GACF1C,KAAK4C,MAASD,EAASb,MAKrBc,MAASD,EAAwBb,GACvC,IAAK9B,KAAK6C,gBACR,OAAO7C,KAAK8C,gBAAgBH,EAASb,GAEvC9B,KAAK+C,iBAELjB,IACGkB,MAAMC,IACLtC,EAAkBI,IAAI4B,EAAQ9C,IAAKoD,EAAUjD,KAAKmC,OAAOzC,OACzDiD,EAAQtC,SAAS4C,MAElBC,OAAOxC,IACNiC,EAAQlC,QAAQC,MAEjByC,SAAQ,KACPnD,KAAKsC,kBAAkBrB,OAAO0B,EAAQ9C,KACtCG,KAAKoD,kBAAkBtB,MAIrBsB,kBAAkBtB,GACxB,IAAK9B,KAAK6C,gBAAiB,OAC3B,MAAMF,EAAU3C,KAAKuC,aAAa/B,QAC9BmC,GAAS3C,KAAKkC,KAAKS,EAASb,GAEC,IAA7B9B,KAAKuC,aAAahC,QAAgBP,KAAKoC,iBACzCiB,cAAcrD,KAAKoC,iBAIfU,gBACNH,EACAb,GACC,IAAD,EACA9B,KAAKuC,aAAanC,KAAKuC,GACvB3C,KAAKoC,gBAAkBkB,aAAY,KACjCtD,KAAKoD,kBAAkBtB,KADS,UAE/B9B,KAAKmC,OAAO5C,aAFmB,aAE/B,EAAmBE,MAGhBoD,gBACN,OAAO,EAGDE,iBAAkB,IAAD,EACvB,IAAK/C,KAAKmC,OAAO5C,MAAO,OAExB,MAAMgE,GAAM,IAAIC,MAAOC,UACvBzD,KAAKqC,SAASjC,KAAKmD,GACfvD,KAAKqC,SAAS9B,QAAd,UAAuBP,KAAKmC,OAAO5C,aAAnC,aAAuB,EAAmBC,QAC5CQ,KAAKqC,SAAS7B,SC1Gb,MAWMkD,EAAiB,CAACvH,EAAiBwH,EAAM,EAAGC,EAAY,QAEjEzH,EAAQmC,UAAU,EAAGqF,GACrBC,EACAzH,EAAQmC,UAAUnC,EAAQoE,OAASoD,EAAKxH,EAAQoE,QASvCsD,EAAYC,GACnBxH,EAAAA,QAAAA,UAAkBwH,GACZ,uCAAsCA,aAAyBC,EAAAA,KAEjE,kCAAiCD,aAAyBC,EAAAA,KAQvDC,EACXpD,GAEKA,GAAUqD,OAAOC,SAASD,OAAOrD,IAC/BuD,GAAAA,CAAOvD,GADwCuD,GAAAA,CAAO,KAUlDC,EAAc,CAACC,EAAeC,KACzC,IAAIC,EAAOC,KAAKC,MAAsB,SAAhBD,KAAKE,UAC3B,GAAIL,EAAM,CACRE,EAAO,EACP,IAAK,IAAI/G,EAAI,EAAGA,EAAI6G,EAAK9D,OAAQ/C,IAC/B+G,EAAOF,EAAKM,WAAWnH,KAAO+G,GAAQ,GAAKA,GAG/C,IAAIK,EAAM,CAAC,EAAG,EAAG,GACjB,IAAK,IAAIpH,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIoD,EAAS2D,GAAa,EAAJ/G,EAAU,IAChCoH,EAAIpH,GAAKoD,EAEX,MAAQ,QAAOgE,EAAI,YAAYA,EAAI,MAAMN,GAAW,MAQzCO,EAAW7I,MAAO8I,EAAS,KAC/B1D,EAAWc,KAAK,WAAa4C,GAAQ,IAAMC,EAAAA,MAAAA,SAAeD,KC+CnE,EAhHiB,EACfE,UAAAA,EAAY,GACZC,OAAAA,EAAS,GACTC,KAAAA,EAAO,OACPrE,QAAAA,EACAsE,WAAAA,GAAa,EACbC,QAAAA,EAAU,gBAEV,MAAM,gBAAE3H,GAAoBoD,GAAW,IAChCwE,EAAgBC,IAAmB7J,EAAAA,EAAAA,WAAkB,GAEtD8J,GAAaxJ,EAAAA,EAAAA,cACjB,CACEuE,EACAkF,EACAC,KAHF,CAKER,OAAQO,EACRE,SAAU,CAAC,IAAK7E,EAASP,KAAAA,EAAM7C,gBAAiBgI,OAElD,CAAC5E,IAGG8E,GAAWC,EAAAA,EAAAA,QAAqB,MAkEhCC,GAAgB9J,EAAAA,EAAAA,cAAY,KAAO,IAAD,IACtC,IAAK4J,IAAalI,EAAiB,MA5FN,UA6F7B,MAAMqI,EAAG,OAAGH,QAAH,IAAGA,GAAH,UAAGA,EAAUI,eAAb,iBAAG,EAAmBC,cAAtB,aAAG,EAA2BC,WAAW,MAC5CC,EAAQ,OAAGJ,QAAH,IAAGA,OAAH,EAAGA,EAAKK,qBAAqB,EAAG,EAAG,EAAG,KAC5C,OAARD,QAAQ,IAARA,GAAAA,EAAUE,aAAa,EAAG3I,GAClB,OAARyI,QAAQ,IAARA,GAAAA,EAAUE,aAAa,EAAI,GAAE3I,OAE7B,MAD4B,SAATyH,EAAkBgB,EAAWzI,IAE/C,CAACA,EAAiByH,IAYrB,OAVA/H,EAAAA,EAAAA,YAAU,KAAO,IAAD,EACd,MAAMkJ,EAAgBV,EAASI,QACzBO,EAAW,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAe/F,KAAKoF,gBAAvB,aAAG,EAA8BhJ,MAAK,EAAG4D,KAAAA,KAAWA,IAC/DiG,EAAcC,GAAAA,CAAO,OAACF,QAAD,IAACA,OAAD,EAACA,EAAahG,KAAM0E,GAC3CqB,IAAkBE,IACpBF,EAAc/F,KAAOiF,EAAWP,EAAWC,EAAQY,KACtC,OAAbQ,QAAa,IAAbA,GAAAA,EAAeI,YAEhB,CAACzB,EAAWO,EAAYM,EAAeZ,KAEnC,mBAAQyB,GAAItB,EAASuB,OAAO,QAAQ7L,IAnFnBkL,IACtB,IAAKA,EAAQ,OACb,MAAMF,EAAME,EAAOC,WAAW,MAC1BH,IAAQT,IAEVM,EAASI,QAAU,IAAIa,IAAJ,CAAUd,EAAK,CAChCZ,KAAMA,EACN5E,KAAM,CACJ2E,OAAQ,GACRS,SAAU,CACR,CACEpF,KAAM,MAIZuG,QAAS,CACPC,YAAY,EACZC,qBAAqB,EACrBC,OAAQ,CACNC,MAAO,CACL,CACEC,UAAW,CACTC,YAAY,EACZ7J,SAAS,GAEX8J,MAAO,CACL9J,SAAU6H,KAIhBkC,MAAO,CACL,CACEH,UAAW,CACTC,YAAY,EACZ7J,SAAS,GAEX8J,MAAO,CACL9J,SAAU6H,EACVmC,aAAa,EACbC,cAAe,EACfzF,SAAU,SAAUlB,EAAO4G,EAAO/K,GAChC,OAAOuH,EAAQpD,GAAO6G,OAAO,iBAMvCC,QAAS,CACPC,QAAQ,GAEVC,MAAO,CACLC,QAAS,CAACC,EAAOC,KACf,MAAMC,EAASC,SAASC,eAAe9C,GAClC4C,IACLA,EAAO3K,MAAM8K,OAASJ,EAAS,GAAK,UAAY,gBAKxDzC,GAAgB,QC1FtB,EAVmB,KAEf,SAAC,EAAA8C,IAAD,CAAK/K,MAAO,CAAEsJ,OAAQ,KAAO0B,MAAM,SAASC,QAAQ,SAApD,UACE,SAAC,EAAAC,IAAD,WACE,SAAC,EAAAC,MAAD,Q,mCCqBe,IAAIC,EAAAA,EAX3B,MAqCaC,EAAmB1M,MAC9B8I,EACA6D,KAEA,IACE,MAAMrI,QAAkBsI,GAAAA,CAAM,CAC5BC,OAAQ,MACRC,IAAM,0CAAyChE,uCAA4C6D,EAAOI,iBAAiBJ,EAAOK,aAG5H,OADyD1I,EAAKA,KAAK2I,OAClDjM,KAAKsD,IAAD,CAAab,KAAMa,EAAK,GAAI4I,IAAK5I,EAAK,OAC3D,MAAOI,GACP,MAAO,K,IClDNyI,GAAAA,SAAAA,GAAAA,EAAAA,IAAAA,MAAAA,EAAAA,KAAAA,OAAAA,EAAAA,MAAAA,QAAAA,EAAAA,KAAAA,OAAAA,CAAAA,IAAAA,EAAAA,KAML,MAAMC,EAOF,CACFC,IAAK,CAAEC,OAAQ,EAAGC,KAAM,QAAS9B,OAAQ,SACzC+B,KAAM,CAAEF,OAAQ,EAAGC,KAAM,OAAQ9B,OAAQ,UACzCgC,MAAO,CAAEH,OAAQ,EAAGC,KAAM,OAAQ9B,OAAQ,UAC1CiC,KAAM,CAAEJ,OAAQ,EAAGC,KAAM,SAAU9B,OAAQ,WAEvCkC,EAAkD,CACtDN,IAAK,CAAEN,KAAM,EAAGC,SAAU,UAC1BQ,KAAM,CAAET,KAAM,EAAGC,SAAU,SAC3BS,MAAO,CAAEV,KAAM,GAAIC,SAAU,SAC7BU,KAAM,CAAEX,KAAM,IAAKC,SAAU,UAGzBY,EACG,UADHA,EAEI,EAFJA,EAGO,GAHPA,EAIK,MAJLA,EAKS,cA4Kf,EAzKkB,KAAO,IAAD,MACtB,MAAOZ,EAAU1F,IAAe7H,EAAAA,EAAAA,UAAS0N,EAASK,OAC3CxE,EAAW6E,IAAgBpO,EAAAA,EAAAA,UAChC,IAEIqO,GAAUhL,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMN,MACjDsL,GAAUjL,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMH,OACjD,cAAElD,IAAkBC,EAAAA,EAAAA,WAEpBqO,EAAmB,CACvBC,YAAaL,EACbM,aAAcN,EACdO,YAAaP,EACbQ,QAASR,EACTS,eAAgBT,EAChBU,iBAAkBV,EAClBnM,gBAAiBmM,GAGbW,GAAgBxO,EAAAA,EAAAA,cACnByO,IACC,MAAMxF,EAAyB,IACzB,OAAEyC,EAAF,OAAU6B,EAAV,KAAkBC,GAASH,EAAkBJ,GACnD,IAAIyB,EAAcC,GAAAA,GAElB,IAAK,MAAMpK,KAAQkK,EAAWvN,UAAW,CACvC,MAAM0N,EAAYD,GAAAA,CAAOpK,EAAKb,MAAMgI,OAAOA,GAC3C,GAAIkD,IAAcF,EAAYhD,OAAOA,GAAS,CAE5C,IAAIjC,EAAQmF,EACRA,IAFQD,GAAAA,GAASjD,OAAOA,KAELjC,EAAQkF,GAAAA,GAASjD,OAAO,UAC3CgD,GACFzF,EAAU4F,QAAQ,CAChBpF,MAAOA,EACP0D,IAAK5I,EAAK4I,MAEduB,EAAcA,EAAYI,SAASvB,EAAQC,OACpB,UAAdoB,GACT3F,EAAU4F,QAAQ,CAChBpF,MAAOiF,EAAYhD,OAAO,UAC1ByB,IAAK5I,EAAK4I,MAIhBW,EAAa7E,KAEf,CAACgE,IAGG8B,GAAkB/O,EAAAA,EAAAA,cACrByO,IACC,MAAMxF,EAAyB,IACzB,OAAEyC,EAAF,OAAU6B,EAAV,KAAkBC,GAASH,EAAkBJ,GACnD,IAAIyB,EAAcC,GAAAA,GAElB,IAAK,MAAMpK,KAAQkK,EAAWvN,UAAW,CACvC,MAAM0N,EAAYD,GAAAA,CAAOpK,EAAKb,MAAMgI,OAAOA,GACvCkD,IAAcF,EAAYhD,OAAOA,KACnCgD,EAAcA,EAAYI,SAASvB,EAAQC,GAC3CvE,EAAU4F,QAAQ,CAChBpF,MAAOmF,EACPzB,IAAK5I,EAAK4I,OAKhBW,EAAa7E,KAEf,CAACgE,IAGG+B,GAAiBhP,EAAAA,EAAAA,cAAYC,UAAa,IAAD,QAE7C,MAAMgP,QAAqBtP,EAAcQ,eACvC,UAAA4N,EAAQpL,gBAAR,eAAkBvC,UAAW,IAEzB8O,QAAqBvP,EAAcQ,eACvC,UAAA6N,EAAQrL,gBAAR,eAAkBvC,UAAW,IAEzB+O,EAAS,OAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAcG,kBAAjB,aAAG,EAA0BC,YACtCC,EAAS,OAAGJ,QAAH,IAAGA,GAAH,UAAGA,EAAcE,kBAAjB,aAAG,EAA0BC,YAEtCE,EAAiBxB,EAAQyB,iBAAmBxB,EAAQwB,eAC1D,IAAKF,IAAcH,GAAaI,EAAgB,OAAOzB,EAAa,IAEpE,MAAM2B,EAAe7B,EAAcX,IAC5ByC,EAAcC,SAAsB5O,QAAQC,IAAI,CACrD2L,EAAiBwC,EAAWM,GAC5B9C,EAAiB2C,EAAWG,KAGxBhB,EAA8C,GACpD,IAAK,IAAImB,EAAMF,EAAalL,OAAS,EAAGoL,GAAO,EAAGA,IAAO,CACvD,MAAMC,EAAWH,EAAaE,GACxBE,EACJH,EAAaA,EAAanL,OAASkL,EAAalL,OAASoL,GACtDC,GAAaC,GAClBrB,EAAWI,QAAQ,CACjBnL,KAAMmM,EAASnM,KACfyJ,IAAK0C,EAAS1C,IAAM2C,EAAS3C,MAGjC,OAAIF,IAAaG,EAASE,IAAYkB,EAAcC,GAC7CM,EAAgBN,KACtB,CACDT,EAAQwB,eADP,UAEDxB,EAAQrL,gBAFP,aAED,EAAkBvC,QAClB2N,EAAQyB,eAHP,UAIDzB,EAAQpL,gBAJP,aAID,EAAkBvC,QAClB6M,EACA8B,EACAP,EACA7O,KAGFyB,EAAAA,EAAAA,YAAU,KACR4N,MACC,CAACA,IAEJ,MAAMe,GAAQ,UAAA9G,EAAUA,EAAUzE,OAAS,UAA7B,eAAiC2I,MAAO,EAChD6C,EAAU/H,EAAQ8H,GAAOrE,OAC7BqE,EAAQ,EAAI,WAAa,kBAG3B,OACE,SAAC,EAAAE,KAAD,CAAMC,UAAU,EAAOrR,UAAU,YAAYsR,UAAW,CAAEC,WAAY,IAAtE,UACE,UAAC,EAAA/D,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAK8D,KAAK,OAAV,UACE,UAAC,EAAAjE,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAK8D,KAAK,OAAV,UACE,SAAC,EAAD,MAEDrH,KAAeA,EAAUzE,SACxB,SAAC,EAAAgI,IAAD,WACE,UAAC,EAAA+D,MAAA,MAAD,CACEC,aAAcpD,EAASK,KACvBgD,SAAWC,GAAMnJ,EAAYmJ,EAAEzE,OAAOpH,OACtChG,UAAU,kBAHZ,WAKE,SAAC,EAAA0R,MAAA,OAAD,CAAc1L,MAAOuI,EAASE,IAA9B,iBACA,SAAC,EAAAiD,MAAA,OAAD,CAAc1L,MAAOuI,EAASK,KAA9B,iBACA,SAAC,EAAA8C,MAAA,OAAD,CAAc1L,MAAOuI,EAASM,MAA9B,iBACA,SAAC,EAAA6C,MAAA,OAAD,CAAc1L,MAAOuI,EAASO,KAA9B,sBAIN,SAAC,EAAAnB,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAvN,WAAA,MAAD,CAAkBwN,MAAO,EAAzB,SACGb,EAAQC,EAAU,aAK3B,SAAC,EAAAxD,IAAD,CAAKmE,KAAM,GAAX,SACG1H,GAAeA,EAAUzE,QACxB,SAAC,EAAD,CACEyE,UAAS,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAWhI,KAAKsD,GAASA,EAAK4I,MACzCjE,OAAM,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAWhI,KAAKsD,GAASA,EAAKkF,QACtC3E,QAASmJ,KAGX,SAAC,EAAD,YCxMN4C,GAAWC,OAAO,KAgHxB,GA9GmB,EACjBC,KAAAA,EACAC,WAAAA,EAAa,SACbC,SAAAA,GAAW,EACXC,WAAAA,EAAaJ,OAAO,GACpBK,YAAAA,GAAc,MAQd,MAAOC,EAASC,IAAc3R,EAAAA,EAAAA,WAAS,IAErCgD,KAAO6K,OAAQ+D,EAAY3O,SAAUC,GACrCC,KAAO0K,OAAQgE,EAAY5O,SAAUG,KACnCC,EAAAA,EAAAA,cAAaC,GAAoBA,KAC/B,SAAEwO,IAAazO,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMyO,YAE1DC,QAAUtR,QAASuR,KACjBC,EAAAA,EAAAA,aAKEC,GAAa7R,EAAAA,EAAAA,cAAYC,UAC7B,MAAM,KAAE6R,EAAF,KAAQC,EAAR,OAAcL,GAAWM,OAAOC,OACtC,IAAKP,EAAQ,OAEb,MAAMQ,QAAyBnR,QAAQC,IACrC+P,EAAK9P,KACHhB,OACEkS,eAAAA,EACAC,eAAAA,EACA5R,UAAYJ,QAASiS,OAUd,CACLA,YAAaA,EACbC,iBAVuBP,EAAKQ,wBAC5BZ,EACAQ,GASAK,iBAPuBT,EAAKQ,wBAC5BZ,EACAS,QAWFK,GAAyB,OAAX7P,QAAW,IAAXA,OAAA,EAAAA,EAAa8P,WAAY,EACvCC,EAAY3J,EAAAA,MAAAA,WAAiBsI,EAAYmB,GACzCG,GAAyB,OAAX9P,QAAW,IAAXA,OAAA,EAAAA,EAAa4P,WAAY,EAEvClP,EADYwF,EAAAA,MAAAA,WAAiBuI,EAAYqB,IAE/B/B,GAAW7H,EAAAA,MAAAA,WAAiBwI,EAAU,IAAOX,GAE7D,aAAaiB,EAAKe,MAAMF,EAAWnP,EAAO0O,EAAkBR,KAC3D,CACDX,EACAnO,EACAE,EACA0O,EACAG,EACAL,EACAC,IA4BF,OACE,SAAC,EAAAuB,OAAD,CACE3J,KAAK,UACL4J,QArBW9S,UACb,IACEoR,GAAW,QATOpR,WACpB,IAAKiR,EAAY,OACjB,MAAM,KAAEY,EAAF,OAAQJ,GAAWM,OAAOC,OAChC,OAAKP,QACQI,EAAKkB,QAAQ9B,EAAYQ,QADtC,GAOQuB,GACN,MAAM,KAAEC,SAAgBrB,KAAiB,GAMzC,OALAG,OAAOmB,OAAO,CACZhK,KAAM,UACNiK,YAAc,4CACdL,QAAS,IAAMf,OAAOqB,KAAKvL,EAASoL,GAAQ,IAAK,YAE5ClC,IACP,MAAOsC,GACP,OAAOtB,OAAOmB,OAAO,CAAEhK,KAAM,QAASiK,YAAaE,EAAGC,UAXxD,QAaElC,GAAW,KAQXJ,SAAUA,EACVG,QAASA,EACToC,OAAK,EALP,SAOGrC,EAAc,wBAA0B,UC7E/C,GA9BoB,KAClB,MACEzO,KAAK,SAAEC,GACPkQ,OAAO,KAAE9B,KACPhO,EAAAA,EAAAA,cAAaC,GAAoBA,IAE/BmP,EAAc,OAAGxP,QAAH,IAAGA,OAAH,EAAGA,EAAUvC,QAC3BqT,GAAqBC,EAAAA,EAAAA,UAAQ,KACjC,IAAK3C,EAAKvM,SAAWjE,EAAAA,QAAAA,UAAkB4R,GAAiB,MAAO,GAC/D,IAAIwB,EAAO,CAACxB,GACZ,IAAK,MAAMyB,KAAO7C,EAAM,CACtB,MAAM,eAAEqB,GAAmBwB,EACvBrT,EAAAA,QAAAA,UAAkB6R,IAAiBuB,EAAKtP,KAAK+N,GAEnD,OAAOuB,IACN,CAACxB,EAAgBpB,IAEpB,OACE,SAAC,EAAA5N,MAAD,iBACGsQ,QADH,IACGA,OADH,EACGA,EAAoBxS,KAAI,CAAC7B,EAAaqC,KACrC,UAAC,EAAAoS,SAAD,YACE,SAAC,EAAD,CAAYzU,YAAaA,IACxBqU,EAAmBjP,OAAS/C,EAAI,IAC/B,SAAC,EAAD,CAAS7C,KAAK,8BAHH6C,QC1BVqS,GAASC,EAAAA,KAAAA,OAETC,GAAQ,CAACrB,EAAmBsB,KACvC,MAAM,eAAE9B,EAAF,eAAkBC,EAAlB,SAAkC5R,GAAayT,GAC/C,UAAEC,EAAF,UAAaC,GAAc3T,EAC3B4T,EAAaC,GAAelC,EAAgB3R,GAC5C8T,EAAaD,GAAejC,EAAgB5R,GAClD,IAAK4T,IAAeE,EAAY,OAAOxD,OAAO,GAE9C,MAAM,UAAEyD,GAAcT,GAAOhC,KAC3Ba,EACAyB,EACAE,EACAJ,EACAC,GAEF,OAAOI,GAGIC,GAAe,CAACD,EAAmBhQ,KAC9C,MAAM,eAAE4N,EAAF,eAAkBC,EAAlB,SAAkC5R,GAAa+D,GAC/C,UAAE2P,EAAF,UAAaC,GAAc3T,EAC3B4T,EAAaC,GAAelC,EAAgB3R,GAC5C8T,EAAaD,GAAejC,EAAgB5R,GAQlD,OAPkBsT,GAAOW,YACvBF,EACAH,EACAE,EACAJ,EACAC,ICRSE,GAAiB,CAC5BjV,EACAoB,KAEA,MAAM,OAAEK,EAAF,OAAUC,EAAV,UAAkB4T,EAAlB,UAA6BC,GAAcnU,EACjD,GAAIpB,IAAgByB,EAAQ,OAAO6T,EACnC,GAAItV,IAAgB0B,EAAQ,OAAO6T,EACnC,MAAM,IAAIC,MAAM,yBAsCLC,GAAe,CAC1BC,EACAC,EACA9R,EACAC,EACA8R,KAEA,MAAM,MAAEnV,EAAF,MAASoV,GAAUD,GAAa,CACpCC,MAAO,CAAChS,GACRpD,MAAO,IAET,GAAIA,EAAM2E,QAvEgB,EAuEe,OACzC,MAAM0Q,EAAUH,EAAM5P,IAAIlC,GACnB,OAAPiS,QAAO,IAAPA,GAAAA,EAASC,SAAQ,CAAC3U,EAAU6R,KAC1B,MACMD,EADiBnP,IAEFzC,EAASK,OAASL,EAASM,OAASN,EAASK,OAClE,GAAIhB,EAAMuV,SAAS/C,IAAgB4C,EAAMG,SAAShD,GAAiB,OACnE,MAAMiD,EAAe,CACnBxV,MAAO,IAAIA,EAAOwS,GAClB4C,MAAO,IAAIA,EAAO7C,IAEpB,GAAIA,IAAmBlP,EAAgB,OAAO4R,EAAOzQ,KAAKgR,GAC1DR,GAAaC,EAAQC,EAAO3C,EAAgBlP,EAAgBmS,OAI1DC,GAAYrV,MAChBsV,EACA1V,EACAoD,EACAC,KAEA,IAAK3C,EAAAA,QAAAA,UAAkB0C,KAAoB1C,EAAAA,QAAAA,UAAkB2C,GAC3D,MAAO,GAET,MAAM6N,EAAkB,GACxB,IAAIoB,EAAiBlP,EACjBmP,EAAiB,GACrB,IAAK,MAAMC,KAAexS,EAAO,CAC/B,MAAMW,EAAW+U,EAAYlD,IACvB,OAAExR,EAAF,OAAUC,GAAWN,EAC3B,GAAI2R,IAAmBtR,GAAUsR,IAAmBrR,EAAQ,MAAO,GACnEsR,EAAiBD,IAAmBtR,EAASC,EAASD,EACtD,MAAM+S,EAAe,CACnBpT,SAAU,CAAEJ,QAASiS,KAAgB7R,GACrC2R,eAAAA,EACAC,eAAAA,GAEFD,EAAiBC,EACjBrB,EAAK1M,KAAKuP,GAEZ,OAAO7C,GCvFT,GA3BuB,KACrB,MACE8B,OAAO,KAAE9B,GACTrO,KAAO6K,OAAQoF,EAAWhQ,SAAUC,GACpCC,KAAO0K,OAAQgH,EAAW5R,SAAUG,KAClCC,EAAAA,EAAAA,cAAaC,GAAoBA,IAErC,IAAKkF,OAAOyK,GAAY,OAAO,EAE/B,MAAM6C,EAAYtN,OAAOqM,GAAarM,OAAOyK,GAC7C,IAAI8C,EAAmB,EACvB1E,EAAKoE,SAAQ,EAAGhD,eAAAA,EAAgBC,eAAAA,EAAgB5R,SAAAA,MAC9C,MAAMkV,EAAarB,GAAelC,EAAgB3R,GAC5CmV,EAAatB,GAAejC,EAAgB5R,GAC5CoV,EAAW5M,EAAAA,MAAAA,aACd2M,EAAa7E,OAAO,IAjBT,GAiB6B4E,EAjB7B,GAoBdD,GAAsCvN,OAAO0N,MAE/C,MAAMC,EACHJ,EAAmB,IAAM7S,EAAY8P,SAAY,IAAM5P,EAAY4P,SAChEoD,GAAeD,EAAeL,GAAaK,EAEjD,OAAOpN,KAAKsN,IAAID,EAAa,ICoB/B,GA1Cc,KACZ,MAAOvW,EAAUyW,IAAetW,EAAAA,EAAAA,WAAS,IAEvCgD,KAAOC,SAAUC,EAAa2K,OAAQoF,GACtC9P,KAAOF,SAAUG,EAAayK,OAAQgH,KACpCxR,EAAAA,EAAAA,cAAaC,GAAoBA,IAE/BC,GAA4B,OAAXL,QAAW,IAAXA,OAAA,EAAAA,EAAaxC,UAAW,GACzC8C,GAA4B,OAAXJ,QAAW,IAAXA,OAAA,EAAAA,EAAa1C,UAAW,GACzC2P,EAAQ9H,EAAQC,OAAOqM,GAAarM,OAAOyK,IAAYjH,OAC3D,gBAEIuK,EAAgBhO,EAAQC,OAAOyK,GAAazK,OAAOqM,IAAY7I,OACnE,gBAGF,OACE,UAAC,EAAAvI,MAAD,YACE,SAAC,EAAA2P,OAAD,CACE3J,KAAK,OACL4J,QAAS,IAAMiD,GAAazW,GAC5B2W,MAAM,SACN5W,MAAM,SAAC,EAAD,CAASV,KAAK,+BAEtB,SAAC,EAAAwE,WAAA,KAAD,UAAmB7D,EAAmB0W,EAARlG,KAC9B,UAAC,EAAA3M,WAAA,KAAD,WACI7D,GAGA,SAAC,EAAD,CAAYH,YAAa6D,KAFzB,SAAC,EAAD,CAAY7D,YAAa8D,IAI1B,MACC3D,GAGA,SAAC,EAAD,CAAYH,YAAa8D,KAFzB,SAAC,EAAD,CAAY9D,YAAa6D,WCpB7BkT,GAAkB,EACtB1M,MAAAA,EAAQ,GACR2M,QAAAA,EAAU,OAMR,UAAC,EAAA/J,IAAD,YACE,SAAC,EAAAG,IAAD,CAAK8D,KAAK,OAAV,UACE,SAAC,EAAAlN,WAAA,KAAD,CAAiB+F,KAAK,YAAtB,SAAmCM,OAErC,SAAC,EAAA+C,IAAD,WACE,0BAAO4J,SAwCf,GAlCoB,KAClB,MACE3E,UAAU,SAAED,KACVzO,EAAAA,EAAAA,cAAaC,GAAoBA,IAC/B8S,EAAcO,KAEpB,OACE,UAAC,EAAAhK,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAACwF,GAAD,CACE1M,MAAM,eACN2M,SACE,SAAC,EAAAhT,WAAA,KAAD,CAAiB+F,KAAK,SAAtB,SACGlB,EAAQC,OAAO4N,IAAcpK,OAAO,oBAK7C,SAAC,EAAAc,IAAD,CAAKmE,KAAM,GAAX,UACE,SAACwF,GAAD,CAAiB1M,MAAM,QAAQ2M,SAAS,SAAC,GAAD,SAE1C,SAAC,EAAA5J,IAAD,CAAKmE,KAAM,GAAX,UACE,SAACwF,GAAD,CACE1M,MAAM,qBACN2M,QAASnO,EAAQuJ,GAAU9F,OAAO,gBAGtC,SAAC,EAAAc,IAAD,CAAKmE,KAAM,GAAX,UACE,SAACwF,GAAD,CAAiB1M,MAAM,QAAQ2M,SAAS,SAAC,GAAD,Y,gBC3DhD,MAgBaE,IAAgBC,EAAAA,GAAAA,kBAK1B,qBACDtW,OAASuW,YAAAA,EAAaC,MAAAA,KAAU1I,IAAa2I,SAAAA,MAC3C,MACEhU,KAAOiU,SAAUC,GACjB/T,KAAO8T,SAAUE,IACfH,IACAxO,OAAO6F,EAAQR,QAAU,IAAGQ,EAAQR,OAAS,IACjD,MAAMoJ,EAAWF,EAAQ,EAAID,EAAcK,EAAc,EAAID,EAC7D,MAAO,IAAK7I,EAAS4I,SAAAA,MAmBzB,IAXcG,EAAAA,GAAAA,aAAY,CACxBlY,KAtCW,MAuCXmY,aAtC0B,CAC1BxJ,OAAQ,GACR5K,SAAU,CACRvC,QAAS,GACTsS,SAAU,GAEZlD,eAAgB,GAChBwH,cAAe,GACfL,SAAU,GA+BVM,SAAU,GACVC,cAAgBC,IACTA,EAAQC,QACXd,GAAce,WACd,CAACrU,GAASsU,QAAAA,MAAmB7W,OAAOgG,OAAOzD,EAAOsU,SAIxD,QC/CA,GAVoB9H,IAClB,MAAM,SAAE+H,IAAaC,EAAAA,EAAAA,eAEnB9F,QAAUtR,QAASuR,EAAX,SAA0B8F,KAChC7F,EAAAA,EAAAA,aACJ,GAAIpC,IAAmBmC,EAAe,OAAO8F,EAC7C,MAAM,OAAElK,GAAWgK,EAAS/H,IAAmB,CAAEjC,OAAQuD,OAAO,IAChE,OAAOvD,GC8DT,GA1DoB,KAClB,MAAMmK,GAAWC,EAAAA,EAAAA,gBAEf9E,OAAO,KAAE9B,GACTrO,KACE6K,OAAQoF,EACRhQ,SAAUC,EACV4M,eAAgBoI,KAEhB7U,EAAAA,EAAAA,cAAaC,GAAoBA,KAC7BuK,OAAQgH,IAAcxR,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMH,OAC/D,SAAEgV,IAAa9U,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMyO,WACtDqE,EAAcO,KACdyB,EAAaC,GAAWH,GAExB1G,GAAawC,EAAAA,EAAAA,UAAQ,KACzB,IAAKxL,OAAOyK,IAAc/P,EAAYxC,UAAY4X,EAAAA,aAChD,OAAOlH,OAAO,GAChB,MAAMvD,EAASvE,EAAAA,MAAAA,WAAiB2J,EAAW/P,EAAY8P,UACvD,OAAInF,GAAUuK,EAAmBhH,OAAO,GACjCvD,EAASuK,IACf,CAACA,EAAYnF,EAAW/P,IAErBqV,GAAkBJ,GAA0B,IAAd/B,EAAoB,KAClD7E,EACJgH,IACClH,EAAKvM,SACL0T,WAAWvF,IACZuF,WAAWvF,GAAa,IACvBuF,WAAW3D,IACZ2D,WAAW3D,GAAa,EAE1B,OACE,SAAC,EAAAtE,KAAD,CAAMC,UAAU,EAAhB,UACE,UAAC,EAAA7D,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAvN,WAAA,MAAD,CAAkBwN,MAAO,EAAzB,8BAEF,SAAC,EAAApE,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,OAEF,SAAC,EAAAnE,IAAD,CAAKmE,KAAM,KAPb,KAQE,SAAC,EAAAnE,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,CACEI,KAAMA,EACNG,WAAYA,EACZD,SAAUA,EACVE,YAAa8G,EACbjH,WAAY,IACV0G,EAASpB,GAAc,CAAE/I,OAAQ,GAAIiJ,aAAa,eC1D1D2B,GAAe,CACnB/X,QAAS,GACTd,KAAM,GACNV,KAAM,QACNmR,MAAO,EACPqI,YAAa,EACbC,KAAM,EACNjW,OAAQ,QACRkW,YAAa,GAyBf,GAtBoBlZ,IAClB,MAAOmZ,EAASC,IAAc9Y,EAAAA,EAAAA,UAAkByY,KAC1C,cAAExY,IAAkBC,EAAAA,EAAAA,WAEpB6Y,GAAezY,EAAAA,EAAAA,cAAYC,UAC/B,IAAKb,EAAa,OAAOoZ,EAAWL,IACpC,IAAK,IAAD,EACF,MAAMjY,QAAcP,EAAcQ,cAAcf,GAC1C2J,EAAM,OAAG7I,QAAH,IAAGA,GAAH,UAAGA,EAAOkP,kBAAV,aAAG,EAAmBC,YAC5BkJ,QAAgBzP,EAASC,GAC/B,OAAOyP,EAAWD,GAClB,MAAO5T,GACP,OAAO6T,EAAWL,OAEnB,CAAC/Y,EAAaO,IAMjB,OAJAyB,EAAAA,EAAAA,YAAU,KACRqX,MACC,CAACA,IAEGF,GCvBHG,GAAe,EACnBtZ,YAAAA,EACAuZ,IAAAA,EAAM,GACN5I,MAAAA,EACArE,OAAAA,EAAS,gBAQP,UAAC,EAAAvI,MAAD,CAAOyV,UAAU,WAAWvZ,KAAM,EAAlC,WACE,SAAC,EAAD,CAAYD,YAAaA,KACzB,UAAC,EAAA+D,MAAD,YACE,SAAC,EAAAC,WAAA,KAAD,oBACA,SAAC,EAAAA,WAAA,MAAD,CAAkBwN,MAAO,EAAzB,SACG3I,EAAQ0Q,GAAKjN,OAAOA,MAEvB,SAAC,EAAAtI,WAAA,MAAD,CAAkBwN,MAAO,EAAzB,UACE,SAAC,EAAD,CAAYxR,YAAaA,UAG7B,UAAC,EAAAgE,WAAA,KAAD,CAAiBvE,UAAU,UAAUsK,KAAK,YAA1C,gBACMlB,EAAQ8H,GAAOrE,OAAOA,SAiElC,GA3DqB,KACnB,MACEmH,OAAO,KAAE9B,GACTrO,KAAOC,SAAUC,GACjBC,KAAOF,SAAUG,KACfC,EAAAA,EAAAA,cAAaC,GAAoBA,IAC/B6V,EAASC,GAAU,OAAClW,QAAD,IAACA,OAAD,EAACA,EAAaxC,SACjC2Y,EAASD,GAAU,OAAChW,QAAD,IAACA,OAAD,EAACA,EAAa1C,UAE/BI,SAAUwY,GAAgBjI,EAAK,IAAM,IACrCvQ,SAAUyY,GAAgBlI,EAAKA,EAAKvM,OAAS,IAAM,GAErD0U,EAAa,CAAC9Z,EAAsBoB,KACxC,IACE,OAAKD,EAAAA,QAAAA,UAAkBnB,IAAiBoB,EACjC6T,GAAejV,EAAaoB,GADsBsQ,OAAO,GAEhE,MAAOwC,GACP,OAAOxC,OAAO,KAKZqI,GAASzF,EAAAA,EAAAA,UAAQ,KACrB,IAAK9Q,EAAY8P,SAAU,OAAO,EAClC,MAAMhQ,EAAMwW,EAAWtW,EAAYxC,QAAS4Y,GAC5C,OAAO9Q,OAAOc,EAAAA,MAAAA,aAAmBtG,EAAKE,EAAY8P,aACjD,CAAC9P,EAAaoW,IAEXI,GAAS1F,EAAAA,EAAAA,UAAQ,KACrB,IAAK5Q,EAAY4P,SAAU,OAAO,EAClC,MAAM7P,EAAMqW,EAAWpW,EAAY1C,QAAS6Y,GAC5C,OAAO/Q,OAAOc,EAAAA,MAAAA,aAAmBnG,EAAKC,EAAY4P,aACjD,CAAC5P,EAAamW,IAEjB,OACE,SAAC,EAAAhJ,KAAD,CAAMC,UAAU,EAAhB,UACE,UAAC,EAAA7D,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAKgJ,MAAM,EAA7B,WACE,SAAC,EAAA7M,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC+H,GAAD,CACEtZ,aAAwB,OAAXwD,QAAW,IAAXA,OAAA,EAAAA,EAAaxC,UAAW,GACrCuY,IAAKQ,EACLpJ,MAAOoJ,EAASN,EAAO9I,WAG3B,SAAC,EAAAvD,IAAD,WACE,SAAC,EAAA8M,QAAD,CAASnQ,KAAK,WAAW7H,MAAO,CAAEsJ,OAAQ,aAE5C,SAAC,EAAA4B,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC+H,GAAD,CACEtZ,aAAwB,OAAX0D,QAAW,IAAXA,OAAA,EAAAA,EAAa1C,UAAW,GACrCuY,IAAKS,EACLrJ,MAAOqJ,EAASL,EAAOhJ,gBCzBnC,MACA,GAAe,IAA0B,wDCjDzC,GAjBkB,EAChBwJ,QAAAA,EAAU,EACVC,SAAAA,EAAW,OAMT,UAAC,EAAArW,MAAD,CAAO9D,KAAMka,EAAb,WACE,SAAC,EAAAnW,WAAA,KAAD,CAAiB9B,MAAO,CAAEmY,SAAU,GAAIC,MAAO,WAA/C,yBAGA,SAAC,EAAArY,OAAD,CAAQpC,IAAK0a,GAAYta,KAAMma,OCZ/BI,GAAS,EACbnQ,MAAAA,EACA5E,MAAAA,EACAkO,QAAAA,EACA8G,OAAAA,GAAS,MAQP,SAAC,EAAAzW,WAAA,KAAD,CACE9B,MAAO,CAAE8K,OAAQ,UAAWsN,MAAOG,EAAS,UAAY,WACxD9G,QAAS,IAAMA,EAAQlO,GAFzB,SAIG4E,IA8DP,GAzDiB,EACf5E,MAAAA,EACA4L,SAAAA,MAME,UAAC,EAAApE,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAjB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,UAAC,EAAAtE,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAIgJ,MAAM,EAA3B,WACE,SAAC,EAAA7M,IAAD,CAAK8D,KAAK,OAAV,UACE,SAAC,EAAAlN,WAAA,KAAD,CAAiB+F,KAAK,YAAY7H,MAAO,CAAEmY,SAAU,IAArD,mCAIF,SAAC,EAAAjN,IAAD,WACE,SAAC,EAAAsN,QAAD,CACEC,UAAU,QACVC,OACE,mHAE8B,KAC5B,mBAAQ1Y,MAAO,CAAEoY,MAAO,WAAxB,SACU,IAAR7U,EADqC,UAN7C,UAYE,SAAC,EAAAiO,OAAD,CACE3J,KAAK,OACL+M,MAAM,SACN7W,KAAK,QACLC,MAAM,SAAC,EAAD,CAASV,KAAK,2CAM9B,SAAC,EAAA4N,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAtE,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAIgJ,MAAM,EAAO9M,QAAQ,gBAA1C,SACG,CAAC,KAAO,KAAO,IAAM,IAAM,GAAGtL,KAAI,CAACyP,EAAGjP,KACrC,SAAC,EAAA+K,IAAD,WACE,SAACoN,GAAD,CACEnQ,MAAa,IAANiH,EAAU,SAAkB,IAAJA,EAAF,IAC7B7L,MAAO6L,EACPqC,QAAStC,EACToJ,OAAQnJ,IAAM7L,KALRpD,YCzBtB,GAtCiB,EACfoD,MAAAA,EACA4L,SAAAA,MAME,UAAC,EAAApE,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAjB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,UAAC,EAAAtE,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAIgJ,MAAM,EAA3B,WACE,SAAC,EAAA7M,IAAD,CAAK8D,KAAK,OAAV,UACE,SAAC,EAAAlN,WAAA,KAAD,CAAiB+F,KAAK,YAAY7H,MAAO,CAAEmY,SAAU,IAArD,8BAIF,SAAC,EAAAjN,IAAD,WACE,SAAC,EAAAyN,OAAD,CACE5a,KAAK,QACL6a,iBAAiB,SAAC,EAAD,CAAStb,KAAK,uBAC/Bub,mBAAmB,SAAC,EAAD,CAASvb,KAAK,qBACjCwb,QAASvV,EACT4L,SAAUA,YAKlB,SAAC,EAAAjE,IAAD,CAAKmE,KAAM,GAAX,UACE,UAAC,EAAAvN,WAAA,UAAD,CAAsB9B,MAAO,CAAEmY,SAAU,GAAIY,UAAW,WAAxD,WACE,SAAC,EAAD,CAASzb,KAAK,oBADhB,uKCxBF0b,GAAO,WAUAC,IAAiBhE,EAAAA,GAAAA,kBAC3B,2BACDtW,MAAAA,IAAA,IAA0CwR,MAkB5C,IAXcqF,EAAAA,GAAAA,aAAY,CACxBlY,KAAM0b,GACNvD,aApB0B,CAC1BvF,SAAU,IACVqG,UAAU,GAmBVZ,SAAU,GACVC,cAAgBC,IACTA,EAAQC,QACXmD,GAAelD,WACf,CAACrU,GAASsU,QAAAA,MAAmB7W,OAAOgG,OAAOzD,EAAOsU,SAIxD,QC2BA,GArDiB,KACf,MAAMI,GAAWC,EAAAA,EAAAA,gBACX,SAAEnG,EAAF,SAAYqG,IAAa9U,EAAAA,EAAAA,cAC5BC,GAAoBA,EAAMyO,WAU7B,OACE,UAAC,EAAApF,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAI9D,QAAQ,MAAMD,MAAM,SAAS+M,MAAM,EAAxD,WACE,SAAC,EAAA7M,IAAD,WACE,SAAC,GAAD,OAEF,SAAC,EAAAA,IAAD,WACE,SAAC,EAAA8M,QAAD,CAASnQ,KAAK,WAAW7H,MAAO,CAAEkZ,QAAS,QAE7C,SAAC,EAAAhO,IAAD,WACE,SAAC,EAAAiO,QAAD,CACEV,UAAU,cACVW,kBAAmB,CAAEC,MAAO,KAC5BvE,SACE,UAAC,EAAA/J,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAjB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAvN,WAAA,MAAD,CAAkBwN,MAAO,EAAzB,yBAEF,SAAC,EAAApE,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,CAAU9L,MAAO2M,EAAUf,SAzBrBe,GACXkG,EAAS6C,GAAe,CAAE/I,SAAAA,UA0BvB,SAAC,EAAA8H,QAAD,CAAShY,MAAO,CAAEsZ,UAAW,EAAGC,aAAc,MAC9C,SAAC,EAAArO,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,CAAU9L,MAAOgT,EAAUpH,SA1BrBoH,GACXH,EAAS6C,GAAe,CAAE1C,SAAAA,YA6B3BiD,QAAQ,QAjBV,UAmBE,SAAC,EAAAhI,OAAD,CACE3J,KAAK,OACL+M,MAAM,SACN7W,KAAK,QACLC,MAAM,SAAC,EAAD,CAASV,KAAK,+B,gBCjDhC,MAuDA,GArDe,EACb6R,SAAAA,EACAsK,gBAAAA,EACA9J,SAAAA,GAAW,MAMX,MAAO+J,EAASC,IAAcvb,EAAAA,EAAAA,UAAS,KACjC,cAAEC,IAAkBC,EAAAA,EAAAA,WAEpBsb,GAASlb,EAAAA,EAAAA,cAAYC,UACzB,IAAK+a,GAAWA,EAAQxW,OAfZ,EAe8B,OAAOiM,OAAStR,GAC1D,MACMoF,SADY5E,EAAcgB,KAAKqa,IAElCG,QAAO,EAAG/a,QAAAA,KAAc2a,EAAgB3a,KACxCa,KAAI,EAAGb,QAAAA,KAAcA,IACxB,OAAOqQ,EAASlM,KACf,CAACyW,EAASrb,EAAe8Q,EAAUsK,IAMtC,OAJA3Z,EAAAA,EAAAA,YAAU,KACR8Z,MACC,CAACA,KAGF,SAAC,EAAAjL,KAAD,CAAMpR,UAAU,aAAasR,UAAW,CAAEqK,QAAS,GAAKtK,UAAU,EAAlE,UACE,SAAC,EAAAkL,MAAD,CACEC,YAAY,SACZxW,MAAOmW,EACP3b,KAAK,QACL6Q,UAAU,EACVoL,QACE,SAAC,EAAAxI,OAAD,CACE3J,KAAK,OACL7H,MAAO,CAAEia,aAAc,GACvBlc,KAAK,QACL0T,QAASiI,EAAU,IAAMC,EAAW,IAAM,OAC1C3b,MACE,SAAC,EAAD,CAASV,KAAMoc,EAAU,gBAAkB,mBAE7C/J,SAAUA,IAGdR,SAAWC,GACTuK,EAAWvK,EAAEzE,OAAOpH,OAEtBoM,SAAUA,OCflB,GAtCa,EACX7R,YAAAA,EACA2T,QAAAA,EACA8G,OAAAA,GAAS,MAOP,SAAC,EAAA5J,KAAD,CACEpR,UAAY,cAAYgb,EAAS,UAAY,IAC7C1J,UAAW,CAAEqK,QAAU,WAAWpO,OAAQ,WAC1C8D,SAAU2J,EACV9G,QAASA,EACTyI,WAAS,EALX,UAOE,SAAC,EAAAnP,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,UACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,UAAC,EAAAxN,MAAD,CAAO9D,KAAM,GAAIiC,MAAO,CAAEma,YAAa,GAAvC,WACE,SAAC,EAAD,CAAYrc,YAAaA,EAAaC,KAAM,MAC5C,SAAC,EAAA+D,WAAA,KAAD,CAAiB9B,MAAO,CAAEoa,OAAQ,GAAlC,UACE,SAAC,EAAD,CAAYtc,YAAaA,OAE3B,SAAC,EAAAka,QAAD,CAASnQ,KAAK,WAAW7H,MAAO,CAAEoa,OAAQ,MAC1C,SAAC,EAAAtY,WAAA,KAAD,CACE+F,KAAK,YACL7H,MAAO,CAAEoa,OAAQ,EAAGjC,SAAU,IAFhC,UAIE,SAAC,EAAD,CAAUra,YAAaA,eCgFrC,GAhGsB,EACpByF,MAAAA,EACA4L,SAAAA,MAKA,MAAOkL,EAAeC,IAAoBlc,EAAAA,EAAAA,UAAmB,KACvD,MAAEG,IAAUC,EAAAA,EAAAA,YACZ,YAAE+b,IAAgBjc,EAAAA,EAAAA,WAGlBkc,GAAyBpI,EAAAA,EAAAA,UAAQ,IAChC7T,EACEY,OAAOC,OAAOb,GAClBoB,KAAI,EAAGJ,OAAAA,EAAQC,OAAAA,KAAa,CAACD,EAAQC,KACrCib,OACAZ,QAAO,CAACa,EAAMC,EAAKC,IAASA,EAAKC,QAAQH,KAAUC,IAJnC,IAKlB,CAACpc,IACEkb,GAAkB/a,EAAAA,EAAAA,cACrBZ,GAAgB0c,EAAuB1G,SAAShW,IACjD,CAAC0c,IAGGM,GAAUpc,EAAAA,EAAAA,cACdC,MAAAA,GACoB2b,EAAd/W,GACoBiX,IAE1B,CAACA,IAGGO,GAA4Brc,EAAAA,EAAAA,cAC/BZ,GACMmB,EAAAA,QAAAA,UAAkBnB,GAChBqB,OAAO6b,KAAKzc,GAAOsb,QAAQ9I,IAChC,MAAM,OAAExR,EAAF,OAAUC,GAAWjB,EAAMwS,GACjC,MAAO,CAACxR,EAAQC,GAAQsU,SAAShW,MAHS,IAM9C,CAACS,IAIG0c,GAASvc,EAAAA,EAAAA,cACbC,MAAAA,IACE,MAAM+W,EAAgBqF,EAA0Bjd,GAC1CsT,QAAiBmJ,EAAYzc,GACnC,OAAOqR,EAAS,CACd9N,SAAU,CACRvC,QAAShB,EACTsT,SAAAA,GAEFsE,cAAAA,MAGJ,CAACqF,EAA2B5L,EAAUoL,IAGxC,OACE,UAAC,EAAAxP,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAvN,WAAA,MAAD,CAAkBwN,MAAO,EAAzB,gCAEF,SAAC,EAAApE,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAA2I,QAAD,CAAShY,MAAO,CAAEoa,OAAQ,QAE5B,SAAC,EAAAlP,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,CAAQF,SAAU2L,EAASrB,gBAAiBA,OAE9C,SAAC,EAAAvO,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAtE,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAK/O,MAAO,CAAEsJ,OAAQ,IAAK4R,SAAU,QAAvD,UACE,SAAC,EAAAhQ,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAtE,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,SACGsL,EAAc1a,KAAI,CAAC7B,EAAaqC,KAC/B,MAAQrB,QAASqc,GAAuB5X,EAAMlC,UAAY,GAC1D,OACE,SAAC,EAAA6J,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,MAAD,CAAU/F,OAAQ,GAAI4R,UAAQ,EAA9B,UACE,SAAC,GAAD,CACEpd,YAAaA,EACb2T,QAAS,IAAMwJ,EAAOnd,GACtBya,OAAQ4C,IAAuBrd,OALjBqC,kBC/BtC,GAnDkB,EAChBoD,MAAAA,EACA4L,SAAAA,MAIK,IAAD,EACJ,MAAOiM,EAASC,IAAcjd,EAAAA,EAAAA,WAAS,GACjCkd,GAAUC,EAAAA,EAAAA,eACV,MAAE7Z,IAAU8Z,EAAAA,EAAAA,gBAClB1b,EAAAA,EAAAA,YAAU,KACJsb,GAASzX,WAAW8X,GAAAA,GAAY,OACnC,CAACL,IAEJ,MASMtd,GAAmB,OAALyF,QAAK,IAALA,GAAA,UAAAA,EAAOlC,gBAAP,eAAiBvC,UAAW,GAChD,OACE,UAAC,EAAAyT,SAAD,YACE,UAAC,EAAA1Q,MAAD,CAAO7B,MAAO,CAAE8K,OAAQ,WAAa2G,QAAS,IAAM4J,GAAW,GAA/D,WACE,SAAC,EAAD,CAAYvd,YAAaA,KACzB,SAAC,EAAAgE,WAAA,KAAD,CAAiB+F,KAAK,YAAtB,UACE,SAAC,EAAD,CAAY/J,YAAaA,OAE3B,SAAC,EAAAka,QAAD,CAASnQ,KAAK,WAAW7H,MAAO,CAAEma,WAAY,SAEhD,SAAC,EAAAuB,MAAD,CACEN,QAASA,EACTO,SAAU,IAAMN,GAAW,GAC3BO,WAAW,SAAC,EAAD,CAASte,KAAK,UACzBue,OAAQ,KACRC,gBAAgB,EAChBC,UAAU,EANZ,UAQE,SAAC,EAAAhR,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,UACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,CAAe9L,MAAOA,EAAO4L,SA7BlB6M,IACnBX,GAAW,GAGP3Z,GAAO4Z,EAAQW,QAAQ,IAAKX,EAAQY,SAAUxa,MAAO,KAElDyN,EAAS6M,gBC1BpB,IAAIG,GAUJ,MAiEA,IAjEqB9e,EAAAA,EAAAA,aACnB,EAEIoX,IAAAA,EACA2H,QAAAA,EAAU,SACVjN,SAAAA,EAAW,YACR3R,GAKLC,KACI,IAAD,EACH,MAAO4F,EAAOgZ,IAAYje,EAAAA,EAAAA,UAAS,KAC5B0M,EAAQwR,IAAale,EAAAA,EAAAA,UAAwB,MAC9Cme,GAAWhU,EAAAA,EAAAA,QAAO9K,GAGlB+e,GAAW9d,EAAAA,EAAAA,cACdmN,IACC,MAAM4Q,EAAWzK,IACXmK,KACFO,aAAaP,IACbA,QAAYte,GAEdwe,EAASrK,GACTmK,GAAYxY,YAAW,IAAM0Y,EAAS,KAAK,MAG7C,MADY,gBACHM,KAAK9Q,GACV4I,GAAOmC,WAAW/K,GAAO+K,WAAWnC,EAAImI,YACnCH,EAAQ,sBACVL,EAAQvQ,GAHY4Q,EAAQ,uBAKrC,CAAChI,EAAK2H,IAOR,OAFe,OAAXtR,IAAyB,OAARyR,QAAQ,IAARA,GAAA,UAAAA,EAAU7T,eAAV,SAAmBmU,kBAAkB/R,EAAQA,KAGhE,SAAC,EAAA0N,QAAD,CACEE,OACE,UAAC,EAAA7W,MAAD,YACE,SAAC,EAAD,CAASvE,KAAK,YACb+F,KAGL+X,UAAW/X,EAPb,UASE,SAAC,EAAAyW,MAAD,IACMtc,EACJ2R,SAAWC,IACTD,EAASC,GACTkN,EAAUlN,EAAEzE,OAAOmS,gBACnBN,EAASpN,EAAEzE,OAAOpH,OAAS,KAE7B9F,IAAK8e,SCtDf,MAAMQ,GAAS,CACbC,MAAOC,WACPxR,IAAKwR,uDACLC,OAAQD,6DCqBV,GAhCgC,CAI9BE,OAAQ,CACNC,KAAM,gCACNC,YAAa,8CACbC,cAAe,gDAMjBC,QAAS,CACPH,KAAM,iCACNC,YAAa,8CACbC,cAAe,gDAMjBE,QAAS,CACPJ,KAAM,sCACNC,YAAa,8CACbC,cAAe,iDCGnB,GA7BgC,CAI9BH,OAAQ,CACNM,WAAY,+CACZC,WAAY,gDAMdH,QAAS,CACPE,WAAY,+CACZC,WAAY,gDAMdF,QAAS,CACPC,WAAY,+CACZC,WAAY,gDCGhB,GA1BgC,CAI9BP,OAAQ,CACNQ,gBAAiB,+CAMnBJ,QAAS,CACPI,gBAAiB,+CAMnBH,QAAS,CACPG,gBAAiB,gDCZrB,GAVgB,CACdC,SJkB8B,CAI9BC,YAAa,IACRd,IAMLe,QAAS,IACJf,IAMLgB,WAAY,IACPhB,KIrCciB,EAAAA,IACnBC,IAAKA,GAAIvX,EAAAA,IACT8J,KAAMA,GAAK9J,EAAAA,IACXwX,SAAUA,GAASxX,EAAAA,KCiBRyX,IAAgBlJ,EAAAA,GAAAA,kBAK1B,qBACDtW,OAASuW,YAAAA,EAAaC,MAAAA,KAAUzI,IAAa0I,SAAAA,MAC3C,MACEhU,KAAOiU,SAAUE,GACjBhU,KAAO8T,SAAUC,IACfF,IACAxO,OAAO8F,EAAQT,QAAU,IAAGS,EAAQT,OAAS,IACjD,MAAMoJ,EAAWF,EAAQ,EAAID,EAAcK,EAAc,EAAID,EAC7D,MAAO,IAAK5I,EAAS2I,SAAAA,MAmBzB,IAXcG,EAAAA,GAAAA,aAAY,CACxBlY,KAtCW,MAuCXmY,aAtC0B,CAC1BxJ,OAAQ,GACR5K,SAAU,CACRvC,QAAS,GACTsS,SAAU,GAEZlD,eAAgB,GAChBwH,cAAe,GACfL,SAAU,GA+BVM,SAAU,GACVC,cAAgBC,IACTA,EAAQC,QACXqI,GAAcpI,WACd,CAACrU,GAASsU,QAAAA,MAAmB7W,OAAOgG,OAAOzD,EAAOsU,SAIxD,QCrDMoI,GAAe,CACnBlQ,eAAgB,GAChBwH,cAAe,IAOJ2I,GAAoBvgB,IAC/B,MAAM,OAAEsS,IAAWE,EAAAA,EAAAA,cACb,cAAEjS,IAAkBC,EAAAA,EAAAA,YACpB,MAAEC,IAAUC,EAAAA,EAAAA,YACXwd,EAAesC,IACpBlgB,EAAAA,EAAAA,UAAwBggB,IAEpBG,GAAmB7f,EAAAA,EAAAA,cAAYC,UACnC,IAAKM,EAAAA,QAAAA,UAAkBnB,KAAiBqB,OAAO6b,KAAKzc,GAAO2E,OACzD,OAAOob,EAAiBF,IAE1B,MAAM/c,QAAiBhD,EAAcQ,cAAcf,GACnD,IAAKuD,EAAU,OAAOid,EAAiBF,IACvC,MAAM,KAAE3N,GAASC,OAAOC,OAElBzC,QAAuBuC,EAAKQ,wBAChCb,EAAOtR,QACPhB,GAGI4X,EAAgBvW,OAAO6b,KAAKzc,GAAOsb,QAAQ9I,IAC/C,MAAM,OAAExR,EAAF,OAAUC,GAAWjB,EAAMwS,GACjC,MAAO,CAACxR,EAAQC,GAAQsU,SAAShW,MAEnCwgB,EAAiB,CACfpQ,eAAAA,EACA7M,SAAAA,EACAqU,cAAAA,MAED,CAAC5X,EAAaS,EAAOF,EAAe+R,EAAOtR,UAM9C,OAJAgB,EAAAA,EAAAA,YAAU,KACRye,MACC,CAACA,IAEGvC,GCrBT,GApByBle,IACvB,MAAOsT,EAAUoN,IAAepgB,EAAAA,EAAAA,eAA6BP,IACvD,YAAE0c,IAAgBjc,EAAAA,EAAAA,WAElBmgB,GAAgB/f,EAAAA,EAAAA,cAAYC,UAChC,IACE,MAAMyS,QAAiBmJ,EAAYzc,GACnC,OAAO0gB,EAAYpN,GACnB,MAAOY,GACP,OAAOwM,OAAY3gB,MAEpB,CAACC,EAAayc,IAMjB,OAJAza,EAAAA,EAAAA,YAAU,KACR2e,MACC,CAACA,IAEGrN,GCmFT,GAxFY,KAAO,IAAD,EAChB,MAAMgF,GAAWC,EAAAA,EAAAA,gBACX,OAAEjG,IAAWE,EAAAA,EAAAA,cAEjB/O,KAAK,OAAE0K,EAAF,eAAUiC,EAAV,SAA0B7M,EAA1B,cAAoCqU,KACvCjU,EAAAA,EAAAA,cAAaC,GAAoBA,KAC/B,MAAEA,IAAU8Z,EAAAA,EAAAA,eACZkD,EAAUjI,GAAWvI,GACrByQ,EAAmBN,GAAiB7a,GAAAA,KAAAA,YACpCob,EAAU,OAAGld,QAAH,IAAGA,OAAH,EAAGA,EAAOqP,YACpBK,EAAWyN,GAAgBxd,EAASvC,UAAY,GAGtDgB,EAAAA,EAAAA,YAAU,KACJb,EAAAA,QAAAA,UAAkBiP,IAAmBjP,EAAAA,QAAAA,UAAkB2f,IAE3DxI,EAAS+H,GAAcQ,MACtB,CAACzQ,EAAgBkI,EAAUwI,EAAYD,IAG1C,MAAM3C,GAA+B5J,EAAAA,EAAAA,UACnC,MAAS/Q,SAAAA,EAAUqU,cAAAA,KACnB,CAACrU,EAAUqU,IAIPoJ,GAAa1M,EAAAA,EAAAA,UAAQ,IAClB1K,EAAAA,MAAAA,aAAmBgX,EAAStN,IAClC,CAACsN,EAAStN,IA4Bb,OACE,UAAC,EAAArG,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAjB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAvN,WAAA,KAAD,oBAEF,SAAC,EAAAoJ,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,CACE0K,YAAY,IACZxW,MAAO0I,EACPmQ,QAlCUvQ,GAChBuK,EAAS+H,GAAc,CAAElS,OAAQJ,EAAKqJ,aAAa,KAkC7CnX,KAAK,QACLghB,QACE,SAAC,GAAD,CAAWxb,MAAOyY,EAAe7M,SAjCnBxQ,MAAAA,IACtB,MAAM,KAAE8R,GAASC,OAAOC,QAChB7R,QAAShB,GAAgBke,EAAc3a,UAAY,GAC3D,IAAKpC,EAAAA,QAAAA,UAAkBnB,GACrB,OAAOsY,EACL+H,GAAc,CAAElS,OAAQ,GAAIiJ,aAAa,KAAS8G,KAEtD,MAAM9N,QAAuBuC,EAAKQ,wBAChCb,EAAOtR,QACPhB,GAEFsY,EACE+H,GAAc,CACZlS,OAAQ,GACRiJ,aAAa,EACbhH,eAAAA,KACG8N,aAqBL,SAAC,EAAA9Q,IAAD,CAAK8D,KAAK,UACV,SAAC,EAAA9D,IAAD,WACE,UAAC,EAAArJ,MAAD,CAAOtE,UAAU,UAAjB,WACE,SAAC,EAAAuE,WAAA,KAAD,CAAiB+F,KAAK,YAAtB,yBACA,SAAC,EAAA/F,WAAA,KAAD,CAAiB+F,KAAK,YAAtB,SACGlB,EAAQmY,GAAY1U,OAAO,eAE9B,SAAC,EAAAtI,WAAA,KAAD,CAAiB+F,KAAK,YAAtB,UACE,SAAC,EAAD,CAAY/J,aAAa,UAAAke,EAAc3a,gBAAd,eAAwBvC,UAAW,gB,4BC5EjE,MCjBMkgB,GAAuC,CAClDxB,QAAS,8CACTD,QAAS,+CACTJ,OAAQ,gDAGG8B,GAA6C,CACxDzB,QAAS,8CACTD,QAAS,+CACTJ,OAAQ,gDCCG+B,GAAgB,IACRC,GAAAA,EAAAA,IAAY,YAAc,UA4BlCC,GAAwBzgB,MAAAA,IACnC,MAAM0gB,EAVqB,MAC3B,MAAMC,EAAyBJ,KAC/B,MAAO,CACLK,QAASC,GAAAA,GACTC,mBAAoBR,GAAyBK,GAC7CI,cAAeV,GAAmBM,KAKjBK,GACnB,OAAOC,EAAAA,GAAAA,IACLlP,OAAOC,OAAOF,KAAKoP,WACnBR,EAAWI,mBACX3hB,IC1CEgiB,GAAiB,UAmCvB,GAjC0B,KACxB,MAAOC,EAAmBC,IAAwB5hB,EAAAA,EAAAA,WAAS,IAEzDgD,KAAK,SAAEC,KACLI,EAAAA,EAAAA,cAAaC,GAAoBA,IAWrC,OATA5B,EAAAA,EAAAA,YAAU,KACP,WACC,MAAQhB,QAAShB,GAAgBuD,GAAY,GAC7C,IAAKpC,EAAAA,QAAAA,UAAkBnB,GAAc,OAAOkiB,GAAqB,GACjE,MAAMD,QAA0BX,GAAsBthB,GAC/CkiB,EAAqBD,IAJ7B,KAMA,CAAC1e,IAEC0e,GAEH,UAAC,EAAAle,MAAD,CAAO9D,KAAM,EAAb,WACE,SAAC,EAAAkiB,IAAD,CACEjgB,MAAO,CACLoa,OAAQ,EACRvN,aAAc,EACduL,MAAOrR,EAAY+Y,KAErB1H,MAAOrR,EAAY+Y,GAAgB,IANrC,8BAUA,SAAC,EAAAhe,WAAA,KAAD,CAAiB+F,KAAK,YAAtB,0BAb2B,OCJ/B2I,MAAM,WAAEiN,KACNja,GAmHJ,GAjHY,KAAO,IAAD,EAChB,MAAM4S,GAAWC,EAAAA,EAAAA,gBAEfjG,QAAUtR,QAASuR,EAAX,SAA0B8F,KAChC7F,EAAAA,EAAAA,cAEFlP,KAAO6K,OAAQoF,EAAV,eAAqBnD,EAArB,SAAqC7M,EAArC,cAA+CqU,KAClDjU,EAAAA,EAAAA,cAAaC,GAAoBA,IAC/Bgd,EAAUjI,GAAWvI,GACrByQ,EAAmBN,GAAiBZ,KACpC,MAAE/b,IAAU8Z,EAAAA,EAAAA,eACZoD,EAAU,OAAGld,QAAH,IAAGA,OAAH,EAAGA,EAAOqP,YACpBjT,EAAcuD,EAASvC,QACvBsS,EAAWyN,GAAgB/gB,IAAgB,GAGjDgC,EAAAA,EAAAA,YAAU,KACJb,EAAAA,QAAAA,UAAkBiP,IAAmBjP,EAAAA,QAAAA,UAAkB2f,IAE3DxI,EAASpB,GAAc2J,MACtB,CAACzQ,EAAgBkI,EAAUwI,EAAYD,IAG1C,MAAM3C,GAA+B5J,EAAAA,EAAAA,UACnC,MAAS/Q,SAAAA,EAAUqU,cAAAA,KACnB,CAACrU,EAAUqU,IAIPoJ,GAAa1M,EAAAA,EAAAA,UAAQ,KACzB,GAAItU,IAAgB4Y,EAAAA,aAClB,OAAOhP,EAAAA,MAAAA,aAAmBgX,EAAStN,GAErC,MAAM8O,EAAcxY,EAAAA,MAAAA,WAAiB,IAAM0J,GACrCqD,EAAM0B,EAAWuI,EAAUwB,EACjC,OAAIzL,GAAOiK,EAAgBhX,EAAAA,MAAAA,aAAmBgX,EAAStN,GAChD1J,EAAAA,MAAAA,aAAmB+M,EAAKrD,KAC9B,CAACsN,EAAStN,EAAU+E,EAAUrY,IAG3B0e,EAAY3Q,GAChBuK,EAASpB,GAAc,CAAE/I,OAAQJ,EAAKqJ,aAAa,KA0BrD,OACE,UAAC,EAAAnK,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAjB,WACE,SAAC,EAAA7D,IAAD,CAAK8D,KAAK,OAAV,UACE,SAAC,EAAAlN,WAAA,KAAD,sBAEF,SAAC,EAAAoJ,IAAD,WACE,SAAC,GAAD,OAEF,SAAC,EAAAA,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,CACE0K,YAAY,IACZxW,MAAO8N,EACP+K,QAASI,EACTze,KAAK,QACLghB,QACE,SAAC,GAAD,CAAWxb,MAAOyY,EAAe7M,SApCnBxQ,MAAAA,IACtB,MAAM,KAAE8R,GAASC,OAAOC,QAChB7R,QAAShB,GAAgBke,EAAc3a,UAAY,GAC3D,IAAKpC,EAAAA,QAAAA,UAAkBnB,GACrB,OAAOsY,EACLpB,GAAc,CAAE/I,OAAQ,GAAIiJ,aAAa,KAAS8G,KAEtD,MAAM9N,QAAuBuC,EAAKQ,wBAChCZ,EACAvS,GAEF,OAAOsY,EACLpB,GAAc,CACZ/I,OAAQ,GACRiJ,aAAa,EACbhH,eAAAA,KACG8N,QAsBDhC,QACE,SAAC,EAAAxI,OAAD,CACE3J,KAAK,OACL9J,KAAK,QACLiC,MAAO,CAAEmY,SAAU,GAAI8B,aAAc,GACrCxI,QA9CE,IAAM+K,EAASsC,GA0CnB,iBASFrK,IAAKqK,OAGT,SAAC,EAAA5T,IAAD,CAAK8D,KAAK,UACV,SAAC,EAAA9D,IAAD,WACE,UAAC,EAAArJ,MAAD,CAAOtE,UAAU,UAAjB,WACE,SAAC,EAAAuE,WAAA,KAAD,CAAiB+F,KAAK,YAAtB,yBACA,SAAC,EAAA/F,WAAA,KAAD,CAAiB+F,KAAK,YAAtB,SACGlB,EAAQmY,GAAc,GAAG1U,OAAO,eAEnC,SAAC,EAAAtI,WAAA,KAAD,CAAiB+F,KAAK,YAAtB,UACE,SAAC,EAAD,CAAY/J,aAAa,UAAAke,EAAc3a,gBAAd,eAAwBvC,UAAW,gBCpHlEka,GAAO,QACPvD,GAAsB,IANN,CACpBxJ,OAAQuD,OAAO,GACf2Q,QAAS,GACT1Q,KAAM,KAUK2Q,IAAcnL,EAAAA,GAAAA,kBAIxB,qBAAsBtW,MAAO4S,GAAS6D,SAAAA,MACvC,MAAQ7D,MAAO8O,GAAcjL,IAC7B,OAAK7D,EACE,IAAK8O,KAAc9O,GADP,IAAK8O,MAmB1B,IAXc7K,EAAAA,GAAAA,aAAY,CACxBlY,KAAM0b,GACNvD,aAFwB,GAGxBE,SAAU,GACVC,cAAgBC,IACTA,EAAQC,QACXsK,GAAYrK,WACZ,CAACrU,GAASsU,QAAAA,MAAmB7W,OAAOgG,OAAOzD,EAAOsU,SAIxD,QC8HA,GAtJmB,EAAGiC,QAAAA,EAAU,OAAgC,IAAD,IAC7D,MAAM7B,GAAWC,EAAAA,EAAAA,gBACViK,EAAWC,IAAgBniB,EAAAA,EAAAA,UAAoB,CACpDqR,KAAM,GACN0Q,QAAS,GACTlU,OAAQuD,OAAO,MAETpO,IAAKqL,EAASlL,IAAKmL,IAAYjL,EAAAA,EAAAA,cAAaC,GAAoBA,KAClE,MAAEnD,IAAUC,EAAAA,EAAAA,YACZ,MAAEkD,IAAU8Z,EAAAA,EAAAA,eACZoD,EAAU,OAAGld,QAAH,IAAGA,OAAH,EAAGA,EAAOqP,YACpByP,EAAa,OAAG9e,QAAH,IAAGA,OAAH,EAAGA,EAAO8e,cAKvBC,GAAW/hB,EAAAA,EAAAA,cAAYC,UAC3B,MAAQsN,OAAQoF,EAAWgE,SAAUqL,KAAgBC,GAAYlU,GACzDR,OAAQgH,EAAWoC,SAAUuL,KAAgBC,GAAYnU,EAC3DT,EAASyU,EAAcE,EAAcvP,EAAY4B,EACjD6N,EAAaJ,EAAcE,EAAczC,GAAgBnJ,SACzDoB,EAASpB,GAAc,IAAK6L,EAAS5U,OAAQ,GAAIkJ,OAAO,WACxDiB,EAAS+H,GAAc,IAAKwC,EAAS1U,OAAQ,GAAIkJ,OAAO,WACxDiB,EAAS0K,EAAW,CAAE7U,OAAAA,EAAQiJ,aAAa,OAChD,CAACkB,EAAU1J,EAASD,IAKjBsU,GAAYriB,EAAAA,EAAAA,cAAYC,UAC5B,MACE+W,cAAesL,EACf3f,UAAYvC,QAAS6C,GACrBsK,OAAQoF,EACRgE,SAAUqL,GACRjU,GAEFiJ,cAAeuL,EACf5f,UAAYvC,QAAS8C,GACrBqK,OAAQgH,EACRoC,SAAUuL,GACRlU,EAEEwU,EAAWF,EAAiBrhB,KAAKb,IAAD,CACpCA,QAAAA,KACGP,EAAMO,OAELqiB,EAAWF,EAAiBthB,KAAKb,IAAD,CACpCA,QAAAA,KACGP,EAAMO,OAKX,IAAIwhB,EAAuB,CAAE7Q,KAAM,GAAI0Q,QAAS,GAAIlU,OAAQuD,OAAO,IAEnE,IACI5I,OAAOyK,KAAezK,OAAOqM,KAC9BhU,EAAAA,QAAAA,UAAkB0C,KAClB1C,EAAAA,QAAAA,UAAkB2C,KAClBsf,EAAShe,SACTie,EAASje,OAEV,OAAOqd,EAAaD,GAEtB,IAAIc,EAAY,IAAIC,MAQpB,OAPA9N,GACE6N,EnCxCyB7iB,CAAAA,IAC7B,MAAMkV,EAAQ,IAAI3P,IAIlB,IAAK,MAAMiN,KAAexS,EAAO,CAC/B,MAAM+iB,EAAO/iB,EAAMwS,GAhDM,KAiDjB,OAAJuQ,QAAI,IAAJA,OAAA,EAAAA,EAAM5f,QACI,CAAC4f,EAAK/hB,OAAQ+hB,EAAK9hB,QAC3BqU,SAAS0N,IAAU,IAAD,EACjB9N,EAAMrP,IAAImd,IAAO9N,EAAM/P,IAAI6d,EAAM,IAAIzd,KAC1C,UAAA2P,EAAM5P,IAAI0d,UAAV,SAAiB7d,IAAIqN,EAAauQ,MAGtC,OAAO7N,GmC2BH+N,CAAejjB,GACfoD,EACAC,GAGGwf,EAAUle,QAGXsd,IACFY,EAAYA,EAAUvH,QACpB,EAAGtb,MAAAA,KAA6B,IAAjBA,EAAM2E,QAAgB3E,EAAM,KAAOqgB,KAIpD0B,EADEM,EAAcF,OnCoBc/hB,OAClCsV,EACAT,EACA/G,EACAC,KAEA,IAAI4T,EAAuB,CAAE7Q,KAAM,GAAI0Q,QAAS,GAAIlU,OAAQuD,OAAO,IACnE,IAAK,IAAI+B,KAASiC,EAAQ,CACxB,MAAM/D,QAAauE,GACjBC,EACA1C,EAAMhT,MACNkO,EAAQpL,SAASvC,QACjB4N,EAAQrL,SAASvC,SAEnB,IAAK2Q,EAAKvM,OAAQ,SAClB,IAAI+I,EAASvE,EAAAA,MAAAA,WAAiB+E,EAAQR,OAAQQ,EAAQpL,SAAS+P,UAC/D,MAAM+O,EAAU,IAAIkB,MAEpB5R,EAAKoE,SAASvB,IACZ6N,EAAQpd,KAAKkJ,GACbA,EAASyG,GAAMzG,EAAQqG,MAEzB,MAAMmP,EAAenB,EAAUrU,OAC3BA,EAASwV,IAAcnB,EAAY,CAAE7Q,KAAAA,EAAM0Q,QAAAA,EAASlU,OAAAA,IAE1D,OAAOqU,GmC5CeoB,CAAqBnjB,EAAO6iB,EAAW3U,EAASC,QnC+CpC/N,OAClCsV,EACAT,EACA/G,EACAC,KAEA,IAAI4T,EAAuB,CAAE7Q,KAAM,GAAI0Q,QAAS,GAAIlU,OAAQuD,OAAO,IACnE,IAAK,IAAI+B,KAASiC,EAAQ,CACxB,MAAM/D,QAAauE,GACjBC,EACA1C,EAAMhT,MACNkO,EAAQpL,SAASvC,QACjB4N,EAAQrL,SAASvC,SAEnB,IAAK2Q,EAAKvM,OAAQ,SAClB,MAAMye,EAAe,IAAIlS,GAAM7P,UAC/B,IAAIqM,EAASvE,EAAAA,MAAAA,WAAiBgF,EAAQT,OAAQS,EAAQrL,SAAS+P,UAC/D,MAAM+O,EAAU,IAAIkB,MAEpB,IAAK,MAAMO,KAAeD,EAAc,CAEtC,GADA1V,EAASiH,GAAajH,EAAQ2V,GAC1B3V,GAAUuD,OAAO,GAAI,MACzB2Q,EAAQ5S,QAAQtB,GAElB,GAAIA,GAAUuD,OAAO,GAAI,SACzB,MAAMqS,EAAevB,EAAUrU,QAC3BA,EAAS4V,IAAiBA,KAC5BvB,EAAY,CAAE7Q,KAAAA,EAAM0Q,QAAAA,EAASlU,OAAAA,IAEjC,OAAOqU,GmC1EewB,CAAqBvjB,EAAO6iB,EAAW3U,EAASC,GAG7D6T,EAAaD,IAdUC,EAAaD,KAe1C,CAAC5T,EAASD,EAAS+T,EAAe5B,EAAYrgB,IAE3CwjB,GAAWrjB,EAAAA,EAAAA,cAAY,KAC3B,MAAMgiB,EAAcjU,EAAQ4I,SACtBuL,EAAclU,EAAQ2I,SACxBuL,EAAcF,GAChBtK,EACE+H,GAAc,CACZlS,OAAQvE,EAAAA,MAAAA,aACN4Y,EAAUrU,OACVS,EAAQrL,SAAS+P,aAKrBsP,EAAcE,GAChBxK,EACEpB,GAAc,CACZ/I,OAAQvE,EAAAA,MAAAA,aACN4Y,EAAUrU,OACVQ,EAAQpL,SAAS+P,aAKzBgF,EAASgK,GAAY,IAAKE,OACzB,CACD5T,EAAQ2I,SACRiL,EACA7T,EAAQ4I,SACRe,EAJC,UAKD3J,EAAQpL,gBALP,aAKD,EAAkB+P,SALjB,UAMD1E,EAAQrL,gBANP,aAMD,EAAkB+P,WAWpB,OARAtR,EAAAA,EAAAA,YAAU,KACRiiB,MACC,CAACA,KAEJjiB,EAAAA,EAAAA,YAAU,KACRihB,MACC,CAACA,KAGF,UAAC,EAAAhW,IAAD,CAAKgE,OAAQ,CAACkJ,EAASA,GAAUhN,QAAQ,SAAzC,WACE,SAAC,EAAAC,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,OAEF,SAAC,EAAAnE,IAAD,WACE,SAAC,EAAAsG,OAAD,CACEzT,KAAK,QACLC,MAAM,SAAC,EAAD,CAASV,KAAK,wBACpBmU,QAASgP,OAGb,SAAC,EAAAvV,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,UCnJR,GAjBa,KAET,UAAC,EAAAtE,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAtE,IAAD,CAAKgE,OAAQ,CAAC,EAAG,GAAI9D,QAAQ,MAAMD,MAAM,SAAS+M,MAAM,EAAxD,UACE,SAAC,EAAA7M,IAAD,WACE,SAAC,GAAD,WAIN,SAAC,EAAAA,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,SCQR,GAlBa,KAET,UAAC,EAAAtE,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAAV,KAAD,CAAMC,UAAU,EAAOrR,UAAU,YAAjC,UACE,SAAC,GAAD,SAGJ,SAAC,EAAA2N,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,OAEF,SAAC,EAAAnE,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,SCfF2S,GAAyC,CAC7CC,QAAS,CAAC,GAAI,IAAK,IACnBC,QAAS,CAAC,IAAK,IAAK,GACpB7e,MAAO,CAAC,IAAK,GAAI,IACjB8e,OAAQ,CAAC,IAAK,GAAI,KAwBpB,GArBkB,EAAGC,IAAAA,MACnB,MAAMC,EAAepb,IACnB,IAAImR,EAAQ4J,GAAaI,GACzB,MAAQ,QAAOhK,EAAM,QAAQA,EAAM,OAAOA,EAAM,MAAMnR,GAAW,MAGnE,OACE,SAAC,EAAAgZ,IAAD,CACEjgB,MAAO,CACLoa,OAAQ,EACRvN,aAAc,EACduL,MAAOiK,IACPC,cAAe,cAEjBlK,MAAOiK,EAAY,IAPrB,SASGD,KClBDG,GAAgB,eAETC,GAAiB,CAC5B,CACE9J,MAAO,OACP+J,UAAW,QAEb,CACE/J,MAAO,cACP+J,UAAW,gBACXC,OAASC,IACP,UAAC,EAAA9gB,MAAD,CAAOmJ,MAAM,WAAb,WACE,SAAC,EAAAlJ,WAAA,KAAD,CACE2P,QAAS,IAAMf,OAAOqB,KAAKvL,EAASmc,GAAO,UAC3C3iB,MAAO,CAAE4iB,WAAY,IAAK9X,OAAQ,WAFpC,SAIGzE,EAAesc,EAAM,EAAG,UAE3B,SAAC,EAAAnR,OAAD,CACE3J,KAAK,OACL9J,KAAK,QACL0T,QAAS,IAAMf,OAAOqB,KAAKvL,EAASmc,GAAO,UAC3C3kB,MAAM,SAAC,EAAD,CAASV,KAAK,uBAM5B,CACEob,MAAO,MACP+J,UAAW,MACXC,OAAQ,CAACC,EAAcE,IACpBA,EAAOC,MAGN,UAAC,EAAAjhB,MAAD,CAAO9D,KAAM,EAAb,WACE,SAAC,EAAD,CAAYD,YAAa+kB,EAAOC,OAC/Bnc,EAAQkc,EAAOE,YAAY3Y,OAAOmY,KACnC,SAAC,EAAD,CAAYzkB,YAAa+kB,EAAOC,UALlC,MASN,CACEpK,MAAO,MACP+J,UAAW,MACXC,OAAQ,CAACC,EAAcE,IACpBA,EAAOG,IAGN,UAAC,EAAAnhB,MAAD,CAAO9D,KAAM,EAAb,WACE,SAAC,EAAD,CAAYD,YAAa+kB,EAAOG,KAC/Brc,EAAQkc,EAAOI,UAAU7Y,OAAOmY,KACjC,SAAC,EAAD,CAAYzkB,YAAa+kB,EAAOG,QALlC,MASN,CACEtK,MAAO,SACP+J,UAAW,SACXpJ,MAAO,IACPqJ,OAAQ,CAACC,EAAcE,KAAgB,SAAC,GAAD,CAAWT,IAAKS,EAAOK,WCnE3D,MAAMC,GAAU,cAAD,KACpBC,UAAoB,GADA,KAGpBC,iBAHoB,OAKpBC,UAAoB,GALA,KAOpBC,UAAoB,EAPA,KASpBnhB,KAAe,EATK,KAWpBohB,MAAgB,GAXI,KAapBC,WAAqB,GAbD,KAepBC,gBAAyC,GAfrB,KAiBpBC,gBAAyC,IAGpC,MAAMC,GAAY,cAAD,KACtB9kB,QAAkB,GADI,KAKtByiB,KAAe,GALO,KAOtBnQ,SAAmB,EAPG,KAStByS,WAAqB,IATC,KAWtBC,YAAsB,KAQjB,MAAMC,GAAgB,cAAD,KAC1BC,YAD0B,OAG1BC,iBAH0B,OAK1BhY,OAAiB,K,gBClCnB,MAAMiY,GAAgB,IAGf,MAAMC,GAAQ,cAAD,KACVC,KAAmB1T,OAAOC,OAAOF,KAAKoP,WAIjB,sBAC3B/gB,EACAulB,EACAniB,EAAgBgiB,KAEZhiB,EAAQgiB,KAAehiB,EAAQgiB,IACnC,MAAM1a,EAAiD,CACrDtH,MAAOA,EACPoiB,OAAQD,GAEV,OAAO1hB,KAAKyhB,KAAKG,kCAAkCzlB,EAAS0K,GAGzB,8BAACgb,GACpC,IAAIC,EAAsD,GAG1D,MAAMC,EAAoB,GAC1B,IAAK,IAAIC,EAAS,EAAGA,GAAUH,EAAWthB,OAzBpB,IAyBoCyhB,IAAU,CAClE,MAAMC,EA1Bc,IA0BPD,EACPE,EAAkBL,EAAWM,MAAMF,EAAMA,EA3B3B,KA4BpBF,EAAkB3hB,KAChBJ,KAAKyhB,KAAKW,+BAA+BF,IAI7C,MAAMG,QAAoBvlB,QAAQC,IAAIglB,GACtC,IAAK,MAAMO,KAAcD,EAEvBP,EAAwBA,EAAsBS,OAAOD,GAEvD,OAAOR,EAGc,wBACrBrB,EACA5Z,GAEA,MAAM2b,GAAc,IAAIhf,MAAOC,UAAY,IAC3C,IAAI,WAAEgf,EAAF,SAAcC,EAAd,cAAwBhB,EAAxB,MAAuCniB,GAAUsH,EACrD4b,EAAaje,KAAKC,MAAMge,GAAc,GACtCC,EAAWle,KAAKC,MAAMie,GAAYF,GAElC,MAAMG,EAAmB,IAAIC,GAAAA,UAAUnC,GACvC,IAAIoB,EAAuB,GACvBgB,GAAS,EAEb,MAAQA,GAAQ,CACd,MAAMC,QACE9iB,KAAK+iB,gBAAgBJ,EAAkBjB,EAAeniB,GAC9D,GAAI,OAACujB,QAAD,IAACA,IAAAA,EAAyBviB,QAAUsiB,EAAQ,MAChD,IAAK,MAAMG,KAAQF,EAAyB,CAC1C,MAAMlC,EAAYoC,EAAKpC,UACvB,GAAKA,KAAaA,EAAY8B,GAA9B,CACA,GAAI9B,EAAY6B,EAAY,CAC1BI,GAAS,EACT,MAEFnB,EAAgBsB,EAAKrC,UACrBkB,EAAWzhB,KAAK4iB,EAAKrC,YAGvB,GAAIphB,GAASsiB,EAAWthB,QAAUhB,EAAO,MACzC,IAA2B,OAAvBujB,QAAuB,IAAvBA,OAAA,EAAAA,EAAyBviB,QAASghB,GAAe,MAGvD,aADoCvhB,KAAKijB,wBAAwBpB,ICnF9D,IAAKqB,IAAZ,SAAYA,GAAAA,EAAAA,SAAAA,WAAZ,CAAYA,KAAAA,GAAAA,KCEZ,MAAMC,GAAyB,IAExB,IAAKC,IAAZ,SAAYA,GAAAA,EAAAA,IAAAA,WAAAA,EAAAA,oBAAAA,sBAAZ,CAAYA,KAAAA,GAAAA,KAKL,MAAMC,GAAY,cAAD,KACdC,cAAuB,IAAI9f,MAAO+f,UAE1CC,gBAAgBF,GACdtjB,KAAKsjB,aAAeA,EAGJ,mBAACG,GACjB,MAAMC,EAAO,IAAIL,GACXC,EAAeG,EAAUN,GAE/B,OADAO,EAAKF,gBAAgBF,GACdI,EAGK,eAACC,GACb,MAAMD,EAAO,IAAIL,GACXC,EAAe5Y,GAAAA,CAAOiZ,EAAKP,GAAWQ,KAAKL,UAEjD,OADAG,EAAKF,gBAAgBF,GACdI,EAGS,mBAACG,EAAiBC,GAClC,MAAMC,EAAkB,GACxB,IAAIC,EAAWX,GAAWY,QAAQJ,GAClC,MAAMK,EAASb,GAAWY,QAAQH,GAClC,KAAOE,EAASL,OAASO,EAAOP,OAC9BI,EAAM3jB,KAAK4jB,EAASL,OACpBK,EAAWA,EAASG,SAEtB,OAAOJ,EAGTtc,OAAO2c,GACL,MAAMV,EAAO,IAAIlgB,KAAKxD,KAAKsjB,cAC3B,OAAO5Y,GAAAA,CAAOgZ,GAAMjc,OAAO2c,GAG7BC,YAAYC,EAAoB,GAC9B,MAAMhB,EAAe5Y,GAAAA,CAAO1K,KAAKsjB,cAC9BzY,SAASyZ,EAAW,QACpBf,UAEH,OADaF,GAAWkB,YAAYjB,EAAeH,IAIrDgB,OAAOG,EAAoB,GACzB,MAAMhB,EAAe5Y,GAAAA,CAAO1K,KAAKsjB,cAC9BrjB,IAAIqkB,EAAW,QACff,UAEH,OADaF,GAAWkB,YAAYjB,EAAeH,IAIrDM,UACE,OACGzjB,KAAKsjB,aAAgBtjB,KAAKsjB,aAAeH,IAC1CA,GAIJQ,MACE,OAAO1f,OAAOjE,KAAKyH,OAAO2b,GAAWQ,MAG3B,aAACnc,EAAiB2b,GAAWQ,KACvC,OAAOlZ,GAAAA,GAASjD,OAAOA,ICnDpB,MAAM+c,GAEX5kB,cAAe,KADf6kB,YACc,EACZzkB,KAAKykB,OAAS,IAAIjD,GAGP,cACXf,EACA5f,EACA6jB,GAEA,IAAI,cAAEhD,EAAF,MAAiBniB,GAAUsB,EAE3BgiB,GAAS,EACT8B,EAA6B,GAC7BC,EAAmBlD,EAEvB,MAAQmB,GAAQ,CACd,MAAMgC,QACE7kB,KAAKykB,OAAOK,kBAAkBrE,EAAW,IAC1C5f,EACH6gB,cAAekD,IAGnB,IAAK,MAAMG,KAASF,EAAgB,CAClCD,EAAmBG,EAAMC,YAAYnD,WAAW,GAChD,MAAMoD,EAAMjlB,KAAKklB,cAAcH,GAC3BE,GAAKN,EAAUvkB,KAAK6kB,GAG1B,IAAIP,EAQG,MALL,GAFAC,EAAYA,EAAUzN,QAAQ6N,GAAUL,EAAWK,MAE9CF,EAAetkB,QAAUsiB,EAAQ,MACtC,GAAItjB,GAASolB,EAAUpkB,QAAUhB,EAAO,CACtCsjB,GAAS,EACT,OAIN,OAAO8B,EAEDO,cACNL,GACuB,IAAD,IACtB,MAAM,UAAEjE,EAAF,KAAauE,EAAb,YAAmBH,GAAgBH,EACzC,IAAKjE,IAAcuE,EAAM,OACzB,MAAM,kBAAEC,EAAF,iBAAqBC,EAArB,aAAuCC,EAAvC,YAAqDC,GACzDJ,GACI,WAAEtD,EAAF,QAAcvS,GAAY0V,EAE1BQ,GAAuB,UAAAL,EAAKM,yBAAL,mBAAyB,UAAzB,eAA6BC,eAAgB,GACpEC,EAAkBrW,EAAQoW,aAAa,IAAM,GAE7CE,EAAW,IAAIpF,GACrBoF,EAASjF,UAAYkB,EAAW,GAChC+D,EAAShF,UAAYA,EACrBgF,EAASnmB,KAAO4jB,GAAWkB,YAAY3D,GAAW+C,MAClDiC,EAASnF,UAAYkF,EAAgBlF,UAAUxG,WAE/C,MAAM4L,EAAa7lB,KAAK8lB,iBACtBxW,EAAQyW,YACRX,GAAqB,GACrBC,GAAoB,GACpBC,EACAC,GAGF,OAAIvlB,KAAKgmB,oBAAoBL,IAC3BC,EAAS5E,gBAAkBhhB,KAAKimB,YAAY,CAACN,GAAkBE,GACxDD,IAGTA,EAAS7E,gBAAkB/gB,KAAKimB,YAC9BT,EACAK,GAEFD,EAASlF,YAAc,CACrBD,UAAWkF,EAAgBlF,UAAUxG,WACrC3Z,KAAOqlB,EAAgDrlB,MAElDslB,GAGDI,oBAAoBL,GAC1B,YAAyDzqB,IAAjDyqB,EAAsCO,OAGxCD,YACNE,EACAN,GAEA,MAAMO,EAAmC,GACzC,IAAK,MAAMC,KAAUF,EAAS,CAC5B,IAAKnmB,KAAKgmB,oBAAoBK,GAAS,SACvC,MAAMC,EACHD,EAA6BH,QAAU,GAC1C,GAAQI,EAAaphB,OACdge,GAAWqD,SAAhB,CACE,MAAMvD,EAA2BsD,EAAatD,KACxCwD,EAAexmB,KAAKymB,oBAAoBzD,EAAM6C,GAChDW,GAAcJ,EAAehmB,KAAKomB,IAM5C,OAAOJ,EAGDK,oBACNC,EACAb,GAEA,MAAM,OAAExE,EAAF,YAAUC,EAAV,OAAuBhY,EAAvB,SAA+BkK,GAAakT,EAC5CC,EAAiBrd,GAAUkK,EAASyG,WAE1C,IACG0M,IACAd,EAAWpkB,IAAI4f,KACfwE,EAAWpkB,IAAI6f,GAEhB,OAEF,MAAM8E,EAAiB,IAAIhF,GAI3B,OAHAgF,EAAe/E,OAASwE,EAAW3kB,IAAImgB,GACvC+E,EAAe9E,YAAcuE,EAAW3kB,IAAIogB,GAC5C8E,EAAe9c,OAASqd,EACjBP,EAGDN,iBACNC,EACAX,EACAC,EACAC,EACAC,GAEA,MAAMqB,EAAiB,IAAIzlB,IAG3B,IAAK,MAAMggB,KAAeiE,EAAmB,CAC3C,MAAM,aAAEyB,EAAF,KAAgBjI,EAAhB,cAAsBkI,GAAkB3F,EACxC6B,EAAO,IAAI/B,GACjB+B,EAAK7mB,QAAU4pB,EAAYc,GAAcE,OAAO9M,WAChD+I,EAAK7B,YAAc2F,EAAcxd,OACjC0Z,EAAKpE,KAAOA,EACZoE,EAAKvU,SAAWqY,EAAcrY,SAC9BmY,EAAe7lB,IAAIiiB,EAAK7mB,QAAS6mB,GAGnC,IAAK,MAAM9B,KAAcmE,EAAkB,CACzC,MAAM,aAAEwB,EAAF,cAAgBC,GAAkB5F,EAClC/kB,EAAU4pB,EAAYc,GAAcE,OAAO9M,WAC3C+I,EAAO4D,EAAe1lB,IAAI/E,IAAY,IAAI8kB,GAChD+B,EAAK9B,WAAa4F,EAAcxd,OAChCsd,EAAe7lB,IAAIiiB,EAAK7mB,QAAS6mB,GAiBnC,OAbA+C,EAAY7U,SAAQ,CAAC8V,EAAarb,KAChC,MAAMxP,EAAU6qB,EAAYD,OAAO9M,WACnC,IAAK3d,EAAAA,QAAAA,oBAA4BH,GAAU,CACzC,MAAM6mB,EAAO4D,EAAe1lB,IAAI/E,IAAY,IAAI8kB,GAChD+B,EAAK7mB,QAAUA,EACf6mB,EAAKpE,KC5Lc,mCD6LnBoE,EAAK7B,YAAc8F,OAAO3B,EAAa3Z,IAAQ,GAC/CqX,EAAK9B,WAAa+F,OAAO1B,EAAY5Z,IAAQ,GAC7CqX,EAAKvU,SC7Le,ED8LpBmY,EAAe7lB,IAAIiiB,EAAK7mB,QAAS6mB,OAI9B4D,G,gBExKX,MAEMvQ,GAAO,UAKP6Q,GAAkBtB,KACjBA,EAAS7E,gBAAgBxgB,OAOnB4mB,IAAmB7U,EAAAA,GAAAA,kBAK7B,4BACDtW,OAAS0lB,cAAAA,EAAe0F,WAAAA,IAAgB3U,SAAAA,MAAgB,IAAD,EACrD,MACE6I,KAAK,YAAE+L,IACLxmB,GAAAA,GAGF8X,SAAS,YAAE2O,IACT7U,IAEE8U,QAAkB,UAAMxZ,OAAOC,OAAOP,cAApB,aAAM,EAAsB+Z,cACpD,IAAKD,EAAiB,MAAM5W,MAAM,gBAElC,MAAM9J,EAAU,CACdtH,MAlCqB,GAmCrBmiB,cAAAA,GAGI+F,EAAkB,IAAIjD,GACtBkD,QAAsBD,EAAgBE,QAC1CJ,EACA1gB,EACAqgB,IAEF,IAAIvO,EAAyB,GAEzByO,IAAYzO,EAAU,IAAI2O,IAE9B,IAAK,MAAM1B,KAAY8B,EAAe,CAAC,IAAD,UACpC,MAAME,EAAc,GACdxB,EAAiBR,EAAS7E,gBAChC,IAAI8G,EACJ,MAAMC,EAAc1B,EAAe,GAC/BA,EAAe7lB,OAAS,IAC1BsnB,EAAazB,EAAeA,EAAe7lB,OAAS,IAItD,GAFkBqlB,EAASnF,YAET4G,EAAa,SAE/B,MAAM5nB,EAAO,IAAI+D,KAA0B,IAArBoiB,EAAShF,WAE/BgH,EAAYnoB,KAAOiL,GAAAA,CAAOjL,GAAMgI,OAAO,sBACvCmgB,EAAYxH,WAAa0H,EAAYxG,YACjCrd,OACEc,EAAAA,MAAAA,aACE8H,OAAOib,EAAYxe,QACnBwe,EAAYxG,YAAY7S,gBAG5BvT,EACJ0sB,EAAYtH,SAAqB,QAAV,EAAAuH,SAAA,SAAYvG,YAC/Brd,OACEc,EAAAA,MAAAA,aACE8H,OAAOgb,EAAWve,QAClBue,EAAWvG,YAAY7S,gBAG3BvT,EAEJ0sB,EAAYzH,KAAZ,UAAmB2H,EAAYxG,mBAA/B,aAAmB,EAAyB1C,KAC5CgJ,EAAYvH,GAAZ,UAAiBwH,SAAjB,iBAAiB,EAAYvG,mBAA7B,aAAiB,EAAyB1C,KAC1CgJ,EAAYG,cAAgBnC,EAASjF,UACrCiH,EAAY/nB,IAAM+lB,EAASjF,UAC3BiH,EAAYrH,OACTuH,EAAYxG,aAAe,UAACuG,SAAD,OAAC,EAAYvG,YAErC,UADA,SAEN3I,EAAQvY,KAAKwnB,GAEf,MAAO,CAAEN,YAAa3O,MAmB1B,IAXc9F,EAAAA,GAAAA,aAAY,CACxBlY,KAAM0b,GACNvD,aAjG0B,CAC1BwU,YAAa,IAiGbtU,SAAU,GACVC,cAAgBC,IACTA,EAAQC,QACXgU,GAAiB/T,WACjB,CAACrU,GAASsU,QAAAA,MAAmB7W,OAAOgG,OAAOzD,EAAOsU,SAIxD,QCxCA,GAjFgB,KACd,MAAO2U,EAAWC,IAAgBxsB,EAAAA,EAAAA,UALf,IAMZ0R,EAASC,IAAc3R,EAAAA,EAAAA,WAAS,IAEjC,YAAE6rB,IAAgBxoB,EAAAA,EAAAA,cAAaC,GAAoBA,EAAM4Z,UACzDlF,GAAWC,EAAAA,EAAAA,eAEXwU,GAAensB,EAAAA,EAAAA,cAAYC,UAC/BoR,GAAW,SACLqG,EAAS0T,GAAiB,KAAKgB,SACrC/a,GAAW,KACV,CAACqG,KAEJtW,EAAAA,EAAAA,YAAU,KACR+qB,MACC,CAACA,IAEJ,MAoBM7qB,GAAQoS,EAAAA,EAAAA,UAAQ,IACbuY,EAAY,EAAI,CAAErhB,OAAQ,QAAW,CAAEA,OAxC7B,MAyChB,CAACqhB,IAEJ,OACE,SAAC,EAAAhc,KAAD,CAAMC,UAAU,EAAO5O,MAAO,IAAKA,GAAnC,UACE,UAAC,EAAA+K,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAK8D,KAAK,OAAV,UACE,SAAC,EAAAlN,WAAA,MAAD,CAAkBwN,MAAO,EAAzB,6BAEF,SAAC,EAAApE,IAAD,WACE,SAAC,EAAAsG,OAAD,CAAQC,QAhBY,KAC1BoZ,IACAD,EAtCiB,IAoDX,wBAEF,SAAC,EAAA1f,IAAD,CAAKmE,KAAM,GAAX,UACE,UAAC,EAAAtE,IAAD,CAAKE,QAAQ,SAAS8D,OAAQ,CAAC,GAAI,GAAnC,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAIrP,MAAO,CAAE+qB,UAAW,KAAnC,UACE,SAAC,EAAAC,MAAD,CACEC,QAASzI,GACT0I,WAAYjB,EAAYnF,MAAM,EAAG6F,GACjC7a,QAASA,EACTqb,YAAY,EACZC,aAAc,CAACvI,EAAQ1Y,IACrBA,EAAQ,EAAI,UAAY,WAE1BkhB,OAAQpB,EAAY/mB,OAAS,CAAEooB,EAAG,KAAQ,QAG9C,SAAC,EAAApgB,IAAD,WACE,SAAC,EAAAsG,OAAD,CACEC,QAjDW,KACvB,MAAM8Z,EAA+BtB,EAAYnF,MAAM,EAAG6F,GAAWznB,OAErE,GAAI+mB,EAAY/mB,OAASqoB,GAvBN,GAuBsD,CAAC,IAAD,EACvE,MAAMlH,EAAa,UAAG4F,EAAYA,EAAY/mB,OAAS,UAApC,aAAG,EAAqCwnB,cAC3DtU,EACE0T,GAAiB,CACfzF,cAAAA,EACA0F,YAAY,KAIlBa,EAAaD,EAjCI,IAuEL9iB,KAAK,OACL7J,MAAM,SAAC,EAAD,CAASV,KAAK,yBACpBqS,SAAUgb,GAAaV,EAAY/mB,OAJrC,oCCXd,GApDa,KACX,MAAM,MAAE3E,IAAUC,EAAAA,EAAAA,WACZ4X,GAAWC,EAAAA,EAAAA,gBACX,MAAE3U,IAAU8Z,EAAAA,EAAAA,gBACXpa,EAAKoqB,IAAUptB,EAAAA,EAAAA,UAAS,KACxBmD,EAAKkqB,IAAUrtB,EAAAA,EAAAA,UAAS,IACzBqO,EAAU4R,GAAiBjd,GAC3BsL,EAAU2R,GAAiB9c,GAC3Bqd,EAAU,OAAGld,QAAH,IAAGA,OAAH,EAAGA,EAAOqP,YAGpB2a,GAAmBhtB,EAAAA,EAAAA,cAAY,KACnC,IAAKO,EAAAA,QAAAA,UAAkB2f,GAAa,OACpC,MAAM1f,EAAWX,EAAMqgB,GAClB1f,IACLssB,EAAM,OAACtsB,QAAD,IAACA,OAAD,EAACA,EAAUK,QACjBksB,EAAM,OAACvsB,QAAD,IAACA,OAAD,EAACA,EAAUM,WAChB,CAACof,EAAYrgB,IAgBhB,OAdAuB,EAAAA,EAAAA,YAAU,KACR4rB,MACC,CAACA,KAEJ5rB,EAAAA,EAAAA,YAAU,KAELb,EAAAA,QAAAA,UAAkBwN,EAAQyB,iBAC1BjP,EAAAA,QAAAA,UAAkByN,EAAQwB,kBAG7BkI,EAASpB,GAAcvI,IACvB2J,EAAS+H,GAAczR,OACtB,CAACA,EAASD,EAAS2J,KAGpB,UAAC,EAAArL,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAK/O,MAAO,CAAE2rB,cAAe,IAA/C,WACE,SAAC,EAAAzgB,IAAD,CAAK0gB,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAxB,UACE,SAAC,GAAD,OAEF,SAAC,EAAA5gB,IAAD,CAAK0gB,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzB,UACE,UAAC,EAAA/gB,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAD,OAEF,SAAC,EAAAnE,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,eCNZ,GA/CoB,KAAO,IAAD,QACxB,MAAM5C,GAAUhL,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMN,MACjDsL,GAAUjL,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMH,MAEvD,OACE,UAAC,EAAAwJ,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,UAAC,EAAAtE,IAAD,CAAKC,MAAM,SAASC,QAAQ,gBAA5B,WACE,SAAC,EAAAC,IAAD,WACE,UAAC,EAAArJ,MAAD,CAAOyV,UAAU,WAAjB,WACE,SAAC,EAAAxV,WAAA,KAAD,oBACA,UAAC,EAAAD,MAAD,YACE,SAAC,EAAD,CAAY/D,aAAa,UAAA2O,EAAQpL,gBAAR,eAAkBvC,UAAW,MACtD,SAAC,EAAAgD,WAAA,KAAD,WACE,SAAC,EAAD,CAAYhE,aAAa,UAAA2O,EAAQpL,gBAAR,eAAkBvC,UAAW,WAG1D,SAAC,EAAAgD,WAAA,MAAD,CAAkBwN,MAAO,EAAzB,SAA6B7C,EAAQR,eAGzC,SAAC,EAAAf,IAAD,WACE,SAAC,EAAD,CAAS5N,KAAK,wBAAwB0C,MAAO,CAAEmY,SAAU,SAE3D,SAAC,EAAAjN,IAAD,WACE,UAAC,EAAArJ,MAAD,CAAOyV,UAAU,WAAjB,WACE,SAAC,EAAAxV,WAAA,KAAD,kBACA,UAAC,EAAAD,MAAD,YACE,SAAC,EAAD,CAAY/D,aAAa,UAAA4O,EAAQrL,gBAAR,eAAkBvC,UAAW,MACtD,SAAC,EAAAgD,WAAA,KAAD,WACE,SAAC,EAAD,CAAYhE,aAAa,UAAA4O,EAAQrL,gBAAR,eAAkBvC,UAAW,WAG1D,SAAC,EAAAgD,WAAA,MAAD,CAAkBwN,MAAO,EAAzB,SAA6B5C,EAAQT,oBAK7C,SAAC,EAAAf,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,EAAA2I,QAAD,CAAShY,MAAO,CAAEoa,OAAQ,QAE5B,SAAC,EAAAlP,IAAD,WACE,SAAC,GAAD,UCsER,GAxGe,KACb,MAAOkQ,EAASC,IAAcjd,EAAAA,EAAAA,WAAS,IACjC,MACJmT,EACAnQ,KACE6K,OAAQoF,EACRhQ,SAAUC,EACV4M,eAAgBoI,GAElB/U,KAAO0K,OAAQgH,GACf9C,UAAU,SAAEoG,KACV9U,EAAAA,EAAAA,cAAaC,GAAoBA,IAC/B8S,EAAcO,KACdyB,EAAaC,GAAWH,GAExB1G,GAAawC,EAAAA,EAAAA,UAAQ,KACzB,IAAK9Q,IAAgBsF,OAAOyK,GAAY,OAAO7B,OAAO,GACtD,GAAIlO,EAAYxC,UAAY4X,EAAAA,aAAc,OAAOlH,OAAO,GACxD,MAAMvD,EAASvE,EAAAA,MAAAA,WAAiB2J,EAAW/P,EAAY8P,UACvD,OAAInF,GAAUuK,EAAmBhH,OAAO,GACjCvD,EAASuK,IACf,CAACnF,EAAW/P,EAAakV,IAEtBG,GAAkBJ,GAA0B,IAAd/B,EAAoB,KAClD7E,IACJ,OAAC4B,QAAD,IAACA,GAAAA,EAAO9B,KAAKvM,UACZ0T,WAAWvF,IACZuF,WAAWvF,GAAa,IACvBuF,WAAW3D,IACZ2D,WAAW3D,GAAa,EAE1B,OACE,UAAC,EAAAlI,IAAD,CAAKgE,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAA7D,IAAD,CAAKmE,KAAM,GAAX,UACE,SAAC,GAAD,CAAY4I,QAAS,QAEvB,SAAC,EAAA/M,IAAD,CAAKmE,KAAM,GAAX,UACE,UAAC,EAAAtE,IAAD,CAAKC,MAAM,SAAX,WACE,SAAC,EAAAE,IAAD,CAAK8D,KAAK,OAAV,UACE,SAAC,EAAAmK,QAAD,CACEV,UAAU,aACV3D,SAAS,SAAC,GAAD,IACT0E,QAAQ,QAHV,UAKE,UAAC,EAAA3X,MAAD,CACE7B,MAAO,CAAE8K,OAAQ,WACjBwM,UAAU,WACVvZ,KAAM,EAHR,WAKE,UAAC,EAAA8D,MAAD,YACE,SAAC,EAAAC,WAAA,KAAD,WACE,SAAC,EAAD,CACExE,KAAK,6BACL0C,MAAO,CAAEoY,MAAO,gBAGpB,SAAC,EAAAtW,WAAA,KAAD,CAAiB+F,KAAK,YAAtB,8BAIF,UAAC,EAAAhG,MAAD,YACE,SAAC,EAAAC,WAAA,KAAD,CAAiB9B,MAAO,CAAEoY,MAAO,WAAjC,UACE,SAAC,EAAD,CAAS9a,KAAK,0BAEhB,SAAC,EAAAwE,WAAA,KAAD,CAAiB9B,MAAO,CAAEoY,MAAO,WAAjC,SACGzR,EAAQC,OAAO4N,IAAcpK,OAAO,0BAM/C,SAAC,EAAAc,IAAD,WACE,SAAC,EAAAsG,OAAD,CACEC,QAAS,IAAM4J,GAAW,GAC1Btd,KAAK,QACLmU,OAAK,EACLrK,KAAK,UACL8H,SAAUA,EALZ,mCAYN,SAAC,EAAA+L,MAAD,CACEhD,OAAO,SAAC,EAAA5W,WAAA,MAAD,CAAkBwN,MAAO,EAAzB,2BACPqM,SAAU,IAAMN,GAAW,GAC3BQ,QACE,SAAC,GAAD,CACEpM,MAAW,OAAL8B,QAAK,IAALA,OAAA,EAAAA,EAAO9B,OAAQ,GACrBG,WAAYA,EACZF,WAAY,IAAM2L,GAAW,GAC7BxL,YAAa8G,EACbhH,SAAUA,GAAYgH,IAG1ByE,QAASA,EAZX,UAcE,SAAC,GAAD,UClFR5L,OAAOuc,UAAUC,OAAS,WACxB,OAAOrpB,KAAKia,YAEP,MAAMqP,GAAgC,CAC3CC,kBAAmB,CACjBC,eAtBatgB,GAOE,qBAARA,GACC,OAARA,GACe,kBAARA,GACQ,mBAARA,GACQ,kBAARA,GACPwV,MAAM+K,QAAQvgB,IAXOwgB,CAAAA,IACrB,GAAY,OAARA,EAAc,OAAO,EACzB,MAAMC,EAAQntB,OAAOotB,eAAeF,GACpC,OAAiB,OAAVC,GAAmD,OAAjCntB,OAAOotB,eAAeD,IAS/CE,CAAc3gB,IACC,kBAARA,ICFX,IAfc4gB,EAAAA,GAAAA,gBAAe,CAC3BC,WAAaC,GACXA,EAAqBV,IACvBW,UDZwD,ECaxDC,QAAS,CACPtrB,IADO,GAEPH,IAFO,GAGP+O,SAHO,GAIPoB,MAJO,GAKP+J,QALO,OCGTsC,UAAU,MAAEZ,KACVxZ,GAESspB,GAAO,KAEhB,SAAC,EAAAC,WAAD,CAAY/P,MAAOA,GAAOgQ,MAAI,EAA9B,UACE,SAAC,EAAAC,aAAD,WACE,SAAC,EAAAC,aAAD,WACE,SAAC,EAAAC,gBAAD,WACE,SAAC,EAAAC,eAAD,WACE,SAAC,EAAAC,SAAD,CAAUC,MAAOC,GAAjB,UACE,SAAC,GAAD,gBAUHC,GAA6B,CACxCzvB,KAAM,QACN8J,KAAM,SAGK4lB,GAAS,KAElB,SAAC,EAAAV,WAAD,CAAY/P,MAAOA,GAAOgQ,MAAI,EAA9B,UACE,SAAC,EAAAC,aAAD,WACE,SAAC,EAAAC,aAAD,WACE,SAAC,EAAAC,gBAAD,WACE,SAAC,EAAAC,eAAD,WACE,SAAC,EAAAC,SAAD,CAAUC,MAAOC,GAAjB,UACE,SAAC,GAAD,iB,mFCjDhB,MAQA,EARgB,CACdtP,IAAKA,EAAAA,EAAIvX,EAAAA,IACTgnB,SAAUA,EAAAA,EAAS1P,EAAAA,M,8CCgBrB,MAAM2P,EAAiB,SACjBC,EAAS,CACb,SAA4B,CAC1BniB,IAAKwR,uDACLD,MAAOC,WACP3f,KAAM2f,WACN4Q,OAAQ,CACNvwB,KAAM2f,SACN6Q,MAAO7Q,gBAET8Q,eAAiB9Q,cACd+Q,MAAM,KACNruB,KAAKsuB,GAASA,EAAKC,SACnBrU,QAAQoU,GAAS,CAAC,OAAQ,UAAUna,SAASma,KAGhDE,KAAOlR,sBACJ+Q,MAAM,KACNruB,KAAKyiB,GAAQA,EAAI8L,SACpBpc,YAAamL,2BACbmR,UAAU,IAoCd,EAhCgC,CAI9BvQ,YAAa,CACXwQ,aAAcV,EACdW,MAAOV,EACPW,OAAQ,2DAMVzQ,QAAS,CACPuQ,aAAcV,EACdW,MAAOV,EACPW,OAAQ,2DAMVxQ,WAAY,CACVsQ,aAAcV,EACdW,MAAO,GACPC,OAAQ,6D,8CCrEZ,MAAMC,EAAU,CACdnR,YAAa,8CACbC,cAAe,gDA2DjB,EA5CgC,CAI9BH,OAAQ,IACHqR,EACHpR,KAAM,gCACNmC,QAAS,IACTkP,YAAa,+CACbC,gBAAiB,+CACjB1E,YAAa,+CACb2E,cAAe,gDAMjBpR,QAAS,IACJiR,EACHpR,KAAM,iCACNmC,QAAS,IACTkP,YAAa,GACbC,gBAAiB,GACjB1E,YAAa,GACb2E,cAAe,IAMjBnR,QAAS,IACJgR,EACHpR,KAAM,sCACNmC,QAAS,IACTkP,YAAa,8CACbC,gBAAiB,+CACjB1E,YAAa,8CACb2E,cAAe,kD,8FCtDZ,MAAM1Q,EAAOsB,IAAD,CACjBze,OAAQ,MACRxD,KAAM,SACNwB,QAAS,mCACTsS,SAAU,EACVmO,QAAAA,EACAzR,WAAY,CACVC,YAAa,UAEfhP,QACE,sIAKS6vB,EAAQrP,IAAD,CAClBze,OAAQ,OACRxD,KAAM,SACNwB,QAAS,+CACTsS,SAAU,EACVmO,QAAAA,EACAzR,WAAY,CACVC,YAAa,UAEfhP,QACE,sIAyDJ,EArDsB,CACpBkf,EAAI,KACJ2Q,EAAK,KACL,CACE9tB,OAAQ,OACRxD,KAAM,kBACNwB,QAAS,+CACTsS,SAAU,EACVmO,QAAS,IACTzR,WAAY,CACVC,YAAa,WAEfhP,QACE,qIAEJ,CACE+B,OAAQ,OACRxD,KAAM,WACNwB,QAAS,+CACTsS,SAAU,EACVmO,QAAS,IACTzR,WAAY,CACVC,YAAa,YAEfhP,QACE,sIAEJ,CACE+B,OAAQ,MACRxD,KAAM,UACNwB,QAAS,+CACTsS,SAAU,EACVmO,QAAS,IACTzR,WAAY,CACVC,YAAa,WAEfhP,QACE,sIAEJ,CACE+B,OAAQ,OACRxD,KAAM,WACNwB,QAAS,+CACTsS,SAAU,EACVmO,QAAS,IACTzR,WAAY,CACVC,YAAa,YAEfhP,QACE,wICxEJkf,KAAK,QAAEsB,IACL/b,EAAAA,EACEqrB,EAAY,UACZC,EAAS,CACbC,SAAU,OACVC,SAAS,EACTC,UAAW,GAEPC,EAAW,CACftkB,SAAU,CACRvB,GAAI,UACJc,MAAO,CACL,CAAEglB,MAAO,YAAaL,GACtB,CAAEK,MAAO,UAAWL,MAmF1B,QA9EA,MAQEvsB,cAAe,KAPP6sB,cAOM,OANNC,YAMM,OALL9P,aAKK,OAJL+P,aAIK,OAHNxf,aAGM,OAFNyf,WAEM,OAWNC,MAAQ7wB,SACVgE,KAAKysB,SAASrxB,KAAa,CAAC4E,KAAKysB,SAAUzsB,KAAK0sB,QAC7C,IAAI5vB,SAAQd,MAAAA,IAEjB,GAAIgE,KAAKmN,QAAS,OAAOnN,KAAK4sB,MAAMxsB,KAAKF,GAEzCF,KAAKmN,SAAU,EAEf,IAAI2f,cAAyB,IAAIC,EAAAA,IAAoB7sB,WAClD8sB,gBAAgBhtB,KAAK4c,SACrBqQ,UAeH,IAdqB,WAAjBjtB,KAAK2sB,UAAsBG,EAAYA,EAAUvK,OAAO2K,IAE1DJ,EADmB,YAAjB9sB,KAAK2sB,QACKG,EAAUvK,OAAO,CAAC0J,EAAK,KAAM3Q,EAAI,OAC9BwR,EAAUvK,OAAO,CAACjH,EAAI,OAEvCwR,EAAU5b,SAASjV,GAAU+D,KAAKysB,SAAS1rB,IAAI9E,EAAME,QAASF,KAE9D+D,KAAK0sB,OAAS,IAAIS,EAAAA,SAASZ,GAC3BvsB,KAAKysB,SAASvb,SAAQ,EAAG/U,QAAAA,KAAYixB,KACnCptB,KAAK0sB,OAAOzsB,IAAI9D,EAASixB,KAG3BltB,EAAQ,CAACF,KAAKysB,SAAUzsB,KAAK0sB,SAEtB1sB,KAAK4sB,MAAMrsB,QAAQP,KAAK4sB,MAAMpsB,OAAXR,CAAmB,CAACA,KAAKysB,SAAUzsB,KAAK0sB,SAElE1sB,KAAKmN,SAAU,KAtCL,KA0CdpQ,IAAMf,UACJ,MAAOywB,SAAkBzsB,KAAK6sB,QAC9B,OAAOnO,MAAMyB,KAAKsM,EAAShwB,WA5Cf,KA+CdP,cAAgBF,MAAAA,IACd,MAAOywB,SAAkBzsB,KAAK6sB,QAC9B,OAAOJ,EAASvrB,IAAImsB,IAjDR,KAoDd3wB,KAAOV,MAAO+a,EAAiBxX,KAC7B,MAAOktB,EAAUC,SAAgB1sB,KAAK6sB,QACtC,IAAIS,EAAsB,GAY1B,OAXAvW,EAAQsU,MAAMa,GAAWhb,SAASrR,GACS6sB,EAAOzV,OAAOpX,EAAKN,GACjD2R,SAAQ,EAAGqc,OAAAA,KACbA,EAAOrc,SAASxK,IACrB,GAAI4mB,EAAOE,WAAU,EAAGrxB,QAAAA,KAAcA,IAAYuK,IAAM,EAAG,CACzD,MAAMzK,EAAQwwB,EAASvrB,IAAIwF,GACvBzK,GAAOqxB,EAAOltB,KAAKnE,WAKxBqxB,GAjEPttB,KAAKysB,SAAW,IAAItrB,IACpBnB,KAAK0sB,YAASxxB,EACd8E,KAAK4c,QAAUA,EACf5c,KAAK2sB,QAAU5oB,EAAAA,GACf/D,KAAKmN,SAAU,EACfnN,KAAK4sB,MAAQ,GAEb5sB,KAAK6sB,W,uECrCT,MAaaxR,EANA,aAwBAtX,EAbM,MACjB,OAAQyY,EAAAA,EAAAA,IAAY,YAClB,IAAK,SACH,MAAO,SACT,IAAK,UACH,MAAO,UAGT,QACE,MAAO,YAIWiR,I,8CCpCxB,MAAMC,EAAM,SACNC,EAAS5f,OAAO6f,aAEhBC,EAAWjtB,IACf,IAAKA,EAAO,OAAO,KACnB,IACE,OAAOU,KAAKwsB,MAAMltB,GAClB,MAAO6L,GACP,OAAO,OAIL+P,EAAU,CACdzb,IAAK,CAAClB,EAAae,KACjB,IAAIN,EAAOutB,EAAQF,EAAOI,QAAQL,IAC7BptB,GAAwB,kBAATA,IAAmBA,EAAO,IAC9CA,EAAKT,GAAOe,EACZ+sB,EAAOK,QAAQN,EAAKpsB,KAAKC,UAAUjB,KAErCY,IAAMrB,IACJ,IAAIS,EAAOutB,EAAQF,EAAOI,QAAQL,IAClC,OAAKptB,GAAwB,kBAATA,EACbA,EAAKT,GADkC,MAGhDouB,MAAQpuB,IACN2c,EAAQzb,IAAIlB,EAAK,QAIrB,K","sources":["shared/antd/ionicon/assets/icon-telegram.svg","shared/antd/ionicon/customs.tsx","shared/antd/ionicon/index.tsx","shared/antd/mint/mintAvatar.tsx","shared/antd/mint/mintName.tsx","shared/antd/mint/mintSymbol.tsx","app/page/chart/cross.tsx","shared/dataloader/constant.ts","shared/dataloader/request.ts","shared/dataloader/cache.ts","shared/dataloader/index.ts","shared/util.ts","app/page/chart/chart.tsx","app/page/chart/chartEmpty.tsx","app/helper/cgk.ts","app/page/chart/index.tsx","app/components/swapButton.tsx","app/components/preview/routeAvatar.tsx","app/helper/oracle.ts","app/helper/router.ts","app/hooks/usePriceImpact.ts","app/components/preview/price.tsx","app/components/preview/index.tsx","app/model/bid.controller.ts","app/hooks/useBalance.ts","app/page/swap/swapReview.tsx","app/hooks/useMintCgk.ts","app/page/swap/swapPoolInfo.tsx","app/static/images/sen.svg","app/components/poweredBy.tsx","app/components/settings/slippage.tsx","app/components/settings/advanced.tsx","app/model/settings.controller.ts","app/components/settings/index.tsx","app/components/selection/search.tsx","app/components/selection/mint.tsx","app/components/selection/mintSelection.tsx","app/components/selection/index.tsx","shared/antd/numericInput.tsx","app/configs/manifest.config.ts","app/configs/sol.config.ts","app/configs/swap.config.ts","app/configs/wormhole.config.ts","app/configs/index.ts","app/model/ask.controller.ts","app/hooks/useMintSelection.ts","shared/hooks/useMintDecimals.ts","app/components/ask/index.tsx","app/constant/ethConfig.ts","app/constant/solConfig.ts","app/helper/wormhole.ts","app/components/bid/wormholeSupported.tsx","app/components/bid/index.tsx","app/model/route.controller.ts","app/components/swap/swapAction.tsx","app/components/swap/index.tsx","app/page/swap/index.tsx","app/page/history/statusTag.tsx","app/page/history/column.tsx","app/lib/stat/entities/trans-log.ts","app/lib/stat/adapters/solana/client.ts","app/lib/stat/constants/transaction.ts","app/lib/stat/helpers/date.ts","app/lib/stat/logic/translog.ts","app/lib/stat/constants/sol.ts","app/model/history.controller.ts","app/page/history/index.tsx","app/page/index.tsx","app/widget/confirmSwap.tsx","app/widget/index.tsx","shared/devTools.ts","app/model/index.ts","app/bootstrap.app.tsx","os/configs/index.ts","os/configs/register.config.ts","os/configs/sol.config.ts","os/providers/tokenProvider/supplementary.ts","os/providers/tokenProvider/index.ts","shared/runtime.ts","shared/storage.ts"],"sourcesContent":["var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgIconTelegram({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"inherit\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\",\n    width: \"50px\",\n    height: \"50px\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.137,6.552c-0.75-0.636-1.928-0.727-3.146-0.238l-0.002,0C41.708,6.828,6.728,21.832,5.304,22.445 c-0.259,0.09-2.521,0.934-2.288,2.814c0.208,1.695,2.026,2.397,2.248,2.478l8.893,3.045c0.59,1.964,2.765,9.21,3.246,10.758 c0.3,0.965,0.789,2.233,1.646,2.494c0.752,0.29,1.5,0.025,1.984-0.355l5.437-5.043l8.777,6.845l0.209,0.125 c0.596,0.264,1.167,0.396,1.712,0.396c0.421,0,0.825-0.079,1.211-0.237c1.315-0.54,1.841-1.793,1.896-1.935l6.556-34.077 C47.231,7.933,46.675,7.007,46.137,6.552z M22,32l-3,8l-3-10l23-17L22,32z\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgIconTelegram);\nexport default __webpack_public_path__ + \"static/media/icon-telegram.2450489f40d03000fe65fc1c6f238d85.svg\";\nexport { ForwardRef as ReactComponent };","import IconTele from './assets/icon-telegram.svg'\n\nexport const CUSTOM_ICONS: Record<string, string> = {\n  'logo-telegram': IconTele,\n}\n","/**\n * IonIcon 5\n * Credit https://ionic.io/ionicons\n */\n\nimport { forwardRef } from 'react'\nimport { CUSTOM_ICONS } from './customs'\n\n/**\n * IonIcon\n * @param name The icon name. You can find it here https://ionic.io/ionicons\n * @param className To modify the span class\n */\nconst IonIcon = forwardRef<\n  HTMLElement,\n  { name: string; className?: string } & any\n>(({ name, className, ...props }, ref) => {\n  const cln = className ? 'anticon ' + className : 'anticon'\n\n  return (\n    <span className={cln} {...props}>\n      {CUSTOM_ICONS[name] ? (\n        <ion-icon ref={ref} src={CUSTOM_ICONS[name]} />\n      ) : (\n        <ion-icon ref={ref} name={name} />\n      )}\n    </span>\n  )\n})\n\nexport default IonIcon\n","import { ReactNode, useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport { Avatar } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { useMint, usePool } from 'senhub/providers'\n\nconst DEFAULT_AVATARS: Array<string | undefined> = [undefined]\n\n/**\n * Mint/Token avatar, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param size - Avatar size. Default 24px.\n * @param icon - Fallback icon for unknown token\n * @param reversed - (Optional) The default LP token avatar is A-B. The reversed is to change it to B-A\n * @returns name\n */\nconst MintAvatar = ({\n  mintAddress,\n  size = 24,\n  icon = <IonIcon name=\"diamond-outline\" />,\n  reversed = false,\n}: {\n  mintAddress: string\n  size?: number\n  icon?: ReactNode\n  reversed?: boolean\n}) => {\n  const [avatars, setAvatars] = useState(DEFAULT_AVATARS)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveAvatar = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.logoURI) return token.logoURI\n      return undefined\n    },\n    [tokenProvider],\n  )\n\n  const deriveAvatars = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setAvatars(DEFAULT_AVATARS)\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const avatars = await Promise.all([mint_a, mint_b].map(deriveAvatar))\n      if (reversed) avatars.reverse()\n      return setAvatars(avatars)\n    }\n    // Normal mint\n    const avatar = await deriveAvatar(mintAddress)\n    return setAvatars([avatar])\n  }, [mintAddress, reversed, deriveAvatar, pools])\n\n  useEffect(() => {\n    deriveAvatars()\n  }, [deriveAvatars])\n\n  return (\n    <Avatar.Group style={{ display: 'block', whiteSpace: 'nowrap' }}>\n      {avatars.map((avatar, i) => (\n        <Avatar\n          key={i}\n          src={avatar}\n          size={size}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n        >\n          {icon}\n        </Avatar>\n      ))}\n    </Avatar.Group>\n  )\n}\n\nexport default MintAvatar\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport { useMint, usePool } from 'senhub/providers'\n\nconst DEFAULT_NAME = 'Unknown Token'\n\n/**\n * Mint/Token name, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param separator - (Optional) In case of LP tokens, the names is combined by 2 token names. The separator is to separate them.\n * @param reversed - (Optional) The default LP token names is A-B. The reversed is to change it to B-A\n * @returns name\n */\nconst MintName = ({\n  mintAddress,\n  separator = ' • ',\n  reversed = false,\n}: {\n  mintAddress: string\n  separator?: string\n  reversed?: boolean\n}) => {\n  const [name, setName] = useState(DEFAULT_NAME)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveName = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.name) return token.name\n      return DEFAULT_NAME\n    },\n    [tokenProvider],\n  )\n\n  const deriveNames = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setName(DEFAULT_NAME)\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const names = await Promise.all([mint_a, mint_b].map(deriveName))\n      if (reversed) names.reverse()\n      return setName(`${names.join(separator)} LP`)\n    }\n    // Normal mint\n    const name = await deriveName(mintAddress)\n    return setName(name)\n  }, [mintAddress, reversed, deriveName, pools, separator])\n\n  useEffect(() => {\n    deriveNames()\n  }, [deriveNames])\n\n  return <span>{name}</span>\n}\n\nexport default MintName\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport { useMint, usePool } from 'senhub/providers'\n\nconst DEFAULT_SYMBOL = 'TOKN'\n\n/**\n * Mint/Token symbol, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param separator - (Optional) In case of LP tokens, the symbols is combined by 2 token symbols. The separator is to separate them.\n * @param reversed - (Optional) The default LP token symbol is A-B. The reversed is to change it to B-A\n * @returns symbol\n */\nconst MintSymbol = ({\n  mintAddress,\n  separator = ' • ',\n  reversed = false,\n}: {\n  mintAddress: string\n  separator?: string\n  reversed?: boolean\n}) => {\n  const [symbol, setSymbol] = useState(DEFAULT_SYMBOL)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveSymbol = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.symbol) return token.symbol\n      return address.substring(0, 4)\n    },\n    [tokenProvider],\n  )\n\n  const deriveSymbols = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setSymbol(DEFAULT_SYMBOL)\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const symbols = await Promise.all([mint_a, mint_b].map(deriveSymbol))\n      if (reversed) symbols.reverse()\n      return setSymbol(symbols.join(separator))\n    }\n    // Normal mint\n    const symbol = await deriveSymbol(mintAddress)\n    return setSymbol(symbol)\n  }, [mintAddress, reversed, deriveSymbol, pools, separator])\n\n  useEffect(() => {\n    deriveSymbols()\n  }, [deriveSymbols])\n\n  return <span>{symbol}</span>\n}\n\nexport default MintSymbol\n","import { useSelector } from 'react-redux'\n\nimport { Avatar, Space, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\n\nimport { AppState } from 'app/model'\n\nconst Cross = () => {\n  const {\n    bid: { mintInfo: bidMintInfo },\n    ask: { mintInfo: askMintInfo },\n  } = useSelector((state: AppState) => state)\n\n  const bidMintAddress = bidMintInfo?.address || ''\n  const askMintAddress = askMintInfo?.address || ''\n  return (\n    <Space>\n      <Avatar.Group>\n        <MintAvatar mintAddress={bidMintAddress} />\n        <MintAvatar mintAddress={askMintAddress} />\n      </Avatar.Group>\n      <Typography.Text>\n        <MintSymbol mintAddress={bidMintAddress} />\n        {' / '}\n        <MintSymbol mintAddress={askMintAddress} />\n      </Typography.Text>\n    </Space>\n  )\n}\n\nexport default Cross\n","export type LimitConfig = {\n  calls: number\n  time: number\n}\n\nexport type CacheConfig = {\n  ttl: number // millisecond\n}\n\nexport type SingleFlightConfig = {\n  limit?: LimitConfig\n  cache?: CacheConfig\n}\n\n// 10 request per 1 second\nexport const DEFAULT_LIMIT_CONFIG: LimitConfig = {\n  calls: 10,\n  time: 1000,\n}\n\n// 10 request per 1 second\nexport const DEFAULT_CACHE_CONFIG: CacheConfig = {\n  ttl: 30000,\n}\n\nexport const DEFAULT_SINGLE_FLIGHT_CONFIG: SingleFlightConfig = {\n  limit : DEFAULT_LIMIT_CONFIG,\n  cache: DEFAULT_CACHE_CONFIG\n}","export interface IRequestQueue {\n  key: string\n  add(resolve: any, reject: any): void\n  resolves(data: any): void\n  rejects(error: any): void\n}\n\nexport class RequestQueue implements IRequestQueue {\n  key = ''\n  private resolveQueue: any[] = []\n  private rejectQueue: any[] = []\n  constructor(key: string) {\n    this.key = key\n  }\n\n  add(resolve: any, reject: any) {\n    this.resolveQueue.push(resolve)\n    this.rejectQueue.push(reject)\n  }\n\n  resolves(data: any) {\n    while (this.resolveQueue.length > 0) {\n      const resolve = this.resolveQueue.shift()\n      resolve(data)\n    }\n  }\n\n  rejects(error: any) {\n    while (this.rejectQueue.length > 0) {\n      const reject = this.rejectQueue.shift()\n      reject(error)\n    }\n  }\n}\n","import { DEFAULT_CACHE_CONFIG } from './constant'\nimport { CacheConfig } from './constant'\n\nexport class SingleFlightCache {\n  private static mapCache = new Map<string, any>()\n\n  static set(\n    key: string,\n    value: any,\n    configs: CacheConfig = DEFAULT_CACHE_CONFIG,\n  ) {\n    this.mapCache.set(key, value)\n    setTimeout(() => {\n      this.mapCache.delete(key)\n    }, configs.ttl)\n  }\n\n  static get(key: string) {\n    return this.mapCache.get(key)\n  }\n}\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey)\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(\n    request: IRequestQueue,\n    callback: () => Promise<any>,\n  ) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    return true\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import { account, utils } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport { net } from 'shared/runtime'\nimport { DataLoader } from './dataloader'\n\n/**\n * Delay by async/await\n * @param ms - milisenconds\n * @returns\n */\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Shorten a long address\n * @param address - The long address\n * @param num - The number of the heading and trailing characters\n * @param delimiter - The delimiter\n * @returns Shortened address\n */\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\n/**\n * Build a explorer url by context including addresses or transaction ids\n * @param addressOrTxId - Address or TxId\n * @returns\n */\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\n/**\n * Wrapped Numbro - https://numbrojs.com/old-format.html\n * @param value - value\n * @returns\n */\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value || !Number.isFinite(Number(value))) return numbro('0')\n  return numbro(value)\n}\n\n/**\n * Generate a random color\n * @param seed - Seed\n * @param opacity - Opacity\n * @returns\n */\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n\n/**\n * Fetch coingecko data with cache\n * @param ticket - Token ticket\n * @returns\n */\nexport const fetchCGK = async (ticket = '') => {\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n","import { useCallback, useState, useRef, useEffect } from 'react'\nimport Chart from 'chart.js'\nimport isEqual from 'react-fast-compare'\n\nimport { numeric } from 'shared/util'\ninterface Props {\n  labels?: (number | string)[]\n  chartData?: (number | string)[]\n  configs?: { backgroundColor?: string } & object\n  type?: string\n  disableAxe?: boolean\n  chartHeight?: string\n  chartId?: string\n}\n\nconst DEFAULT_BACKGROUND_COLOR = '#dadada'\n\nconst SenChart = ({\n  chartData = [],\n  labels = [],\n  type = 'line',\n  configs,\n  disableAxe = false,\n  chartId = 'sen_chart',\n}: Props) => {\n  const { backgroundColor } = configs || {}\n  const [isRebuildChart, setRebuildChart] = useState<boolean>(false)\n\n  const formatData = useCallback(\n    (\n      data: Array<number | number[] | undefined | null | any>,\n      label: Array<string | number>,\n      background?: string | CanvasGradient | undefined,\n    ): Chart.ChartData => ({\n      labels: label,\n      datasets: [{ ...configs, data, backgroundColor: background }],\n    }),\n    [configs],\n  )\n  // use a ref to store the chart instance since it it mutable\n  const chartRef = useRef<Chart | null>(null)\n\n  // callback creates the chart on the canvas element\n  const canvasCallback = (canvas: HTMLCanvasElement | null) => {\n    if (!canvas) return\n    const ctx = canvas.getContext('2d')\n    if (ctx && !isRebuildChart) {\n      // create new chart\n      chartRef.current = new Chart(ctx, {\n        type: type,\n        data: {\n          labels: [],\n          datasets: [\n            {\n              data: [],\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            xAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                },\n              },\n            ],\n            yAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                  beginAtZero: false,\n                  maxTicksLimit: 8,\n                  callback: function (value, index, values) {\n                    return numeric(value).format('0,0.[0]a')\n                  },\n                },\n              },\n            ],\n          },\n          plugins: {\n            legend: false,\n          },\n          hover: {\n            onHover: (event, elements) => {\n              const target = document.getElementById(chartId)\n              if (!target) return\n              target.style.cursor = elements[0] ? 'pointer' : 'default'\n            },\n          },\n        },\n      })\n      setRebuildChart(true)\n    }\n  }\n\n  const getBackground = useCallback(() => {\n    if (!chartRef || !backgroundColor) return DEFAULT_BACKGROUND_COLOR\n    const ctx = chartRef?.current?.canvas?.getContext('2d')\n    const gradient = ctx?.createLinearGradient(0, 0, 0, 180)\n    gradient?.addColorStop(0, backgroundColor)\n    gradient?.addColorStop(1, `${backgroundColor}00`)\n    const background = type === 'line' ? gradient : backgroundColor\n    return background\n  }, [backgroundColor, type])\n\n  useEffect(() => {\n    const chartInstance = chartRef.current\n    const dataInstace = chartInstance?.data.datasets?.find(({ data }) => data)\n    const compareData = isEqual(dataInstace?.data, chartData)\n    if (chartInstance && !compareData) {\n      chartInstance.data = formatData(chartData, labels, getBackground())\n      chartInstance?.update()\n    }\n  }, [chartData, formatData, getBackground, labels])\n\n  return <canvas id={chartId} height=\"180px\" ref={canvasCallback}></canvas>\n}\n\nexport default SenChart\n","import { Col, Empty, Row } from 'antd'\n\nconst ChartEmpty = () => {\n  return (\n    <Row style={{ height: 170 }} align=\"middle\" justify=\"center\">\n      <Col>\n        <Empty />\n      </Col>\n    </Row>\n  )\n}\n\nexport default ChartEmpty\n","import TokenProvider from 'os/providers/tokenProvider'\nimport { fetchCGK } from 'shared/util'\nimport axios from 'axios'\n\nexport interface MintInfo {\n  address: string\n  symbol: string\n  price: number\n  decimals: number\n}\n\nexport type ChartParamsCGK = {\n  days: number\n  interval: string\n}\n\nconst DEFAULT_TOKEN_INFO = {\n  address: '',\n  chainId: 0,\n  decimals: 0,\n  name: '',\n  symbol: 'TOKEN',\n  extensions: undefined,\n  logoURI: '',\n  tags: [],\n}\n\nconst TOKEN_PROVIDER = new TokenProvider()\n\nconst cgk = {\n  getMintInfos: async (mintsAddress: string[]) => {\n    if (!TOKEN_PROVIDER || !mintsAddress) return\n    const promise = mintsAddress.map(async (mint) => {\n      let tokenInfo = await TOKEN_PROVIDER.findByAddress(mint)\n      if (!tokenInfo) tokenInfo = DEFAULT_TOKEN_INFO\n      const { address, symbol, decimals, extensions } = tokenInfo\n      const ticket = extensions?.coingeckoId\n\n      if (!ticket) return { address, symbol, decimals, price: 0 } // some mints don't have a ticket, so the price in cgk is 0\n\n      const { price } = await fetchCGK(ticket)\n      return { address, symbol, decimals, price }\n    })\n    const mintsDetails = await Promise.all(promise)\n    const mapMintsDetails = new Map<string, MintInfo>()\n    mintsDetails.forEach((mint) => {\n      mapMintsDetails.set(mint.address, mint)\n    })\n    return mapMintsDetails\n  },\n}\nexport default cgk\n\nexport const fetchMarketChart = async (\n  ticket: string,\n  params: ChartParamsCGK,\n) => {\n  try {\n    const data: any = await axios({\n      method: 'get',\n      url: `https://api.coingecko.com/api/v3/coins/${ticket}/market_chart?vs_currency=usd&days=${params.days}&interval=${params.interval}`,\n    })\n    const priceData: [number /*time*/, number /*price*/][] = data.data.prices\n    return priceData.map((data) => ({ time: data[0], val: data[1] }))\n  } catch (error) {\n    return []\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport moment from 'moment'\n\nimport { Card, Col, Radio, Row, Typography } from 'antd'\nimport Cross from './cross'\n\nimport { AppState } from 'app/model'\nimport SenChart from './chart'\nimport ChartEmpty from './chartEmpty'\nimport { ChartParamsCGK, fetchMarketChart } from 'app/helper/cgk'\nimport { numeric } from 'shared/util'\nimport { useMint } from 'senhub/providers'\n\ntype ChartData = { label: string; val: number }\nenum Interval {\n  day = 'day',\n  week = 'week',\n  month = 'month',\n  year = 'year',\n}\nconst CHART_DATA_CONFIG: Record<\n  Interval,\n  {\n    amount: number\n    unit: moment.unitOfTime.DurationConstructor\n    format: string\n  }\n> = {\n  day: { amount: 4, unit: 'hours', format: 'HH:00' },\n  week: { amount: 1, unit: 'days', format: 'MMM DD' },\n  month: { amount: 5, unit: 'days', format: 'MMM DD' },\n  year: { amount: 2, unit: 'months', format: 'MMM DD' },\n}\nconst MARKET_CONFIG: Record<Interval, ChartParamsCGK> = {\n  day: { days: 1, interval: 'hourly' },\n  week: { days: 7, interval: 'daily' },\n  month: { days: 31, interval: 'daily' },\n  year: { days: 365, interval: 'daily' },\n}\n\nconst CHART_CONFIGS = {\n  color: '#3E8C6A',\n  radius: 0,\n  hitRadius: 14,\n  tooltip: 'TVL',\n  transparent: 'transparent',\n}\n\nconst SwapChart = () => {\n  const [interval, setInterval] = useState(Interval.week)\n  const [chartData, setChartData] = useState<{ label: string; val: number }[]>(\n    [],\n  )\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const { tokenProvider } = useMint()\n\n  const swapChartConfigs = {\n    borderColor: CHART_CONFIGS.transparent,\n    borderRadius: CHART_CONFIGS.radius,\n    pointRadius: CHART_CONFIGS.radius,\n    tooltip: CHART_CONFIGS.tooltip,\n    pointHitRadius: CHART_CONFIGS.hitRadius,\n    pointHoverRadius: CHART_CONFIGS.radius,\n    backgroundColor: CHART_CONFIGS.color,\n  }\n\n  const parseChartDay = useCallback(\n    (marketData: { time: number; val: number }[]) => {\n      const chartData: ChartData[] = []\n      const { format, amount, unit } = CHART_DATA_CONFIG[interval]\n      let displayTime = moment()\n      // parser data\n      for (const data of marketData.reverse()) {\n        const chartTime = moment(data.time).format(format)\n        if (chartTime === displayTime.format(format)) {\n          const now = moment().format(format)\n          let label = chartTime\n          if (chartTime === now) label = moment().format('HH:mm')\n          if (displayTime)\n            chartData.unshift({\n              label: label,\n              val: data.val,\n            })\n          displayTime = displayTime.subtract(amount, unit)\n        } else if (chartTime === '00:00') {\n          chartData.unshift({\n            label: displayTime.format('MMM DD'),\n            val: data.val,\n          })\n        }\n      }\n      setChartData(chartData)\n    },\n    [interval],\n  )\n\n  const parseChartDaily = useCallback(\n    (marketData: { time: number; val: number }[]) => {\n      const chartData: ChartData[] = []\n      const { format, amount, unit } = CHART_DATA_CONFIG[interval]\n      let displayTime = moment()\n      // parser data\n      for (const data of marketData.reverse()) {\n        const chartTime = moment(data.time).format(format)\n        if (chartTime === displayTime.format(format)) {\n          displayTime = displayTime.subtract(amount, unit)\n          chartData.unshift({\n            label: chartTime,\n            val: data.val,\n          })\n          continue\n        }\n      }\n      setChartData(chartData)\n    },\n    [interval],\n  )\n\n  const fetchChartData = useCallback(async () => {\n    // fetch data market from coingecko\n    const bidTokenInfo = await tokenProvider.findByAddress(\n      bidData.mintInfo?.address || '',\n    )\n    const askTokenInfo = await tokenProvider.findByAddress(\n      askData.mintInfo?.address || '',\n    )\n    const bidTicket = bidTokenInfo?.extensions?.coingeckoId\n    const askTicket = askTokenInfo?.extensions?.coingeckoId\n    // return when bid & ask address is same\n    const compareAddress = bidData.accountAddress === askData.accountAddress\n    if (!askTicket || !bidTicket || compareAddress) return setChartData([])\n\n    const marketConfig = MARKET_CONFIG[interval]\n    const [bidChartData, askChartData] = await Promise.all([\n      fetchMarketChart(bidTicket, marketConfig),\n      fetchMarketChart(askTicket, marketConfig),\n    ])\n    // parser market data\n    const marketData: { time: number; val: number }[] = []\n    for (let idx = bidChartData.length - 1; idx >= 0; idx--) {\n      const bidChart = bidChartData[idx]\n      const askChart =\n        askChartData[askChartData.length - bidChartData.length + idx]\n      if (!bidChart || !askChart) continue\n      marketData.unshift({\n        time: bidChart.time,\n        val: bidChart.val / askChart.val,\n      })\n    }\n    if (interval === Interval.day) return parseChartDay(marketData)\n    return parseChartDaily(marketData)\n  }, [\n    askData.accountAddress,\n    askData.mintInfo?.address,\n    bidData.accountAddress,\n    bidData.mintInfo?.address,\n    interval,\n    parseChartDaily,\n    parseChartDay,\n    tokenProvider,\n  ])\n\n  useEffect(() => {\n    fetchChartData()\n  }, [fetchChartData])\n\n  const price = chartData[chartData.length - 1]?.val || 0\n  const priceUI = numeric(price).format(\n    price > 1 ? '0,0.[00]' : '0,0.[00000000]',\n  )\n\n  return (\n    <Card bordered={false} className=\"card-swap\" bodyStyle={{ paddingTop: 28 }}>\n      <Row gutter={[24, 24]}>\n        <Col flex=\"auto\">\n          <Row gutter={[20, 20]}>\n            <Col flex=\"auto\">\n              <Cross />\n            </Col>\n            {chartData && !!chartData.length && (\n              <Col>\n                <Radio.Group\n                  defaultValue={Interval.week}\n                  onChange={(e) => setInterval(e.target.value)}\n                  className=\"chart-radio-btn\"\n                >\n                  <Radio.Button value={Interval.day}>1D</Radio.Button>\n                  <Radio.Button value={Interval.week}>1W</Radio.Button>\n                  <Radio.Button value={Interval.month}>1M</Radio.Button>\n                  <Radio.Button value={Interval.year}>1Y</Radio.Button>\n                </Radio.Group>\n              </Col>\n            )}\n            <Col span={24}>\n              <Typography.Title level={2}>\n                {price ? priceUI : ''}\n              </Typography.Title>\n            </Col>\n          </Row>\n        </Col>\n        <Col span={24}>\n          {chartData && !!chartData.length ? (\n            <SenChart\n              chartData={chartData?.map((data) => data.val)}\n              labels={chartData?.map((data) => data.label)}\n              configs={swapChartConfigs}\n            />\n          ) : (\n            <ChartEmpty />\n          )}\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapChart\n","import { useCallback, useState } from 'react'\nimport { utils } from '@senswap/sen-js'\nimport { useSelector } from 'react-redux'\n\nimport { Button } from 'antd'\nimport { HopData } from './preview/index'\nimport { AppState } from 'app/model'\nimport { useWallet } from 'senhub/providers'\nimport { explorer } from 'shared/util'\n\nconst DECIMALS = BigInt(1000000000)\n\nconst SwapButton = ({\n  hops,\n  onCallback = () => {},\n  disabled = false,\n  wrapAmount = BigInt(0),\n  hightImpact = false,\n}: {\n  hops: HopData[]\n  onCallback?: () => void\n  disabled?: boolean\n  wrapAmount: bigint\n  hightImpact?: boolean\n}) => {\n  const [loading, setLoading] = useState(false)\n  const {\n    bid: { amount: _bidAmount, mintInfo: bidMintInfo },\n    ask: { amount: _askAmount, mintInfo: askMintInfo },\n  } = useSelector((state: AppState) => state)\n  const { slippage } = useSelector((state: AppState) => state.settings)\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  /**\n   * Swap function\n   */\n  const handleSwap = useCallback(async () => {\n    const { swap, splt, wallet } = window.sentre\n    if (!wallet) return\n    // Synthetize routings\n    const routingAddresses = await Promise.all(\n      hops.map(\n        async ({\n          srcMintAddress,\n          dstMintAddress,\n          poolData: { address: poolAddress },\n        }) => {\n          const srcAddress = await splt.deriveAssociatedAddress(\n            walletAddress,\n            srcMintAddress,\n          )\n          const dstAddress = await splt.deriveAssociatedAddress(\n            walletAddress,\n            dstMintAddress,\n          )\n          return {\n            poolAddress: poolAddress,\n            srcAddress: srcAddress,\n            dstAddress: dstAddress,\n          }\n        },\n      ),\n    )\n    // Compute limit\n    const bidDecimals = bidMintInfo?.decimals || 0\n    const bidAmount = utils.decimalize(_bidAmount, bidDecimals)\n    const askDecimals = askMintInfo?.decimals || 0\n    const askAmount = utils.decimalize(_askAmount, askDecimals)\n    const limit =\n      (askAmount * (DECIMALS - utils.decimalize(slippage, 9))) / DECIMALS\n    // Execute swap\n    return await swap.route(bidAmount, limit, routingAddresses, wallet)\n  }, [\n    hops,\n    bidMintInfo,\n    askMintInfo,\n    slippage,\n    walletAddress,\n    _bidAmount,\n    _askAmount,\n  ])\n\n  const handleWrapSol = async () => {\n    if (!wrapAmount) return\n    const { swap, wallet } = window.sentre\n    if (!wallet) return\n    return await swap.wrapSol(wrapAmount, wallet)\n  }\n\n  const onSwap = async () => {\n    try {\n      setLoading(true)\n      await handleWrapSol()\n      const { txId } = (await handleSwap()) || {}\n      window.notify({\n        type: 'success',\n        description: `Swap successfully. Click to view details.`,\n        onClick: () => window.open(explorer(txId || ''), '_blank'),\n      })\n      return onCallback()\n    } catch (er: any) {\n      return window.notify({ type: 'error', description: er.message })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Button\n      type=\"primary\"\n      onClick={onSwap}\n      disabled={disabled}\n      loading={loading}\n      block\n    >\n      {hightImpact ? 'Too High Price Impact' : 'Swap'}\n    </Button>\n  )\n}\n\nexport default SwapButton\n","import { Fragment, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Space } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { AppState } from 'app/model'\nimport { account } from '@senswap/sen-js'\nimport { MintAvatar } from 'shared/antd/mint'\n\nconst RouteAvatar = () => {\n  const {\n    bid: { mintInfo },\n    route: { hops },\n  } = useSelector((state: AppState) => state)\n\n  const srcMintAddress = mintInfo?.address\n  const chainMintAddresses = useMemo(() => {\n    if (!hops.length || !account.isAddress(srcMintAddress)) return []\n    let list = [srcMintAddress]\n    for (const hop of hops) {\n      const { dstMintAddress } = hop\n      if (account.isAddress(dstMintAddress)) list.push(dstMintAddress)\n    }\n    return list\n  }, [srcMintAddress, hops])\n\n  return (\n    <Space>\n      {chainMintAddresses?.map((mintAddress, i) => (\n        <Fragment key={i}>\n          <MintAvatar mintAddress={mintAddress} />\n          {chainMintAddresses.length > i + 1 && (\n            <IonIcon name=\"chevron-forward-outline\" />\n          )}\n        </Fragment>\n      ))}\n    </Space>\n  )\n}\nexport default RouteAvatar\n","import { Swap } from '@senswap/sen-js'\nimport { HopData } from 'app/components/preview/index'\nimport { extractReserve } from './router'\n\nexport const ORACLE = Swap.oracle\n\nexport const curve = (bidAmount: bigint, hopData: HopData): bigint => {\n  const { srcMintAddress, dstMintAddress, poolData } = hopData\n  const { fee_ratio, tax_ratio } = poolData\n  const bidReserve = extractReserve(srcMintAddress, poolData)\n  const askReserve = extractReserve(dstMintAddress, poolData)\n  if (!bidReserve || !askReserve) return BigInt(0)\n\n  const { askAmount } = ORACLE.swap(\n    bidAmount,\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return askAmount\n}\n\nexport const inverseCurve = (askAmount: bigint, data: HopData): bigint => {\n  const { srcMintAddress, dstMintAddress, poolData } = data\n  const { fee_ratio, tax_ratio } = poolData\n  const bidReserve = extractReserve(srcMintAddress, poolData)\n  const askReserve = extractReserve(dstMintAddress, poolData)\n  const bidAmount = ORACLE.inverseSwap(\n    askAmount,\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return bidAmount\n}\n\nexport const slippage = (bidAmount: bigint, data: HopData): bigint => {\n  const { srcMintAddress, dstMintAddress, poolData } = data\n  const { fee_ratio, tax_ratio } = poolData\n  const bidReserve = extractReserve(srcMintAddress, poolData)\n  const askReserve = extractReserve(dstMintAddress, poolData)\n\n  const slippage = ORACLE.slippage(\n    bidAmount,\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return slippage\n}\n","import { account, PoolData, utils } from '@senswap/sen-js'\n\nimport { curve } from './oracle'\nimport { State as BidState } from 'app/model/bid.controller'\nimport { State as AskState } from 'app/model/ask.controller'\nimport { inverseCurve } from './oracle'\nimport { HopData } from 'app/components/preview/index'\nimport { RouteInfo } from 'app/model/route.controller'\n\nconst POOL_ACTIVITY_STATUS = 1\nconst LIMIT_POOL_IN_ROUTE = 3\n\nexport type ExtendedPoolData = PoolData & { address: string }\nexport type GraphPool = Map<string, Map<string, PoolData>>\nexport type RouteTrace = {\n  pools: string[]\n  mints: string[]\n}\n\n/**\n * Extract reserve from pool data\n * @param extractReserve\n * @param poolData\n * @returns\n */\nexport const extractReserve = (\n  mintAddress: string,\n  poolData: PoolData,\n): bigint => {\n  const { mint_a, mint_b, reserve_a, reserve_b } = poolData\n  if (mintAddress === mint_a) return reserve_a\n  if (mintAddress === mint_b) return reserve_b\n  throw new Error('Cannot find reserves')\n}\n\n/**\n *\n * @param param0\n * @param param1\n * @returns\n */\ntype Point = { point: bigint }\nexport const pointSorting = (\n  { point: firstPoint }: Point,\n  { point: secondPoint }: Point,\n) => {\n  if (firstPoint < secondPoint) return 1\n  if (firstPoint > secondPoint) return -1\n  return 0\n}\n\nexport const buildPoolGraph = (pools: Record<string, PoolData>): GraphPool => {\n  const graph = new Map<\n    /*mint_address*/ string,\n    Map</*pool_address*/ string, PoolData>\n  >()\n  for (const poolAddress in pools) {\n    const pool = pools[poolAddress]\n    if (pool?.state !== POOL_ACTIVITY_STATUS) continue\n    const mints = [pool.mint_a, pool.mint_b]\n    mints.forEach((mint) => {\n      if (!graph.has(mint)) graph.set(mint, new Map<string, PoolData>())\n      graph.get(mint)?.set(poolAddress, pool)\n    })\n  }\n  return graph\n}\n\n// because of Solana is limiting the number of calculation unit, so the system\n// must limit the list pool of root. Currently, the system set 3 pools in route\nexport const findAllRoute = (\n  routes: Array<RouteTrace>,\n  graph: GraphPool,\n  bidMintAddress: string,\n  askMintAddress: string,\n  pathTrace?: RouteTrace,\n) => {\n  const { pools, mints } = pathTrace || {\n    mints: [bidMintAddress],\n    pools: [],\n  }\n  if (pools.length >= LIMIT_POOL_IN_ROUTE) return\n  const mapPool = graph.get(bidMintAddress)\n  mapPool?.forEach((poolData, poolAddress) => {\n    const srcMintAddress = bidMintAddress\n    const dstMintAddress =\n      srcMintAddress === poolData.mint_a ? poolData.mint_b : poolData.mint_a\n    if (pools.includes(poolAddress) || mints.includes(dstMintAddress)) return\n    const newPathTrace = {\n      pools: [...pools, poolAddress],\n      mints: [...mints, dstMintAddress],\n    }\n    if (dstMintAddress === askMintAddress) return routes.push(newPathTrace)\n    findAllRoute(routes, graph, dstMintAddress, askMintAddress, newPathTrace)\n  })\n}\n\nconst parseHops = async (\n  mapPoolData: Record<string, PoolData>,\n  pools: string[],\n  bidMintAddress: string,\n  askMintAddress: string,\n): Promise<HopData[]> => {\n  if (!account.isAddress(bidMintAddress) || !account.isAddress(askMintAddress))\n    return []\n\n  const hops: HopData[] = []\n  let srcMintAddress = bidMintAddress\n  let dstMintAddress = ''\n  for (const poolAddress of pools) {\n    const poolData = mapPoolData[poolAddress]\n    const { mint_a, mint_b } = poolData\n    if (srcMintAddress !== mint_a && srcMintAddress !== mint_b) return []\n    dstMintAddress = srcMintAddress === mint_a ? mint_b : mint_a\n    const hop: HopData = {\n      poolData: { address: poolAddress, ...poolData },\n      srcMintAddress,\n      dstMintAddress,\n    }\n    srcMintAddress = dstMintAddress\n    hops.push(hop)\n  }\n  return hops\n}\n\nexport const findBestRouteFromBid = async (\n  mapPoolData: Record<string, PoolData>,\n  routes: RouteTrace[],\n  bidData: BidState,\n  askData: AskState,\n): Promise<RouteInfo> => {\n  let bestRoute: RouteInfo = { hops: [], amounts: [], amount: BigInt(0) }\n  for (let route of routes) {\n    const hops = await parseHops(\n      mapPoolData,\n      route.pools,\n      bidData.mintInfo.address,\n      askData.mintInfo.address,\n    )\n    if (!hops.length) continue\n    let amount = utils.decimalize(bidData.amount, bidData.mintInfo.decimals)\n    const amounts = new Array<bigint>()\n\n    hops.forEach((hop) => {\n      amounts.push(amount)\n      amount = curve(amount, hop)\n    })\n    const maxAskAmount = bestRoute.amount\n    if (amount > maxAskAmount) bestRoute = { hops, amounts, amount }\n  }\n  return bestRoute\n}\n\nexport const findBestRouteFromAsk = async (\n  mapPoolData: Record<string, PoolData>,\n  routes: RouteTrace[],\n  bidData: BidState,\n  askData: AskState,\n): Promise<RouteInfo> => {\n  let bestRoute: RouteInfo = { hops: [], amounts: [], amount: BigInt(0) }\n  for (let route of routes) {\n    const hops = await parseHops(\n      mapPoolData,\n      route.pools,\n      bidData.mintInfo.address,\n      askData.mintInfo.address,\n    )\n    if (!hops.length) continue\n    const reversedHops = [...hops].reverse()\n    let amount = utils.decimalize(askData.amount, askData.mintInfo.decimals)\n    const amounts = new Array<bigint>()\n\n    for (const reversedHop of reversedHops) {\n      amount = inverseCurve(amount, reversedHop)\n      if (amount <= BigInt(0)) break\n      amounts.unshift(amount)\n    }\n    if (amount <= BigInt(0)) continue\n    const minBidAmount = bestRoute.amount\n    if (amount < minBidAmount || !minBidAmount)\n      bestRoute = { hops, amounts, amount }\n  }\n  return bestRoute\n}\n","import { useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\n\nimport { AppState } from 'app/model'\nimport { extractReserve } from 'app/helper/router'\n\nconst PRECISION = 9\n\nconst usePriceImpact = () => {\n  const {\n    route: { hops },\n    bid: { amount: bidAmount, mintInfo: bidMintInfo },\n    ask: { amount: askAmount, mintInfo: askMintInfo },\n  } = useSelector((state: AppState) => state)\n\n  if (!Number(bidAmount)) return 0\n\n  const nextPrice = Number(askAmount) / Number(bidAmount)\n  let decimalizedPrice = 1\n  hops.forEach(({ srcMintAddress, dstMintAddress, poolData }) => {\n    const srcReserve = extractReserve(srcMintAddress, poolData)\n    const dstReserve = extractReserve(dstMintAddress, poolData)\n    const hopPrice = utils.undecimalize(\n      (dstReserve * BigInt(10 ** PRECISION)) / srcReserve,\n      PRECISION,\n    )\n    decimalizedPrice = decimalizedPrice * Number(hopPrice)\n  })\n  const currentPrice =\n    (decimalizedPrice * 10 ** bidMintInfo.decimals) / 10 ** askMintInfo.decimals\n  const priceImpact = (currentPrice - nextPrice) / currentPrice\n\n  return Math.max(priceImpact, 0)\n}\n\nexport default usePriceImpact\n","import { useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Button, Space, Typography } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport { MintSymbol } from 'shared/antd/mint'\n\nimport { numeric } from 'shared/util'\nimport { AppState } from 'app/model'\n\nconst Price = () => {\n  const [reversed, setReversed] = useState(false)\n  const {\n    bid: { mintInfo: bidMintInfo, amount: bidAmount },\n    ask: { mintInfo: askMintInfo, amount: askAmount },\n  } = useSelector((state: AppState) => state)\n\n  const bidMintAddress = bidMintInfo?.address || ''\n  const askMintAddress = askMintInfo?.address || ''\n  const price = numeric(Number(askAmount) / Number(bidAmount)).format(\n    '0,0.[000000]',\n  )\n  const reversedPrice = numeric(Number(bidAmount) / Number(askAmount)).format(\n    '0,0.[000000]',\n  )\n\n  return (\n    <Space>\n      <Button\n        type=\"text\"\n        onClick={() => setReversed(!reversed)}\n        shape=\"circle\"\n        icon={<IonIcon name=\"swap-horizontal-outline\" />}\n      />\n      <Typography.Text>{!reversed ? price : reversedPrice}</Typography.Text>\n      <Typography.Text>\n        {!reversed ? (\n          <MintSymbol mintAddress={askMintAddress} />\n        ) : (\n          <MintSymbol mintAddress={bidMintAddress} />\n        )}\n        {' / '}\n        {!reversed ? (\n          <MintSymbol mintAddress={bidMintAddress} />\n        ) : (\n          <MintSymbol mintAddress={askMintAddress} />\n        )}\n      </Typography.Text>\n    </Space>\n  )\n}\n\nexport default Price\n","import { ReactNode } from 'react'\nimport { useSelector } from 'react-redux'\nimport { PoolData } from '@senswap/sen-js'\n\nimport { Col, Row, Typography } from 'antd'\nimport RouteAvatar from './routeAvatar'\n\nimport { AppState } from 'app/model'\nimport { numeric } from 'shared/util'\nimport usePriceImpact from 'app/hooks/usePriceImpact'\nimport Price from './price'\n\nexport type LiteMintInfo = {\n  address: string\n  decimals: number\n}\n\nexport type HopData = {\n  poolData: PoolData & { address: string }\n  srcMintAddress: string\n  dstMintAddress: string\n}\n\nconst ExtraTypography = ({\n  label = '',\n  content = '',\n}: {\n  label?: string\n  content?: string | ReactNode\n}) => {\n  return (\n    <Row>\n      <Col flex=\"auto\">\n        <Typography.Text type=\"secondary\">{label}</Typography.Text>\n      </Col>\n      <Col>\n        <span>{content}</span>\n      </Col>\n    </Row>\n  )\n}\n\nconst PreviewSwap = () => {\n  const {\n    settings: { slippage },\n  } = useSelector((state: AppState) => state)\n  const priceImpact = usePriceImpact()\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Price impact\"\n          content={\n            <Typography.Text type=\"danger\">\n              {numeric(Number(priceImpact)).format('0.[0000]%')}\n            </Typography.Text>\n          }\n        />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography label=\"Price\" content={<Price />} />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Slippage Tolerance\"\n          content={numeric(slippage).format('0.[00]%')}\n        />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography label=\"Route\" content={<RouteAvatar />} />\n      </Col>\n    </Row>\n  )\n}\n\nexport default PreviewSwap\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { LiteMintInfo } from 'app/components/preview'\n\nexport type State = {\n  amount: string // Desired amount\n  accountAddress: string // Associated account to the selected token\n  mintInfo: LiteMintInfo // Selected token\n  poolAddresses: string[] // List of available pools\n  priority: number\n}\n\nconst NAME = 'bid'\nconst initialState: State = {\n  amount: '',\n  mintInfo: {\n    address: '',\n    decimals: 0,\n  },\n  accountAddress: '',\n  poolAddresses: [],\n  priority: 0,\n}\n\n/**\n * Actions\n */\n\nexport const updateBidData = createAsyncThunk<\n  Partial<State>,\n  Partial<State> & { prioritized?: boolean; reset?: boolean },\n  { state: any }\n>(\n  `${NAME}/updateBidData`,\n  async ({ prioritized, reset, ...bidData }, { getState }) => {\n    const {\n      bid: { priority: prevPriority },\n      ask: { priority: refPriority },\n    } = getState()\n    if (Number(bidData.amount) < 0) bidData.amount = ''\n    const priority = reset ? 0 : prioritized ? refPriority + 1 : prevPriority\n    return { ...bidData, priority }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateBidData.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useAccount, useWallet } from 'senhub/providers'\n\nconst useBalance = (accountAddress: string) => {\n  const { accounts } = useAccount()\n  const {\n    wallet: { address: walletAddress, lamports },\n  } = useWallet()\n  if (accountAddress === walletAddress) return lamports\n  const { amount } = accounts[accountAddress] || { amount: BigInt(0) }\n  return amount\n}\n\nexport default useBalance\n","import { useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { DEFAULT_WSOL, utils } from '@senswap/sen-js'\n\nimport { Card, Col, Row, Typography } from 'antd'\nimport SwapButton from 'app/components/swapButton'\nimport SwapInfo from 'app/components/preview'\n\nimport { AppState } from 'app/model'\nimport usePriceImpact from 'app/hooks/usePriceImpact'\nimport { updateBidData } from 'app/model/bid.controller'\nimport useBalance from 'app/hooks/useBalance'\n\nconst SwapActions = () => {\n  const dispatch = useDispatch()\n  const {\n    route: { hops },\n    bid: {\n      amount: bidAmount,\n      mintInfo: bidMintInfo,\n      accountAddress: bidAccountAddress,\n    },\n  } = useSelector((state: AppState) => state)\n  const { amount: askAmount } = useSelector((state: AppState) => state.ask)\n  const { advanced } = useSelector((state: AppState) => state.settings)\n  const priceImpact = usePriceImpact()\n  const bidBalance = useBalance(bidAccountAddress)\n\n  const wrapAmount = useMemo(() => {\n    if (!Number(bidAmount) || bidMintInfo.address !== DEFAULT_WSOL)\n      return BigInt(0)\n    const amount = utils.decimalize(bidAmount, bidMintInfo.decimals)\n    if (amount <= bidBalance) return BigInt(0)\n    return amount - bidBalance\n  }, [bidBalance, bidAmount, bidMintInfo])\n\n  const tooHightImpact = !advanced && priceImpact * 100 > 12.5 //just swap when the slippage rate is smaller than 12.5%\n  const disabled =\n    tooHightImpact ||\n    !hops.length ||\n    !parseFloat(bidAmount) ||\n    parseFloat(bidAmount) < 0 ||\n    !parseFloat(askAmount) ||\n    parseFloat(askAmount) < 0\n\n  return (\n    <Card bordered={false}>\n      <Row gutter={[24, 24]}>\n        <Col span={24}>\n          <Typography.Title level={5}>Review & Swap</Typography.Title>\n        </Col>\n        <Col span={24}>\n          <SwapInfo />\n        </Col>\n        <Col span={24} /> {/* Safe sapce */}\n        <Col span={24}>\n          <SwapButton\n            hops={hops}\n            wrapAmount={wrapAmount}\n            disabled={disabled}\n            hightImpact={tooHightImpact}\n            onCallback={() =>\n              dispatch(updateBidData({ amount: '', prioritized: true }))\n            }\n          />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapActions\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from 'senhub/providers'\nimport { fetchCGK } from 'shared/util'\n\nconst DEFAULT_DATA = {\n  address: '',\n  icon: '',\n  name: 'TOKEN',\n  price: 0,\n  priceChange: 0,\n  rank: 0,\n  symbol: 'TOKEN',\n  totalVolume: 0,\n}\n\nconst useMintCgk = (mintAddress?: string): CgkData => {\n  const [cgkData, setCgkData] = useState<CgkData>(DEFAULT_DATA)\n  const { tokenProvider } = useMint()\n\n  const fetchCgkData = useCallback(async () => {\n    if (!mintAddress) return setCgkData(DEFAULT_DATA)\n    try {\n      const token = await tokenProvider.findByAddress(mintAddress)\n      const ticket = token?.extensions?.coingeckoId\n      const cgkData = await fetchCGK(ticket)\n      return setCgkData(cgkData)\n    } catch (error) {\n      return setCgkData(DEFAULT_DATA)\n    }\n  }, [mintAddress, tokenProvider])\n\n  useEffect(() => {\n    fetchCgkData()\n  }, [fetchCgkData])\n\n  return cgkData\n}\nexport default useMintCgk\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { account, PoolData, utils } from '@senswap/sen-js'\n\nimport { Card, Col, Divider, Row, Space, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\n\nimport { AppState } from 'app/model'\nimport { extractReserve } from 'app/helper/router'\nimport { numeric } from 'shared/util'\nimport useMintCgk from 'app/hooks/useMintCgk'\n\nconst MintPoolInfo = ({\n  mintAddress,\n  tvl = '',\n  price,\n  format = '0,0.[00]a',\n}: {\n  mintAddress: string\n  tvl?: string | number\n  price?: number\n  format?: string\n}) => {\n  return (\n    <Space direction=\"vertical\" size={4}>\n      <MintAvatar mintAddress={mintAddress} />\n      <Space>\n        <Typography.Text>TVL:</Typography.Text>\n        <Typography.Title level={5}>\n          {numeric(tvl).format(format)}\n        </Typography.Title>\n        <Typography.Title level={5}>\n          <MintSymbol mintAddress={mintAddress} />\n        </Typography.Title>\n      </Space>\n      <Typography.Text className=\"caption\" type=\"secondary\">\n        ~ ${numeric(price).format(format)}\n      </Typography.Text>\n    </Space>\n  )\n}\n\nconst SwapPoolInfo = () => {\n  const {\n    route: { hops },\n    bid: { mintInfo: bidMintInfo },\n    ask: { mintInfo: askMintInfo },\n  } = useSelector((state: AppState) => state)\n  const bidCgk = useMintCgk(bidMintInfo?.address)\n  const askCgk = useMintCgk(askMintInfo?.address)\n\n  const { poolData: bidPoolData } = hops[0] || {}\n  const { poolData: askPoolData } = hops[hops.length - 1] || {}\n\n  const getMintTVL = (mintAddress?: string, poolData?: PoolData) => {\n    try {\n      if (!account.isAddress(mintAddress) || !poolData) return BigInt(0)\n      return extractReserve(mintAddress, poolData)\n    } catch (er) {\n      return BigInt(0)\n    }\n  }\n\n  // Bid TVL\n  const bidTVL = useMemo(() => {\n    if (!bidMintInfo.decimals) return 0\n    const bid = getMintTVL(bidMintInfo.address, bidPoolData)\n    return Number(utils.undecimalize(bid, bidMintInfo.decimals))\n  }, [bidMintInfo, bidPoolData])\n  // Ask TVL\n  const askTVL = useMemo(() => {\n    if (!askMintInfo.decimals) return 0\n    const ask = getMintTVL(askMintInfo.address, askPoolData)\n    return Number(utils.undecimalize(ask, askMintInfo.decimals))\n  }, [askMintInfo, askPoolData])\n\n  return (\n    <Card bordered={false}>\n      <Row gutter={[16, 16]} wrap={false}>\n        <Col span={11}>\n          <MintPoolInfo\n            mintAddress={bidMintInfo?.address || ''}\n            tvl={bidTVL}\n            price={bidTVL * bidCgk.price}\n          />\n        </Col>\n        <Col>\n          <Divider type=\"vertical\" style={{ height: '100%' }} />\n        </Col>\n        <Col span={11}>\n          <MintPoolInfo\n            mintAddress={askMintInfo?.address || ''}\n            tvl={askTVL}\n            price={askTVL * askCgk.price}\n          />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapPoolInfo\n","var _defs, _path, _path2;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgSen({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    \"data-name\": \"Layer 1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    viewBox: \"0 0 283.465 283.465\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"linear-gradient\",\n    x1: -1222.504,\n    y1: -2883.343,\n    x2: -1135.428,\n    y2: -2970.419,\n    gradientTransform: \"translate(1300.837 3068.613)\",\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    stopColor: \"#f9575e\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.27,\n    stopColor: \"#f8555b\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.486,\n    stopColor: \"#f44f51\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.685,\n    stopColor: \"#ee4540\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.871,\n    stopColor: \"#e63728\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#de2a13\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"linear-gradient-2\",\n    x1: 1314.111,\n    y1: -895.144,\n    x2: 1389.882,\n    y2: -811.556,\n    gradientTransform: \"translate(1516.988 -707.868) rotate(180)\",\n    xlinkHref: \"#linear-gradient\"\n  }))), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Senswap logo FINAL\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.179,85.127H114a92.562,92.562,0,0,1,92.562,92.562v20.648a0,0,0,0,1,0,0H129.741a92.562,92.562,0,0,1-92.562-92.562V85.127A0,0,0,0,1,37.179,85.127Z\",\n    transform: \"translate(107.828 328.128) rotate(-135)\",\n    fill: \"url(#linear-gradient)\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M169.462,85.127h76.823a0,0,0,0,1,0,0v20.648a92.562,92.562,0,0,1-92.562,92.562H76.9a0,0,0,0,1,0,0V177.689a92.562,92.562,0,0,1,92.562-92.562Z\",\n    transform: \"translate(-52.89 155.776) rotate(-45)\",\n    fill: \"url(#linear-gradient-2)\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSen);\nexport default __webpack_public_path__ + \"static/media/sen.f2d012c907167ba613b035621b6423cb.svg\";\nexport { ForwardRef as ReactComponent };","import { Avatar, Space, Typography } from 'antd'\nimport SentreIcon from 'app/static/images/sen.svg'\n\nconst PoweredBy = ({\n  spacing = 4,\n  iconSize = 20,\n}: {\n  spacing?: number\n  iconSize?: number\n}) => {\n  return (\n    <Space size={spacing}>\n      <Typography.Text style={{ fontSize: 12, color: '#7A7B85' }}>\n        Powered by\n      </Typography.Text>\n      <Avatar src={SentreIcon} size={iconSize} />\n    </Space>\n  )\n}\n\nexport default PoweredBy\n","import { Row, Col, Button, Typography, Tooltip } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Option = ({\n  label,\n  value,\n  onClick,\n  active = false,\n}: {\n  label: string\n  value: number\n  onClick: (value: number) => void\n  active?: boolean\n}) => {\n  return (\n    <Typography.Text\n      style={{ cursor: 'pointer', color: active ? '#F9575E' : 'inherit' }}\n      onClick={() => onClick(value)}\n    >\n      {label}\n    </Typography.Text>\n  )\n}\n\nconst Slippage = ({\n  value,\n  onChange,\n}: {\n  value: number\n  onChange: (value: number) => void\n}) => {\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false}>\n          <Col flex=\"auto\">\n            <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>\n              Slippage Tolerance\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Tooltip\n              placement=\"right\"\n              title={\n                <span>\n                  Your transaction will be canceled if the confirmed price\n                  breaks the limited range of{' '}\n                  <strong style={{ color: '#f9575e' }}>{`${\n                    value * 100\n                  }%.`}</strong>\n                </span>\n              }\n            >\n              <Button\n                type=\"text\"\n                shape=\"circle\"\n                size=\"small\"\n                icon={<IonIcon name=\"information-circle-outline\" />}\n              />\n            </Tooltip>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false} justify=\"space-between\">\n          {[0.001, 0.005, 0.01, 0.05, 1].map((e, i) => (\n            <Col key={i}>\n              <Option\n                label={e === 1 ? 'Freely' : `${e * 100}%`}\n                value={e}\n                onClick={onChange}\n                active={e === value}\n              />\n            </Col>\n          ))}\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Slippage\n","import { Row, Col, Typography, Switch } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Advanced = ({\n  value,\n  onChange,\n}: {\n  value: boolean\n  onChange: (value: boolean) => void\n}) => {\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false}>\n          <Col flex=\"auto\">\n            <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>\n              Advanced Mode\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Switch\n              size=\"small\"\n              checkedChildren={<IonIcon name=\"calculator-outline\" />}\n              unCheckedChildren={<IonIcon name=\"sparkles-outline\" />}\n              checked={value}\n              onChange={onChange}\n            />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Typography.Paragraph style={{ fontSize: 12, textAlign: 'justify' }}>\n          <IonIcon name=\"warning-outline\" /> This advanced mode will disable the\n          automatic protection that often results in bad rates and lost funds.\n          Only use this mode if you know what you are doing.\n        </Typography.Paragraph>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Advanced\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nexport type State = {\n  slippage: number\n  advanced: boolean\n}\n\nconst NAME = 'settings'\nconst initialState: State = {\n  slippage: 0.01,\n  advanced: false,\n}\n\n/**\n * Actions\n */\n\nexport const updateSettings = createAsyncThunk(\n  `${NAME}/updateSettings`,\n  async (settings: Partial<State>) => ({ ...settings }),\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateSettings.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useDispatch, useSelector } from 'react-redux'\n\nimport { Row, Col, Button, Popover, Typography, Divider } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport PoweredBy from 'app/components/poweredBy'\nimport Slippage from './slippage'\nimport Advanced from './advanced'\n\nimport { updateSettings } from 'app/model/settings.controller'\nimport { AppDispatch, AppState } from 'app/model'\n\nconst Settings = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const { slippage, advanced } = useSelector(\n    (state: AppState) => state.settings,\n  )\n\n  const onSlippage = (slippage: number) => {\n    return dispatch(updateSettings({ slippage }))\n  }\n  const onAdvanced = (advanced: boolean) => {\n    return dispatch(updateSettings({ advanced }))\n  }\n\n  return (\n    <Row gutter={[4, 4]} justify=\"end\" align=\"middle\" wrap={false}>\n      <Col>\n        <PoweredBy />\n      </Col>\n      <Col>\n        <Divider type=\"vertical\" style={{ padding: 0 }} />\n      </Col>\n      <Col>\n        <Popover\n          placement=\"bottomRight\"\n          overlayInnerStyle={{ width: 300 }}\n          content={\n            <Row gutter={[8, 8]}>\n              <Col span={24}>\n                <Typography.Title level={5}>Settings</Typography.Title>\n              </Col>\n              <Col span={24}>\n                <Slippage value={slippage} onChange={onSlippage} />\n              </Col>\n              <Divider style={{ marginTop: 8, marginBottom: 8 }} />\n              <Col span={24}>\n                <Advanced value={advanced} onChange={onAdvanced} />\n              </Col>\n            </Row>\n          }\n          trigger=\"click\"\n        >\n          <Button\n            type=\"text\"\n            shape=\"circle\"\n            size=\"small\"\n            icon={<IonIcon name=\"settings-outline\" />}\n          />\n        </Popover>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Settings\n","import React, { useCallback, useEffect, useState } from 'react'\n\nimport { Card, Input, Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { useMint } from 'senhub/providers'\n\nconst KEYSIZE = 3\n\nconst Search = ({\n  onChange,\n  isSupportedMint,\n  disabled = false,\n}: {\n  onChange: (data: string[] | undefined) => void\n  isSupportedMint: (mintAddress: string) => boolean\n  disabled?: boolean\n}) => {\n  const [keyword, setKeyword] = useState('')\n  const { tokenProvider } = useMint()\n\n  const search = useCallback(async () => {\n    if (!keyword || keyword.length < KEYSIZE) return onChange(undefined)\n    const raw = await tokenProvider.find(keyword)\n    const data = raw\n      .filter(({ address }) => isSupportedMint(address))\n      .map(({ address }) => address)\n    return onChange(data)\n  }, [keyword, tokenProvider, onChange, isSupportedMint])\n\n  useEffect(() => {\n    search()\n  }, [search])\n\n  return (\n    <Card className=\"card-child\" bodyStyle={{ padding: 8 }} bordered={false}>\n      <Input\n        placeholder=\"Search\"\n        value={keyword}\n        size=\"small\"\n        bordered={false}\n        suffix={\n          <Button\n            type=\"text\"\n            style={{ marginRight: -7 }}\n            size=\"small\"\n            onClick={keyword ? () => setKeyword('') : () => {}}\n            icon={\n              <IonIcon name={keyword ? 'close-outline' : 'search-outline'} />\n            }\n            disabled={disabled}\n          />\n        }\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          setKeyword(e.target.value)\n        }\n        disabled={disabled}\n      />\n    </Card>\n  )\n}\n\nexport default Search\n","import { Row, Col, Space, Typography, Card, Divider } from 'antd'\nimport { MintAvatar, MintName, MintSymbol } from 'shared/antd/mint'\n\nconst Mint = ({\n  mintAddress,\n  onClick,\n  active = false,\n}: {\n  mintAddress: string\n  onClick: () => void\n  active?: boolean\n}) => {\n  return (\n    <Card\n      className={`card-child${active ? ' active' : ''}`}\n      bodyStyle={{ padding: `8px 16px`, cursor: 'pointer' }}\n      bordered={active}\n      onClick={onClick}\n      hoverable\n    >\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Space size={12} style={{ marginLeft: -4 }}>\n            <MintAvatar mintAddress={mintAddress} size={32} />\n            <Typography.Text style={{ margin: 0 }}>\n              <MintSymbol mintAddress={mintAddress} />\n            </Typography.Text>\n            <Divider type=\"vertical\" style={{ margin: 0 }} />\n            <Typography.Text\n              type=\"secondary\"\n              style={{ margin: 0, fontSize: 12 }}\n            >\n              <MintName mintAddress={mintAddress} />\n            </Typography.Text>\n          </Space>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default Mint\n","import { useState, useCallback, useMemo } from 'react'\nimport { account } from '@senswap/sen-js'\nimport LazyLoad from '@senswap/react-lazyload'\n\nimport { Row, Col, Typography, Divider } from 'antd'\nimport Search from './search'\nimport Mint from './mint'\n\nimport { useMint, usePool } from 'senhub/providers'\nimport { LiteMintInfo } from '../preview'\n\nexport type SelectionInfo = {\n  mintInfo?: LiteMintInfo\n  poolAddresses: string[]\n}\n\nconst MintSelection = ({\n  value,\n  onChange,\n}: {\n  value: SelectionInfo\n  onChange: (value: SelectionInfo) => void\n}) => {\n  const [mintAddresses, setMintAddresses] = useState<string[]>([])\n  const { pools } = usePool()\n  const { getDecimals } = useMint()\n\n  // Compute mints that appear in all pools\n  const supportedMintAddresses = useMemo(() => {\n    if (!pools) return []\n    return Object.values(pools)\n      .map(({ mint_a, mint_b }) => [mint_a, mint_b])\n      .flat()\n      .filter((item, pos, self) => self.indexOf(item) === pos)\n  }, [pools])\n  const isSupportedMint = useCallback(\n    (mintAddress) => supportedMintAddresses.includes(mintAddress),\n    [supportedMintAddresses],\n  )\n  // Compoute mint list\n  const onMints = useCallback(\n    async (value: string[] | undefined) => {\n      if (value) return setMintAddresses(value)\n      return setMintAddresses(supportedMintAddresses)\n    },\n    [supportedMintAddresses],\n  )\n  // Compute available pools\n  const getAvailablePoolAddresses = useCallback(\n    (mintAddress: string) => {\n      if (!account.isAddress(mintAddress)) return []\n      return Object.keys(pools).filter((poolAddress) => {\n        const { mint_a, mint_b } = pools[poolAddress]\n        return [mint_a, mint_b].includes(mintAddress)\n      })\n    },\n    [pools],\n  )\n\n  // Return data to parent\n  const onMint = useCallback(\n    async (mintAddress: string) => {\n      const poolAddresses = getAvailablePoolAddresses(mintAddress)\n      const decimals = await getDecimals(mintAddress)\n      return onChange({\n        mintInfo: {\n          address: mintAddress,\n          decimals,\n        },\n        poolAddresses,\n      })\n    },\n    [getAvailablePoolAddresses, onChange, getDecimals],\n  )\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        <Typography.Title level={5}>Token Selection</Typography.Title>\n      </Col>\n      <Col span={24}>\n        <Divider style={{ margin: 0 }} />\n      </Col>\n      <Col span={24}>\n        <Search onChange={onMints} isSupportedMint={isSupportedMint} />\n      </Col>\n      <Col span={24}>\n        <Row gutter={[16, 16]} style={{ height: 300, overflow: 'auto' }}>\n          <Col span={24}>\n            <Row gutter={[16, 16]}>\n              {mintAddresses.map((mintAddress, i) => {\n                const { address: currentMintAddress } = value.mintInfo || {}\n                return (\n                  <Col span={24} key={i}>\n                    <LazyLoad height={48} overflow>\n                      <Mint\n                        mintAddress={mintAddress}\n                        onClick={() => onMint(mintAddress)}\n                        active={currentMintAddress === mintAddress}\n                      />\n                    </LazyLoad>\n                  </Col>\n                )\n              })}\n            </Row>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default MintSelection\n","import { useState, Fragment, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { forceCheck } from '@senswap/react-lazyload'\n\nimport { Row, Col, Space, Typography, Divider, Modal } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport MintSelection, { SelectionInfo } from './mintSelection'\n\nimport { SenLpState } from 'app/constant/senLpState'\n\nconst Selection = ({\n  value,\n  onChange,\n}: {\n  value: SelectionInfo\n  onChange: (value: SelectionInfo) => void\n}) => {\n  const [visible, setVisible] = useState(false)\n  const history = useHistory()\n  const { state } = useLocation<SenLpState>()\n  useEffect(() => {\n    if (visible) setTimeout(forceCheck, 500)\n  }, [visible])\n\n  const onSelection = (selectionInfo: SelectionInfo) => {\n    setVisible(false)\n\n    // Clear state of senlp come to\n    if (state) history.replace({ ...history.location, state: {} })\n\n    return onChange(selectionInfo)\n  }\n\n  const mintAddress = value?.mintInfo?.address || ''\n  return (\n    <Fragment>\n      <Space style={{ cursor: 'pointer' }} onClick={() => setVisible(true)}>\n        <MintAvatar mintAddress={mintAddress} />\n        <Typography.Text type=\"secondary\">\n          <MintSymbol mintAddress={mintAddress} />\n        </Typography.Text>\n        <Divider type=\"vertical\" style={{ marginLeft: 4 }} />\n      </Space>\n      <Modal\n        visible={visible}\n        onCancel={() => setVisible(false)}\n        closeIcon={<IonIcon name=\"close\" />}\n        footer={null}\n        destroyOnClose={true}\n        centered={true}\n      >\n        <Row gutter={[16, 16]}>\n          <Col span={24}>\n            <MintSelection value={value} onChange={onSelection} />\n          </Col>\n        </Row>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default Selection\n","import { ChangeEvent, useState, forwardRef, useCallback, useRef } from 'react'\n\nimport { Input, Tooltip, Space, InputProps } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nlet timeoutId: ReturnType<typeof setTimeout> | undefined\n\n/**\n * Numeric Input\n * - Check balance based on the max\n * - Only accept numeric characters\n * @remarks The props of input follows the same as https://ant.design/components/input/#API. Extra & Overrided props\n * @param max - Maximum\n * @param onValue - A triggerred function if a valid number\n */\nconst NumericInput = forwardRef(\n  (\n    {\n      max,\n      onValue = () => {},\n      onChange = () => {},\n      ...props\n    }: InputProps & {\n      onValue?: (val: string) => void\n      max?: string | number\n    },\n    ref: any,\n  ) => {\n    const [error, setError] = useState('')\n    const [cursor, setCursor] = useState<number | null>(null)\n    const innerRef = useRef(ref)\n\n    // Handle amount\n    const onAmount = useCallback(\n      (val: string) => {\n        const onError = (er: string) => {\n          if (timeoutId) {\n            clearTimeout(timeoutId)\n            timeoutId = undefined\n          }\n          setError(er)\n          timeoutId = setTimeout(() => setError(''), 500)\n        }\n        const reg = /^\\d*(\\.\\d*)?$/\n        if (!reg.test(val)) return onError('Invalid character')\n        if (max && parseFloat(val) > parseFloat(max.toString()))\n          return onError('Not enough balance')\n        return onValue(val)\n      },\n      [max, onValue],\n    )\n\n    // Handle cursor jumping\n    // To prevent autofocus on mobile, we must strictly check cursor different from null\n    if (cursor !== null) innerRef?.current?.setSelectionRange(cursor, cursor)\n\n    return (\n      <Tooltip\n        title={\n          <Space>\n            <IonIcon name=\"warning\" />\n            {error}\n          </Space>\n        }\n        visible={!!error}\n      >\n        <Input\n          {...props}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            onChange(e)\n            setCursor(e.target.selectionStart)\n            onAmount(e.target.value || '')\n          }}\n          ref={innerRef}\n        />\n      </Tooltip>\n    )\n  },\n)\n\nexport default NumericInput\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string' ||\n  typeof process.env.REACT_APP_SENHUB !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n  senhub: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n  senhub: process.env.REACT_APP_SENHUB,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  spltAddress: string\n  splataAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: 'https://api.devnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: 'https://api.testnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: 'https://api.mainnet-beta.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  bidDefault: string\n  askDefault: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    bidDefault: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    askDefault: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    bidDefault: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    askDefault: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    bidDefault: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    askDefault: 'SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  wormholeAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { env, net } from 'shared/runtime'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\nimport swap from './swap.config'\nimport wormhole from './wormhole.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n  swap: swap[net],\n  wormhole: wormhole[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { LiteMintInfo } from 'app/components/preview'\n\nexport type State = {\n  amount: string // Desired amount\n  accountAddress: string // Associated account to the selected token\n  mintInfo: LiteMintInfo // Selected token\n  poolAddresses: string[] // List of available pools\n  priority: number\n}\n\nconst NAME = 'ask'\nconst initialState: State = {\n  amount: '',\n  mintInfo: {\n    address: '',\n    decimals: 0,\n  },\n  accountAddress: '',\n  poolAddresses: [],\n  priority: 0,\n}\n\n/**\n * Actions\n */\n\nexport const updateAskData = createAsyncThunk<\n  Partial<State>,\n  Partial<State> & { prioritized?: boolean; reset?: boolean },\n  { state: any }\n>(\n  `${NAME}/updateAskData`,\n  async ({ prioritized, reset, ...askData }, { getState }) => {\n    const {\n      bid: { priority: refPriority },\n      ask: { priority: prevPriority },\n    } = getState()\n    if (Number(askData.amount) < 0) askData.amount = ''\n    const priority = reset ? 0 : prioritized ? refPriority + 1 : prevPriority\n    return { ...askData, priority }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateAskData.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport { useMint, usePool, useWallet } from 'senhub/providers'\nimport { SelectionInfo } from 'app/components/selection/mintSelection'\n\nconst DEFAULT_INFO = {\n  accountAddress: '',\n  poolAddresses: [],\n}\n\ntype MintSelection = SelectionInfo & {\n  accountAddress?: string\n}\n\nexport const useMintSelection = (mintAddress: string): MintSelection => {\n  const { wallet } = useWallet()\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n  const [selectionInfo, setSelectionInfo] =\n    useState<MintSelection>(DEFAULT_INFO)\n\n  const getSelectionInfo = useCallback(async () => {\n    if (!account.isAddress(mintAddress) || !Object.keys(pools).length)\n      return setSelectionInfo(DEFAULT_INFO)\n\n    const mintInfo = await tokenProvider.findByAddress(mintAddress)\n    if (!mintInfo) return setSelectionInfo(DEFAULT_INFO)\n    const { splt } = window.sentre\n    // get mint account\n    const accountAddress = await splt.deriveAssociatedAddress(\n      wallet.address,\n      mintAddress,\n    )\n    // get pools\n    const poolAddresses = Object.keys(pools).filter((poolAddress) => {\n      const { mint_a, mint_b } = pools[poolAddress]\n      return [mint_a, mint_b].includes(mintAddress)\n    })\n    setSelectionInfo({\n      accountAddress,\n      mintInfo,\n      poolAddresses,\n    })\n  }, [mintAddress, pools, tokenProvider, wallet.address])\n\n  useEffect(() => {\n    getSelectionInfo()\n  }, [getSelectionInfo])\n\n  return selectionInfo\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from 'senhub/providers'\n\n/**\n * Get token decimals from multiple resources. This hook need MintProvider for work.\n * MintProvider Ref: https://docs.sentre.io/senhub/development/providers/mint-provider\n * @param mintAddress Mint address\n * @returns Decimals\n */\nconst useMintDecimals = (mintAddress: string) => {\n  const [decimals, setDecimals] = useState<number | undefined>(undefined)\n  const { getDecimals } = useMint()\n\n  const fetchDecimals = useCallback(async () => {\n    try {\n      const decimals = await getDecimals(mintAddress)\n      return setDecimals(decimals)\n    } catch (er: any) {\n      return setDecimals(undefined)\n    }\n  }, [mintAddress, getDecimals])\n\n  useEffect(() => {\n    fetchDecimals()\n  }, [fetchDecimals])\n\n  return decimals\n}\n\nexport default useMintDecimals\n","import { useMemo, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account, utils } from '@senswap/sen-js'\n\nimport { Row, Col, Typography, Space } from 'antd'\nimport { SelectionInfo } from '../selection/mintSelection'\nimport Selection from '../selection'\nimport NumericInput from 'shared/antd/numericInput'\nimport { MintSymbol } from 'shared/antd/mint'\n\nimport configs from 'app/configs'\nimport { useWallet } from 'senhub/providers'\nimport { numeric } from 'shared/util'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateAskData } from 'app/model/ask.controller'\nimport useBalance from 'app/hooks/useBalance'\nimport { useMintSelection } from 'app/hooks/useMintSelection'\nimport { SenLpState } from 'app/constant/senLpState'\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\n\nconst Ask = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const { wallet } = useWallet()\n  const {\n    ask: { amount, accountAddress, mintInfo, poolAddresses },\n  } = useSelector((state: AppState) => state)\n  const { state } = useLocation<SenLpState>()\n  const balance = useBalance(accountAddress)\n  const selectionDefault = useMintSelection(configs.swap.askDefault)\n  const poolAdress = state?.poolAddress\n  const decimals = useMintDecimals(mintInfo.address) || 0\n\n  // Select default\n  useEffect(() => {\n    if (account.isAddress(accountAddress) || account.isAddress(poolAdress))\n      return\n    dispatch(updateAskData(selectionDefault))\n  }, [accountAddress, dispatch, poolAdress, selectionDefault])\n\n  // Compute selection info\n  const selectionInfo: SelectionInfo = useMemo(\n    () => ({ mintInfo, poolAddresses }),\n    [mintInfo, poolAddresses],\n  )\n\n  // Compute human-readable balance\n  const maxBalance = useMemo((): string => {\n    return utils.undecimalize(balance, decimals)\n  }, [balance, decimals])\n\n  // Handle amount\n  const onAmount = (val: string) =>\n    dispatch(updateAskData({ amount: val, prioritized: true }))\n\n  // Update ask data\n  const onSelectionInfo = async (selectionInfo: SelectionInfo) => {\n    const { splt } = window.sentre\n    const { address: mintAddress } = selectionInfo.mintInfo || {}\n    if (!account.isAddress(mintAddress))\n      return dispatch(\n        updateAskData({ amount: '', prioritized: true, ...selectionInfo }),\n      )\n    const accountAddress = await splt.deriveAssociatedAddress(\n      wallet.address,\n      mintAddress,\n    )\n    dispatch(\n      updateAskData({\n        amount: '',\n        prioritized: true,\n        accountAddress,\n        ...selectionInfo,\n      }),\n    )\n  }\n\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Typography.Text>To</Typography.Text>\n      </Col>\n      <Col span={24}>\n        <NumericInput\n          placeholder=\"0\"\n          value={amount}\n          onValue={onAmount}\n          size=\"large\"\n          prefix={\n            <Selection value={selectionInfo} onChange={onSelectionInfo} />\n          }\n        />\n      </Col>\n      <Col flex=\"auto\" />\n      <Col>\n        <Space className=\"caption\">\n          <Typography.Text type=\"secondary\">Available:</Typography.Text>\n          <Typography.Text type=\"secondary\">\n            {numeric(maxBalance).format('0,0.[00]')}\n          </Typography.Text>\n          <Typography.Text type=\"secondary\">\n            <MintSymbol mintAddress={selectionInfo.mintInfo?.address || ''} />\n          </Typography.Text>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Ask\n","export type EthAddressConfig = {\n  mainnet: string\n  goerli: string\n  ropsten: string\n}\n\nexport type EthChainIdConfig = {\n  mainnet: number\n  goerli: number\n  ropsten: number\n}\n\nexport type EtherNetwork = 'mainnet' | 'goerli'\n\nexport type EtherConfigSet = {\n  mainnet: string\n  goerli: string\n  ropsten: string\n}\n\nexport type MoralisStructure = {\n  url: string\n  apiKey: string\n}\n\nexport const ETH_BRIDGE_ADDRESS: EthAddressConfig = {\n  mainnet: '0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B',\n  goerli: '0x706abc4E45D419950511e474C7B9Ed348A4a716c',\n  ropsten: '0xC89Ce4735882C9F0f0FE26686c53074E09B0D550',\n}\n\nexport const ETH_TOKEN_BRIDGE_ADDRESS: EthAddressConfig = {\n  mainnet: '0x3ee18B2214AFF97000D974cf647E7C347E8fa585',\n  goerli: '0xf890982f9310df57d00f659cf4fd87e65aded8d7',\n  ropsten: '0x0290FB167208Af455bB137780163b7B7a9a10C16',\n}\n\nexport const CHAIN_ID_ETH: EthChainIdConfig = {\n  mainnet: 1,\n  goerli: 5,\n  ropsten: 3,\n}\n\nexport const MORALIS_INFO: MoralisStructure = {\n  url: 'https://deep-index.moralis.io/api/v2',\n  apiKey: 'N6yeIUl1FxCPZWbXyxLHWPAjSr6ahQeJTX3d19pSKCwHsLCzpWE7z1hilon4xDOd',\n}\n\nexport const INFURA_API_KEY: String = '5eb1b92f2065414d9dd21858fac54257'\n\nexport const INFURA_API_HTTP_URL: EtherConfigSet = {\n  mainnet: `https://mainnet.infura.io/v3/${INFURA_API_KEY}`,\n  goerli: `https://goerli.infura.io/v3/${INFURA_API_KEY}`,\n  ropsten: `https://ropsten.infura.io/v3/${INFURA_API_KEY}`,\n}\n\nexport const INFURA_API_WSS_URL: EtherConfigSet = {\n  mainnet: `wss://mainnet.infura.io/ws/v3/${INFURA_API_KEY}`,\n  goerli: `wss://goerli.infura.io/ws/v3/${INFURA_API_KEY}`,\n  ropsten: `wss://ropsten.infura.io/ws/v3/${INFURA_API_KEY}`,\n}\n","export type SolNetWork = 'mainnet' | 'devnet'\n\nexport type SolAddressConfig = {\n  mainnet: string\n  testnet: string\n  devnet: string\n}\n\nexport const SOL_BRIDGE_ADDRESS: SolAddressConfig = {\n  mainnet: 'worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth',\n  testnet: 'Brdguy7BmNB4qwEbcqqMbyV5CyJd2sxQNUn6NEpMSsUb',\n  devnet: '3u8hJUVTA4jH1wYAyUur7FFZVQ8H635K3tSHHF4ssjQ5',\n}\n\nexport const SOL_TOKEN_BRIDGE_ADDRESS: SolAddressConfig = {\n  mainnet: 'wormDTUJ6AWPNvk59vGQbDvGJmqbDTdgWgAqcLBCgUb',\n  testnet: 'A4Us8EhCC76XdGAN17L4KpRNEK423nMivVHZzZqFqqBg',\n  devnet: 'DZnkkTmCiFWfYTfT41X3Rd1kDgozqzxWaHqsw6W4x2oe',\n}\n","import {\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from '@certusone/wormhole-sdk'\nimport storage from 'shared/storage'\n\nimport {\n  EtherNetwork,\n  ETH_BRIDGE_ADDRESS,\n  ETH_TOKEN_BRIDGE_ADDRESS,\n} from 'app/constant/ethConfig'\nimport {\n  SolNetWork,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n} from 'app/constant/solConfig'\nimport { getIsWrappedAssetSol } from '@certusone/wormhole-sdk'\n\nexport const getSolNetwork = () => {\n  const solNetwork = storage.get('network') || 'mainnet'\n  return solNetwork\n}\n\nexport const getEtherNetwork = () => {\n  const solNetwork = getSolNetwork()\n  const etherNetwork = solNetwork === 'mainnet' ? 'mainnet' : 'goerli'\n  return etherNetwork\n}\n\nexport const getEtherContext = () => {\n  const etherNetwork: EtherNetwork = getEtherNetwork()\n  return {\n    chainId: CHAIN_ID_ETH,\n    tokenBridgeAddress: ETH_TOKEN_BRIDGE_ADDRESS[etherNetwork],\n    bridgeAddress: ETH_BRIDGE_ADDRESS[etherNetwork],\n  }\n}\n\nexport const getSolContext = () => {\n  const solNetWork: SolNetWork = getSolNetwork()\n  return {\n    chainId: CHAIN_ID_SOLANA,\n    tokenBridgeAddress: SOL_TOKEN_BRIDGE_ADDRESS[solNetWork],\n    bridgeAddress: SOL_BRIDGE_ADDRESS[solNetWork],\n  }\n}\n\nexport const checkAttestedWormhole = async (mintAddress: string) => {\n  const solContext = getSolContext()\n  return getIsWrappedAssetSol(\n    window.sentre.splt.connection,\n    solContext.tokenBridgeAddress,\n    mintAddress,\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { account } from '@senswap/sen-js'\n\nimport { Space, Tag, Typography } from 'antd'\n\nimport { AppState } from 'app/model'\nimport { checkAttestedWormhole } from 'app/helper/wormhole'\nimport { randomColor } from 'shared/util'\n\nconst WORMHOLE_COLOR = '#F9575E'\n\nconst WormholeSupported = () => {\n  const [wormholeSupported, setWormholeSupported] = useState(false)\n  const {\n    bid: { mintInfo },\n  } = useSelector((state: AppState) => state)\n\n  useEffect(() => {\n    ;(async () => {\n      const { address: mintAddress } = mintInfo || {}\n      if (!account.isAddress(mintAddress)) return setWormholeSupported(false)\n      const wormholeSupported = await checkAttestedWormhole(mintAddress)\n      return setWormholeSupported(wormholeSupported)\n    })()\n  }, [mintInfo])\n\n  if (!wormholeSupported) return null\n  return (\n    <Space size={4}>\n      <Tag\n        style={{\n          margin: 0,\n          borderRadius: 4,\n          color: randomColor(WORMHOLE_COLOR),\n        }}\n        color={randomColor(WORMHOLE_COLOR, 0.2)}\n      >\n        Wormhole Bridge\n      </Tag>\n      <Typography.Text type=\"secondary\">Supported</Typography.Text>\n    </Space>\n  )\n}\n\nexport default WormholeSupported\n","import { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account, DEFAULT_WSOL, utils } from '@senswap/sen-js'\n\nimport { Row, Col, Typography, Button, Space } from 'antd'\nimport Selection from '../selection'\nimport NumericInput from 'shared/antd/numericInput'\nimport { MintSymbol } from 'shared/antd/mint'\n\nimport configs from 'app/configs'\nimport { useWallet } from 'senhub/providers'\nimport { numeric } from 'shared/util'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { SelectionInfo } from '../selection/mintSelection'\nimport { useMintSelection } from 'app/hooks/useMintSelection'\nimport useBalance from 'app/hooks/useBalance'\nimport { SenLpState } from 'app/constant/senLpState'\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\nimport WormholeSupported from './wormholeSupported'\n\nconst {\n  swap: { bidDefault },\n} = configs\n\nconst Bid = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const {\n    wallet: { address: walletAddress, lamports },\n  } = useWallet()\n  const {\n    bid: { amount: bidAmount, accountAddress, mintInfo, poolAddresses },\n  } = useSelector((state: AppState) => state)\n  const balance = useBalance(accountAddress)\n  const selectionDefault = useMintSelection(bidDefault)\n  const { state } = useLocation<SenLpState>()\n  const poolAdress = state?.poolAddress\n  const mintAddress = mintInfo.address\n  const decimals = useMintDecimals(mintAddress) || 0\n\n  // Select default\n  useEffect(() => {\n    if (account.isAddress(accountAddress) || account.isAddress(poolAdress))\n      return\n    dispatch(updateBidData(selectionDefault))\n  }, [accountAddress, dispatch, poolAdress, selectionDefault])\n\n  // Compute selection info\n  const selectionInfo: SelectionInfo = useMemo(\n    () => ({ mintInfo, poolAddresses }),\n    [mintInfo, poolAddresses],\n  )\n\n  // Compute human-readable balance\n  const maxBalance = useMemo((): string => {\n    if (mintAddress !== DEFAULT_WSOL)\n      return utils.undecimalize(balance, decimals)\n    // So estimate max = 0.01 fee -> multi transaction.\n    const estimateFee = utils.decimalize(0.01, decimals)\n    const max = lamports + balance - estimateFee\n    if (max <= balance) return utils.undecimalize(balance, decimals)\n    return utils.undecimalize(max, decimals)\n  }, [balance, decimals, lamports, mintAddress])\n\n  // Handle amount\n  const onAmount = (val: string) =>\n    dispatch(updateBidData({ amount: val, prioritized: true }))\n  // All in :)))\n  const onMax = () => onAmount(maxBalance)\n\n  // Update bid data\n  const onSelectionInfo = async (selectionInfo: SelectionInfo) => {\n    const { splt } = window.sentre\n    const { address: mintAddress } = selectionInfo.mintInfo || {}\n    if (!account.isAddress(mintAddress))\n      return dispatch(\n        updateBidData({ amount: '', prioritized: true, ...selectionInfo }),\n      )\n    const accountAddress = await splt.deriveAssociatedAddress(\n      walletAddress,\n      mintAddress,\n    )\n    return dispatch(\n      updateBidData({\n        amount: '',\n        prioritized: true,\n        accountAddress,\n        ...selectionInfo,\n      }),\n    )\n  }\n\n  return (\n    <Row gutter={[8, 8]}>\n      <Col flex=\"auto\">\n        <Typography.Text>From</Typography.Text>\n      </Col>\n      <Col>\n        <WormholeSupported />\n      </Col>\n      <Col span={24}>\n        <NumericInput\n          placeholder=\"0\"\n          value={bidAmount}\n          onValue={onAmount}\n          size=\"large\"\n          prefix={\n            <Selection value={selectionInfo} onChange={onSelectionInfo} />\n          }\n          suffix={\n            <Button\n              type=\"text\"\n              size=\"small\"\n              style={{ fontSize: 12, marginRight: -7 }}\n              onClick={onMax}\n            >\n              MAX\n            </Button>\n          }\n          max={maxBalance}\n        />\n      </Col>\n      <Col flex=\"auto\" />\n      <Col>\n        <Space className=\"caption\">\n          <Typography.Text type=\"secondary\">Available:</Typography.Text>\n          <Typography.Text type=\"secondary\">\n            {numeric(maxBalance || 0).format('0,0.[00]')}\n          </Typography.Text>\n          <Typography.Text type=\"secondary\">\n            <MintSymbol mintAddress={selectionInfo.mintInfo?.address || ''} />\n          </Typography.Text>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Bid\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { HopData } from 'app/components/preview/index'\n\nexport type RouteInfo = {\n  hops: HopData[]\n  amounts: bigint[]\n  amount: bigint\n}\n\nexport type State = RouteInfo\nconst ROUTE_DEFAULT = {\n  amount: BigInt(0),\n  amounts: [],\n  hops: [],\n}\nconst NAME = 'route'\nconst initialState: State = {\n  ...ROUTE_DEFAULT,\n}\n\n/**\n * Actions\n */\nexport const updateRoute = createAsyncThunk<\n  Partial<State>,\n  Partial<State>,\n  { state: any }\n>(`${NAME}/updateRoute`, async (route, { getState }) => {\n  const { route: prevRoute } = getState()\n  if (!route) return { ...prevRoute }\n  return { ...prevRoute, ...route }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateRoute.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account, utils } from '@senswap/sen-js'\n\nimport { Button, Col, Row } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport Ask from '../ask'\nimport Bid from '../bid'\n\nimport {\n  buildPoolGraph,\n  findAllRoute,\n  findBestRouteFromAsk,\n  findBestRouteFromBid,\n  RouteTrace,\n} from 'app/helper/router'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateAskData } from 'app/model/ask.controller'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { RouteInfo, updateRoute } from 'app/model/route.controller'\nimport { usePool } from 'senhub/providers'\nimport { SenLpState } from 'app/constant/senLpState'\n\nconst SwapAction = ({ spacing = 12 }: { spacing?: number }) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const [bestRoute, setBestRoute] = useState<RouteInfo>({\n    hops: [],\n    amounts: [],\n    amount: BigInt(0),\n  })\n  const { bid: bidData, ask: askData } = useSelector((state: AppState) => state)\n  const { pools } = usePool()\n  const { state } = useLocation<SenLpState>()\n  const poolAdress = state?.poolAddress\n  const originalRoute = state?.originalRoute\n\n  /**\n   * Switch tokens\n   */\n  const onSwitch = useCallback(async () => {\n    const { amount: bidAmount, priority: bidPriority, ...bidRest } = bidData\n    const { amount: askAmount, priority: askPriority, ...askRest } = askData\n    const amount = bidPriority > askPriority ? bidAmount : askAmount\n    const updateData = bidPriority > askPriority ? updateAskData : updateBidData\n    await dispatch(updateBidData({ ...askRest, amount: '', reset: true }))\n    await dispatch(updateAskData({ ...bidRest, amount: '', reset: true }))\n    await dispatch(updateData({ amount, prioritized: true }))\n  }, [dispatch, askData, bidData])\n\n  /**\n   * Find optimal route\n   */\n  const findRoute = useCallback(async () => {\n    const {\n      poolAddresses: bidPoolAddresses,\n      mintInfo: { address: bidMintAddress },\n      amount: bidAmount,\n      priority: bidPriority,\n    } = bidData\n    const {\n      poolAddresses: askPoolAddresses,\n      mintInfo: { address: askMintAddress },\n      amount: askAmount,\n      priority: askPriority,\n    } = askData\n\n    const bidPools = bidPoolAddresses.map((address) => ({\n      address,\n      ...pools[address],\n    }))\n    const askPools = askPoolAddresses.map((address) => ({\n      address,\n      ...pools[address],\n    }))\n\n    // Initialize an instance for the best route\n    // The best route return a route that user can receive maximum ask amount when swap\n    let bestRoute: RouteInfo = { hops: [], amounts: [], amount: BigInt(0) }\n    // Return empty default\n    if (\n      (!Number(bidAmount) && !Number(askAmount)) ||\n      !account.isAddress(bidMintAddress) ||\n      !account.isAddress(askMintAddress) ||\n      !bidPools.length ||\n      !askPools.length\n    )\n      return setBestRoute(bestRoute)\n    // All possible routes\n    let allRoutes = new Array<RouteTrace>()\n    findAllRoute(\n      allRoutes,\n      buildPoolGraph(pools),\n      bidMintAddress,\n      askMintAddress,\n    )\n    // No available route\n    if (!allRoutes.length) return setBestRoute(bestRoute)\n\n    // When user select original route from senlp\n    if (originalRoute)\n      allRoutes = allRoutes.filter(\n        ({ pools }) => pools.length === 1 && pools[0] === poolAdress,\n      )\n\n    if (askPriority < bidPriority) {\n      bestRoute = await findBestRouteFromBid(pools, allRoutes, bidData, askData)\n    } else {\n      bestRoute = await findBestRouteFromAsk(pools, allRoutes, bidData, askData)\n    }\n\n    return setBestRoute(bestRoute)\n  }, [askData, bidData, originalRoute, poolAdress, pools])\n\n  const setRoute = useCallback(() => {\n    const bidPriority = bidData.priority\n    const askPriority = askData.priority\n    if (askPriority < bidPriority) {\n      dispatch(\n        updateAskData({\n          amount: utils.undecimalize(\n            bestRoute.amount,\n            askData.mintInfo.decimals,\n          ),\n        }),\n      )\n    }\n    if (bidPriority < askPriority) {\n      dispatch(\n        updateBidData({\n          amount: utils.undecimalize(\n            bestRoute.amount,\n            bidData.mintInfo.decimals,\n          ),\n        }),\n      )\n    }\n    dispatch(updateRoute({ ...bestRoute }))\n  }, [\n    askData.priority,\n    bestRoute,\n    bidData.priority,\n    dispatch,\n    bidData.mintInfo?.decimals,\n    askData.mintInfo?.decimals,\n  ])\n\n  useEffect(() => {\n    setRoute()\n  }, [setRoute])\n\n  useEffect(() => {\n    findRoute()\n  }, [findRoute])\n\n  return (\n    <Row gutter={[spacing, spacing]} justify=\"center\">\n      <Col span={24}>\n        <Bid />\n      </Col>\n      <Col>\n        <Button\n          size=\"small\"\n          icon={<IonIcon name=\"git-compare-outline\" />}\n          onClick={onSwitch}\n        />\n      </Col>\n      <Col span={24}>\n        <Ask />\n      </Col>\n    </Row>\n  )\n}\n\nexport default SwapAction\n","import { Col, Row } from 'antd'\nimport Settings from '../settings'\nimport SwapAction from './swapAction'\n\nconst Swap = () => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} justify=\"end\" align=\"middle\" wrap={false}>\n          <Col>\n            <Settings />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <SwapAction />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Swap\n","import { Card, Col, Row } from 'antd'\nimport SwapReview from './swapReview'\nimport SwapPoolInfo from './swapPoolInfo'\nimport SwapForm from 'app/components/swap'\n\nconst Swap = () => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Card bordered={false} className=\"card-swap\">\n          <SwapForm />\n        </Card>\n      </Col>\n      <Col span={24}>\n        <SwapReview />\n      </Col>\n      <Col span={24}>\n        <SwapPoolInfo />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Swap\n","import { Tag } from 'antd'\n\nconst STATUS_COLOR: Record<string, number[]> = {\n  success: [20, 224, 65],\n  pending: [212, 177, 6],\n  error: [215, 35, 17],\n  failed: [215, 35, 17],\n}\n\nconst StatusTag = ({ tag }: { tag: string }) => {\n  const setColorTag = (opacity?: number) => {\n    let color = STATUS_COLOR[tag]\n    return `rgba(${color[0]},  ${color[1]}, ${color[2]},${opacity || 1})`\n  }\n\n  return (\n    <Tag\n      style={{\n        margin: 0,\n        borderRadius: 4,\n        color: setColorTag(),\n        textTransform: 'capitalize',\n      }}\n      color={setColorTag(0.1)}\n    >\n      {tag}\n    </Tag>\n  )\n}\n\nexport default StatusTag\n","import { Button, Space, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport IonIcon from 'shared/antd/ionicon'\nimport StatusTag from './statusTag'\n\nimport { explorer, numeric, shortenAddress } from 'shared/util'\n\nconst FORMAT_AMOUNT = '0,00.[0000]a'\n\nexport const HISTORY_COLUMN = [\n  {\n    title: 'TIME',\n    dataIndex: 'time',\n  },\n  {\n    title: 'TRANSACTION',\n    dataIndex: 'transactionId',\n    render: (text: string) => (\n      <Space align=\"baseline\">\n        <Typography.Text\n          onClick={() => window.open(explorer(text), '_blank')}\n          style={{ fontWeight: 700, cursor: 'pointer' }}\n        >\n          {shortenAddress(text, 3, '...')}\n        </Typography.Text>\n        <Button\n          type=\"text\"\n          size=\"small\"\n          onClick={() => window.open(explorer(text), '_blank')}\n          icon={<IonIcon name=\"open-outline\" />}\n        />\n      </Space>\n    ),\n  },\n\n  {\n    title: 'BID',\n    dataIndex: 'bid',\n    render: (text: string, record: any) =>\n      !record.from ? (\n        '--'\n      ) : (\n        <Space size={8}>\n          <MintAvatar mintAddress={record.from} />\n          {numeric(record.amountFrom).format(FORMAT_AMOUNT)}\n          <MintSymbol mintAddress={record.from} />\n        </Space>\n      ),\n  },\n  {\n    title: 'ASK',\n    dataIndex: 'ask',\n    render: (text: string, record: any) =>\n      !record.to ? (\n        '--'\n      ) : (\n        <Space size={8}>\n          <MintAvatar mintAddress={record.to} />\n          {numeric(record.amountTo).format(FORMAT_AMOUNT)}\n          <MintSymbol mintAddress={record.to} />\n        </Space>\n      ),\n  },\n  {\n    title: 'STATUS',\n    dataIndex: 'status',\n    width: 100,\n    render: (text: string, record: any) => <StatusTag tag={record.status} />,\n  },\n]\n","export class TransLog {\n  programId: string = ''\n\n  programInfo: ProgramInfo | undefined\n\n  signature: string = ''\n\n  blockTime: number = 0\n\n  time: number = 0\n\n  owner: string = ''\n\n  actionType: string = ''\n\n  actionTransfers: Array<ActionTransfer> = []\n\n  programTransfer: Array<ActionTransfer> = []\n}\n\nexport class ActionInfo {\n  address: string = ''\n\n  // pool: string = ''\n\n  mint: string = ''\n\n  decimals: number = 0\n\n  preBalance: string = '0'\n\n  postBalance: string = '0'\n}\n/**\n * Amount is not same postBalance - preBalance\n * @postBalance and @preBalance are balance after all action (transaction)\n * @postBalance = @preBalance +- all @amount (multi amount in transaction)\n * @amount is value in 1 action\n */\nexport class ActionTransfer {\n  source: ActionInfo | undefined\n\n  destination: ActionInfo | undefined\n\n  amount: string = '0'\n}\ntype ProgramInfo = {\n  programId: string\n  data: string\n}\n","import {\n  ConfirmedSignatureInfo,\n  ConfirmedSignaturesForAddress2Options,\n  Connection,\n  ParsedConfirmedTransaction,\n  PublicKey,\n} from '@solana/web3.js'\n\nimport { OptionsFetchSignature } from '../../constants/transaction'\n\nconst DEFAULT_LIMIT = 700\nconst TRANSACTION_LIMIT = 150\n\nexport class Solana {\n  private conn: Connection = window.sentre.splt.connection\n\n  //Search for all signatures from last Signature and earlier\n  //So: If new collection (to now) -> last Signature = null\n  private async fetchSignatures(\n    address: PublicKey,\n    lastSignature?: string,\n    limit: number = DEFAULT_LIMIT,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    if (limit > DEFAULT_LIMIT) limit = DEFAULT_LIMIT\n    const options: ConfirmedSignaturesForAddress2Options = {\n      limit: limit,\n      before: lastSignature,\n    }\n    return this.conn.getConfirmedSignaturesForAddress2(address, options)\n  }\n\n  private async fetchConfirmTransaction(signatures: string[]) {\n    let confirmedTransactions: ParsedConfirmedTransaction[] = []\n    let limit = TRANSACTION_LIMIT\n\n    const promiseTransGroup = []\n    for (let offset = 0; offset <= signatures.length / limit; offset++) {\n      const skip = offset * limit\n      const signaturesGroup = signatures.slice(skip, skip + limit)\n      promiseTransGroup.push(\n        this.conn.getParsedConfirmedTransactions(signaturesGroup),\n      )\n    }\n\n    const transGroups = await Promise.all(promiseTransGroup)\n    for (const transGroup of transGroups) {\n      //@ts-ignore\n      confirmedTransactions = confirmedTransactions.concat(transGroup)\n    }\n    return confirmedTransactions\n  }\n\n  async fetchTransactions(\n    programId: string,\n    options: OptionsFetchSignature,\n  ): Promise<ParsedConfirmedTransaction[]> {\n    const currentTime = new Date().getTime() / 1000\n    let { secondFrom, secondTo, lastSignature, limit } = options\n    secondFrom = Math.floor(secondFrom || 0)\n    secondTo = Math.floor(secondTo || currentTime)\n\n    const programPublicKey = new PublicKey(programId)\n    let signatures: string[] = []\n    let isStop = false\n\n    while (!isStop) {\n      const confirmedSignatureInfos: ConfirmedSignatureInfo[] =\n        await this.fetchSignatures(programPublicKey, lastSignature, limit)\n      if (!confirmedSignatureInfos?.length || isStop) break\n      for (const info of confirmedSignatureInfos) {\n        const blockTime = info.blockTime\n        if (!blockTime || blockTime > secondTo) continue\n        if (blockTime < secondFrom) {\n          isStop = true\n          break\n        }\n        lastSignature = info.signature\n        signatures.push(info.signature)\n      }\n\n      if (limit && signatures.length >= limit) break\n      if (confirmedSignatureInfos?.length < DEFAULT_LIMIT) break\n    }\n    const confirmedTransactions = await this.fetchConfirmTransaction(signatures)\n    return confirmedTransactions\n  }\n}\n","export enum ParsedType {\n  Transfer = 'transfer',\n}\n\nexport type ParsedAction = {\n  type: ParsedType\n  info: ParsedInfoTransfer\n}\n\nexport type ParsedInfoTransfer = {\n  source: string\n  destination: string\n  amount: string\n  lamports: number\n}\n\nexport type OptionsFetchSignature = {\n  limit?: number\n  lastSignature?: string\n  secondFrom?: number\n  secondTo?: number\n}\n","import moment from 'moment'\n\nconst SECOND_PER_MILLISECOND = 1000\n\nexport enum TimeFormat {\n  YMD = 'YYYYMMDD',\n  SortableTimePattern = 'YYYY-MM-DD HH:mm:ss',\n}\n\nexport class DateHelper {\n  private milliSeconds: number = new Date().valueOf()\n\n  setMilliSeconds(milliSeconds: number) {\n    this.milliSeconds = milliSeconds\n  }\n\n  static fromSeconds(seconds: number): DateHelper {\n    const date = new DateHelper()\n    const milliSeconds = seconds * SECOND_PER_MILLISECOND\n    date.setMilliSeconds(milliSeconds)\n    return date\n  }\n\n  static fromYmd(ymd: number): DateHelper {\n    const date = new DateHelper()\n    const milliSeconds = moment(ymd, TimeFormat.YMD).valueOf()\n    date.setMilliSeconds(milliSeconds)\n    return date\n  }\n\n  static getListDate(ymdFrom: number, ymdTo: number): number[] {\n    const dates: number[] = []\n    let dateFrom = DateHelper.fromYmd(ymdFrom)\n    const dateTo = DateHelper.fromYmd(ymdTo)\n    while (dateFrom.ymd() <= dateTo.ymd()) {\n      dates.push(dateFrom.ymd())\n      dateFrom = dateFrom.addDay()\n    }\n    return dates\n  }\n\n  format(dateFormat: TimeFormat): string {\n    const date = new Date(this.milliSeconds)\n    return moment(date).format(dateFormat)\n  }\n\n  subtractDay(dayAmount: number = 1): DateHelper {\n    const milliSeconds = moment(this.milliSeconds)\n      .subtract(dayAmount, 'days')\n      .valueOf()\n    const date = DateHelper.fromSeconds(milliSeconds / SECOND_PER_MILLISECOND)\n    return date\n  }\n\n  addDay(dayAmount: number = 1): DateHelper {\n    const milliSeconds = moment(this.milliSeconds)\n      .add(dayAmount, 'days')\n      .valueOf()\n    const date = DateHelper.fromSeconds(milliSeconds / SECOND_PER_MILLISECOND)\n    return date\n  }\n\n  seconds(): number {\n    return (\n      (this.milliSeconds - (this.milliSeconds % SECOND_PER_MILLISECOND)) /\n      SECOND_PER_MILLISECOND\n    )\n  }\n\n  ymd(): number {\n    return Number(this.format(TimeFormat.YMD))\n  }\n\n  static today(format: string = TimeFormat.YMD): string {\n    return moment().format(format)\n  }\n}\n","//@ts-ignore\nimport {\n  ParsedConfirmedTransaction,\n  ParsedInstruction,\n  ParsedMessageAccount,\n  PartiallyDecodedInstruction,\n  TokenBalance,\n} from '@solana/web3.js'\nimport { account } from '@senswap/sen-js'\n\nimport { ActionInfo, ActionTransfer, TransLog } from '../entities/trans-log'\nimport { Solana } from '../adapters/solana/client'\nimport {\n  OptionsFetchSignature,\n  ParsedAction,\n  ParsedInfoTransfer,\n  ParsedType,\n} from '../constants/transaction'\nimport { DateHelper } from '../helpers/date'\nimport { SOL_ADDRESS, SOL_DECIMALS } from '../constants/sol'\n\ntype InstructionData = ParsedInstruction | PartiallyDecodedInstruction\n\nexport class TransLogService {\n  solana: Solana\n  constructor() {\n    this.solana = new Solana()\n  }\n\n  async collect(\n    programId: string,\n    configs: OptionsFetchSignature,\n    funcFilter?: (transLog: TransLog) => boolean,\n  ): Promise<TransLog[]> {\n    let { lastSignature, limit } = configs\n\n    let isStop = false\n    let transLogs: Array<TransLog> = []\n    let lastSignatureTmp = lastSignature\n\n    while (!isStop) {\n      const confirmedTrans: ParsedConfirmedTransaction[] =\n        await this.solana.fetchTransactions(programId, {\n          ...configs,\n          lastSignature: lastSignatureTmp,\n        })\n\n      for (const trans of confirmedTrans) {\n        lastSignatureTmp = trans.transaction.signatures[0]\n        const log = this.parseTransLog(trans)\n        if (log) transLogs.push(log)\n      }\n\n      if (funcFilter) {\n        transLogs = transLogs.filter((trans) => funcFilter(trans))\n\n        if (!confirmedTrans.length || isStop) break\n        if (limit && transLogs.length >= limit) {\n          isStop = true\n          break\n        }\n      } else break\n    }\n    return transLogs\n  }\n  private parseTransLog(\n    confirmedTrans: ParsedConfirmedTransaction,\n  ): TransLog | undefined {\n    const { blockTime, meta, transaction } = confirmedTrans\n    if (!blockTime || !meta) return\n    const { postTokenBalances, preTokenBalances, postBalances, preBalances } =\n      meta\n    const { signatures, message } = transaction\n\n    const innerInstructionData = meta.innerInstructions?.[0]?.instructions || []\n    const instructionData = message.instructions[0] || []\n\n    const transLog = new TransLog()\n    transLog.signature = signatures[0]\n    transLog.blockTime = blockTime\n    transLog.time = DateHelper.fromSeconds(blockTime).ymd()\n    transLog.programId = instructionData.programId.toString()\n\n    const mapAccount = this.parseAccountInfo(\n      message.accountKeys,\n      postTokenBalances || [],\n      preTokenBalances || [],\n      postBalances,\n      preBalances,\n    )\n    // system program transaction\n    if (this.isParsedInstruction(instructionData)) {\n      transLog.programTransfer = this.parseAction([instructionData], mapAccount)\n      return transLog\n    }\n    // smart contract transaction\n    transLog.actionTransfers = this.parseAction(\n      innerInstructionData,\n      mapAccount,\n    )\n    transLog.programInfo = {\n      programId: instructionData.programId.toString(),\n      data: (instructionData as PartiallyDecodedInstruction).data,\n    }\n    return transLog\n  }\n\n  private isParsedInstruction(instructionData: InstructionData) {\n    return (instructionData as ParsedInstruction).parsed !== undefined\n  }\n\n  private parseAction(\n    actions: InstructionData[],\n    mapAccount: Map<string, ActionInfo>,\n  ) {\n    const actionTransfer: ActionTransfer[] = []\n    for (const action of actions) {\n      if (!this.isParsedInstruction(action)) continue\n      const actionParsed: ParsedAction =\n        (action as ParsedInstruction).parsed || {}\n      switch (actionParsed.type) {\n        case ParsedType.Transfer:\n          const info: ParsedInfoTransfer = actionParsed.info\n          const parsedAction = this.parseActionTransfer(info, mapAccount)\n          if (parsedAction) actionTransfer.push(parsedAction)\n          break\n        default:\n          break\n      }\n    }\n    return actionTransfer\n  }\n\n  private parseActionTransfer(\n    parsedTransfer: ParsedInfoTransfer,\n    mapAccount: Map<string, ActionInfo>,\n  ): ActionTransfer | undefined {\n    const { source, destination, amount, lamports } = parsedTransfer\n    const amountTransfer = amount || lamports.toString()\n\n    if (\n      !amountTransfer ||\n      !mapAccount.has(source) ||\n      !mapAccount.has(destination)\n    )\n      return\n\n    const actionTransfer = new ActionTransfer()\n    actionTransfer.source = mapAccount.get(source)\n    actionTransfer.destination = mapAccount.get(destination)\n    actionTransfer.amount = amountTransfer\n    return actionTransfer\n  }\n\n  private parseAccountInfo(\n    accountKeys: Array<ParsedMessageAccount>,\n    postTokenBalances: Array<TokenBalance>,\n    preTokenBalances: Array<TokenBalance>,\n    postBalances: number[],\n    preBalances: number[],\n  ): Map<string, ActionInfo> {\n    const mapAccountInfo = new Map<string, ActionInfo>()\n\n    // Associated Address\n    for (const postBalance of postTokenBalances) {\n      const { accountIndex, mint, uiTokenAmount } = postBalance\n      const info = new ActionInfo()\n      info.address = accountKeys[accountIndex].pubkey.toString()\n      info.postBalance = uiTokenAmount.amount\n      info.mint = mint\n      info.decimals = uiTokenAmount.decimals\n      mapAccountInfo.set(info.address, info)\n    }\n\n    for (const preBalance of preTokenBalances) {\n      const { accountIndex, uiTokenAmount } = preBalance\n      const address = accountKeys[accountIndex].pubkey.toString()\n      const info = mapAccountInfo.get(address) || new ActionInfo()\n      info.preBalance = uiTokenAmount.amount\n      mapAccountInfo.set(info.address, info)\n    }\n\n    // Wallet address\n    accountKeys.forEach((accountData, idx) => {\n      const address = accountData.pubkey.toString()\n      if (!account.isAssociatedAddress(address)) {\n        const info = mapAccountInfo.get(address) || new ActionInfo()\n        info.address = address\n        info.mint = SOL_ADDRESS\n        info.postBalance = String(postBalances[idx] || 0) // lamports\n        info.preBalance = String(preBalances[idx] || 0) // lamports\n        info.decimals = SOL_DECIMALS\n        mapAccountInfo.set(info.address, info)\n      }\n    })\n\n    return mapAccountInfo\n  }\n}\n","export const SOL_ADDRESS = '11111111111111111111111111111111'\n\nexport const SOL_DECIMALS = 9\n","import moment from 'moment'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nimport { utils } from '@senswap/sen-js'\nimport { TransLogService } from 'app/lib/stat/logic/translog'\nimport configs from 'os/configs'\nimport { TransLog } from 'app/lib/stat/entities/trans-log'\n\nexport type State = {\n  historySwap: HistorySwap[]\n}\n\n/**\n * Store constructor\n */\n\nexport type HistorySwap = {\n  time: string\n  transactionId: string\n  from?: string\n  to?: string\n  amountFrom?: number\n  amountTo?: number\n  key: string\n  status: string\n  decimals: number\n}\n\nconst LIMIT_HISTORY_SWAP = 20\n\nconst NAME = 'history'\nconst initialState: State = {\n  historySwap: [],\n}\n\nconst filterFunction = (transLog: TransLog) => {\n  if (!transLog.actionTransfers.length) return false\n  return true\n}\n\n/**\n * Actions\n */\nexport const fetchHistorySwap = createAsyncThunk<\n  { historySwap: HistorySwap[] },\n  { lastSignature?: string; isLoadMore?: boolean },\n  { state: { history: State } }\n>(\n  `${NAME}/fetchHistorySwap`,\n  async ({ lastSignature, isLoadMore }, { getState }) => {\n    const {\n      sol: { swapAddress },\n    } = configs\n\n    const {\n      history: { historySwap },\n    } = getState()\n\n    const myWalletAddress = await window.sentre.wallet?.getAddress()\n    if (!myWalletAddress) throw Error('Loggin first')\n\n    const options = {\n      limit: LIMIT_HISTORY_SWAP,\n      lastSignature,\n    }\n\n    const transLogService = new TransLogService()\n    const transLogsData = await transLogService.collect(\n      myWalletAddress,\n      options,\n      filterFunction,\n    )\n    let history: HistorySwap[] = []\n\n    if (isLoadMore) history = [...historySwap]\n\n    for (const transLog of transLogsData) {\n      const historyItem = {} as HistorySwap\n      const actionTransfer = transLog.actionTransfers\n      let lastAction\n      const firstAction = actionTransfer[0]\n      if (actionTransfer.length > 1)\n        lastAction = actionTransfer[actionTransfer.length - 1]\n\n      const programId = transLog.programId\n\n      if (programId !== swapAddress) continue\n\n      const time = new Date(transLog.blockTime * 1000)\n\n      historyItem.time = moment(time).format('MMM DD, YYYY HH:mm')\n      historyItem.amountFrom = firstAction.destination\n        ? Number(\n            utils.undecimalize(\n              BigInt(firstAction.amount),\n              firstAction.destination.decimals,\n            ),\n          )\n        : undefined\n      historyItem.amountTo = lastAction?.destination\n        ? Number(\n            utils.undecimalize(\n              BigInt(lastAction.amount),\n              lastAction.destination.decimals,\n            ),\n          )\n        : undefined\n\n      historyItem.from = firstAction.destination?.mint\n      historyItem.to = lastAction?.destination?.mint\n      historyItem.transactionId = transLog.signature\n      historyItem.key = transLog.signature\n      historyItem.status =\n        !firstAction.destination || !lastAction?.destination\n          ? 'failed'\n          : 'success'\n      history.push(historyItem)\n    }\n    return { historySwap: history }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      fetchHistorySwap.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Card, Col, Row, Typography, Table, Button } from 'antd'\nimport { HISTORY_COLUMN } from './column'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { fetchHistorySwap } from 'app/model/history.controller'\nimport { AppDispatch, AppState } from 'app/model'\n\nimport './index.less'\n\nconst ROW_PER_PAGE = 5\nconst LIMIT_IN_STORE = 15\nconst TABLE_HEIGHT = 462\n\nconst History = () => {\n  const [amountRow, setAmountRow] = useState(ROW_PER_PAGE)\n  const [loading, setLoading] = useState(false)\n\n  const { historySwap } = useSelector((state: AppState) => state.history)\n  const dispatch = useDispatch<AppDispatch>()\n\n  const fetchHistory = useCallback(async () => {\n    setLoading(true)\n    await dispatch(fetchHistorySwap({})).unwrap()\n    setLoading(false)\n  }, [dispatch])\n\n  useEffect(() => {\n    fetchHistory()\n  }, [fetchHistory])\n\n  const onHandleViewMore = () => {\n    const currentTransactionDataLength = historySwap.slice(0, amountRow).length\n\n    if (historySwap.length - currentTransactionDataLength <= LIMIT_IN_STORE) {\n      const lastSignature = historySwap[historySwap.length - 1]?.transactionId\n      dispatch(\n        fetchHistorySwap({\n          lastSignature,\n          isLoadMore: true,\n        }),\n      )\n    }\n    setAmountRow(amountRow + ROW_PER_PAGE)\n  }\n\n  const onHandleRefeshTable = () => {\n    fetchHistory()\n    setAmountRow(ROW_PER_PAGE)\n  }\n\n  const style = useMemo(() => {\n    return amountRow > 5 ? { height: 'auto' } : { height: TABLE_HEIGHT }\n  }, [amountRow])\n\n  return (\n    <Card bordered={false} style={{ ...style }}>\n      <Row gutter={[16, 24]}>\n        <Col flex=\"auto\">\n          <Typography.Title level={5}>Swap history</Typography.Title>\n        </Col>\n        <Col>\n          <Button onClick={onHandleRefeshTable}>Refresh</Button>\n        </Col>\n        <Col span={24}>\n          <Row justify=\"center\" gutter={[16, 9]}>\n            <Col span={24} style={{ minHeight: 310 }}>\n              <Table\n                columns={HISTORY_COLUMN}\n                dataSource={historySwap.slice(0, amountRow)}\n                loading={loading}\n                pagination={false}\n                rowClassName={(record, index) =>\n                  index % 2 ? 'odd-row' : 'even-row'\n                }\n                scroll={historySwap.length ? { x: 800 } : {}}\n              />\n            </Col>\n            <Col>\n              <Button\n                onClick={onHandleViewMore}\n                type=\"text\"\n                icon={<IonIcon name=\"chevron-down-outline\" />}\n                disabled={amountRow >= historySwap.length}\n              >\n                View more\n              </Button>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default History\n","import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account } from '@senswap/sen-js'\n\nimport { Row, Col } from 'antd'\nimport SwapChart from './chart'\nimport Swap from './swap'\nimport History from './history'\n\nimport { usePool } from 'senhub/providers'\nimport { useMintSelection } from 'app/hooks/useMintSelection'\nimport { AppDispatch } from 'app/model'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { updateAskData } from 'app/model/ask.controller'\nimport { SenLpState } from 'app/constant/senLpState'\nimport 'app/static/styles/index.less'\n\nconst Page = () => {\n  const { pools } = usePool()\n  const dispatch = useDispatch<AppDispatch>()\n  const { state } = useLocation<SenLpState>()\n  const [bid, setBid] = useState('')\n  const [ask, setAsk] = useState('')\n  const bidData = useMintSelection(bid)\n  const askData = useMintSelection(ask)\n  const poolAdress = state?.poolAddress\n\n  /** Check state when user come from sen LP */\n  const checkIsSenLpCome = useCallback(() => {\n    if (!account.isAddress(poolAdress)) return\n    const poolData = pools[poolAdress]\n    if (!poolData) return\n    setBid(poolData?.mint_a)\n    setAsk(poolData?.mint_b)\n  }, [poolAdress, pools])\n\n  useEffect(() => {\n    checkIsSenLpCome()\n  }, [checkIsSenLpCome])\n\n  useEffect(() => {\n    if (\n      !account.isAddress(bidData.accountAddress) ||\n      !account.isAddress(askData.accountAddress)\n    )\n      return\n    dispatch(updateBidData(bidData))\n    dispatch(updateAskData(askData))\n  }, [askData, bidData, dispatch])\n\n  return (\n    <Row gutter={[24, 24]} style={{ paddingBottom: 12 }}>\n      <Col lg={8} md={12} xs={24}>\n        <Swap />\n      </Col>\n      <Col lg={16} md={12} xs={24}>\n        <Row gutter={[24, 24]}>\n          <Col span={24}>\n            <SwapChart />\n          </Col>\n          <Col span={24}>\n            <History />\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Page\n","import { useSelector } from 'react-redux'\n\nimport { Row, Col, Divider, Space, Typography } from 'antd'\nimport PreviewSwap from 'app/components/preview'\nimport IonIcon from 'shared/antd/ionicon'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\n\nimport { AppState } from 'app/model'\n\nconst ConfirmSwap = () => {\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n\n  return (\n    <Row gutter={[16, 24]}>\n      <Col span={24}>\n        <Row align=\"middle\" justify=\"space-between\">\n          <Col>\n            <Space direction=\"vertical\">\n              <Typography.Text>From</Typography.Text>\n              <Space>\n                <MintAvatar mintAddress={bidData.mintInfo?.address || ''} />\n                <Typography.Text>\n                  <MintSymbol mintAddress={bidData.mintInfo?.address || ''} />\n                </Typography.Text>\n              </Space>\n              <Typography.Title level={4}>{bidData.amount}</Typography.Title>\n            </Space>\n          </Col>\n          <Col>\n            <IonIcon name=\"arrow-forward-outline\" style={{ fontSize: 24 }} />\n          </Col>\n          <Col>\n            <Space direction=\"vertical\">\n              <Typography.Text>To</Typography.Text>\n              <Space>\n                <MintAvatar mintAddress={askData.mintInfo?.address || ''} />\n                <Typography.Text>\n                  <MintSymbol mintAddress={askData.mintInfo?.address || ''} />\n                </Typography.Text>\n              </Space>\n              <Typography.Title level={4}>{askData.amount}</Typography.Title>\n            </Space>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Divider style={{ margin: 0 }} />\n      </Col>\n      <Col>\n        <PreviewSwap />\n      </Col>\n    </Row>\n  )\n}\n\nexport default ConfirmSwap\n","import { useMemo, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { DEFAULT_WSOL, utils } from '@senswap/sen-js'\n\nimport { Row, Col, Typography, Space, Button, Popover, Modal } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport PreviewSwap from 'app/components/preview'\nimport ConfirmSwap from './confirmSwap'\nimport SwapButton from 'app/components/swapButton'\nimport SwapAction from 'app/components/swap/swapAction'\n\nimport { AppState } from 'app/model'\nimport usePriceImpact from 'app/hooks/usePriceImpact'\nimport { numeric } from 'shared/util'\nimport useBalance from 'app/hooks/useBalance'\n\nconst Widget = () => {\n  const [visible, setVisible] = useState(false)\n  const {\n    route,\n    bid: {\n      amount: bidAmount,\n      mintInfo: bidMintInfo,\n      accountAddress: bidAccountAddress,\n    },\n    ask: { amount: askAmount },\n    settings: { advanced },\n  } = useSelector((state: AppState) => state)\n  const priceImpact = usePriceImpact()\n  const bidBalance = useBalance(bidAccountAddress)\n\n  const wrapAmount = useMemo(() => {\n    if (!bidMintInfo || !Number(bidAmount)) return BigInt(0)\n    if (bidMintInfo.address !== DEFAULT_WSOL) return BigInt(0)\n    const amount = utils.decimalize(bidAmount, bidMintInfo.decimals)\n    if (amount <= bidBalance) return BigInt(0)\n    return amount - bidBalance\n  }, [bidAmount, bidMintInfo, bidBalance])\n\n  const tooHightImpact = !advanced && priceImpact * 100 > 12.5\n  const disabled =\n    !route?.hops.length ||\n    !parseFloat(bidAmount) ||\n    parseFloat(bidAmount) < 0 ||\n    !parseFloat(askAmount) ||\n    parseFloat(askAmount) < 0\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={24}>\n        <SwapAction spacing={12} />\n      </Col>\n      <Col span={24}>\n        <Row align=\"bottom\">\n          <Col flex=\"auto\">\n            <Popover\n              placement=\"bottomLeft\"\n              content={<PreviewSwap />}\n              trigger=\"click\"\n            >\n              <Space\n                style={{ cursor: 'pointer' }}\n                direction=\"vertical\"\n                size={4}\n              >\n                <Space>\n                  <Typography.Text>\n                    <IonIcon\n                      name=\"information-circle-outline\"\n                      style={{ color: '#7A7B85' }}\n                    />\n                  </Typography.Text>\n                  <Typography.Text type=\"secondary\">\n                    Price impact\n                  </Typography.Text>\n                </Space>\n                <Space>\n                  <Typography.Text style={{ color: '#D72311' }}>\n                    <IonIcon name=\"arrow-down-outline\" />\n                  </Typography.Text>\n                  <Typography.Text style={{ color: '#D72311' }}>\n                    {numeric(Number(priceImpact)).format('0.[0000]%')}\n                  </Typography.Text>\n                </Space>\n              </Space>\n            </Popover>\n          </Col>\n          <Col>\n            <Button\n              onClick={() => setVisible(true)}\n              size=\"large\"\n              block\n              type=\"primary\"\n              disabled={disabled}\n            >\n              Review & Swap\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n      <Modal\n        title={<Typography.Title level={4}> Confirm swap</Typography.Title>}\n        onCancel={() => setVisible(false)}\n        footer={\n          <SwapButton\n            hops={route?.hops || []}\n            wrapAmount={wrapAmount}\n            onCallback={() => setVisible(false)}\n            hightImpact={tooHightImpact}\n            disabled={disabled || tooHightImpact}\n          />\n        }\n        visible={visible}\n      >\n        <ConfirmSwap />\n      </Modal>\n    </Row>\n  )\n}\n\nexport default Widget\n","// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint'\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport ask from './ask.controller'\nimport bid from './bid.controller'\nimport settings from './settings.controller'\nimport route from './route.controller'\nimport history from './history.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools('myapp'),\n  reducer: {\n    ask,\n    bid,\n    settings,\n    route,\n    history,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport {\n  WalletProvider,\n  UIProvider,\n  AccountProvider,\n  PoolProvider,\n  MintProvider,\n} from 'senhub/providers'\n\nimport PageView from 'app/page'\nimport WidgetView from 'app/widget'\n\nimport model from 'app/model'\nimport configs from 'app/configs'\n\nimport 'app/static/styles/dark.less'\nimport 'app/static/styles/light.less'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <MintProvider>\n        <PoolProvider>\n          <AccountProvider>\n            <WalletProvider>\n              <Provider store={model}>\n                <PageView />\n              </Provider>\n            </WalletProvider>\n          </AccountProvider>\n        </PoolProvider>\n      </MintProvider>\n    </UIProvider>\n  )\n}\n\nexport const widgetConfig: WidgetConfig = {\n  size: 'small',\n  type: 'solid',\n}\n\nexport const Widget = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <MintProvider>\n        <PoolProvider>\n          <AccountProvider>\n            <WalletProvider>\n              <Provider store={model}>\n                <WidgetView />\n              </Provider>\n            </WalletProvider>\n          </AccountProvider>\n        </PoolProvider>\n      </MintProvider>\n    </UIProvider>\n  )\n}\n","import { net, env } from 'shared/runtime'\nimport sol from './sol.config'\nimport register from './register.config'\n\nconst configs = {\n  sol: sol[net],\n  register: register[env],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_NAME !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string' ||\n  typeof process.env.REACT_APP_SENHUB !== 'string'\n)\n  throw new Error(\n    'Please add REACT_APP_ID, REACT_APP_NAME, REACT_APP_URL in .env.local!',\n  )\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  defaultAppId: string\n  extra: SenReg\n  senreg: string\n}\n\nconst DEFAULT_APP_ID = 'senhub'\nconst devApp = {\n  [process.env.REACT_APP_ID]: {\n    url: process.env.REACT_APP_URL,\n    appId: process.env.REACT_APP_ID,\n    name: process.env.REACT_APP_NAME,\n    author: {\n      name: process.env.REACT_APP_AUTHOR_NAME || '',\n      email: process.env.REACT_APP_AUTHOR_EMAIL || '',\n    },\n    supportedViews: (process.env.REACT_APP_SUPPORTED_VIEWS || '')\n      .split(',')\n      .map((view) => view.trim())\n      .filter((view) => ['page', 'widget'].includes(view)) as Array<\n      'widget' | 'page'\n    >,\n    tags: (process.env.REACT_APP_TAGS || '')\n      .split(',')\n      .map((tag) => tag.trim()),\n    description: process.env.REACT_APP_DESCRIPTION || '',\n    verified: false,\n  },\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: {},\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\nconst SOLVARS = {\n  spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n  splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n}\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  chainId: 101 | 102 | 103\n  sntrAddress: string\n  sntrPoolAddress: string\n  swapAddress: string\n  taxmanAddress: string\n} & typeof SOLVARS\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    ...SOLVARS,\n    node: 'https://api.devnet.solana.com',\n    chainId: 103,\n    sntrAddress: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n    sntrPoolAddress: '3EUPL7YQLbU6DNU5LZeQeHPXTf1MigJ2yASXA9rH5Ku4',\n    swapAddress: '4erFSLP7oBFSVC1t35jdxmbfxEhYCKfoM6XdG2BLR3UF',\n    taxmanAddress: '8UaZw2jDhJzv5V53569JbCd3bD4BnyCfBH3sjwgajGS9',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    ...SOLVARS,\n    node: 'https://api.testnet.solana.com',\n    chainId: 102,\n    sntrAddress: '',\n    sntrPoolAddress: '',\n    swapAddress: '',\n    taxmanAddress: '',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    ...SOLVARS,\n    node: 'https://api.mainnet-beta.solana.com',\n    chainId: 101,\n    sntrAddress: 'SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M',\n    sntrPoolAddress: 'Aa3WZX7Xunfebp2MuAcz9CNw8TYTDL7mVrmb11rjyVm6',\n    swapAddress: 'SSW7ooZ1EbEognq5GosbygA3uWW1Hq1NsFq6TsftCFV',\n    taxmanAddress: '9doo2HZQEmh2NgfT3Yx12M89aoBheycYqH1eaR5gKb3e',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","// Pseudo native sol info\n// It's for all networks\nexport const sol = (chainId: 101 | 102 | 103) => ({\n  symbol: 'SOL',\n  name: 'Solana',\n  address: '11111111111111111111111111111111',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'solana',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png',\n})\n\n// Pseudo SNTR info\n// Only for testnet and mainnet\nexport const sntr = (chainId: 102 | 103) => ({\n  symbol: 'SNTR',\n  name: 'Sentre',\n  address: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'sentre',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M/logo.png',\n})\n\n// Pseudo token infos for devnet\nconst supplementary = [\n  sol(103),\n  sntr(103),\n  {\n    symbol: 'wBTC',\n    name: 'Wrapped Bitcoin',\n    address: '8jk4eJymMfNZV9mkRNxJEt2VJ3pRvdJvD5FE94GXGBPM',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'bitcoin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/qfnqNqs3nCAHjnyCgLRDbBtq4p2MtHZxw8YjSyYhPoL/logo.png',\n  },\n  {\n    symbol: 'wETH',\n    name: 'Ethereum',\n    address: '27hdcZv7RtuMp75vupThR3T4KLsL61t476eosMdoec4c',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'ethereum',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/FeGn77dhg1KXRRFeSwwMiykZnZPw5JXW6naf2aQgZDQf/logo.png',\n  },\n  {\n    symbol: 'UNI',\n    name: 'Uniswap',\n    address: 'FVZFSXu3yn17YdcxLD72TFDUqkdE5xZvcW18EUpRQEbe',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'uniswap',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/3MVa4e32PaKmPxYUQ6n8vFkWtCma68Ld7e7fTktWDueQ/logo.png',\n  },\n  {\n    symbol: 'USDC',\n    name: 'USD Coin',\n    address: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'usd-coin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png',\n  },\n]\n\nexport default supplementary\n","import { Document } from 'flexsearch'\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry'\n\nimport { net } from 'shared/runtime'\nimport configs from 'os/configs'\nimport supplementary, { sntr, sol } from './supplementary'\n\nconst {\n  sol: { chainId },\n} = configs\nconst DELIMITER = /[\\W_]+/g\nconst PRESET = {\n  tokenize: 'full',\n  context: true,\n  minlength: 3,\n}\nconst DOCUMENT = {\n  document: {\n    id: 'address',\n    index: [\n      { field: 'symbol', ...PRESET },\n      { field: 'name', ...PRESET },\n    ],\n  },\n}\n\nclass TokenProvider {\n  private tokenMap: Map<string, TokenInfo>\n  private engine: typeof Document | undefined\n  readonly chainId: typeof chainId\n  readonly cluster: typeof net\n  private loading: boolean\n  private queue: Array<any>\n\n  constructor() {\n    this.tokenMap = new Map<string, TokenInfo>()\n    this.engine = undefined\n    this.chainId = chainId\n    this.cluster = net\n    this.loading = false\n    this.queue = []\n    // Init\n    this._init()\n  }\n\n  private _init = async (): Promise<[Map<string, TokenInfo>, any]> => {\n    if (this.tokenMap.size) return [this.tokenMap, this.engine]\n    return new Promise(async (resolve) => {\n      // Queue of getters to avoid race condition of multiple _init calling\n      if (this.loading) return this.queue.push(resolve)\n      // Start\n      this.loading = true\n      // Build token list\n      let tokenList = await (await new TokenListProvider().resolve())\n        .filterByChainId(this.chainId)\n        .getList()\n      if (this.cluster === 'devnet') tokenList = tokenList.concat(supplementary)\n      if (this.cluster === 'testnet')\n        tokenList = tokenList.concat([sntr(102), sol(102)])\n      else tokenList = tokenList.concat([sol(101)])\n      // Build token map\n      tokenList.forEach((token) => this.tokenMap.set(token.address, token))\n      // Build search engine\n      this.engine = new Document(DOCUMENT)\n      this.tokenMap.forEach(({ address, ...doc }) =>\n        this.engine.add(address, doc),\n      )\n      // Resolve the main getter\n      resolve([this.tokenMap, this.engine])\n      // Resolve the rest of getters\n      while (this.queue.length) this.queue.shift()([this.tokenMap, this.engine])\n      // Finish\n      this.loading = false\n    })\n  }\n\n  all = async (): Promise<TokenInfo[]> => {\n    const [tokenMap] = await this._init()\n    return Array.from(tokenMap.values())\n  }\n\n  findByAddress = async (addr: string): Promise<TokenInfo | undefined> => {\n    const [tokenMap] = await this._init()\n    return tokenMap.get(addr)\n  }\n\n  find = async (keyword: string, limit?: 10): Promise<TokenInfo[]> => {\n    const [tokenMap, engine] = await this._init()\n    let tokens: TokenInfo[] = []\n    keyword.split(DELIMITER).forEach((key) => {\n      const raw: Array<{ result: string[] }> = engine.search(key, limit)\n      return raw.forEach(({ result }) => {\n        return result.forEach((id: string) => {\n          if (tokens.findIndex(({ address }) => address === id) < 0) {\n            const token = tokenMap.get(id)\n            if (token) tokens.push(token)\n          }\n        })\n      })\n    })\n    return tokens\n  }\n}\n\nexport default TokenProvider\n","import storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  if (!value) return null\n  try {\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n"],"names":["CUSTOM_ICONS","forwardRef","name","className","props","ref","cln","src","DEFAULT_AVATARS","undefined","mintAddress","size","icon","reversed","avatars","setAvatars","useState","tokenProvider","useMint","pools","usePool","deriveAvatar","useCallback","async","token","findByAddress","address","logoURI","deriveAvatars","account","poolData","Object","values","find","mint_lpt","mint_a","mint_b","Promise","all","map","reverse","avatar","useEffect","Avatar","style","display","whiteSpace","i","backgroundColor","border","DEFAULT_NAME","separator","setName","deriveName","deriveNames","names","join","DEFAULT_SYMBOL","symbol","setSymbol","deriveSymbol","substring","deriveSymbols","symbols","bid","mintInfo","bidMintInfo","ask","askMintInfo","useSelector","state","bidMintAddress","askMintAddress","Space","Typography","DEFAULT_CACHE_CONFIG","ttl","DEFAULT_SINGLE_FLIGHT_CONFIG","limit","calls","time","cache","RequestQueue","constructor","key","resolveQueue","rejectQueue","this","add","resolve","reject","push","resolves","data","length","shift","rejects","error","SingleFlightCache","value","configs","mapCache","set","setTimeout","delete","get","Map","DataLoader","instanceKey","JSON","stringify","mapInstance","has","instance","newSingleFlight","SingleFlight","requestKey","callback","singleFlight","getSingleFlight","newRequest","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","assign","cacheData","isFetch","request","fetch","validateLimit","addRequestQueue","createTimeLogs","then","response","catch","finally","fetchRequestQueue","clearInterval","setInterval","now","Date","getTime","shortenAddress","num","delimiter","explorer","addressOrTxId","net","numeric","Number","isFinite","numbro","randomColor","seed","opacity","hash","Math","floor","random","charCodeAt","rgb","fetchCGK","ticket","utils","chartData","labels","type","disableAxe","chartId","isRebuildChart","setRebuildChart","formatData","label","background","datasets","chartRef","useRef","getBackground","ctx","current","canvas","getContext","gradient","createLinearGradient","addColorStop","chartInstance","dataInstace","compareData","isEqual","update","id","height","Chart","options","responsive","maintainAspectRatio","scales","xAxes","gridLines","drawBorder","ticks","yAxes","beginAtZero","maxTicksLimit","index","format","plugins","legend","hover","onHover","event","elements","target","document","getElementById","cursor","Row","align","justify","Col","Empty","TokenProvider","fetchMarketChart","params","axios","method","url","days","interval","prices","val","Interval","CHART_DATA_CONFIG","day","amount","unit","week","month","year","MARKET_CONFIG","CHART_CONFIGS","setChartData","bidData","askData","swapChartConfigs","borderColor","borderRadius","pointRadius","tooltip","pointHitRadius","pointHoverRadius","parseChartDay","marketData","displayTime","moment","chartTime","unshift","subtract","parseChartDaily","fetchChartData","bidTokenInfo","askTokenInfo","bidTicket","extensions","coingeckoId","askTicket","compareAddress","accountAddress","marketConfig","bidChartData","askChartData","idx","bidChart","askChart","price","priceUI","Card","bordered","bodyStyle","paddingTop","gutter","flex","Radio","defaultValue","onChange","e","span","level","DECIMALS","BigInt","hops","onCallback","disabled","wrapAmount","hightImpact","loading","setLoading","_bidAmount","_askAmount","slippage","settings","wallet","walletAddress","useWallet","handleSwap","swap","splt","window","sentre","routingAddresses","srcMintAddress","dstMintAddress","poolAddress","srcAddress","deriveAssociatedAddress","dstAddress","bidDecimals","decimals","bidAmount","askDecimals","route","Button","onClick","wrapSol","handleWrapSol","txId","notify","description","open","er","message","block","chainMintAddresses","useMemo","list","hop","Fragment","ORACLE","Swap","curve","hopData","fee_ratio","tax_ratio","bidReserve","extractReserve","askReserve","askAmount","inverseCurve","inverseSwap","reserve_a","reserve_b","Error","findAllRoute","routes","graph","pathTrace","mints","mapPool","forEach","includes","newPathTrace","parseHops","mapPoolData","nextPrice","decimalizedPrice","srcReserve","dstReserve","hopPrice","currentPrice","priceImpact","max","setReversed","reversedPrice","shape","ExtraTypography","content","usePriceImpact","updateBidData","createAsyncThunk","prioritized","reset","getState","priority","prevPriority","refPriority","createSlice","initialState","poolAddresses","reducers","extraReducers","builder","addCase","fulfilled","payload","accounts","useAccount","lamports","dispatch","useDispatch","bidAccountAddress","advanced","bidBalance","useBalance","DEFAULT_WSOL","tooHightImpact","parseFloat","DEFAULT_DATA","priceChange","rank","totalVolume","cgkData","setCgkData","fetchCgkData","MintPoolInfo","tvl","direction","bidCgk","useMintCgk","askCgk","bidPoolData","askPoolData","getMintTVL","bidTVL","askTVL","wrap","Divider","spacing","iconSize","fontSize","color","SentreIcon","Option","active","Tooltip","placement","title","Switch","checkedChildren","unCheckedChildren","checked","textAlign","NAME","updateSettings","padding","Popover","overlayInnerStyle","width","marginTop","marginBottom","trigger","isSupportedMint","keyword","setKeyword","search","filter","Input","placeholder","suffix","marginRight","hoverable","marginLeft","margin","mintAddresses","setMintAddresses","getDecimals","supportedMintAddresses","flat","item","pos","self","indexOf","onMints","getAvailablePoolAddresses","keys","onMint","overflow","currentMintAddress","visible","setVisible","history","useHistory","useLocation","forceCheck","Modal","onCancel","closeIcon","footer","destroyOnClose","centered","selectionInfo","replace","location","timeoutId","onValue","setError","setCursor","innerRef","onAmount","onError","clearTimeout","test","toString","setSelectionRange","selectionStart","shared","appId","process","senhub","devnet","node","spltAddress","splataAddress","testnet","mainnet","bidDefault","askDefault","wormholeAddress","manifest","development","staging","production","env","sol","wormhole","updateAskData","DEFAULT_INFO","useMintSelection","setSelectionInfo","getSelectionInfo","setDecimals","fetchDecimals","balance","selectionDefault","poolAdress","useMintDecimals","maxBalance","prefix","SOL_BRIDGE_ADDRESS","SOL_TOKEN_BRIDGE_ADDRESS","getSolNetwork","storage","checkAttestedWormhole","solContext","solNetWork","chainId","CHAIN_ID_SOLANA","tokenBridgeAddress","bridgeAddress","getSolContext","getIsWrappedAssetSol","connection","WORMHOLE_COLOR","wormholeSupported","setWormholeSupported","Tag","estimateFee","amounts","updateRoute","prevRoute","bestRoute","setBestRoute","originalRoute","onSwitch","bidPriority","bidRest","askPriority","askRest","updateData","findRoute","bidPoolAddresses","askPoolAddresses","bidPools","askPools","allRoutes","Array","pool","mint","buildPoolGraph","maxAskAmount","findBestRouteFromBid","reversedHops","reversedHop","minBidAmount","findBestRouteFromAsk","setRoute","STATUS_COLOR","success","pending","failed","tag","setColorTag","textTransform","FORMAT_AMOUNT","HISTORY_COLUMN","dataIndex","render","text","fontWeight","record","from","amountFrom","to","amountTo","status","TransLog","programId","programInfo","signature","blockTime","owner","actionType","actionTransfers","programTransfer","ActionInfo","preBalance","postBalance","ActionTransfer","source","destination","DEFAULT_LIMIT","Solana","conn","lastSignature","before","getConfirmedSignaturesForAddress2","signatures","confirmedTransactions","promiseTransGroup","offset","skip","signaturesGroup","slice","getParsedConfirmedTransactions","transGroups","transGroup","concat","currentTime","secondFrom","secondTo","programPublicKey","PublicKey","isStop","confirmedSignatureInfos","fetchSignatures","info","fetchConfirmTransaction","ParsedType","SECOND_PER_MILLISECOND","TimeFormat","DateHelper","milliSeconds","valueOf","setMilliSeconds","seconds","date","ymd","YMD","ymdFrom","ymdTo","dates","dateFrom","fromYmd","dateTo","addDay","dateFormat","subtractDay","dayAmount","fromSeconds","TransLogService","solana","funcFilter","transLogs","lastSignatureTmp","confirmedTrans","fetchTransactions","trans","transaction","log","parseTransLog","meta","postTokenBalances","preTokenBalances","postBalances","preBalances","innerInstructionData","innerInstructions","instructions","instructionData","transLog","mapAccount","parseAccountInfo","accountKeys","isParsedInstruction","parseAction","parsed","actions","actionTransfer","action","actionParsed","Transfer","parsedAction","parseActionTransfer","parsedTransfer","amountTransfer","mapAccountInfo","accountIndex","uiTokenAmount","pubkey","accountData","String","filterFunction","fetchHistorySwap","isLoadMore","swapAddress","historySwap","myWalletAddress","getAddress","transLogService","transLogsData","collect","historyItem","lastAction","firstAction","transactionId","amountRow","setAmountRow","fetchHistory","unwrap","minHeight","Table","columns","dataSource","pagination","rowClassName","scroll","x","currentTransactionDataLength","setBid","setAsk","checkIsSenLpCome","paddingBottom","lg","md","xs","prototype","toJSON","bigintSerializationMiddleware","serializableCheck","isSerializable","isArray","obj","proto","getPrototypeOf","isPlainObject","configureStore","middleware","getDefaultMiddleware","devTools","reducer","Page","UIProvider","antd","MintProvider","PoolProvider","AccountProvider","WalletProvider","Provider","store","model","widgetConfig","Widget","register","DEFAULT_APP_ID","devApp","author","email","supportedViews","split","view","trim","tags","verified","defaultAppId","extra","senreg","SOLVARS","sntrAddress","sntrPoolAddress","taxmanAddress","sntr","DELIMITER","PRESET","tokenize","context","minlength","DOCUMENT","field","tokenMap","engine","cluster","queue","_init","tokenList","TokenListProvider","filterByChainId","getList","supplementary","Document","doc","addr","tokens","result","findIndex","getNetwork","KEY","driver","localStorage","convert","parse","getItem","setItem","clear"],"sourceRoot":""}