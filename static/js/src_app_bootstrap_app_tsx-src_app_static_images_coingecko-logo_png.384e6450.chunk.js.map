{"version":3,"file":"static/js/src_app_bootstrap_app_tsx-src_app_static_images_coingecko-logo_png.384e6450.chunk.js","mappings":"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","sources":["app/static/images/logo.svg","app/static.app.tsx","shared/antd/mint/mintAvatar.tsx","shared/antd/mint/mintName.tsx","shared/antd/mint/mintSymbol.tsx","shared/antd/mint/mintSelection/mintTag.tsx","shared/antd/mint/mintSelection/mintCard.tsx","shared/antd/mint/mintSelection/loadMore.tsx","shared/antd/mint/mintSelection/hooks/useAllMintAddresses.ts","shared/hooks/useSortMints.ts","shared/antd/mint/mintSelection/hooks/useRecommendedMints.ts","shared/antd/mint/mintSelection/hooks/useSearchedMints.ts","shared/antd/mint/mintSelection/index.tsx","app/view/chart/cross.tsx","app/view/chart/chart.tsx","app/view/chart/chartEmpty.tsx","app/components/poweredByCoingecko.tsx","app/helper/cgk.ts","app/view/chart/index.tsx","app/static/images/jupiter-logo.svg","app/components/poweredByJupiter.tsx","app/model/route.controller.ts","app/components/preview/routeAvatar.tsx","app/components/preview/price.tsx","app/constant/swap.ts","app/helper/utils.ts","shared/hooks/useMintDecimals.ts","shared/hooks/useAccountBalance.ts","app/hooks/useSwapStatus.ts","app/components/preview/index.tsx","app/hooks/useMintCgk.ts","app/configs/manifest.config.ts","app/configs/sol.config.ts","app/configs/swap.config.ts","app/configs/wormhole.config.ts","app/configs/route.config.ts","app/configs/index.ts","app/components/validateSwap/index.tsx","app/hooks/senswap/useHandleSwap.ts","app/helper/oracle.ts","app/helper/router.ts","app/hooks/usePoolTvl.ts","app/hooks/useMintTotalValue.ts","app/hooks/senswap/useBestRoute.ts","app/hooks/senswap/index.ts","app/components/swapAction/swapButtonSen.tsx","app/model/bid.controller.ts","app/model/ask.controller.ts","app/hooks/jupiter/jupiterWalletWrapper.ts","app/hooks/jupiter/useJupiterAggregator.ts","app/components/swapAction/swapButtonJup.tsx","app/components/swapAction/index.tsx","app/hooks/useWrapSol.ts","app/components/confirmSwap.tsx","app/view/swap/swapReview.tsx","app/view/swap/poolInfo/mintPoolInfo.tsx","app/view/swap/poolInfo/index.tsx","app/constant/ethConfig.ts","app/constant/solConfig.ts","app/helper/wormhole.ts","app/components/bid/wormholeSupported.tsx","app/static/images/sen.svg","app/components/poweredBySentre.tsx","app/components/settings/slippage.tsx","app/components/settings/advanced.tsx","app/model/settings.controller.ts","app/components/settings/enhancement.tsx","app/components/settings/index.tsx","shared/antd/numericInput.tsx","app/hooks/useMintSelection.ts","app/components/ask/index.tsx","app/components/bid/index.tsx","app/components/swapForm/swapInput.tsx","app/components/swapForm/index.tsx","app/view/swap/index.tsx","app/view/history/statusTag.tsx","app/view/history/column.tsx","app/lib/stat/helpers/date.ts","app/lib/stat/entities/trans-log.ts","app/lib/stat/adapters/solana/client.ts","app/lib/stat/constants/transaction.ts","app/lib/stat/logic/translogSwap.ts","app/lib/stat/logic/translog.ts","app/lib/stat/constants/sol.ts","app/lib/stat/logic/swap/swap.ts","app/model/history.controller.ts","app/view/history/index.tsx","app/view/index.tsx","app/model/devTools.ts","app/model/index.ts","app/bootstrap.app.tsx","shared/dataloader/constant.ts","shared/dataloader/request.ts","shared/dataloader/cache.ts","shared/dataloader/index.ts","shared/pdb/index.ts","shared/pdb/ipfs.ts","shared/runtime.ts","shared/storage.ts","shared/tokenProvider/supplementary.ts","shared/tokenProvider/index.ts","shared/util.ts"],"sourcesContent":["var _path, _path2, _path3, _path4, _defs;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgLogo(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 257,\n    height: 256,\n    viewBox: \"0 0 257 256\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0.622803 60C0.622803 26.8629 27.4857 0 60.6228 0H196.623C229.76 0 256.623 26.8629 256.623 60V196C256.623 229.137 229.76 256 196.623 256H60.6228C27.4857 256 0.622803 229.137 0.622803 196V60Z\",\n    fill: \"url(#paint0_linear_1991_5334)\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    opacity: 0.5,\n    d: \"M173.411 88.5162C173.411 85.8961 170.825 53.5885 173.411 74.5451C175.067 72.6924 178.384 68.7581 180.726 68.7581C183.067 68.7581 189.414 66.9054 191.069 68.7581C192.725 70.6108 191.069 85.8961 191.069 88.5162L191.069 167.549C191.069 178.029 187.349 188.08 180.726 195.491C174.103 202.902 165.12 207.065 155.753 207.065C146.387 207.065 137.404 202.902 130.781 195.491C124.158 188.08 120.438 178.029 120.438 167.549L120.438 88.5162C120.438 83.2761 118.577 78.2505 115.266 74.5451C111.954 70.8398 107.463 68.7581 102.78 68.7581C98.0965 68.7581 93.6051 70.8398 90.2936 74.5451C86.9821 78.2505 85.1217 83.276 85.1217 88.5162L85.1217 177.428C85.1217 180.048 84.1915 182.561 82.5358 184.413C80.88 186.266 78.6343 187.307 76.2928 187.307C73.9512 187.307 71.7055 186.266 70.0497 184.413C68.394 182.561 67.4638 180.048 67.4638 177.428L67.4638 88.5162C67.4638 78.0359 71.1846 67.9848 77.8076 60.574C84.4306 53.1633 93.4133 49 102.78 49C112.146 49 121.129 53.1633 127.752 60.574C134.375 67.9848 138.096 78.0359 138.096 88.5162L138.096 167.549C138.096 172.789 139.956 177.814 143.267 181.52C146.579 185.225 151.07 187.307 155.753 187.307C160.437 187.307 164.928 185.225 168.239 181.52C171.551 177.814 173.411 172.789 173.411 167.549L173.411 88.5162Z\",\n    fill: \"white\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M161.626 95.3311C159.955 97.1241 157.717 98.1163 155.394 98.0939C153.071 98.0714 150.849 97.0362 149.206 95.2112C147.563 93.3861 146.632 90.9172 146.611 88.3363C146.591 85.7554 147.484 83.2689 149.098 81.4124L175.677 51.8821C177.338 50.0367 179.591 49.0001 181.941 49.0001C184.29 49.0001 186.543 50.0367 188.204 51.8821L214.783 81.4124C216.397 83.2689 217.29 85.7554 217.27 88.3363C217.249 90.9172 216.318 93.3861 214.675 95.2112C213.032 97.0362 210.81 98.0714 208.487 98.0939C206.164 98.1163 203.927 97.1241 202.256 95.3311L181.941 72.76L161.626 95.3311Z\",\n    fill: \"white\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M55.6986 160.846C54.0422 159.005 51.7959 157.971 49.4538 157.971C47.1116 157.971 44.8653 159.005 43.2089 160.846C41.553 162.687 40.6228 165.185 40.6228 167.788C40.6228 170.392 41.553 172.889 43.2089 174.731L69.7075 204.19C71.3639 206.031 73.6101 207.065 75.9523 207.065C78.2944 207.065 80.5407 206.031 82.1971 204.19L108.696 174.731C110.352 172.889 111.282 170.392 111.282 167.788C111.282 165.185 110.352 162.687 108.696 160.846C107.039 159.005 104.793 157.971 102.451 157.971C100.109 157.971 97.8624 159.005 96.206 160.846L75.9523 183.362L55.6986 160.846Z\",\n    fill: \"white\"\n  })), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint0_linear_1991_5334\",\n    x1: 0.999999,\n    y1: -0.00000114739,\n    x2: 257,\n    y2: 256,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#3E8C6A\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#5C997E\"\n  })))));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgLogo);\nexport default __webpack_public_path__ + \"static/media/logo.d86456fa078e55b87bfac60a8309fe54.svg\";\nexport { ForwardRef as ReactComponent };","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"logo\", {\n  enumerable: true,\n  get: function () {\n    return _logo.default;\n  }\n});\nexports.panels = void 0;\nObject.defineProperty(exports, \"readme\", {\n  enumerable: true,\n  get: function () {\n    return _README.default;\n  }\n});\n\nvar _panel = _interopRequireDefault(require(\"./static/images/panel.png\"));\n\nvar _panel2 = _interopRequireDefault(require(\"./static/images/panel1.png\"));\n\nvar _panel3 = _interopRequireDefault(require(\"./static/images/panel2.png\"));\n\nvar _logo = _interopRequireDefault(require(\"./static/images/logo.svg\"));\n\nvar _README = _interopRequireDefault(require(\"./static/docs/README.md\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst panels = [_panel.default, _panel2.default, _panel3.default];\nexports.panels = panels;","import { ReactNode, useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\nimport { useMint, usePool } from '@senhub/providers'\n\nimport { Avatar } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nconst DEFAULT_AVATARS: Array<string | undefined> = [undefined]\n\nexport type MintAvatarProps = {\n  mintAddress: string\n  size?: number\n  icon?: ReactNode\n  reversed?: boolean\n}\n\n/**\n * Mint/Token avatar, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param size - Avatar size. Default 24px.\n * @param icon - Fallback icon for unknown token\n * @param reversed - (Optional) The default LP token avatar is A-B. The reversed is to change it to B-A\n * @returns name\n */\nconst MintAvatar = ({\n  mintAddress,\n  size = 24,\n  icon = <IonIcon name=\"diamond-outline\" />,\n  reversed = false,\n  ...props\n}: MintAvatarProps) => {\n  const [avatars, setAvatars] = useState(DEFAULT_AVATARS)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveAvatar = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.logoURI) return token.logoURI\n      return undefined\n    },\n    [tokenProvider],\n  )\n\n  const deriveAvatars = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setAvatars(DEFAULT_AVATARS)\n    // LP mint\n    const poolData = Object.values(pools || {}).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const avatars = await Promise.all([mint_a, mint_b].map(deriveAvatar))\n      if (reversed) avatars.reverse()\n      return setAvatars(avatars)\n    }\n    // Normal mint\n    const avatar = await deriveAvatar(mintAddress)\n    return setAvatars([avatar])\n  }, [mintAddress, reversed, deriveAvatar, pools])\n\n  useEffect(() => {\n    deriveAvatars()\n  }, [deriveAvatars])\n\n  if (avatars.length === 1)\n    return (\n      <Avatar\n        src={avatars[0]}\n        size={size}\n        style={{ backgroundColor: '#2D3355', border: 'none' }}\n        {...props}\n      >\n        {icon}\n      </Avatar>\n    )\n  return (\n    <Avatar.Group style={{ display: 'block', whiteSpace: 'nowrap' }} {...props}>\n      {avatars.map((avatar, i) => (\n        <Avatar\n          key={i}\n          src={avatar}\n          size={size}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n        >\n          {icon}\n        </Avatar>\n      ))}\n    </Avatar.Group>\n  )\n}\n\nexport default MintAvatar\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\nimport { useMint, usePool } from '@senhub/providers'\n\nconst DEFAULT_NAME = 'Unknown Token'\n\n/**\n * Mint/Token name, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param separator - (Optional) In case of LP tokens, the names is combined by 2 token names. The separator is to separate them.\n * @param reversed - (Optional) The default LP token names is A-B. The reversed is to change it to B-A\n * @returns name\n */\nconst MintName = ({\n  mintAddress,\n  separator = ' • ',\n  reversed = false,\n}: {\n  mintAddress: string\n  separator?: string\n  reversed?: boolean\n}) => {\n  const [name, setName] = useState(DEFAULT_NAME)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveName = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.name) return token.name\n      return DEFAULT_NAME\n    },\n    [tokenProvider],\n  )\n\n  const deriveNames = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setName(DEFAULT_NAME)\n    // LP mint\n    const poolData = Object.values(pools || {}).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const names = await Promise.all([mint_a, mint_b].map(deriveName))\n      if (reversed) names.reverse()\n      return setName(`${names.join(separator)} LP`)\n    }\n    // Normal mint\n    const name = await deriveName(mintAddress)\n    return setName(name)\n  }, [mintAddress, reversed, deriveName, pools, separator])\n\n  useEffect(() => {\n    deriveNames()\n  }, [deriveNames])\n\n  return <span>{name}</span>\n}\n\nexport default MintName\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\nimport { useMint, usePool } from '@senhub/providers'\n\nconst DEFAULT_SYMBOL = 'TOKN'\n\n/**\n * Mint/Token symbol, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param separator - (Optional) In case of LP tokens, the symbols is combined by 2 token symbols. The separator is to separate them.\n * @param reversed - (Optional) The default LP token symbol is A-B. The reversed is to change it to B-A\n * @returns symbol\n */\nconst MintSymbol = ({\n  mintAddress,\n  separator = ' • ',\n  reversed = false,\n}: {\n  mintAddress: string\n  separator?: string\n  reversed?: boolean\n}) => {\n  const [symbol, setSymbol] = useState(DEFAULT_SYMBOL)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveSymbol = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.symbol) return token.symbol\n      return address.substring(0, 4)\n    },\n    [tokenProvider],\n  )\n\n  const deriveSymbols = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setSymbol(DEFAULT_SYMBOL)\n    // LP mint\n    const poolData = Object.values(pools || {}).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const symbols = await Promise.all([mint_a, mint_b].map(deriveSymbol))\n      if (reversed) symbols.reverse()\n      return setSymbol(symbols.join(separator))\n    }\n    // Normal mint\n    const symbol = await deriveSymbol(mintAddress)\n    return setSymbol(symbol)\n  }, [mintAddress, reversed, deriveSymbol, pools, separator])\n\n  useEffect(() => {\n    deriveSymbols()\n  }, [deriveSymbols])\n\n  return <span>{symbol}</span>\n}\n\nexport default MintSymbol\n","import { Card, Space, Typography } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\nimport { MintAvatar } from 'shared/antd/mint'\nimport MintSymbol from '../mintSymbol'\n\nimport { randomColor } from 'shared/util'\n\nimport './index.less'\n\nexport type MintTagProps = {\n  mintAddress: string\n  onClick?: (mintAddress: string) => void\n  active?: boolean\n}\n\nconst MintTag = ({\n  mintAddress,\n  onClick = () => {},\n  active = false,\n}: MintTagProps) => {\n  return (\n    <Card\n      bodyStyle={{\n        padding: 8,\n        cursor: 'pointer',\n      }}\n      style={{\n        borderRadius: 8,\n        backgroundColor: randomColor(mintAddress, 0.2),\n      }}\n      className=\"mint-tag\"\n      bordered={Boolean(active)}\n      onClick={() => onClick(mintAddress)}\n    >\n      <Space size={8} style={{ width: '100%', justifyContent: 'center' }}>\n        <MintAvatar mintAddress={mintAddress} />\n        <Typography.Text\n          ellipsis={true}\n          style={{ color: randomColor(mintAddress) }}\n        >\n          <MintSymbol mintAddress={mintAddress} />\n        </Typography.Text>\n        {active && <IonIcon name=\"checkmark-outline\" />}\n      </Space>\n    </Card>\n  )\n}\nexport default MintTag\n","import { Card, Col, Row, Space, Typography } from 'antd'\nimport { MintAvatar, MintName, MintSymbol } from 'shared/antd/mint'\n\nexport type MintSelectionProps = {\n  mintAddress: string\n  onClick?: (mintAddress: string) => void\n}\n\nconst MintCard = ({ mintAddress, onClick = () => {} }: MintSelectionProps) => {\n  return (\n    <Card\n      bodyStyle={{ padding: 8 }}\n      style={{ boxShadow: 'unset', cursor: 'pointer' }}\n      bordered={false}\n      onClick={() => onClick(mintAddress)}\n    >\n      <Row gutter={[16, 16]} align=\"middle\">\n        <Col>\n          <MintAvatar mintAddress={mintAddress} size={36} />\n        </Col>\n        <Col>\n          <Space direction=\"vertical\" size={0}>\n            <Typography.Text>\n              <MintSymbol mintAddress={mintAddress} />\n            </Typography.Text>\n            <Typography.Text type=\"secondary\" className=\"caption\">\n              <MintName mintAddress={mintAddress} />\n            </Typography.Text>\n          </Space>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default MintCard\n","import { Fragment, useEffect } from 'react'\nimport LazyLoad from '@sentre/react-lazyload'\n\ntype PropsLoadMore = { callback: () => void }\n\nconst LoadMore = ({ callback }: PropsLoadMore) => {\n  useEffect(() => {\n    callback()\n  }, [callback])\n\n  return <Fragment />\n}\nconst WrapLoadMore = (props: PropsLoadMore) => {\n  return (\n    <LazyLoad overflow>\n      <LoadMore {...props} />\n    </LazyLoad>\n  )\n}\nexport default WrapLoadMore\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from '@senhub/providers'\n\nexport const useAllMintAddresses = () => {\n  const [allMintAddresses, setAllMintAddresses] = useState<string[]>([])\n  const { tokenProvider } = useMint()\n\n  const getRecommendedMintAddresses = useCallback(async () => {\n    const allMintAddresses = (await tokenProvider.all()).map(\n      ({ address }) => address,\n    )\n    const addresses = allMintAddresses.filter((mintAddress) =>\n      allMintAddresses.includes(mintAddress),\n    )\n    return setAllMintAddresses(addresses)\n  }, [tokenProvider])\n\n  useEffect(() => {\n    getRecommendedMintAddresses()\n  }, [getRecommendedMintAddresses])\n\n  return allMintAddresses\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useAccount } from '@senhub/providers'\n\nexport const useSortMints = (mints: string[]) => {\n  const [sortedMints, setSortedMints] = useState<string[]>([])\n  const { accounts } = useAccount()\n\n  const mapMintAmounts = useMemo(() => {\n    const mapMints: Record<string, number> = {}\n    for (const account of Object.values(accounts)) {\n      mapMints[account.mint] = Number(account.amount.toString())\n    }\n    return mapMints\n  }, [accounts])\n\n  const sortMints = useCallback(\n    async (mintAddresses: string[]) => {\n      const sortedMints = mintAddresses.sort((a, b) => {\n        let amountA = mapMintAmounts[a] || -1\n        let amountB = mapMintAmounts[b] || -1\n        return Number(amountB) - Number(amountA)\n      })\n      return setSortedMints(sortedMints)\n    },\n    [mapMintAmounts],\n  )\n  useEffect(() => {\n    sortMints(mints)\n  }, [mints, sortMints])\n\n  return { sortedMints, sortMints }\n}\n","import { useCallback, useEffect, useState } from 'react'\n\nimport { useAllMintAddresses } from './useAllMintAddresses'\nimport { useSortMints } from 'shared/hooks/useSortMints'\nimport { net } from 'shared/runtime'\nimport localStorage from 'shared/storage'\n\nconst LIMIT_ITEM = 8\nconst LOCAL_STORAGE_ID = `${net}:selected_mints`\n\nexport const useRecommendedMints = () => {\n  const [recommendedMints, setRecommendedMints] = useState<string[]>([])\n  const allMintAddresses = useAllMintAddresses()\n  const { sortedMints } = useSortMints(allMintAddresses)\n\n  const getRecommendedMints = useCallback(async () => {\n    let mints: string[] = localStorage.get(LOCAL_STORAGE_ID) || []\n\n    for (const mint of sortedMints) {\n      if (mints.length >= LIMIT_ITEM) break\n      if (mints.includes(mint)) continue\n      mints.push(mint)\n    }\n    return setRecommendedMints(mints.slice(0, LIMIT_ITEM))\n  }, [sortedMints])\n\n  const addRecommendMint = useCallback(\n    async (mintAddress: string) => {\n      const mints = recommendedMints.filter((mint) => mint !== mintAddress)\n      const newMints = [mintAddress, ...mints].slice(0, LIMIT_ITEM)\n      localStorage.set(LOCAL_STORAGE_ID, newMints)\n\n      return setRecommendedMints(newMints)\n    },\n    [recommendedMints],\n  )\n\n  useEffect(() => {\n    getRecommendedMints()\n  }, [getRecommendedMints])\n\n  return {\n    recommendedMints,\n    addRecommendMint,\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from '@senhub/providers'\n\nimport { useAllMintAddresses } from './useAllMintAddresses'\n\nlet searching: NodeJS.Timeout\n\nexport const useSearchedMints = (keyword: string = '', limit: number) => {\n  const [loading, setLoading] = useState(false)\n  const [searchedMints, setSearchedMints] = useState<string[]>([])\n  const { tokenProvider } = useMint()\n  const mints = useAllMintAddresses()\n\n  const search = useCallback(async () => {\n    if (!keyword) {\n      setLoading(false)\n      return setSearchedMints(mints)\n    }\n    if (searching) clearTimeout(searching)\n    setLoading(true)\n    searching = setTimeout(async () => {\n      const addresses = (await tokenProvider.find(keyword, limit)).map(\n        ({ address }) => address,\n      )\n      setLoading(false)\n      return setSearchedMints(addresses)\n    }, 500)\n  }, [keyword, limit, mints, tokenProvider])\n\n  useEffect(() => {\n    search()\n  }, [search])\n\n  return { searchedMints, loading }\n}\n","import {\n  CSSProperties,\n  Fragment,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react'\nimport LazyLoad from '@sentre/react-lazyload'\n\nimport { Button, Empty, Col, Input, Modal, Row, Space } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport MintTag from './mintTag'\nimport MintCard from './mintCard'\nimport LoadMore from './loadMore'\n\nimport { useRecommendedMints } from './hooks/useRecommendedMints'\nimport { useSearchedMints } from './hooks/useSearchedMints'\nimport { useSortMints } from 'shared/hooks/useSortMints'\n\nconst LIMIT = 20\nconst AMOUNT_BEFORE_LOAD_MORE = 5\n\nexport type MintSelectionProps = {\n  value?: string\n  onChange?: (value: string) => void\n  style?: CSSProperties\n  disabled?: boolean\n}\n\nconst MintSelection = ({\n  value = '',\n  onChange = () => {},\n  style = {},\n  disabled = false,\n}: MintSelectionProps) => {\n  const [visible, setVisible] = useState(false)\n  const [keyword, setKeyword] = useState('')\n  const [offset, setOffset] = useState(LIMIT)\n  const { recommendedMints, addRecommendMint } = useRecommendedMints()\n  const { searchedMints, loading } = useSearchedMints(keyword, 0)\n  const { sortedMints } = useSortMints(searchedMints)\n\n  const onSelect = useCallback(\n    (mintAddress: string) => {\n      setVisible(false)\n      onChange(mintAddress)\n      addRecommendMint(mintAddress)\n    },\n    [onChange, addRecommendMint],\n  )\n\n  useEffect(() => {\n    setOffset(LIMIT)\n    const list = document.getElementById('sentre-token-selection-list')\n    if (list) list.scrollTop = 0\n  }, [keyword, visible])\n\n  useEffect(() => {\n    if (!visible) setKeyword('')\n  }, [visible])\n\n  return (\n    <Fragment>\n      <Button\n        type=\"text\"\n        onClick={() => setVisible(true)}\n        style={{ padding: 4, ...style }}\n        disabled={disabled}\n      >\n        <Space>\n          <MintAvatar mintAddress={value} />\n          <MintSymbol mintAddress={value} />\n          <IonIcon name=\"chevron-down-outline\" />\n        </Space>\n      </Button>\n      <Modal\n        visible={visible}\n        onCancel={() => setVisible(false)}\n        footer={null}\n        closable={false}\n        centered\n        className=\"mint-select-modal\"\n      >\n        <Row gutter={[32, 32]}>\n          <Col span={24}>\n            <Input\n              placeholder=\"Search token symbol, name, address, ...\"\n              suffix={\n                <Button\n                  type=\"text\"\n                  style={{ marginRight: -7 }}\n                  icon={\n                    <IonIcon\n                      name={keyword ? 'close-outline' : 'search-outline'}\n                    />\n                  }\n                  onClick={keyword ? () => setKeyword('') : () => {}}\n                  loading={loading}\n                />\n              }\n              value={keyword}\n              onChange={(e) => setKeyword(e.target.value || '')}\n            />\n          </Col>\n          {!keyword.length && (\n            <Col span={24}>\n              <Row gutter={[8, 8]}>\n                {recommendedMints.map((mintAddress) => (\n                  <Col xs={12} sm={8} md={6} key={mintAddress}>\n                    <MintTag\n                      mintAddress={mintAddress}\n                      onClick={onSelect}\n                      active={mintAddress === value}\n                    />\n                  </Col>\n                ))}\n              </Row>\n            </Col>\n          )}\n          <Col span={24}>\n            <Row\n              gutter={[8, 8]}\n              style={{ maxHeight: 360 }}\n              className=\"scrollbar\"\n              id=\"sentre-token-selection-list\"\n              justify=\"center\"\n            >\n              {sortedMints.length ? (\n                sortedMints.slice(0, offset).map((mintAddress, index) => (\n                  <Col span={24} key={mintAddress}>\n                    <LazyLoad height={60} overflow throttle={500}>\n                      <MintCard mintAddress={mintAddress} onClick={onSelect} />\n                    </LazyLoad>\n                    {index === offset - AMOUNT_BEFORE_LOAD_MORE && (\n                      <LoadMore callback={() => setOffset(offset + LIMIT)} />\n                    )}\n                  </Col>\n                ))\n              ) : (\n                <Col>\n                  <Empty style={{ padding: 40 }} />\n                </Col>\n              )}\n            </Row>\n          </Col>\n        </Row>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default MintSelection\n","import { useSelector } from 'react-redux'\n\nimport { Avatar, Space, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\n\nimport { AppState } from 'app/model'\n\nconst Cross = () => {\n  const {\n    bid: { mintInfo: bidMintInfo },\n    ask: { mintInfo: askMintInfo },\n  } = useSelector((state: AppState) => state)\n\n  const bidMintAddress = bidMintInfo?.address || ''\n  const askMintAddress = askMintInfo?.address || ''\n  return (\n    <Space>\n      <Avatar.Group>\n        <MintAvatar mintAddress={askMintAddress} />\n        <MintAvatar mintAddress={bidMintAddress} />\n      </Avatar.Group>\n      <Typography.Text>\n        <MintSymbol mintAddress={askMintAddress} />\n        {' / '}\n        <MintSymbol mintAddress={bidMintAddress} />\n      </Typography.Text>\n    </Space>\n  )\n}\n\nexport default Cross\n","import { useCallback, useState, useRef, useEffect } from 'react'\nimport Chart from 'chart.js'\nimport isEqual from 'react-fast-compare'\n\nimport { numeric } from 'shared/util'\n\nconst DEFAULT_BACKGROUND_COLOR = '#dadada'\n\nexport type SenChartProps = {\n  labels?: (number | string)[]\n  chartData?: (number | string)[]\n  configs?: { backgroundColor?: string } & object\n  type?: string\n  disableAxe?: boolean\n  chartHeight?: string\n  chartId?: string\n}\n\nconst SenChart = ({\n  chartData = [],\n  labels = [],\n  type = 'line',\n  configs,\n  disableAxe = false,\n  chartId = 'sen_chart',\n}: SenChartProps) => {\n  const { backgroundColor } = configs || {}\n  const [isRebuildChart, setRebuildChart] = useState<boolean>(false)\n\n  const formatData = useCallback(\n    (\n      data: Array<number | number[] | undefined | null | any>,\n      label: Array<string | number>,\n      background?: string | CanvasGradient | undefined,\n    ): Chart.ChartData => ({\n      labels: label,\n      datasets: [{ ...configs, data, backgroundColor: background }],\n    }),\n    [configs],\n  )\n  // use a ref to store the chart instance since it it mutable\n  const chartRef = useRef<Chart | null>(null)\n\n  // callback creates the chart on the canvas element\n  const canvasCallback = (canvas: HTMLCanvasElement | null) => {\n    if (!canvas) return\n    const ctx = canvas.getContext('2d')\n    if (ctx && !isRebuildChart) {\n      // create new chart\n      chartRef.current = new Chart(ctx, {\n        type: type,\n        data: {\n          labels: [],\n          datasets: [\n            {\n              data: [],\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            xAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                },\n              },\n            ],\n            yAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                  beginAtZero: false,\n                  maxTicksLimit: 8,\n                  callback: function (value, index, values) {\n                    return numeric(value).format('0,0.[0]a')\n                  },\n                },\n              },\n            ],\n          },\n          plugins: {\n            legend: false,\n          },\n          hover: {\n            onHover: (event, elements) => {\n              const target = document.getElementById(chartId)\n              if (!target) return\n              target.style.cursor = elements[0] ? 'pointer' : 'default'\n            },\n          },\n        },\n      })\n      setRebuildChart(true)\n    }\n  }\n\n  const getBackground = useCallback(() => {\n    if (!chartRef || !backgroundColor) return DEFAULT_BACKGROUND_COLOR\n    const ctx = chartRef?.current?.canvas?.getContext('2d')\n    const gradient = ctx?.createLinearGradient(0, 0, 0, 180)\n    gradient?.addColorStop(0, backgroundColor)\n    gradient?.addColorStop(1, `${backgroundColor}00`)\n    const background = type === 'line' ? gradient : backgroundColor\n    return background\n  }, [backgroundColor, type])\n\n  useEffect(() => {\n    const chartInstance = chartRef.current\n    const dataInstace = chartInstance?.data.datasets?.find(({ data }) => data)\n    const compareData = isEqual(dataInstace?.data, chartData)\n    if (chartInstance && !compareData) {\n      chartInstance.data = formatData(chartData, labels, getBackground())\n      chartInstance?.update()\n    }\n  }, [chartData, formatData, getBackground, labels])\n\n  return <canvas id={chartId} height=\"180px\" ref={canvasCallback}></canvas>\n}\n\nexport default SenChart\n","import { Col, Empty, Row } from 'antd'\n\nconst ChartEmpty = () => {\n  return (\n    <Row style={{ height: 170 }} align=\"middle\" justify=\"center\">\n      <Col>\n        <Empty />\n      </Col>\n    </Row>\n  )\n}\n\nexport default ChartEmpty\n","import { Avatar, Space, Tooltip, Typography } from 'antd'\nimport CoinGeckoIcon from 'app/static/images/coingecko-logo.png'\n\nexport type PoweredByCoinGeckoProps = {\n  title?: string\n  spacing?: number\n  iconSize?: number\n}\n\nconst PoweredByCoinGecko = ({\n  title = 'Powered by',\n  spacing = 4,\n  iconSize = 20,\n}: PoweredByCoinGeckoProps) => {\n  return (\n    <Space size={spacing} style={{ cursor: 'pointer' }}>\n      <Typography.Text style={{ fontSize: 12, color: '#7A7B85' }}>\n        {title}\n      </Typography.Text>\n      <Tooltip title=\"CoinGecko\">\n        <Avatar src={CoinGeckoIcon} size={iconSize} />\n      </Tooltip>\n    </Space>\n  )\n}\n\nexport default PoweredByCoinGecko\n","import TokenProvider from 'shared/tokenProvider'\nimport { fetchCGK } from 'shared/util'\nimport axios from 'axios'\n\nexport interface MintInfo {\n  address: string\n  symbol: string\n  price: number\n  decimals: number\n}\n\nexport type ChartParamsCGK = {\n  days: number\n  interval: string\n}\n\nconst DEFAULT_TOKEN_INFO = {\n  address: '',\n  chainId: 0,\n  decimals: 0,\n  name: '',\n  symbol: 'TOKEN',\n  extensions: undefined,\n  logoURI: '',\n  tags: [],\n}\n\nconst TOKEN_PROVIDER = new TokenProvider()\n\nconst cgk = {\n  getMintInfos: async (mintsAddress: string[]) => {\n    if (!TOKEN_PROVIDER || !mintsAddress) return\n    const promise = mintsAddress.map(async (mint) => {\n      let tokenInfo = await TOKEN_PROVIDER.findByAddress(mint)\n      if (!tokenInfo) tokenInfo = DEFAULT_TOKEN_INFO\n      const { address, symbol, decimals, extensions } = tokenInfo\n      const ticket = extensions?.coingeckoId\n\n      if (!ticket) return { address, symbol, decimals, price: 0 } // some mints don't have a ticket, so the price in cgk is 0\n\n      const { price } = await fetchCGK(ticket)\n      return { address, symbol, decimals, price }\n    })\n    const mintsDetails = await Promise.all(promise)\n    const mapMintsDetails = new Map<string, MintInfo>()\n    mintsDetails.forEach((mint) => {\n      mapMintsDetails.set(mint.address, mint)\n    })\n    return mapMintsDetails\n  },\n}\nexport default cgk\n\nexport const fetchMarketChart = async (\n  ticket: string,\n  params: ChartParamsCGK,\n) => {\n  try {\n    const data: any = await axios({\n      method: 'get',\n      url: `https://api.coingecko.com/api/v3/coins/${ticket}/market_chart?vs_currency=usd&days=${params.days}&interval=${params.interval}`,\n    })\n    const priceData: [number /*time*/, number /*price*/][] = data.data.prices\n    return priceData.map((data) => ({ time: data[0], val: data[1] }))\n  } catch (error) {\n    return []\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport moment from 'moment'\nimport { useMint } from '@senhub/providers'\n\nimport { Button, Card, Col, Radio, Row, Typography, Space, Popover } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\nimport Cross from './cross'\nimport SenChart from './chart'\nimport ChartEmpty from './chartEmpty'\nimport PoweredByCoinGecko from 'app/components/poweredByCoingecko'\n\nimport { AppState } from 'app/model'\nimport { ChartParamsCGK, fetchMarketChart } from 'app/helper/cgk'\nimport { numeric } from 'shared/util'\n\ntype ChartData = { label: string; val: number }\nenum Interval {\n  day = 'day',\n  week = 'week',\n  month = 'month',\n  year = 'year',\n}\nconst CHART_DATA_CONFIG: Record<\n  Interval,\n  {\n    amount: number\n    unit: moment.unitOfTime.DurationConstructor\n    format: string\n  }\n> = {\n  day: { amount: 4, unit: 'hours', format: 'HH:00' },\n  week: { amount: 1, unit: 'days', format: 'MMM DD' },\n  month: { amount: 5, unit: 'days', format: 'MMM DD' },\n  year: { amount: 2, unit: 'months', format: 'MMM DD' },\n}\nconst MARKET_CONFIG: Record<Interval, ChartParamsCGK> = {\n  day: { days: 1, interval: 'hourly' },\n  week: { days: 7, interval: 'daily' },\n  month: { days: 31, interval: 'daily' },\n  year: { days: 365, interval: 'daily' },\n}\n\nconst CHART_CONFIGS = {\n  color: '#3E8C6A',\n  radius: 0,\n  hitRadius: 14,\n  tooltip: 'TVL',\n  transparent: 'transparent',\n}\n\nconst SwapChart = () => {\n  const [interval, setInterval] = useState(Interval.week)\n  const [chartData, setChartData] = useState<{ label: string; val: number }[]>(\n    [],\n  )\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const { tokenProvider } = useMint()\n\n  const swapChartConfigs = {\n    borderColor: CHART_CONFIGS.transparent,\n    borderRadius: CHART_CONFIGS.radius,\n    pointRadius: CHART_CONFIGS.radius,\n    tooltip: CHART_CONFIGS.tooltip,\n    pointHitRadius: CHART_CONFIGS.hitRadius,\n    pointHoverRadius: CHART_CONFIGS.radius,\n    backgroundColor: CHART_CONFIGS.color,\n  }\n\n  const parseChartDay = useCallback(\n    (marketData: { time: number; val: number }[]) => {\n      const chartData: ChartData[] = []\n      const { format, amount, unit } = CHART_DATA_CONFIG[interval]\n      let displayTime = moment()\n      // parser data\n      for (const data of marketData.reverse()) {\n        const chartTime = moment(data.time).format(format)\n        if (chartTime === displayTime.format(format)) {\n          const now = moment().format(format)\n          let label = chartTime\n          if (chartTime === now) label = moment().format('HH:mm')\n          if (displayTime)\n            chartData.unshift({\n              label: label,\n              val: data.val,\n            })\n          displayTime = displayTime.subtract(amount, unit)\n        } else if (chartTime === '00:00') {\n          chartData.unshift({\n            label: displayTime.format('MMM DD'),\n            val: data.val,\n          })\n        }\n      }\n      setChartData(chartData)\n    },\n    [interval],\n  )\n\n  const parseChartDaily = useCallback(\n    (marketData: { time: number; val: number }[]) => {\n      const chartData: ChartData[] = []\n      const { format, amount, unit } = CHART_DATA_CONFIG[interval]\n      let displayTime = moment()\n      // parser data\n      for (const data of marketData.reverse()) {\n        const chartTime = moment(data.time).format(format)\n        if (chartTime === displayTime.format(format)) {\n          displayTime = displayTime.subtract(amount, unit)\n          chartData.unshift({\n            label: chartTime,\n            val: data.val,\n          })\n          continue\n        }\n      }\n      setChartData(chartData)\n    },\n    [interval],\n  )\n\n  const fetchChartData = useCallback(async () => {\n    // fetch data market from coingecko\n    const bidTokenInfo = await tokenProvider.findByAddress(\n      bidData.mintInfo?.address || '',\n    )\n    const askTokenInfo = await tokenProvider.findByAddress(\n      askData.mintInfo?.address || '',\n    )\n    const bidTicket = bidTokenInfo?.extensions?.coingeckoId\n    const askTicket = askTokenInfo?.extensions?.coingeckoId\n    // return when bid & ask address is same\n    const compareAddress = bidData.accountAddress === askData.accountAddress\n    if (!askTicket || !bidTicket || compareAddress) return setChartData([])\n\n    const marketConfig = MARKET_CONFIG[interval]\n    const [bidChartData, askChartData] = await Promise.all([\n      fetchMarketChart(bidTicket, marketConfig),\n      fetchMarketChart(askTicket, marketConfig),\n    ])\n    // parser market data\n    const marketData: { time: number; val: number }[] = []\n    for (let idx = bidChartData.length - 1; idx >= 0; idx--) {\n      const bidChart = bidChartData[idx]\n      const askChart =\n        askChartData[askChartData.length - bidChartData.length + idx]\n      if (!bidChart || !askChart) continue\n      marketData.unshift({\n        time: bidChart.time,\n        val: askChart.val / bidChart.val,\n      })\n    }\n    if (interval === Interval.day) return parseChartDay(marketData)\n    return parseChartDaily(marketData)\n  }, [\n    askData.accountAddress,\n    askData.mintInfo?.address,\n    bidData.accountAddress,\n    bidData.mintInfo?.address,\n    interval,\n    parseChartDaily,\n    parseChartDay,\n    tokenProvider,\n  ])\n\n  useEffect(() => {\n    fetchChartData()\n  }, [fetchChartData])\n\n  const price = chartData[chartData.length - 1]?.val || 0\n  const priceUI = numeric(price).format(\n    price > 1 ? '0,0.[00]' : '0,0.[00000000]',\n  )\n\n  return (\n    <Card bordered={false} className=\"card-swap\" bodyStyle={{ paddingTop: 28 }}>\n      <Row gutter={[24, 24]}>\n        <Col span={24}>\n          <Row gutter={[20, 20]}>\n            <Col flex=\"auto\">\n              <Space>\n                <Cross />\n                <Popover\n                  content={\n                    <PoweredByCoinGecko title=\"Reference Market Price. Powered by\" />\n                  }\n                >\n                  <Button\n                    type=\"text\"\n                    icon={<IonIcon name=\"information-circle-outline\" />}\n                  />\n                </Popover>\n              </Space>\n            </Col>\n            {chartData && !!chartData.length && (\n              <Col>\n                <Radio.Group\n                  defaultValue={Interval.week}\n                  onChange={(e) => setInterval(e.target.value)}\n                  className=\"chart-radio-btn\"\n                >\n                  <Radio.Button value={Interval.day}>1D</Radio.Button>\n                  <Radio.Button value={Interval.week}>1W</Radio.Button>\n                  <Radio.Button value={Interval.month}>1M</Radio.Button>\n                  <Radio.Button value={Interval.year}>1Y</Radio.Button>\n                </Radio.Group>\n              </Col>\n            )}\n            <Col span={24}>\n              <Typography.Title level={2}>\n                {price ? priceUI : ''}\n              </Typography.Title>\n            </Col>\n          </Row>\n        </Col>\n        <Col span={24}>\n          {chartData && !!chartData.length ? (\n            <SenChart\n              chartData={chartData?.map((data) => data.val)}\n              labels={chartData?.map((data) => data.label)}\n              configs={swapChartConfigs}\n            />\n          ) : (\n            <ChartEmpty />\n          )}\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapChart\n","var _path, _path2, _path3, _path4, _path5, _path6, _defs;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgJupiterLogo(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 100,\n    height: 100,\n    viewBox: \"0 0 100 100\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9.57323 77.9508C13.7607 83.7753 19.1321 88.6489 25.3351 92.252C31.5381 95.8551 38.4327 98.1062 45.5668 98.8579C41.8964 93.3346 36.5613 88.2532 29.9008 84.3845C23.2403 80.5159 16.1867 78.4027 9.57323 77.9508Z\",\n    fill: \"url(#paint0_linear)\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M38.8507 68.9805C26.0185 61.5254 12.1297 59.6255 2.19191 62.9818C3.15128 66.1526 4.41654 69.2226 5.96983 72.1486C14.6041 71.9487 24.0313 74.2937 32.8033 79.3886C41.5754 84.4835 48.2846 91.5153 52.3901 99.1165C55.7032 99.0148 58.9986 98.5928 62.2305 97.8566C60.2214 87.5627 51.6795 76.4372 38.8507 68.9805Z\",\n    fill: \"url(#paint1_linear)\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M100 38.7201C98.3685 32.084 95.4165 25.8447 91.3202 20.3748C87.2239 14.9048 82.0673 10.3164 76.1584 6.88349C70.2495 3.45059 63.7094 1.24361 56.9287 0.394327C50.1479 -0.454959 43.2655 0.0708667 36.6925 1.94041C47.6735 3.28427 59.8623 7.40655 71.8159 14.3509C83.7695 21.2953 93.3966 29.8406 100 38.7201Z\",\n    fill: \"url(#paint2_linear)\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M84.0232 63.0577C78.4025 53.7229 68.7738 44.7846 56.9125 37.8939C45.0513 31.0033 32.5198 27.0675 21.6362 26.8071C12.0612 26.5803 4.87495 29.3638 1.92518 34.4419C1.90838 34.4721 1.88486 34.5007 1.86638 34.5309C1.60097 35.4834 1.37251 36.4375 1.16422 37.395C5.28314 35.769 10.0555 34.8635 15.3621 34.7627C27.1628 34.541 40.3696 38.3156 52.5567 45.396C64.7439 52.4765 74.5725 62.0834 80.2234 72.4412C82.7566 77.1077 84.3373 81.702 84.9639 86.0914C85.6929 85.4397 86.4085 84.766 87.1023 84.0656C87.1208 84.0336 87.1325 84 87.151 83.9664C90.1008 78.8833 88.9602 71.2636 84.0232 63.0577Z\",\n    fill: \"url(#paint3_linear)\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M47.8884 53.4254C29.7245 42.8728 9.65227 41.2198 0 48.5842C0.0189591 50.8892 0.195187 53.1903 0.527462 55.4714C3.36682 54.6107 6.29318 54.0687 9.25247 53.8554C20.0386 53.0441 31.9301 56.0493 42.7213 62.3218C53.5125 68.5942 62.0191 77.4402 66.6588 87.205C67.9412 89.8801 68.9193 92.6907 69.5749 95.5839C71.7216 94.7424 73.8088 93.7563 75.8222 92.6325C77.4382 80.5982 66.0574 63.9797 47.8884 53.4254Z\",\n    fill: \"url(#paint4_linear)\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M93.3659 47.4337C87.6814 38.109 77.9687 29.1455 66.0235 22.2095C54.0782 15.2735 41.4981 11.2755 30.5792 10.9547C22.2557 10.7145 15.8085 12.7319 12.4657 16.5434C26.346 14.1917 44.6544 18.1443 62.4001 28.4534C80.1457 38.7625 92.6537 52.7117 97.4815 65.9336C99.1361 61.1444 97.6965 54.5444 93.3659 47.4337Z\",\n    fill: \"url(#paint5_linear)\"\n  })), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint0_linear\",\n    x1: 81,\n    y1: 13,\n    x2: 15,\n    y2: 99,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#F9A43A\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.25,\n    stopColor: \"#FFC45E\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.53125,\n    stopColor: \"#93EEEF\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.760417,\n    stopColor: \"#81F4FE\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#3BDBFB\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint1_linear\",\n    x1: 81,\n    y1: 13,\n    x2: 15,\n    y2: 99,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#F9A43A\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.25,\n    stopColor: \"#FFC45E\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.53125,\n    stopColor: \"#93EEEF\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.760417,\n    stopColor: \"#81F4FE\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#3BDBFB\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint2_linear\",\n    x1: 81,\n    y1: 13,\n    x2: 15,\n    y2: 99,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#F9A43A\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.25,\n    stopColor: \"#FFC45E\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.53125,\n    stopColor: \"#93EEEF\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.760417,\n    stopColor: \"#81F4FE\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#3BDBFB\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint3_linear\",\n    x1: 81,\n    y1: 13,\n    x2: 15,\n    y2: 99,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#F9A43A\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.25,\n    stopColor: \"#FFC45E\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.53125,\n    stopColor: \"#93EEEF\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.760417,\n    stopColor: \"#81F4FE\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#3BDBFB\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint4_linear\",\n    x1: 81,\n    y1: 13,\n    x2: 15,\n    y2: 99,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#F9A43A\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.25,\n    stopColor: \"#FFC45E\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.53125,\n    stopColor: \"#93EEEF\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.760417,\n    stopColor: \"#81F4FE\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#3BDBFB\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint5_linear\",\n    x1: 81,\n    y1: 13,\n    x2: 15,\n    y2: 99,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#F9A43A\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.25,\n    stopColor: \"#FFC45E\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.53125,\n    stopColor: \"#93EEEF\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.760417,\n    stopColor: \"#81F4FE\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#3BDBFB\"\n  })))));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgJupiterLogo);\nexport default __webpack_public_path__ + \"static/media/jupiter-logo.6553c3779ce16057aa846301783447a2.svg\";\nexport { ForwardRef as ReactComponent };","import { Avatar, Space, Tooltip, Typography } from 'antd'\nimport JupiterIcon from 'app/static/images/jupiter-logo.svg'\n\nexport type PoweredByJupiterProps = {\n  title?: string\n  spacing?: number\n  iconSize?: number\n}\n\nconst PoweredByJupiter = ({\n  title = 'Powered by',\n  spacing = 4,\n  iconSize = 20,\n}: PoweredByJupiterProps) => {\n  return (\n    <Space size={spacing} style={{ cursor: 'pointer' }}>\n      <Typography.Text style={{ fontSize: 12, color: '#7A7B85' }}>\n        {title}\n      </Typography.Text>\n      <Tooltip title=\"Jupiter Aggregator\">\n        <Avatar src={JupiterIcon} size={iconSize} />\n      </Tooltip>\n    </Space>\n  )\n}\n\nexport default PoweredByJupiter\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { RouteTrace } from 'app/helper/router'\n\nexport enum SwapPlatform {\n  SenSwap,\n  JupiterAggregator,\n}\nexport type RouteState = {\n  platform: SwapPlatform\n  best: RouteTrace // The best route\n  amount: bigint\n  priceImpact: number\n  loadingJupSwap?: boolean\n  loadingSenswap?: boolean\n}\n\nconst NAME = 'route'\nconst initialState: RouteState = {\n  platform: SwapPlatform.SenSwap,\n  best: [],\n  amount: BigInt(0),\n  priceImpact: 0,\n  loadingJupSwap: false,\n  loadingSenswap: false,\n}\n\n/**\n * Actions\n */\n\nexport const setLoadingJupiterRoute = createAsyncThunk<\n  Partial<RouteState>,\n  Partial<RouteState>,\n  { state: any }\n>(`${NAME}/setLoadingJupiterRoute`, async ({ loadingJupSwap }) => {\n  return { loadingJupSwap }\n})\n\nexport const setLoadingSenSwap = createAsyncThunk<\n  Partial<RouteState>,\n  Partial<RouteState>,\n  { state: any }\n>(`${NAME}/loadingSenswap`, async ({ loadingSenswap }) => {\n  return { loadingSenswap }\n})\n\nexport const updateRoute = createAsyncThunk<\n  Partial<RouteState>,\n  Partial<RouteState>,\n  { state: any }\n>(`${NAME}/updateRoute`, async (route) => {\n  if (!route) return {}\n  return { ...route }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        updateRoute.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setLoadingJupiterRoute.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setLoadingSenSwap.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { Fragment, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Divider, Space } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\nimport PoweredByJupiter from '../poweredByJupiter'\n\nimport { AppState } from 'app/model'\nimport { account } from '@senswap/sen-js'\nimport { MintAvatar } from 'shared/antd/mint'\nimport { SwapPlatform } from 'app/model/route.controller'\n\nconst RouteAvatar = () => {\n  const {\n    bid: { mintInfo },\n    route: { platform, best },\n  } = useSelector((state: AppState) => state)\n\n  const srcMintAddress = mintInfo?.address\n  const chainMintAddresses = useMemo(() => {\n    if (!best.length || !account.isAddress(srcMintAddress)) return []\n    let list = [srcMintAddress]\n    for (const hop of best) {\n      const { dstMintAddress } = hop\n      if (account.isAddress(dstMintAddress)) list.push(dstMintAddress)\n    }\n    return list\n  }, [srcMintAddress, best])\n\n  return (\n    <Space>\n      {chainMintAddresses?.map((mintAddress, i) => (\n        <Fragment key={i}>\n          <MintAvatar mintAddress={mintAddress} />\n          {chainMintAddresses.length > i + 1 && (\n            <IonIcon name=\"chevron-forward-outline\" />\n          )}\n        </Fragment>\n      ))}\n      {platform === SwapPlatform.JupiterAggregator && (\n        <Fragment>\n          <Divider type=\"vertical\" style={{ margin: 0 }} />\n          <PoweredByJupiter />\n        </Fragment>\n      )}\n    </Space>\n  )\n}\nexport default RouteAvatar\n","import { useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Button, Space, Typography } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\nimport { MintSymbol } from 'shared/antd/mint'\n\nimport { numeric } from 'shared/util'\nimport { AppState } from 'app/model'\n\nconst Price = () => {\n  const [reversed, setReversed] = useState(false)\n  const {\n    bid: { mintInfo: bidMintInfo, amount: bidAmount },\n    ask: { mintInfo: askMintInfo, amount: askAmount },\n  } = useSelector((state: AppState) => state)\n\n  const bidMintAddress = bidMintInfo?.address || ''\n  const askMintAddress = askMintInfo?.address || ''\n  const price = numeric(Number(askAmount) / Number(bidAmount)).format(\n    '0,0.[000000]',\n  )\n  const reversedPrice = numeric(Number(bidAmount) / Number(askAmount)).format(\n    '0,0.[000000]',\n  )\n\n  return (\n    <Space>\n      <Button\n        type=\"text\"\n        onClick={() => setReversed(!reversed)}\n        shape=\"circle\"\n        icon={<IonIcon name=\"swap-horizontal-outline\" />}\n      />\n      <Typography.Text>{!reversed ? price : reversedPrice}</Typography.Text>\n      <Typography.Text>\n        {!reversed ? (\n          <MintSymbol mintAddress={askMintAddress} />\n        ) : (\n          <MintSymbol mintAddress={bidMintAddress} />\n        )}\n        {' / '}\n        {!reversed ? (\n          <MintSymbol mintAddress={bidMintAddress} />\n        ) : (\n          <MintSymbol mintAddress={askMintAddress} />\n        )}\n      </Typography.Text>\n    </Space>\n  )\n}\n\nexport default Price\n","export enum PriceImpact {\n  goodSwap = 0.01, // price impact lower than 1%\n  acceptableSwap = 0.05, // price impact lower than 5%\n}\n","import { PriceImpact } from 'app/constant/swap'\n\nexport const priceImpactColor = (priceImpact: number) => {\n  if (priceImpact < PriceImpact.goodSwap) return '#14E041'\n  if (priceImpact > PriceImpact.acceptableSwap) return '#D72311'\n  return '#FA8C16'\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from '@senhub/providers'\n\n/**\n * Get token decimals from multiple resources. This hook needs MintProvider for working.\n * MintProvider Ref: https://docs.sentre.io/senhub/development/providers/mint-provider\n * @param mintAddress Mint address\n * @returns Decimals\n */\nconst useMintDecimals = (mintAddress: string) => {\n  const [decimals, setDecimals] = useState<number | undefined>(undefined)\n  const { getDecimals } = useMint()\n\n  const fetchDecimals = useCallback(async () => {\n    try {\n      const decimals = await getDecimals(mintAddress)\n      return setDecimals(decimals)\n    } catch (er: any) {\n      return setDecimals(undefined)\n    }\n  }, [mintAddress, getDecimals])\n\n  useEffect(() => {\n    fetchDecimals()\n  }, [fetchDecimals])\n\n  return decimals\n}\n\nexport default useMintDecimals\n","import { useEffect, useState } from 'react'\nimport { account, DEFAULT_EMPTY_ADDRESS, utils } from '@senswap/sen-js'\nimport { useAccount, useWallet } from '@senhub/providers'\n\nimport useMintDecimals from './useMintDecimals'\n\nexport type AccountBalanceReturn = {\n  amount: bigint\n  decimals: number\n  balance: number\n  mintAddress: string\n}\n\nconst buildResult = (\n  mintAddress?: string,\n  amount?: bigint,\n  decimals?: number,\n) => {\n  if (\n    !account.isAddress(mintAddress) ||\n    amount === undefined ||\n    decimals === undefined\n  )\n    return { amount: BigInt(0), decimals: 0, balance: 0 }\n  return {\n    mintAddress,\n    amount,\n    decimals,\n    balance: Number(utils.undecimalize(amount, decimals)),\n  }\n}\n\n/**\n * Get account balance. This hook needs WalletProvider, MintProvider, and AccountProvider for working.\n * WalletProvider Ref: https://docs.sentre.io/senhub/development/providers/wallet-provider\n * MintProvider Ref: https://docs.sentre.io/senhub/development/providers/mint-provider\n * AccountProvider Ref: https://docs.sentre.io/senhub/development/providers/account-provider\n * @param accountAddress Associated account address\n * @returns AccountBalanceReturn\n * - AccountBalanceReturn.amount: The amount with decimals\n * - AccountBalanceReturn.decimals: The corresponding mint decimals\n * - AccountBalanceReturn.balance: The human-readable balance (undecimalized amount)\n * - AccountBalanceReturn.mintAddress: The corresponding mint\n */\nconst useAccountBalance = (accountAddress: string) => {\n  const {\n    wallet: { address: walletAddress, lamports },\n  } = useWallet()\n  const { accounts } = useAccount()\n  const { amount, mint: mintAddress } = accounts[accountAddress] || {}\n  const decimals = useMintDecimals(mintAddress) || 0\n\n  if (!account.isAddress(walletAddress) || !account.isAddress(accountAddress))\n    return buildResult()\n  if (accountAddress === walletAddress)\n    return buildResult(DEFAULT_EMPTY_ADDRESS, lamports, 9)\n\n  return buildResult(mintAddress, amount, decimals)\n}\n\nexport default useAccountBalance\n\n/**\n * The same as useAccountBalance but the input is mint address\n * @param mintAddress Mint address\n * @returns AccountBalanceReturn\n */\nexport const useAccountBalanceByMintAddress = (mintAddress: string) => {\n  const [accountAddress, setAccountAddress] = useState('')\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n  const data = useAccountBalance(accountAddress)\n\n  useEffect(() => {\n    ;(async () => {\n      if (!account.isAddress(walletAddress) || !account.isAddress(mintAddress))\n        return setAccountAddress('')\n      const {\n        sentre: { splt },\n      } = window\n      try {\n        const address = await splt.deriveAssociatedAddress(\n          walletAddress,\n          mintAddress,\n        )\n        return setAccountAddress(address)\n      } catch (er) {\n        return setAccountAddress('')\n      }\n    })()\n  })\n\n  return data\n}\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { DEFAULT_WSOL, utils } from '@senswap/sen-js'\nimport { useWallet } from '@senhub/providers'\n\nimport { AppState } from 'app/model'\nimport useAccountBalance from 'shared/hooks/useAccountBalance'\n\nexport const useSwapStatus = () => {\n  const {\n    route: { best, loadingJupSwap, loadingSenswap },\n    bid: {\n      amount: bidAmount,\n      accountAddress: bidAccountAddress,\n      mintInfo: { address: bidMintAddress, decimals: bidMintDecimals },\n    },\n    ask: {\n      amount: askAmount,\n      mintInfo: { address: askMintAddress },\n    },\n  } = useSelector((state: AppState) => state)\n\n  const {\n    wallet: { lamports },\n  } = useWallet()\n\n  const { amount: bidBalance } = useAccountBalance(bidAccountAddress)\n\n  const availableBid = useMemo((): string => {\n    if (bidMintAddress !== DEFAULT_WSOL)\n      return utils.undecimalize(bidBalance, bidMintDecimals)\n    // So estimate max = 0.01 fee -> multi transaction.\n    const estimateFee = utils.decimalize(0.01, bidMintDecimals)\n    const max = lamports + bidBalance - estimateFee\n    if (max <= bidBalance)\n      return utils.undecimalize(bidBalance, bidMintDecimals)\n    return utils.undecimalize(max, bidMintDecimals)\n  }, [bidBalance, bidMintAddress, bidMintDecimals, lamports])\n\n  const disabled =\n    !best.length ||\n    !Number(bidAmount) ||\n    !Number(askAmount) ||\n    Number(bidAmount) > Number(availableBid) ||\n    bidMintAddress === askMintAddress\n\n  const loading = loadingJupSwap || loadingSenswap\n  return { disabled, loading }\n}\n","import { ReactNode } from 'react'\nimport { useSelector } from 'react-redux'\nimport { PoolData } from '@senswap/sen-js'\n\nimport { Col, Row, Skeleton, Typography } from 'antd'\nimport RouteAvatar from './routeAvatar'\n\nimport { AppState } from 'app/model'\nimport { numeric } from 'shared/util'\nimport Price from './price'\nimport { priceImpactColor } from 'app/helper/utils'\nimport { useSwapStatus } from 'app/hooks/useSwapStatus'\n\nexport type LiteMintInfo = {\n  address: string\n  decimals: number\n}\n\nexport type HopData = {\n  poolData: PoolData & { address: string }\n  srcMintAddress: string\n  dstMintAddress: string\n}\n\nconst ExtraTypography = ({\n  label = '',\n  content = '',\n  loading = false,\n}: {\n  label?: string\n  content?: string | ReactNode\n  loading?: boolean\n}) => {\n  return (\n    <Row align=\"middle\">\n      <Col flex=\"auto\">\n        <Typography.Text type=\"secondary\">{label}</Typography.Text>\n      </Col>\n      <Col>\n        {loading ? (\n          <Skeleton.Input style={{ width: 150 }} active size=\"small\" />\n        ) : (\n          <span>{content}</span>\n        )}\n      </Col>\n    </Row>\n  )\n}\n\nconst PreviewSwap = () => {\n  const {\n    route: { priceImpact },\n    settings: { slippage },\n  } = useSelector((state: AppState) => state)\n  const { loading } = useSwapStatus()\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Price impact\"\n          content={\n            <Typography.Text style={{ color: priceImpactColor(priceImpact) }}>\n              {numeric(Number(priceImpact)).format('0.[0000]%')}\n            </Typography.Text>\n          }\n          loading={loading}\n        />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography label=\"Price\" content={<Price />} loading={loading} />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Slippage Tolerance\"\n          content={numeric(slippage).format('0.[00]%')}\n          loading={loading}\n        />\n      </Col>\n      <Col span={24} style={{ minHeight: 24 }}>\n        <ExtraTypography\n          label=\"Route\"\n          content={<RouteAvatar />}\n          loading={loading}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default PreviewSwap\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from '@senhub/providers'\nimport { fetchCGK } from 'shared/util'\n\nconst DEFAULT_DATA = {\n  address: '',\n  icon: '',\n  name: 'TOKEN',\n  price: 0,\n  priceChange: 0,\n  rank: 0,\n  symbol: 'TOKEN',\n  totalVolume: 0,\n}\n\nconst useMintCgk = (mintAddress?: string): CgkData => {\n  const [cgkData, setCgkData] = useState<CgkData>(DEFAULT_DATA)\n  const { tokenProvider } = useMint()\n\n  const fetchCgkData = useCallback(async () => {\n    if (!mintAddress) return setCgkData(DEFAULT_DATA)\n    try {\n      const token = await tokenProvider.findByAddress(mintAddress)\n      const ticket = token?.extensions?.coingeckoId\n      const cgkData = await fetchCGK(ticket)\n      return setCgkData(cgkData)\n    } catch (error) {\n      return setCgkData(DEFAULT_DATA)\n    }\n  }, [mintAddress, tokenProvider])\n\n  useEffect(() => {\n    fetchCgkData()\n  }, [fetchCgkData])\n\n  return cgkData\n}\nexport default useMintCgk\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  cluster: 'devnet' | 'testnet' | 'mainnet-beta'\n  spltAddress: string\n  splataAddress: string\n  swapAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: 'https://api.devnet.solana.com',\n    cluster: 'devnet',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    swapAddress: '4erFSLP7oBFSVC1t35jdxmbfxEhYCKfoM6XdG2BLR3UF',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: 'https://api.testnet.solana.com',\n    cluster: 'testnet',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    swapAddress: '',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: 'https://ssc-dao.genesysgo.net',\n    cluster: 'mainnet-beta',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    swapAddress: 'SSW7ooZ1EbEognq5GosbygA3uWW1Hq1NsFq6TsftCFV',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  bidDefault: string\n  askDefault: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    bidDefault: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    askDefault: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    bidDefault: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    askDefault: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    bidDefault: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    askDefault: 'SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  wormholeAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Config = {\n  assetsRoute: string\n}\n\nconst config: Record<Net, Config> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    assetsRoute: '/app/sen_assets',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    assetsRoute: '/app/sen_assets',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    assetsRoute: '/app/sen_assets',\n  },\n}\n\nexport default config\n","import { env, net } from 'shared/runtime'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\nimport swap from './swap.config'\nimport wormhole from './wormhole.config'\nimport route from './route.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n  swap: swap[net],\n  wormhole: wormhole[net],\n  route: route[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { Fragment, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useWallet } from '@senhub/providers'\n\nimport useMintCgk from 'app/hooks/useMintCgk'\nimport { createPDB } from 'shared/pdb'\nimport { AppState } from 'app/model'\nimport configs from 'app/configs'\n\nconst {\n  manifest: { appId },\n} = configs\nconst PDB_KEY = 'validated_swap_transaction'\n\nconst ValidateSwap = ({ txId = '' }: { txId?: string }) => {\n  const {\n    bid: {\n      amount: bidAmount,\n      mintInfo: { address: mintAddress },\n    },\n  } = useSelector((state: AppState) => state)\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n  const { price } = useMintCgk(mintAddress)\n\n  useEffect(() => {\n    ;(async () => {\n      const db = createPDB(walletAddress, appId)\n      if (!txId || !db) return\n      const prevLogs: { txIds: string[]; amount: number } = (await db.getItem(\n        PDB_KEY,\n      )) || { txIds: [], amount: 0 }\n      let swapAmountSuccess = Number(bidAmount) * price\n      const listTxIds = prevLogs.txIds\n      if (txId && !listTxIds?.includes(txId)) listTxIds.push(txId)\n      if (prevLogs.amount) swapAmountSuccess += prevLogs.amount\n      const swapLogs = { txIds: listTxIds, amount: swapAmountSuccess }\n      await db.setItem(PDB_KEY, swapLogs)\n    })()\n  }, [bidAmount, price, txId, walletAddress])\n\n  return <Fragment />\n}\nexport default ValidateSwap\n","import { useCallback } from 'react'\nimport { useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\nimport { useWallet } from '@senhub/providers'\n\nimport { AppState } from 'app/model'\n\nconst PRECISION = BigInt(1000000000)\n\nexport const useHandleSwap = () => {\n  const {\n    route: { best },\n    bid: {\n      amount: _bidAmount,\n      mintInfo: { decimals: bidMintDecimals },\n    },\n    ask: {\n      amount: _askAmount,\n      mintInfo: { decimals: askMintDecimals },\n    },\n    settings: { slippage },\n  } = useSelector((state: AppState) => state)\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  const handleSwap = useCallback(async () => {\n    const { swap, splt, wallet } = window.sentre\n    if (!wallet) throw new Error('Wallet is not connected')\n    // Synthetize routings\n    const routingAddresses = await Promise.all(\n      best.map(\n        async ({\n          srcMintAddress,\n          dstMintAddress,\n          poolData: { address: poolAddress },\n        }) => {\n          const srcAddress = await splt.deriveAssociatedAddress(\n            walletAddress,\n            srcMintAddress,\n          )\n          const dstAddress = await splt.deriveAssociatedAddress(\n            walletAddress,\n            dstMintAddress,\n          )\n          return {\n            poolAddress: poolAddress,\n            srcAddress: srcAddress,\n            dstAddress: dstAddress,\n          }\n        },\n      ),\n    )\n    // Compute limit\n    const bidAmount = utils.decimalize(_bidAmount, bidMintDecimals)\n    const askAmount = utils.decimalize(_askAmount, askMintDecimals)\n    const limit =\n      (askAmount * (PRECISION - utils.decimalize(slippage, 9))) / PRECISION\n    // Execute swap\n    return await swap.route(bidAmount, limit, routingAddresses, wallet)\n  }, [\n    best,\n    bidMintDecimals,\n    askMintDecimals,\n    slippage,\n    walletAddress,\n    _bidAmount,\n    _askAmount,\n  ])\n\n  return handleSwap\n}\n","import { Swap } from '@senswap/sen-js'\nimport { HopData } from 'app/components/preview/index'\nimport { extractReserve } from './router'\n\nexport const ORACLE = Swap.oracle\n\nexport const curve = (bidAmount: bigint, hopData: HopData): bigint => {\n  if (!bidAmount) return BigInt(0)\n  const { srcMintAddress, dstMintAddress, poolData } = hopData\n  const { fee_ratio, tax_ratio } = poolData\n  const bidReserve = extractReserve(srcMintAddress, poolData)\n  const askReserve = extractReserve(dstMintAddress, poolData)\n  if (!bidReserve || !askReserve) return BigInt(0)\n\n  const { askAmount } = ORACLE.swap(\n    bidAmount,\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return askAmount\n}\n\nexport const inverseCurve = (askAmount: bigint, hopData: HopData): bigint => {\n  if (!askAmount) return BigInt(0)\n  const { srcMintAddress, dstMintAddress, poolData } = hopData\n  const { fee_ratio, tax_ratio } = poolData\n  const bidReserve = extractReserve(srcMintAddress, poolData)\n  const askReserve = extractReserve(dstMintAddress, poolData)\n  if (!bidReserve || !askReserve) return BigInt(0)\n\n  const bidAmount = ORACLE.inverseSwap(\n    askAmount,\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return bidAmount\n}\n\nexport const slippage = (bidAmount: bigint, hopData: HopData): bigint => {\n  if (!bidAmount) return BigInt(0)\n  const { srcMintAddress, dstMintAddress, poolData } = hopData\n  const { fee_ratio, tax_ratio } = poolData\n  const bidReserve = extractReserve(srcMintAddress, poolData)\n  const askReserve = extractReserve(dstMintAddress, poolData)\n  if (!bidReserve || !askReserve) return BigInt(0)\n\n  const slippage = ORACLE.slippage(\n    bidAmount,\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return slippage\n}\n","import { PoolData, utils } from '@senswap/sen-js'\n\nimport { curve, slippage } from './oracle'\nimport { BidState } from 'app/model/bid.controller'\nimport { AskState } from 'app/model/ask.controller'\nimport { inverseCurve } from './oracle'\nimport { HopData } from 'app/components/preview/index'\nimport { RouteState, SwapPlatform } from 'app/model/route.controller'\n\nconst PRECISION = 9\nconst POOL_ACTIVITY_STATUS = 1\nconst LIMIT_POOL_IN_ROUTE = 3\n\nexport type GraphPool = Map<string, Map<string, PoolData>>\nexport type RouteTrace = HopData[]\n\n/**\n * Extract reserve from pool data\n * @param extractReserve\n * @param poolData\n * @returns\n */\nexport const extractReserve = (\n  mintAddress: string,\n  poolData: PoolData,\n): bigint => {\n  const { mint_a, mint_b, reserve_a, reserve_b } = poolData\n  if (mintAddress === mint_a) return reserve_a\n  if (mintAddress === mint_b) return reserve_b\n  throw new Error('Cannot find reserves')\n}\n\n/**\n *\n * @param param0\n * @param param1\n * @returns\n */\ntype Point = { point: bigint }\nexport const pointSorting = (\n  { point: firstPoint }: Point,\n  { point: secondPoint }: Point,\n) => {\n  if (firstPoint < secondPoint) return 1\n  if (firstPoint > secondPoint) return -1\n  return 0\n}\n\n/**\n * Calculate price impact\n * @param best\n * @param bid\n * @param ask\n * @returns\n */\nexport const calcPriceImpact = (best: RouteTrace, bidAmount: bigint) => {\n  if (!bidAmount) return 0\n  let srcAmount = bidAmount\n  let p = 1\n  best.forEach((hopData) => {\n    const s = Number(\n      utils.undecimalize(slippage(srcAmount, hopData), PRECISION),\n    )\n    p = p * (1 - s)\n    const dstAmount = curve(srcAmount, hopData)\n    srcAmount = dstAmount\n  })\n\n  return 1 - p\n}\n\nexport const buildPoolGraph = (pools: Record<string, PoolData>): GraphPool => {\n  const graph = new Map<\n    /*mint_address*/ string,\n    Map</*pool_address*/ string, PoolData>\n  >()\n  for (const poolAddress in pools) {\n    const pool = pools[poolAddress]\n    if (pool?.state !== POOL_ACTIVITY_STATUS) continue\n    const mints = [pool.mint_a, pool.mint_b]\n    mints.forEach((mint) => {\n      if (!graph.has(mint)) graph.set(mint, new Map<string, PoolData>())\n      graph.get(mint)?.set(poolAddress, pool)\n    })\n  }\n  return graph\n}\n\n// because of Solana is limiting the number of calculation unit, so the system\n// must limit the list pool of root. Currently, the system set 3 pools in route\nexport const findAllRoutes = (\n  graph: GraphPool,\n  bidMintAddress: string,\n  askMintAddress: string,\n  deep = 0,\n) => {\n  const routes: RouteTrace[] = []\n  const clonedGraph = new Map(graph)\n  const pools = graph.get(bidMintAddress)\n\n  // Too deep\n  if (deep >= LIMIT_POOL_IN_ROUTE) return routes\n  clonedGraph.delete(bidMintAddress)\n  pools?.forEach((poolData, poolAddress) => {\n    // Build sub params\n    const srcMintAddress = bidMintAddress\n    const dstMintAddress =\n      srcMintAddress === poolData.mint_a ? poolData.mint_b : poolData.mint_a\n    const hop: HopData = {\n      srcMintAddress,\n      dstMintAddress,\n      poolData: { ...poolData, address: poolAddress },\n    }\n    // Termination\n    if (dstMintAddress === askMintAddress) return routes.push([hop])\n    // Recursive call\n    const subRoutes = findAllRoutes(\n      clonedGraph,\n      dstMintAddress,\n      askMintAddress,\n      deep + 1,\n    )\n    subRoutes.forEach((route) => routes.push([hop, ...route]))\n  })\n\n  return routes\n}\n\nexport const findBestRouteFromBid = (\n  routes: RouteTrace[],\n  bidState: BidState,\n): RouteState => {\n  const { amount: bidAmount, mintInfo } = bidState\n  let bestRoute: RouteState = {\n    platform: SwapPlatform.SenSwap,\n    best: [],\n    amount: BigInt(0),\n    priceImpact: 0,\n  }\n  routes.forEach((route) => {\n    let amount = utils.decimalize(bidAmount, mintInfo.decimals)\n    route.forEach((hop) => {\n      amount = curve(amount, hop)\n    })\n    const maxAskAmount = bestRoute.amount\n    if (amount > maxAskAmount)\n      bestRoute = {\n        platform: SwapPlatform.SenSwap,\n        best: route,\n        amount,\n        priceImpact: 0,\n      }\n  })\n  const amount = utils.decimalize(bidAmount, mintInfo.decimals)\n  bestRoute.priceImpact = calcPriceImpact(bestRoute.best, amount)\n  return bestRoute\n}\n\nexport const findBestRouteFromAsk = (\n  routes: RouteTrace[],\n  { amount: askAmount, mintInfo }: AskState,\n): RouteState => {\n  let bestRoute: RouteState = {\n    platform: SwapPlatform.SenSwap,\n    best: [],\n    amount: BigInt(0),\n    priceImpact: 0,\n  }\n  for (const route of routes) {\n    const reversedRoute = [...route].reverse()\n    let amount = utils.decimalize(askAmount, mintInfo.decimals)\n\n    for (const hop of reversedRoute) {\n      amount = inverseCurve(amount, hop)\n      if (amount <= BigInt(0)) break\n    }\n    if (amount <= BigInt(0)) continue\n    const minBidAmount = bestRoute.amount\n    if (amount < minBidAmount || !minBidAmount)\n      bestRoute = {\n        platform: SwapPlatform.SenSwap,\n        best: route,\n        amount,\n        priceImpact: 0,\n      }\n  }\n  bestRoute.priceImpact = calcPriceImpact(bestRoute.best, bestRoute.amount)\n  return bestRoute\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { usePool } from '@senhub/providers'\n\nimport { useMintTotalValue } from './useMintTotalValue'\n\n// Refer: sen-lp\nexport const usePoolTvl = (poolAddress?: string) => {\n  const { pools } = usePool()\n  const [tvl, setTvl] = useState(0)\n  const { getMintTotalValue } = useMintTotalValue()\n\n  const getTvl = useCallback(\n    async (poolAddress: string) => {\n      const poolData = pools[poolAddress]\n      if (!poolData) return 0\n      const { reserve_a, reserve_b, mint_a, mint_b } = poolData\n      const totalA = await getMintTotalValue({\n        mintAddress: mint_a,\n        amount: reserve_a,\n      })\n      const totalB = await getMintTotalValue({\n        mintAddress: mint_b,\n        amount: reserve_b,\n      })\n      return totalA + totalB\n    },\n    [getMintTotalValue, pools],\n  )\n\n  const updateTvl = useCallback(\n    async (poolAddress?: string) => {\n      if (!poolAddress) return setTvl(0)\n      const poolTvl = await getTvl(poolAddress)\n      setTvl(poolTvl)\n    },\n    [getTvl],\n  )\n\n  useEffect(() => {\n    updateTvl(poolAddress)\n  }, [updateTvl, poolAddress])\n\n  return { tvl, getTvl }\n}\n","import { useCallback } from 'react'\nimport { Swap, utils } from '@senswap/sen-js'\nimport { useMint, usePool } from '@senhub/providers'\n\nimport { fetchCGK } from 'shared/util'\n\n// Refer: sen-lp\nexport const useMintTotalValue = () => {\n  const { tokenProvider, getMint } = useMint()\n  const { pools } = usePool()\n\n  const getTokenUsd = useCallback(\n    async (mintAddress: string, amount: bigint) => {\n      try {\n        const tokenInfo = await tokenProvider.findByAddress(mintAddress)\n        const ticket = tokenInfo?.extensions?.coingeckoId\n        if (!ticket) throw new Error('Cant not find coingeckoId')\n\n        const cgkData = await fetchCGK(ticket)\n        return (\n          Number(utils.undecimalize(amount, tokenInfo.decimals)) * cgkData.price\n        )\n      } catch (error) {\n        return 0\n      }\n    },\n    [tokenProvider],\n  )\n\n  const getMintTotalValue = useCallback(\n    async ({\n      mintAddress,\n      amount,\n    }: {\n      mintAddress: string\n      amount: bigint\n    }) => {\n      if (!amount) return 0\n      const tokenInfo = await tokenProvider.findByAddress(mintAddress)\n      if (tokenInfo) return getTokenUsd(mintAddress, amount)\n\n      // Get Mint Lpt total value\n      const poolData = Object.values(pools).find(\n        (pool) => pool.mint_lpt === mintAddress,\n      )\n      if (!poolData) return 0\n      const { reserve_a, reserve_b, mint_a, mint_b } = poolData\n      if (reserve_a * reserve_b === BigInt(0)) return 0\n      const {\n        [mintAddress]: { supply },\n      } = await getMint({ address: mintAddress })\n      const { deltaA, deltaB } = Swap.oracle.withdraw(\n        amount,\n        supply,\n        reserve_a,\n        reserve_b,\n      )\n      const balanceA: number = await getMintTotalValue({\n        mintAddress: mint_a,\n        amount: deltaA,\n      })\n      const balanceB: number = await getMintTotalValue({\n        mintAddress: mint_b,\n        amount: deltaB,\n      })\n      return balanceA + balanceB\n    },\n    [getMint, getTokenUsd, tokenProvider, pools],\n  )\n  return { getMintTotalValue }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { account, PoolData } from '@senswap/sen-js'\nimport { usePool } from '@senhub/providers'\n\nimport { AppState } from 'app/model'\nimport { RouteState, SwapPlatform } from 'app/model/route.controller'\nimport {\n  buildPoolGraph,\n  findAllRoutes,\n  findBestRouteFromAsk,\n  findBestRouteFromBid,\n} from 'app/helper/router'\nimport { usePoolTvl } from '../usePoolTvl'\n\nconst MIN_TVL = 1000 // $USD\n\nexport const useBestRoute = (fixedPoolAddress?: string) => {\n  const [bestRoute, setBestRoute] = useState<RouteState>({\n    platform: SwapPlatform.SenSwap,\n    best: [],\n    amount: BigInt(0),\n    priceImpact: 0,\n  })\n  const { bid: bidData, ask: askData } = useSelector((state: AppState) => state)\n  const { pools } = usePool()\n  const { getTvl } = usePoolTvl()\n  /**\n   * Find optimal route\n   */\n  const findBestRoute = useCallback(async () => {\n    const {\n      poolAddresses: bidPoolAddresses,\n      mintInfo: { address: bidMintAddress },\n      amount: bidAmount,\n      priority: bidPriority,\n    } = bidData\n    const {\n      poolAddresses: askPoolAddresses,\n      mintInfo: { address: askMintAddress },\n      amount: askAmount,\n      priority: askPriority,\n    } = askData\n\n    // Initialize an instance for the best route\n    // The best route return a route that user can receive maximum ask amount when swap\n    let bestRoute: RouteState = {\n      platform: SwapPlatform.SenSwap,\n      best: [],\n      amount: BigInt(0),\n      priceImpact: 0,\n    }\n    // Return empty default\n    if (\n      (!Number(bidAmount) && !Number(askAmount)) ||\n      !account.isAddress(bidMintAddress) ||\n      !account.isAddress(askMintAddress) ||\n      !bidPoolAddresses.length ||\n      !askPoolAddresses.length ||\n      bidMintAddress === askMintAddress\n    )\n      return setBestRoute(bestRoute)\n    // filter pool tvl\n    let filteredPool: Record<string, PoolData> = {}\n    await Promise.all(\n      Object.keys(pools).map(async (pool) => {\n        let tvl = await getTvl(pool)\n        if (tvl < MIN_TVL) return\n        filteredPool[pool] = pools[pool]\n      }),\n    )\n\n    // All possible routes\n    let allRoutes = findAllRoutes(\n      buildPoolGraph(filteredPool),\n      bidMintAddress,\n      askMintAddress,\n    )\n    // No available route\n    if (!allRoutes.length) return setBestRoute(bestRoute)\n    // When user select original route from senlp\n    if (account.isAddress(fixedPoolAddress))\n      allRoutes = allRoutes.filter(\n        (route) =>\n          route.length === 1 && route[0].poolData.address === fixedPoolAddress,\n      )\n\n    if (askPriority < bidPriority)\n      bestRoute = findBestRouteFromBid(allRoutes, bidData)\n    else bestRoute = findBestRouteFromAsk(allRoutes, askData)\n    return setBestRoute(bestRoute)\n  }, [askData, bidData, fixedPoolAddress, getTvl, pools])\n\n  useEffect(() => {\n    findBestRoute()\n  }, [findBestRoute])\n\n  return bestRoute\n}\n","import { useHandleSwap } from './useHandleSwap'\nimport { useBestRoute } from './useBestRoute'\n\nconst useSenSwap = (fixedPoolAddress?: string) => {\n  const bestRoute = useBestRoute(fixedPoolAddress)\n  const swap = useHandleSwap()\n\n  return { bestRoute, swap }\n}\n\nexport default useSenSwap\n","import { useCallback, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\n\nimport { Button } from 'antd'\nimport { PlatformButtonProps } from './index'\n\nimport useSenSwap from 'app/hooks/senswap'\nimport { SenLpState } from 'app/constant/senLpState'\nimport { AppDispatch } from 'app/model'\nimport { setLoadingSenSwap, updateRoute } from 'app/model/route.controller'\n\nlet timeout: NodeJS.Timeout\n\nconst SwapButtonSen = ({\n  loading,\n  disabled,\n  children,\n  onSwap,\n}: PlatformButtonProps) => {\n  const { state: senlpState } = useLocation<SenLpState>()\n  const dispatch = useDispatch<AppDispatch>()\n  const { swap, bestRoute } = useSenSwap(senlpState?.poolAddress)\n\n  const setRoute = useCallback(async () => {\n    if (timeout) clearTimeout(timeout)\n    await dispatch(updateRoute({ ...bestRoute }))\n    setTimeout(() => {\n      dispatch(\n        setLoadingSenSwap({ loadingSenswap: false, loadingJupSwap: true }),\n      )\n    }, 500)\n  }, [bestRoute, dispatch])\n\n  useEffect(() => {\n    setRoute()\n  }, [setRoute])\n\n  return (\n    <Button\n      type=\"primary\"\n      onClick={() => onSwap(swap)}\n      loading={loading}\n      disabled={disabled}\n      block\n    >\n      {children}\n    </Button>\n  )\n}\n\nexport default SwapButtonSen\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { LiteMintInfo } from 'app/components/preview'\n\nexport type BidState = {\n  amount: string // Desired amount\n  accountAddress: string // Associated account to the selected token\n  mintInfo: LiteMintInfo // Selected token\n  poolAddresses: string[] // List of available pools\n  priority: number\n}\n\nconst NAME = 'bid'\nconst initialState: BidState = {\n  amount: '',\n  mintInfo: {\n    address: '',\n    decimals: 0,\n  },\n  accountAddress: '',\n  poolAddresses: [],\n  priority: 0,\n}\n\n/**\n * Actions\n */\n\nexport const updateBidData = createAsyncThunk<\n  Partial<BidState>,\n  Partial<BidState> & { prioritized?: boolean; reset?: boolean },\n  { state: any }\n>(\n  `${NAME}/updateBidData`,\n  async ({ prioritized, reset, ...bidData }, { getState }) => {\n    const {\n      bid: { priority: prevPriority },\n      ask: { priority: refPriority },\n    } = getState()\n    if (Number(bidData.amount) < 0) bidData.amount = ''\n    const priority = reset ? 0 : prioritized ? refPriority + 1 : prevPriority\n    return { ...bidData, priority }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateBidData.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { LiteMintInfo } from 'app/components/preview'\n\nexport type AskState = {\n  amount: string // Desired amount\n  accountAddress: string // Associated account to the selected token\n  mintInfo: LiteMintInfo // Selected token\n  poolAddresses: string[] // List of available pools\n  priority: number\n}\n\nconst NAME = 'ask'\nconst initialState: AskState = {\n  amount: '',\n  mintInfo: {\n    address: '',\n    decimals: 0,\n  },\n  accountAddress: '',\n  poolAddresses: [],\n  priority: 0,\n}\n\n/**\n * Actions\n */\n\nexport const updateAskData = createAsyncThunk<\n  Partial<AskState>,\n  Partial<AskState> & { prioritized?: boolean; reset?: boolean },\n  { state: any }\n>(\n  `${NAME}/updateAskData`,\n  async ({ prioritized, reset, ...askData }, { getState }) => {\n    const {\n      bid: { priority: refPriority },\n      ask: { priority: prevPriority },\n    } = getState()\n    if (Number(askData.amount) < 0) askData.amount = ''\n    const priority = reset ? 0 : prioritized ? refPriority + 1 : prevPriority\n    return { ...askData, priority }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateAskData.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { account, WalletInterface } from '@senswap/sen-js'\nimport {\n  PublicKey,\n  Transaction,\n  Connection,\n  TransactionSignature,\n} from '@solana/web3.js'\nimport { SendTransactionOptions } from '@solana/wallet-adapter-base'\n\nclass JupiterWalletWrapper {\n  private _wallet\n  public publicKey: PublicKey\n\n  constructor(address: string, wallet: WalletInterface) {\n    this._wallet = wallet\n    this.publicKey = account.fromAddress(address) || null\n  }\n\n  async sendTransaction(\n    transaction: Transaction,\n    connection: Connection,\n    options?: SendTransactionOptions,\n  ): Promise<TransactionSignature> {\n    transaction = await this.signTransaction(transaction)\n    return await connection.sendRawTransaction(\n      transaction.serializeMessage(),\n      options,\n    )\n  }\n\n  async signTransaction(transaction: Transaction) {\n    return await this._wallet.signTransaction(transaction)\n  }\n\n  async signAllTransactions(transactions: Transaction[]) {\n    const signedTransactions = []\n    for (const transaction of transactions) {\n      const signedTransaction = await this.signTransaction(transaction)\n      signedTransactions.push(signedTransaction)\n    }\n    return signedTransactions\n  }\n}\n\nexport default JupiterWalletWrapper\n","import { useCallback, useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account, PoolData } from '@senswap/sen-js'\nimport { useJupiter } from '@jup-ag/react-hook'\nimport { Connection } from '@solana/web3.js'\n\nimport configs from 'app/configs'\nimport { AppDispatch, AppState } from 'app/model'\nimport {\n  RouteState,\n  setLoadingJupiterRoute,\n  SwapPlatform,\n} from 'app/model/route.controller'\nimport { RouteTrace } from 'app/helper/router'\n\nimport JupiterWalletWrapper from 'app/hooks/jupiter/jupiterWalletWrapper'\nimport { useWallet } from '@senhub/providers'\nimport { HopData } from 'app/components/preview'\n\nconst {\n  sol: { node },\n} = configs\nconst connection = new Connection(node)\n\nconst DEFAULT_DATA: RouteState = {\n  platform: SwapPlatform.JupiterAggregator,\n  best: [],\n  amount: BigInt(0),\n  priceImpact: 0,\n}\n\nlet timeout: NodeJS.Timeout\n\nconst useJupiterAggregator = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const {\n    bid: {\n      mintInfo: { address: bidMintAddress, decimals: bidDecimals },\n      amount: bidAmount,\n    },\n    ask: {\n      mintInfo: { address: askMintAddress },\n    },\n    settings: { slippage },\n  } = useSelector((state: AppState) => state)\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  const amount = Number(bidAmount) * 10 ** bidDecimals\n  const inputMint = useMemo(\n    () =>\n      account.isAddress(bidMintAddress)\n        ? account.fromAddress(bidMintAddress)\n        : undefined,\n    [bidMintAddress],\n  )\n  const outputMint = useMemo(\n    () =>\n      account.isAddress(askMintAddress)\n        ? account.fromAddress(askMintAddress)\n        : undefined,\n    [askMintAddress],\n  )\n\n  // Jupiter Aggregator\n  const { exchange, routes, loading, refresh } = useJupiter({\n    amount,\n    inputMint,\n    outputMint,\n    slippage: slippage * 100,\n    debounceTime: 250,\n  })\n\n  const swap = useCallback(async () => {\n    const {\n      sentre: { wallet },\n    } = window\n    if (!wallet || !account.isAddress(walletAddress))\n      throw new Error('Wallet is not connected')\n    if (!routes?.length) throw new Error('No available route')\n\n    const wrappedWallet = new JupiterWalletWrapper(walletAddress, wallet)\n    const result: any = await exchange({\n      wallet: wrappedWallet,\n      routeInfo: routes[0],\n      onTransaction: async (txid: string) => {\n        await connection.confirmTransaction(txid, 'confirmed')\n        return await connection.getTransaction(txid, {\n          commitment: 'confirmed',\n        })\n      },\n    })\n    if (result.error) throw new Error(result.error?.message || 'Unknown Error')\n    const { txid, outputAddress } = result\n    return { txId: txid, dstAddress: outputAddress }\n  }, [exchange, routes, walletAddress])\n\n  const bestRoute: RouteState = useMemo(() => {\n    if (!routes?.length) return { ...DEFAULT_DATA }\n    const { outAmount, priceImpactPct, marketInfos } = routes[0]\n    const best: RouteTrace = marketInfos.map(({ inputMint, outputMint }) => {\n      const hop: HopData = {\n        poolData: {} as PoolData & { address: string }, // dummy pool data\n        srcMintAddress: inputMint.toBase58(),\n        dstMintAddress: outputMint.toBase58(),\n      }\n      return hop\n    })\n    return {\n      platform: SwapPlatform.JupiterAggregator,\n      amount: BigInt(outAmount),\n      priceImpact: priceImpactPct,\n      best,\n    }\n  }, [routes])\n\n  useEffect(() => {\n    dispatch(setLoadingJupiterRoute({ loadingJupSwap: loading }))\n  }, [dispatch, loading])\n\n  useEffect(() => {\n    if (!!bidAmount && Number(bidAmount) > 0) {\n      if (timeout) clearTimeout(timeout)\n      timeout = setTimeout(() => {\n        refresh()\n      }, 1000)\n    }\n    // because refresh is not a useCallBack function. So not dependent refresh\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [bidAmount])\n  return { swap, bestRoute }\n}\n\nexport default useJupiterAggregator\n","import { useCallback, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { Button } from 'antd'\nimport useJupiterAggregator from 'app/hooks/jupiter/useJupiterAggregator'\n\nimport { PlatformButtonProps } from './index'\nimport { AppDispatch } from 'app/model'\nimport { updateRoute } from 'app/model/route.controller'\n\nlet timeout: NodeJS.Timeout\n\nconst SwapButtonJup = ({\n  loading,\n  disabled,\n  children,\n  onSwap,\n}: PlatformButtonProps) => {\n  const { swap, bestRoute } = useJupiterAggregator()\n  const dispatch = useDispatch<AppDispatch>()\n\n  const setRoute = useCallback(() => {\n    if (timeout) clearTimeout(timeout)\n    setTimeout(() => {\n      dispatch(updateRoute({ ...bestRoute }))\n    }, 500)\n  }, [bestRoute, dispatch])\n\n  useEffect(() => {\n    setRoute()\n  }, [setRoute])\n\n  return (\n    <Button\n      type=\"primary\"\n      onClick={() =>\n        onSwap(() =>\n          swap().then((e) => {\n            return { txId: e.txId, dst: e.dstAddress }\n          }),\n        )\n      }\n      loading={loading}\n      disabled={disabled}\n      block\n    >\n      {children}\n    </Button>\n  )\n}\n\nexport default SwapButtonJup\n","import { useCallback, useState, useEffect, Fragment, ReactNode } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\n\nimport ValidateSwap from '../validateSwap'\nimport SwapButtonSen from './swapButtonSen'\n\nimport { AppState, AppDispatch } from 'app/model'\nimport { explorer } from 'shared/util'\nimport { PriceImpact } from 'app/constant/swap'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { updateAskData } from 'app/model/ask.controller'\nimport { useWrapSol } from 'app/hooks/useWrapSol'\nimport { useSwapStatus } from 'app/hooks/useSwapStatus'\nimport SwapButtonJup from './swapButtonJup'\nimport { SwapPlatform } from 'app/model/route.controller'\n\nexport type PlatformSwap = () => Promise<{\n  txId: any\n  dst: any\n}>\n\nexport type PlatformButtonProps = {\n  loading: boolean\n  disabled: boolean\n  children: ReactNode\n  onSwap: (swap: PlatformSwap) => void\n}\n\nconst SwapAction = ({\n  onCallback = () => {},\n  forceSwap = false,\n}: {\n  onCallback?: () => void\n  forceSwap?: boolean\n}) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const [validSwap, setValidSwap] = useState('')\n  const [loading, setLoading] = useState(false)\n  const {\n    route: { priceImpact, amount: bestAmount, loadingSenswap, platform },\n    bid: {\n      mintInfo: { decimals: bidMintDecimals },\n      priority: bidPriority,\n      amount: bidAmount,\n    },\n    ask: {\n      mintInfo: { decimals: askMintDecimals },\n      priority: askPriority,\n    },\n    settings: { advanced },\n  } = useSelector((state: AppState) => state)\n\n  const { wrapAmount, wrapSol } = useWrapSol()\n  const { disabled } = useSwapStatus()\n\n  const onSwap = async (swapPlatform: PlatformSwap) => {\n    try {\n      setLoading(true)\n      // check wrap sol\n      if (wrapAmount) await wrapSol()\n\n      const { txId } = await swapPlatform()\n      window.notify({\n        type: 'success',\n        description: 'Swap successfully. Click to view details.',\n        onClick: () => window.open(explorer(txId), '_blank'),\n      })\n      setValidSwap(txId)\n      dispatch(updateBidData({ amount: '' }))\n      return onCallback()\n    } catch (er: any) {\n      return window.notify({ type: 'error', description: er.message })\n    } finally {\n      setValidSwap('')\n      return setLoading(false)\n    }\n  }\n\n  const setAskData = useCallback(() => {\n    if (askPriority < bidPriority) {\n      dispatch(\n        updateAskData({\n          amount: utils.undecimalize(bestAmount, askMintDecimals),\n        }),\n      )\n    }\n  }, [askMintDecimals, askPriority, bestAmount, bidPriority, dispatch])\n  useEffect(() => {\n    setAskData()\n  }, [setAskData])\n\n  const setBidData = useCallback(() => {\n    if (bidPriority < askPriority) {\n      dispatch(\n        updateBidData({\n          amount: utils.undecimalize(bestAmount, bidMintDecimals),\n        }),\n      )\n    }\n  }, [askPriority, bestAmount, bidMintDecimals, bidPriority, dispatch])\n  useEffect(() => {\n    setBidData()\n  }, [setBidData])\n\n  const tooHighImpact =\n    !advanced && priceImpact > PriceImpact.acceptableSwap && !forceSwap\n\n  const content = tooHighImpact\n    ? 'Too High Price Impact'\n    : forceSwap\n    ? 'Swap Anyway'\n    : 'Swap'\n\n  const validSwapValue = Number(bestAmount)\n  const isUseJup =\n    !loadingSenswap &&\n    !!Number(bidAmount) &&\n    (!validSwapValue || platform === SwapPlatform.JupiterAggregator)\n\n  return (\n    <Fragment>\n      {isUseJup ? (\n        <SwapButtonJup\n          onSwap={onSwap}\n          disabled={disabled || tooHighImpact}\n          loading={loading}\n        >\n          {content}\n        </SwapButtonJup>\n      ) : (\n        <SwapButtonSen\n          onSwap={onSwap}\n          disabled={disabled || tooHighImpact}\n          loading={loading}\n        >\n          {content}\n        </SwapButtonSen>\n      )}\n      <ValidateSwap txId={validSwap} />\n    </Fragment>\n  )\n}\n\nexport default SwapAction\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { DEFAULT_WSOL, utils } from '@senswap/sen-js'\n\nimport { AppState } from 'app/model'\nimport useAccountBalance from 'shared/hooks/useAccountBalance'\n\nexport const useWrapSol = () => {\n  const {\n    bid: {\n      amount: bidAmount,\n      mintInfo: { address: bidMintAddress, decimals: bidMintDecimals },\n      accountAddress: bidAccountAddress,\n    },\n  } = useSelector((state: AppState) => state)\n  const { amount: bidBalance } = useAccountBalance(bidAccountAddress)\n\n  const wrapAmount = useMemo(() => {\n    if (!Number(bidAmount) || bidMintAddress !== DEFAULT_WSOL) return BigInt(0)\n    const amount = utils.decimalize(bidAmount, bidMintDecimals)\n    if (amount <= bidBalance) return BigInt(0)\n    return amount - bidBalance\n  }, [bidBalance, bidAmount, bidMintAddress, bidMintDecimals])\n\n  const wrapSol = async () => {\n    const { swap, wallet } = window.sentre\n    if (!wallet) throw new Error('Wallet is not connected')\n    if (wrapAmount) return await swap.wrapSol(wrapAmount, wallet)\n  }\n\n  return { wrapAmount, wrapSol }\n}\n","import { useCallback, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Row, Col, Space, Typography, Modal, Card, Checkbox } from 'antd'\nimport Preview from 'app/components/preview'\nimport IonIcon from '@sentre/antd-ionicon'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport SwapAction from 'app/components/swapAction'\n\nimport { AppState } from 'app/model'\nimport { PriceImpact } from 'app/constant/swap'\n\nconst ConfirmSwap = ({\n  visible = false,\n  onCancel = () => {},\n}: {\n  visible?: boolean\n  onCancel?: (visible: boolean) => void\n}) => {\n  const [checked, setChecked] = useState(false)\n  const {\n    route: { priceImpact },\n    bid: bidData,\n    ask: askData,\n  } = useSelector((state: AppState) => state)\n\n  const tooHighImpact = priceImpact > PriceImpact.acceptableSwap\n\n  const onCloseModal = useCallback(() => {\n    onCancel(false)\n    setChecked(false)\n  }, [onCancel])\n\n  return (\n    <Modal\n      onCancel={onCloseModal}\n      closeIcon={<IonIcon name=\"close\" />}\n      footer={null}\n      visible={visible}\n      forceRender\n    >\n      <Row gutter={[16, 24]}>\n        <Col span={24}>\n          <Typography.Title level={4}> Confirm swaps</Typography.Title>\n        </Col>\n        <Col span={24}>\n          <Row align=\"middle\" justify=\"space-between\">\n            <Col>\n              <Space direction=\"vertical\">\n                <Typography.Text>From</Typography.Text>\n                <Space>\n                  <MintAvatar mintAddress={bidData.mintInfo?.address} />\n                  <Typography.Text>\n                    <MintSymbol mintAddress={bidData.mintInfo?.address} />\n                  </Typography.Text>\n                </Space>\n                <Typography.Title level={4}>{bidData.amount}</Typography.Title>\n              </Space>\n            </Col>\n            <Col>\n              <IonIcon name=\"arrow-forward-outline\" style={{ fontSize: 24 }} />\n            </Col>\n            <Col>\n              <Space direction=\"vertical\" align=\"end\">\n                <Typography.Text>To</Typography.Text>\n                <Space>\n                  <MintAvatar mintAddress={askData.mintInfo?.address} />\n                  <Typography.Text>\n                    <MintSymbol mintAddress={askData.mintInfo?.address} />\n                  </Typography.Text>\n                </Space>\n                <Typography.Title level={4}>{askData.amount}</Typography.Title>\n              </Space>\n            </Col>\n          </Row>\n        </Col>\n        <Col>\n          <Card bordered={false} className=\"confirm-info\">\n            <Preview />\n          </Card>\n        </Col>\n        {tooHighImpact && (\n          <Col span={24}>\n            <Checkbox checked={checked} onChange={() => setChecked(!checked)}>\n              The price impact is currently high. Tick the checkbox to accept\n              the swap.\n            </Checkbox>\n          </Col>\n        )}\n        <Col span={24}>\n          <SwapAction onCallback={onCloseModal} forceSwap={checked} />\n        </Col>\n      </Row>\n    </Modal>\n  )\n}\nexport default ConfirmSwap\n","import { useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Button, Card, Col, Row, Typography } from 'antd'\nimport Preview from 'app/components/preview'\n\nimport ConfirmSwap from 'app/components/confirmSwap'\nimport { useSwapStatus } from 'app/hooks/useSwapStatus'\nimport { AppState } from 'app/model'\n\nconst SwapActions = () => {\n  const [visible, setVisible] = useState(false)\n  const { disabled, loading } = useSwapStatus()\n  const { enhancement } = useSelector((state: AppState) => state.settings)\n\n  return (\n    <Card bordered={false}>\n      <Row gutter={[24, 24]}>\n        <Col span={24}>\n          <Typography.Title level={5}>Review & Swap</Typography.Title>\n        </Col>\n        <Col span={24}>\n          <Preview />\n        </Col>\n        {enhancement && <Col span={24} />} {/* Safe sapce */}\n        <Col span={24}>\n          <Button\n            type=\"primary\"\n            onClick={() => setVisible(true)}\n            disabled={disabled}\n            loading={loading}\n            block\n          >\n            Review & Swap\n          </Button>\n        </Col>\n        <ConfirmSwap visible={visible} onCancel={setVisible} />\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapActions\n","import { Space, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\n\nimport { numeric } from 'shared/util'\n\nconst MintPoolInfo = ({\n  mintAddress,\n  tvl = '',\n  price,\n  format = '0,0.[00]a',\n}: {\n  mintAddress: string\n  tvl?: string | number\n  price?: number\n  format?: string\n}) => {\n  return (\n    <Space direction=\"vertical\" size={4}>\n      <MintAvatar mintAddress={mintAddress} />\n      <Space>\n        <Typography.Text>TVL:</Typography.Text>\n        <Typography.Title level={5}>\n          {numeric(tvl).format(format)}\n        </Typography.Title>\n        <Typography.Title level={5}>\n          <MintSymbol mintAddress={mintAddress} />\n        </Typography.Title>\n      </Space>\n      <Typography.Text className=\"caption\" type=\"secondary\">\n        ~ ${numeric(price).format(format)}\n      </Typography.Text>\n    </Space>\n  )\n}\n\nexport default MintPoolInfo\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { account, PoolData, utils } from '@senswap/sen-js'\n\nimport { Card, Col, Divider, Row } from 'antd'\nimport MintPoolInfo from './mintPoolInfo'\n\nimport { AppState } from 'app/model'\nimport { extractReserve } from 'app/helper/router'\nimport useMintCgk from 'app/hooks/useMintCgk'\nimport './index.less'\n\nconst PoolInfo = () => {\n  const {\n    route: { best },\n    bid: { mintInfo: bidMintInfo },\n    ask: { mintInfo: askMintInfo },\n  } = useSelector((state: AppState) => state)\n  const bidCgk = useMintCgk(bidMintInfo.address)\n  const askCgk = useMintCgk(askMintInfo.address)\n\n  const { poolData: bidPoolData } = best[0] || {}\n  const { poolData: askPoolData } = best[best.length - 1] || {}\n\n  const getMintTVL = (mintAddress?: string, poolData?: PoolData) => {\n    try {\n      if (!account.isAddress(mintAddress) || !poolData) return BigInt(0)\n      return extractReserve(mintAddress, poolData)\n    } catch (er) {\n      return BigInt(0)\n    }\n  }\n\n  // Bid TVL\n  const bidTVL = useMemo(() => {\n    if (!bidMintInfo.decimals) return 0\n    const bid = getMintTVL(bidMintInfo.address, bidPoolData)\n    return Number(utils.undecimalize(bid, bidMintInfo.decimals))\n  }, [bidMintInfo, bidPoolData])\n  // Ask TVL\n  const askTVL = useMemo(() => {\n    if (!askMintInfo.decimals) return 0\n    const ask = getMintTVL(askMintInfo.address, askPoolData)\n    return Number(utils.undecimalize(ask, askMintInfo.decimals))\n  }, [askMintInfo, askPoolData])\n\n  const disabled = !bidTVL || !askTVL\n\n  return (\n    <Card\n      bordered={false}\n      className={disabled ? 'disabled-swap-pool-info-card' : undefined}\n    >\n      <Row gutter={[16, 16]} wrap={false}>\n        <Col span={11}>\n          <MintPoolInfo\n            mintAddress={bidMintInfo?.address || ''}\n            tvl={bidTVL}\n            price={bidTVL * bidCgk.price}\n          />\n        </Col>\n        <Col>\n          <Divider type=\"vertical\" style={{ height: '100%' }} />\n        </Col>\n        <Col span={11}>\n          <MintPoolInfo\n            mintAddress={askMintInfo?.address || ''}\n            tvl={askTVL}\n            price={askTVL * askCgk.price}\n          />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default PoolInfo\n","export type EthAddressConfig = {\n  mainnet: string\n  goerli: string\n  ropsten: string\n}\n\nexport type EthChainIdConfig = {\n  mainnet: number\n  goerli: number\n  ropsten: number\n}\n\nexport type EtherNetwork = 'mainnet' | 'goerli'\n\nexport type EtherConfigSet = {\n  mainnet: string\n  goerli: string\n  ropsten: string\n}\n\nexport type MoralisStructure = {\n  url: string\n  apiKey: string\n}\n\nexport const ETH_BRIDGE_ADDRESS: EthAddressConfig = {\n  mainnet: '0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B',\n  goerli: '0x706abc4E45D419950511e474C7B9Ed348A4a716c',\n  ropsten: '0xC89Ce4735882C9F0f0FE26686c53074E09B0D550',\n}\n\nexport const ETH_TOKEN_BRIDGE_ADDRESS: EthAddressConfig = {\n  mainnet: '0x3ee18B2214AFF97000D974cf647E7C347E8fa585',\n  goerli: '0xf890982f9310df57d00f659cf4fd87e65aded8d7',\n  ropsten: '0x0290FB167208Af455bB137780163b7B7a9a10C16',\n}\n\nexport const CHAIN_ID_ETH: EthChainIdConfig = {\n  mainnet: 1,\n  goerli: 5,\n  ropsten: 3,\n}\n\nexport const MORALIS_INFO: MoralisStructure = {\n  url: 'https://deep-index.moralis.io/api/v2',\n  apiKey: 'N6yeIUl1FxCPZWbXyxLHWPAjSr6ahQeJTX3d19pSKCwHsLCzpWE7z1hilon4xDOd',\n}\n\nexport const INFURA_API_KEY: String = '5eb1b92f2065414d9dd21858fac54257'\n\nexport const INFURA_API_HTTP_URL: EtherConfigSet = {\n  mainnet: `https://mainnet.infura.io/v3/${INFURA_API_KEY}`,\n  goerli: `https://goerli.infura.io/v3/${INFURA_API_KEY}`,\n  ropsten: `https://ropsten.infura.io/v3/${INFURA_API_KEY}`,\n}\n\nexport const INFURA_API_WSS_URL: EtherConfigSet = {\n  mainnet: `wss://mainnet.infura.io/ws/v3/${INFURA_API_KEY}`,\n  goerli: `wss://goerli.infura.io/ws/v3/${INFURA_API_KEY}`,\n  ropsten: `wss://ropsten.infura.io/ws/v3/${INFURA_API_KEY}`,\n}\n","export type SolNetWork = 'mainnet' | 'devnet'\n\nexport type SolAddressConfig = {\n  mainnet: string\n  testnet: string\n  devnet: string\n}\n\nexport const SOL_BRIDGE_ADDRESS: SolAddressConfig = {\n  mainnet: 'worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth',\n  testnet: 'Brdguy7BmNB4qwEbcqqMbyV5CyJd2sxQNUn6NEpMSsUb',\n  devnet: '3u8hJUVTA4jH1wYAyUur7FFZVQ8H635K3tSHHF4ssjQ5',\n}\n\nexport const SOL_TOKEN_BRIDGE_ADDRESS: SolAddressConfig = {\n  mainnet: 'wormDTUJ6AWPNvk59vGQbDvGJmqbDTdgWgAqcLBCgUb',\n  testnet: 'A4Us8EhCC76XdGAN17L4KpRNEK423nMivVHZzZqFqqBg',\n  devnet: 'DZnkkTmCiFWfYTfT41X3Rd1kDgozqzxWaHqsw6W4x2oe',\n}\n","import {\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from '@certusone/wormhole-sdk'\nimport storage from 'shared/storage'\n\nimport {\n  EtherNetwork,\n  ETH_BRIDGE_ADDRESS,\n  ETH_TOKEN_BRIDGE_ADDRESS,\n} from 'app/constant/ethConfig'\nimport {\n  SolNetWork,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n} from 'app/constant/solConfig'\nimport { getIsWrappedAssetSol } from '@certusone/wormhole-sdk'\n\nexport const getSolNetwork = () => {\n  const solNetwork = storage.get('network') || 'mainnet'\n  return solNetwork\n}\n\nexport const getEtherNetwork = () => {\n  const solNetwork = getSolNetwork()\n  const etherNetwork = solNetwork === 'mainnet' ? 'mainnet' : 'goerli'\n  return etherNetwork\n}\n\nexport const getEtherContext = () => {\n  const etherNetwork: EtherNetwork = getEtherNetwork()\n  return {\n    chainId: CHAIN_ID_ETH,\n    tokenBridgeAddress: ETH_TOKEN_BRIDGE_ADDRESS[etherNetwork],\n    bridgeAddress: ETH_BRIDGE_ADDRESS[etherNetwork],\n  }\n}\n\nexport const getSolContext = () => {\n  const solNetWork: SolNetWork = getSolNetwork()\n  return {\n    chainId: CHAIN_ID_SOLANA,\n    tokenBridgeAddress: SOL_TOKEN_BRIDGE_ADDRESS[solNetWork],\n    bridgeAddress: SOL_BRIDGE_ADDRESS[solNetWork],\n  }\n}\n\nexport const checkAttestedWormhole = async (mintAddress: string) => {\n  const solContext = getSolContext()\n  return getIsWrappedAssetSol(\n    window.sentre.splt.connection,\n    solContext.tokenBridgeAddress,\n    mintAddress,\n  )\n}\n","import { lazy, Suspense, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { account } from '@senswap/sen-js'\n\nimport { Popover, Tag } from 'antd'\n\nimport { AppState } from 'app/model'\nimport { checkAttestedWormhole } from 'app/helper/wormhole'\nimport { randomColor } from 'shared/util'\n\nconst WORMHOLE_COLOR = '#F9575E'\n\nconst FrameWormhole = () => {\n  const FrameWormhole = lazy(() =>\n    // @ts-ignore\n    import('@frame/sen_assets/bootstrap').then((module) => ({\n      default: module.FrameWormhole,\n    })),\n  )\n  return (\n    <Suspense fallback=\"Loading...\">\n      <FrameWormhole />\n    </Suspense>\n  )\n}\n\nconst WormholeSupported = () => {\n  const [wormholeSupported, setWormholeSupported] = useState(false)\n  const {\n    bid: { mintInfo },\n  } = useSelector((state: AppState) => state)\n  const { address: mintAddress } = mintInfo || {}\n\n  useEffect(() => {\n    ;(async () => {\n      if (!account.isAddress(mintAddress)) return setWormholeSupported(false)\n      const wormholeSupported = await checkAttestedWormhole(mintAddress)\n      return setWormholeSupported(wormholeSupported)\n    })()\n  }, [mintAddress])\n\n  if (!wormholeSupported) return null\n  return (\n    <Popover\n      overlayInnerStyle={{\n        background: 'transparent',\n        width: 375,\n        boxShadow: 'none',\n      }}\n      trigger=\"click\"\n      content={<FrameWormhole />}\n    >\n      <Tag\n        style={{\n          margin: 0,\n          borderRadius: 4,\n          color: randomColor(WORMHOLE_COLOR),\n          cursor: 'pointer',\n        }}\n        color={randomColor(WORMHOLE_COLOR, 0.2)}\n      >\n        Wormhole Bridge\n      </Tag>\n    </Popover>\n  )\n}\n\nexport default WormholeSupported\n","var _defs, _path, _path2;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgSen(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    \"data-name\": \"Layer 1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    viewBox: \"0 0 283.465 283.465\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"linear-gradient\",\n    x1: -1222.504,\n    y1: -2883.343,\n    x2: -1135.428,\n    y2: -2970.419,\n    gradientTransform: \"translate(1300.837 3068.613)\",\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    stopColor: \"#f9575e\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.27,\n    stopColor: \"#f8555b\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.486,\n    stopColor: \"#f44f51\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.685,\n    stopColor: \"#ee4540\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.871,\n    stopColor: \"#e63728\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#de2a13\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"linear-gradient-2\",\n    x1: 1314.111,\n    y1: -895.144,\n    x2: 1389.882,\n    y2: -811.556,\n    gradientTransform: \"translate(1516.988 -707.868) rotate(180)\",\n    xlinkHref: \"#linear-gradient\"\n  }))), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Senswap logo FINAL\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.179,85.127H114a92.562,92.562,0,0,1,92.562,92.562v20.648a0,0,0,0,1,0,0H129.741a92.562,92.562,0,0,1-92.562-92.562V85.127A0,0,0,0,1,37.179,85.127Z\",\n    transform: \"translate(107.828 328.128) rotate(-135)\",\n    fill: \"url(#linear-gradient)\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M169.462,85.127h76.823a0,0,0,0,1,0,0v20.648a92.562,92.562,0,0,1-92.562,92.562H76.9a0,0,0,0,1,0,0V177.689a92.562,92.562,0,0,1,92.562-92.562Z\",\n    transform: \"translate(-52.89 155.776) rotate(-45)\",\n    fill: \"url(#linear-gradient-2)\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSen);\nexport default __webpack_public_path__ + \"static/media/sen.f2d012c907167ba613b035621b6423cb.svg\";\nexport { ForwardRef as ReactComponent };","import { Avatar, Space, Tooltip, Typography } from 'antd'\nimport SentreIcon from 'app/static/images/sen.svg'\n\nexport type PoweredBySentreProps = {\n  title?: string\n  spacing?: number\n  iconSize?: number\n}\n\nconst PoweredBySentre = ({\n  title = 'Powered by',\n  spacing = 4,\n  iconSize = 20,\n}: PoweredBySentreProps) => {\n  return (\n    <Space size={spacing} style={{ cursor: 'pointer' }}>\n      <Typography.Text style={{ fontSize: 12, color: '#7A7B85' }}>\n        {title}\n      </Typography.Text>\n      <Tooltip title=\"Sentre Protocol\">\n        <Avatar src={SentreIcon} size={iconSize} />\n      </Tooltip>\n    </Space>\n  )\n}\n\nexport default PoweredBySentre\n","import { Row, Col, Button, Typography, Tooltip } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nconst Option = ({\n  label,\n  value,\n  onClick,\n  active = false,\n}: {\n  label: string\n  value: number\n  onClick: (value: number) => void\n  active?: boolean\n}) => {\n  return (\n    <Typography.Text\n      style={{ cursor: 'pointer', color: active ? '#F9575E' : 'inherit' }}\n      onClick={() => onClick(value)}\n    >\n      {label}\n    </Typography.Text>\n  )\n}\n\nconst Slippage = ({\n  value,\n  onChange,\n}: {\n  value: number\n  onChange: (value: number) => void\n}) => {\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false}>\n          <Col flex=\"auto\">\n            <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>\n              Slippage Tolerance\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Tooltip\n              placement=\"right\"\n              title={\n                <span>\n                  Your transaction will be canceled if the confirmed price\n                  breaks the limited range of{' '}\n                  <strong style={{ color: '#f9575e' }}>{`${\n                    value * 100\n                  }%.`}</strong>\n                </span>\n              }\n            >\n              <Button\n                type=\"text\"\n                shape=\"circle\"\n                size=\"small\"\n                icon={<IonIcon name=\"information-circle-outline\" />}\n              />\n            </Tooltip>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false} justify=\"space-between\">\n          {[0.001, 0.005, 0.01, 0.05, 1].map((e, i) => (\n            <Col key={i}>\n              <Option\n                label={e === 1 ? 'Freely' : `${e * 100}%`}\n                value={e}\n                onClick={onChange}\n                active={e === value}\n              />\n            </Col>\n          ))}\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Slippage\n","import { Row, Col, Typography, Switch } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nconst Advanced = ({\n  value,\n  onChange,\n}: {\n  value: boolean\n  onChange: (value: boolean) => void\n}) => {\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false}>\n          <Col flex=\"auto\">\n            <Typography.Text>Advanced Mode</Typography.Text>\n          </Col>\n          <Col>\n            <Switch size=\"small\" checked={value} onChange={onChange} />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Typography.Paragraph className=\"caption\">\n          <IonIcon name=\"warning-outline\" /> This advanced mode will disable the\n          automatic protection that often results in bad rates and lost funds.\n          Only use this mode if you know what you are doing.\n        </Typography.Paragraph>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Advanced\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nexport type State = {\n  slippage: number\n  advanced: boolean\n  enhancement: boolean\n}\n\nconst NAME = 'settings'\nconst initialState: State = {\n  slippage: 0.01,\n  advanced: false,\n  enhancement: false,\n}\n\n/**\n * Actions\n */\n\nexport const updateSettings = createAsyncThunk(\n  `${NAME}/updateSettings`,\n  async (settings: Partial<State>) => ({ ...settings }),\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateSettings.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { Col, Row, Switch, Typography } from 'antd'\n\nconst Enhancement = ({\n  value,\n  onChange,\n}: {\n  value: boolean\n  onChange: (value: boolean) => void\n}) => {\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false}>\n          <Col flex=\"auto\">\n            <Typography.Text>Enhancement UI</Typography.Text>\n          </Col>\n          <Col>\n            <Switch size=\"small\" checked={value} onChange={onChange} />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Typography.Paragraph className=\"caption\">\n          Take advantage of all the familiar tools.\n        </Typography.Paragraph>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Enhancement\n","import { useDispatch, useSelector } from 'react-redux'\n\nimport { Row, Col, Button, Popover, Typography, Divider } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\nimport PoweredBySentre from 'app/components/poweredBySentre'\nimport Slippage from './slippage'\nimport Advanced from './advanced'\n\nimport { updateSettings } from 'app/model/settings.controller'\nimport { AppDispatch, AppState } from 'app/model'\nimport Enhancement from './enhancement'\n\nconst Settings = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const { slippage, advanced, enhancement } = useSelector(\n    (state: AppState) => state.settings,\n  )\n\n  const onSlippage = (slippage: number) => {\n    return dispatch(updateSettings({ slippage }))\n  }\n  const onAdvanced = (advanced: boolean) => {\n    return dispatch(updateSettings({ advanced }))\n  }\n  const onEnhancement = (enhancement: boolean) => {\n    return dispatch(updateSettings({ enhancement }))\n  }\n\n  return (\n    <Row gutter={[4, 4]} justify=\"end\" align=\"middle\" wrap={false}>\n      <Col>\n        <PoweredBySentre />\n      </Col>\n      <Col>\n        <Divider type=\"vertical\" style={{ padding: 0 }} />\n      </Col>\n      <Col>\n        <Popover\n          placement=\"bottomRight\"\n          overlayInnerStyle={{ width: 300 }}\n          content={\n            <Row gutter={[8, 8]}>\n              <Col span={24}>\n                <Typography.Title level={5}>Settings</Typography.Title>\n              </Col>\n              <Col span={24}>\n                <Slippage value={slippage} onChange={onSlippage} />\n              </Col>\n              <Divider style={{ margin: 0 }} />\n              <Col span={24}>\n                <Advanced value={advanced} onChange={onAdvanced} />\n              </Col>\n              <Divider style={{ margin: 0 }} />\n              <Col span={24}>\n                <Enhancement value={enhancement} onChange={onEnhancement} />\n              </Col>\n            </Row>\n          }\n          trigger=\"click\"\n        >\n          <Button\n            type=\"text\"\n            shape=\"circle\"\n            size=\"small\"\n            icon={<IonIcon name=\"settings-outline\" />}\n          />\n        </Popover>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Settings\n","import { ChangeEvent, useState, forwardRef, useCallback, useRef } from 'react'\n\nimport { Input, Tooltip, Space, InputProps } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nlet timeoutId: ReturnType<typeof setTimeout> | undefined\n\n/**\n * Numeric Input\n * - Check balance based on the max\n * - Only accept numeric characters\n * @remarks The props of input follows the same as https://ant.design/components/input/#API. Extra & Overrided props\n * @param max - Maximum\n * @param onValue - A triggerred function if a valid number\n */\nconst NumericInput = forwardRef(\n  (\n    {\n      max,\n      onValue = () => {},\n      onChange = () => {},\n      ...props\n    }: InputProps & {\n      onValue?: (val: string) => void\n      max?: string | number\n    },\n    ref: any,\n  ) => {\n    const [error, setError] = useState('')\n    const [cursor, setCursor] = useState<number | null>(null)\n    const innerRef = useRef(ref)\n\n    // Handle amount\n    const onAmount = useCallback(\n      (val: string) => {\n        const onError = (er: string) => {\n          if (timeoutId) {\n            clearTimeout(timeoutId)\n            timeoutId = undefined\n          }\n          setError(er)\n          timeoutId = setTimeout(() => setError(''), 500)\n        }\n        const reg = /^\\d*(\\.\\d*)?$/\n        if (!reg.test(val)) return onError('Invalid character')\n        if (max && parseFloat(val) > parseFloat(max.toString()))\n          return onError('Not enough balance')\n        return onValue(val)\n      },\n      [max, onValue],\n    )\n\n    // Handle cursor jumping\n    // To prevent autofocus on mobile, we must strictly check cursor different from null\n    if (cursor !== null) innerRef?.current?.setSelectionRange(cursor, cursor)\n\n    return (\n      <Tooltip\n        title={\n          <Space>\n            <IonIcon name=\"warning\" />\n            {error}\n          </Space>\n        }\n        visible={!!error}\n      >\n        <Input\n          {...props}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            onChange(e)\n            setCursor(e.target.selectionStart)\n            onAmount(e.target.value || '')\n          }}\n          ref={innerRef}\n        />\n      </Tooltip>\n    )\n  },\n)\n\nexport default NumericInput\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\nimport { useMint, usePool, useWallet } from '@senhub/providers'\n\nimport { SelectionInfo } from 'app/components/selection/mintSelection'\n\nconst DEFAULT_INFO = {\n  accountAddress: '',\n  poolAddresses: [],\n}\n\ntype MintSelection = SelectionInfo & {\n  accountAddress?: string\n}\n\nexport const useMintSelection = (mintAddress: string): MintSelection => {\n  const { wallet } = useWallet()\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n  const [selectionInfo, setSelectionInfo] =\n    useState<MintSelection>(DEFAULT_INFO)\n\n  const getSelectionInfo = useCallback(async () => {\n    if (!account.isAddress(mintAddress) || !Object.keys(pools).length)\n      return setSelectionInfo(DEFAULT_INFO)\n\n    const mintInfo = await tokenProvider.findByAddress(mintAddress)\n    if (!mintInfo) return setSelectionInfo(DEFAULT_INFO)\n    const { splt } = window.sentre\n    // get mint account\n    const accountAddress = await splt.deriveAssociatedAddress(\n      wallet.address,\n      mintAddress,\n    )\n    // get pools\n    const poolAddresses = Object.keys(pools).filter((poolAddress) => {\n      const { mint_a, mint_b } = pools[poolAddress]\n      return [mint_a, mint_b].includes(mintAddress)\n    })\n    setSelectionInfo({\n      accountAddress,\n      mintInfo,\n      poolAddresses,\n    })\n  }, [mintAddress, pools, tokenProvider, wallet.address])\n\n  useEffect(() => {\n    getSelectionInfo()\n  }, [getSelectionInfo])\n\n  return selectionInfo\n}\n","import { useMemo, useEffect, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account } from '@senswap/sen-js'\nimport { useMint, usePool, useUI, useWallet } from '@senhub/providers'\n\nimport { Row, Col, Typography, Space } from 'antd'\nimport { SelectionInfo } from '../selection/mintSelection'\nimport NumericInput from 'shared/antd/numericInput'\nimport { MintSelection, MintSymbol } from 'shared/antd/mint'\n\nimport configs from 'app/configs'\nimport { numeric } from 'shared/util'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateAskData } from 'app/model/ask.controller'\nimport { useMintSelection } from 'app/hooks/useMintSelection'\nimport { SenLpState } from 'app/constant/senLpState'\nimport useAccountBalance from 'shared/hooks/useAccountBalance'\nimport { setLoadingSenSwap } from 'app/model/route.controller'\n\nconst Ask = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n  const { pools } = usePool()\n  const { getDecimals } = useMint()\n  const {\n    ui: { theme },\n  } = useUI()\n  const {\n    ask: { amount, accountAddress, mintInfo, poolAddresses },\n  } = useSelector((state: AppState) => state)\n  const { state } = useLocation<SenLpState>()\n  const { balance: maxBalance } = useAccountBalance(accountAddress)\n  const selectionDefault = useMintSelection(configs.swap.askDefault)\n  const poolAddress = state?.poolAddress\n\n  // Select default\n  useEffect(() => {\n    if (account.isAddress(accountAddress) || account.isAddress(poolAddress))\n      return\n    dispatch(setLoadingSenSwap({ loadingSenswap: true }))\n    dispatch(updateAskData(selectionDefault))\n  }, [accountAddress, dispatch, poolAddress, selectionDefault])\n\n  // Compute selection info\n  const selectionInfo: SelectionInfo = useMemo(\n    () => ({ mintInfo, poolAddresses }),\n    [mintInfo, poolAddresses],\n  )\n\n  // Handle amount\n  const onAmount = (val: string) => {\n    dispatch(setLoadingSenSwap({ loadingSenswap: true }))\n    dispatch(updateAskData({ amount: val, prioritized: true }))\n  }\n\n  // Compute available pools\n  const getAvailablePoolAddresses = useCallback(\n    (mintAddress: string) => {\n      if (!account.isAddress(mintAddress)) return []\n      return Object.keys(pools).filter((poolAddress) => {\n        const { mint_a, mint_b } = pools[poolAddress]\n        return [mint_a, mint_b].includes(mintAddress)\n      })\n    },\n    [pools],\n  )\n\n  const onSelectionInfo = async (mintAddress: string) => {\n    const { splt } = window.sentre\n    const poolAddresses = getAvailablePoolAddresses(mintAddress)\n    const decimals = await getDecimals(mintAddress)\n\n    const selectionInfo: SelectionInfo = {\n      mintInfo: {\n        address: mintAddress,\n        decimals,\n      },\n      poolAddresses,\n    }\n\n    dispatch(setLoadingSenSwap({ loadingSenswap: true }))\n    if (!account.isAddress(mintAddress))\n      return dispatch(\n        updateAskData({ amount: '', prioritized: true, ...selectionInfo }),\n      )\n    const accountAddress = await splt.deriveAssociatedAddress(\n      walletAddress,\n      mintAddress,\n    )\n\n    return dispatch(\n      updateAskData({\n        amount: '',\n        prioritized: true,\n        accountAddress,\n        ...selectionInfo,\n      }),\n    )\n  }\n\n  const DARK_BOX_SHADOW = '0px 4px 44px rgba(0, 0, 0, 0.42)'\n  const LIGHT_BOX_SHADOW = '0px 4px 40px rgba(33, 36, 51, 0.18)'\n\n  const MINT_SELECTION_STYLE = {\n    marginLeft: -7,\n    padding: '3px 8px',\n    borderRadius: 8,\n    cursor: 'pointer',\n    boxShadow: theme === 'dark' ? DARK_BOX_SHADOW : LIGHT_BOX_SHADOW,\n  }\n\n  return (\n    <Row gutter={[0, 0]}>\n      <Col flex=\"auto\">\n        <MintSelection\n          value={mintInfo.address}\n          onChange={onSelectionInfo}\n          style={MINT_SELECTION_STYLE}\n        />\n      </Col>\n      <Col>\n        <NumericInput\n          bordered={false}\n          style={{\n            textAlign: 'right',\n            fontSize: 24,\n            maxWidth: 150,\n            padding: 0,\n          }}\n          placeholder=\"0\"\n          value={amount}\n          onValue={onAmount}\n        />\n      </Col>\n      <Col span={24}>\n        <Space className=\"caption\">\n          <Typography.Text type=\"secondary\">Available:</Typography.Text>\n          <Typography.Text type=\"secondary\">\n            {numeric(maxBalance).format('0,0.[00]')}\n          </Typography.Text>\n          <Typography.Text type=\"secondary\">\n            <MintSymbol mintAddress={selectionInfo.mintInfo?.address || ''} />\n          </Typography.Text>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Ask\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account, DEFAULT_WSOL, utils } from '@senswap/sen-js'\nimport { useMint, usePool, useUI, useWallet } from '@senhub/providers'\n\nimport { Row, Col, Typography, Space, Radio } from 'antd'\nimport NumericInput from 'shared/antd/numericInput'\nimport { MintSelection, MintSymbol } from 'shared/antd/mint'\n\nimport configs from 'app/configs'\nimport { numeric } from 'shared/util'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { SelectionInfo } from '../selection/mintSelection'\nimport { useMintSelection } from 'app/hooks/useMintSelection'\nimport { SenLpState } from 'app/constant/senLpState'\nimport useAccountBalance from 'shared/hooks/useAccountBalance'\nimport { setLoadingSenSwap } from 'app/model/route.controller'\n\nconst {\n  swap: { bidDefault },\n} = configs\n\nexport enum RATE {\n  FIFTY = 50,\n  HUNDRED = 100,\n}\n\nconst Bid = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const {\n    wallet: { address: walletAddress, lamports },\n  } = useWallet()\n  const { pools } = usePool()\n  const { getDecimals } = useMint()\n  const {\n    ui: { theme },\n  } = useUI()\n  const {\n    bid: { amount: bidAmount, accountAddress, mintInfo, poolAddresses },\n  } = useSelector((state: AppState) => state)\n  const { amount: balance } = useAccountBalance(accountAddress)\n  const selectionDefault = useMintSelection(bidDefault)\n  const { state } = useLocation<SenLpState>()\n  const poolAdress = state?.poolAddress\n  const { address: mintAddress, decimals } = mintInfo\n  const [activeValue, setActiveValue] = useState(0)\n\n  // Select default\n  useEffect(() => {\n    if (account.isAddress(accountAddress) || account.isAddress(poolAdress))\n      return\n    dispatch(setLoadingSenSwap({ loadingSenswap: true }))\n    dispatch(updateBidData(selectionDefault))\n  }, [accountAddress, dispatch, poolAdress, selectionDefault])\n\n  // Compute selection info\n  const selectionInfo: SelectionInfo = useMemo(\n    () => ({ mintInfo, poolAddresses }),\n    [mintInfo, poolAddresses],\n  )\n\n  const fiftyPerBtn = useMemo(() => {\n    if (activeValue === RATE.HUNDRED) return RATE.HUNDRED\n    return RATE.FIFTY\n  }, [activeValue])\n\n  // Compute human-readable balance\n  const maxBalance = useMemo((): string => {\n    if (mintAddress !== DEFAULT_WSOL)\n      return utils.undecimalize(balance, decimals)\n    // So estimate max = 0.01 fee -> multi transaction.\n    const estimateFee = utils.decimalize(0.01, decimals)\n    const max = lamports + balance - estimateFee\n    if (max <= balance) return utils.undecimalize(balance, decimals)\n    return utils.undecimalize(max, decimals)\n  }, [balance, decimals, lamports, mintAddress])\n\n  // Handle amount\n  const onAmount = useCallback(\n    (val: string) => {\n      dispatch(setLoadingSenSwap({ loadingSenswap: true }))\n      return dispatch(updateBidData({ amount: val, prioritized: true }))\n    },\n\n    [dispatch],\n  )\n  // All in :)))\n  const onMax = () => onAmount(maxBalance)\n  // set percent balance\n  const onChangePercentAmount = useCallback(\n    (activeValue: RATE) => {\n      if (!maxBalance) return\n      const numMaxBalance = Number(maxBalance)\n      if (numMaxBalance < 5 / 10 ** 6) return onAmount(maxBalance)\n      const percentageBalance = numMaxBalance * (activeValue / 100)\n      return onAmount(`${percentageBalance}`)\n    },\n    [maxBalance, onAmount],\n  )\n\n  const checkActive = useCallback(() => {\n    const numMaxBalance = Number(maxBalance)\n    const amount = Number(bidAmount)\n    if (!numMaxBalance || numMaxBalance === 0) return setActiveValue(0)\n    if (numMaxBalance === amount) return setActiveValue(RATE.HUNDRED)\n    if (numMaxBalance / 2 === amount) return setActiveValue(RATE.FIFTY)\n    return setActiveValue(0)\n  }, [bidAmount, maxBalance])\n\n  // Compute available pools\n  const getAvailablePoolAddresses = useCallback(\n    (mintAddress: string) => {\n      if (!account.isAddress(mintAddress)) return []\n      return Object.keys(pools).filter((poolAddress) => {\n        const { mint_a, mint_b } = pools[poolAddress]\n        return [mint_a, mint_b].includes(mintAddress)\n      })\n    },\n    [pools],\n  )\n\n  // Update bid data\n  const onSelectionInfo = async (mintAddress: string) => {\n    const { splt } = window.sentre\n    const poolAddresses = getAvailablePoolAddresses(mintAddress)\n    const decimals = await getDecimals(mintAddress)\n\n    const selectionInfo: SelectionInfo = {\n      mintInfo: {\n        address: mintAddress,\n        decimals,\n      },\n      poolAddresses,\n    }\n\n    dispatch(setLoadingSenSwap({ loadingSenswap: true }))\n    if (!account.isAddress(mintAddress))\n      return dispatch(\n        updateBidData({ amount: '', prioritized: true, ...selectionInfo }),\n      )\n    const accountAddress = await splt.deriveAssociatedAddress(\n      walletAddress,\n      mintAddress,\n    )\n\n    return dispatch(\n      updateBidData({\n        amount: '',\n        prioritized: true,\n        accountAddress,\n        ...selectionInfo,\n      }),\n    )\n  }\n\n  useEffect(() => {\n    checkActive()\n  }, [checkActive])\n\n  const DARK_BOX_SHADOW = '0px 4px 44px rgba(0, 0, 0, 0.42)'\n  const LIGHT_BOX_SHADOW = '0px 4px 40px rgba(33, 36, 51, 0.18)'\n\n  const MINT_SELECTION_STYLE = {\n    marginLeft: -7,\n    padding: '3px 8px',\n    borderRadius: 8,\n    cursor: 'pointer',\n    boxShadow: theme === 'dark' ? DARK_BOX_SHADOW : LIGHT_BOX_SHADOW,\n  }\n\n  return (\n    <Row gutter={[0, 0]} align=\"middle\">\n      <Col flex=\"auto\">\n        <MintSelection\n          value={mintAddress}\n          onChange={onSelectionInfo}\n          style={MINT_SELECTION_STYLE}\n        />\n      </Col>\n      <Col>\n        <NumericInput\n          bordered={false}\n          style={{\n            textAlign: 'right',\n            fontSize: 24,\n            maxWidth: 150,\n            padding: 0,\n          }}\n          placeholder=\"0\"\n          value={bidAmount}\n          onValue={onAmount}\n        />\n      </Col>\n      <Col span={24}>\n        <Row align=\"middle\">\n          <Col flex=\"auto\">\n            <Space className=\"caption\">\n              <Typography.Text type=\"secondary\">Available:</Typography.Text>\n              <Typography.Text\n                type=\"secondary\"\n                style={{ cursor: 'pointer' }}\n                onClick={onMax}\n              >\n                {numeric(maxBalance || 0).format('0,0.[00]')}\n              </Typography.Text>\n              <Typography.Text type=\"secondary\">\n                <MintSymbol\n                  mintAddress={selectionInfo.mintInfo?.address || ''}\n                />\n              </Typography.Text>\n            </Space>\n          </Col>\n          <Col>\n            <Radio.Group value={activeValue} buttonStyle=\"solid\">\n              <Space>\n                <Space size={4} direction=\"vertical\">\n                  <Radio.Button\n                    className=\"rate-btn\"\n                    onClick={() => onChangePercentAmount(RATE.FIFTY)}\n                    value={fiftyPerBtn}\n                  />\n                  <Typography.Text type=\"secondary\" className=\"caption\">\n                    {RATE.FIFTY}%\n                  </Typography.Text>\n                </Space>\n                <Space size={4} direction=\"vertical\">\n                  <Radio.Button\n                    className=\"rate-btn\"\n                    onClick={() => onChangePercentAmount(RATE.HUNDRED)}\n                    value={RATE.HUNDRED}\n                  />\n                  <Typography.Text type=\"secondary\" className=\"caption\">\n                    {RATE.HUNDRED}%\n                  </Typography.Text>\n                </Space>\n              </Space>\n            </Radio.Group>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Bid\n","import { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Button, Col, Row } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\nimport Ask from '../ask'\nimport Bid from '../bid'\n\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateAskData } from 'app/model/ask.controller'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { setLoadingSenSwap } from 'app/model/route.controller'\n\nconst SwapInput = ({ widget = false }: { widget?: boolean }) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const { bid: bidData, ask: askData } = useSelector((state: AppState) => state)\n\n  /**\n   * Switch tokens\n   */\n  const onSwitch = useCallback(async () => {\n    const { amount: bidAmount, priority: bidPriority, ...bidRest } = bidData\n    const { amount: askAmount, priority: askPriority, ...askRest } = askData\n    const amount = bidPriority > askPriority ? bidAmount : askAmount\n    const updateData = bidPriority > askPriority ? updateAskData : updateBidData\n    await dispatch(setLoadingSenSwap({ loadingSenswap: true }))\n    await dispatch(updateBidData({ ...askRest, amount: '', reset: true }))\n    await dispatch(updateAskData({ ...bidRest, amount: '', reset: true }))\n    await dispatch(updateData({ amount, prioritized: true }))\n  }, [dispatch, askData, bidData])\n\n  const bidStyle = widget\n    ? { padding: '16px 16px 40px' }\n    : { padding: '6px 24px 16px' }\n  const askStyle = widget\n    ? { padding: '0 16px 16px' }\n    : { padding: '0 24px 24px' }\n  const wrapStype = widget ? { margin: '0 -12px' } : {}\n\n  return (\n    <Row gutter={[0, 0]} justify=\"center\" style={{ ...wrapStype }}>\n      <Col span={24} style={{ ...bidStyle }} className=\"swap-bid\">\n        <Bid />\n      </Col>\n      <Col style={{ top: -12 }}>\n        <Button\n          className=\"btn-switch-type\"\n          size=\"small\"\n          icon={<IonIcon name=\"git-compare-outline\" />}\n          onClick={onSwitch}\n        />\n      </Col>\n      <Col span={24} style={{ ...askStyle }}>\n        <Ask />\n      </Col>\n    </Row>\n  )\n}\n\nexport default SwapInput\n","import { Col, Row } from 'antd'\nimport WormholeSupported from '../bid/wormholeSupported'\nimport Settings from '../settings'\nimport SwapInput from './swapInput'\n\nconst SwapForm = () => {\n  return (\n    <Row gutter={0}>\n      <Col span={24} className=\"swap-setting\">\n        <Row>\n          <Col flex=\"auto\">\n            <WormholeSupported />\n          </Col>\n          <Col>\n            <Settings />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <SwapInput />\n      </Col>\n    </Row>\n  )\n}\n\nexport default SwapForm\n","import { useSelector } from 'react-redux'\n\nimport { Card, Col, Row } from 'antd'\nimport SwapReview from './swapReview'\nimport PoolInfo from './poolInfo'\nimport SwapForm from 'app/components/swapForm'\nimport { AppState } from 'app/model'\n\nconst Swap = () => {\n  const { enhancement } = useSelector((state: AppState) => state.settings)\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Card bordered={false} className=\"card-swap\" bodyStyle={{ padding: 0 }}>\n          <SwapForm />\n        </Card>\n      </Col>\n      <Col span={24}>\n        <SwapReview />\n      </Col>\n      {enhancement && (\n        <Col span={24}>\n          <PoolInfo />\n        </Col>\n      )}\n    </Row>\n  )\n}\n\nexport default Swap\n","import { Tag } from 'antd'\n\nconst STATUS_COLOR: Record<string, number[]> = {\n  success: [20, 224, 65],\n  pending: [212, 177, 6],\n  error: [215, 35, 17],\n  failed: [215, 35, 17],\n}\n\nconst StatusTag = ({ tag }: { tag: string }) => {\n  const setColorTag = (opacity?: number) => {\n    let color = STATUS_COLOR[tag]\n    return `rgba(${color[0]},  ${color[1]}, ${color[2]},${opacity || 1})`\n  }\n\n  return (\n    <Tag\n      style={{\n        margin: 0,\n        borderRadius: 4,\n        color: setColorTag(),\n        textTransform: 'capitalize',\n      }}\n      color={setColorTag(0.1)}\n    >\n      {tag}\n    </Tag>\n  )\n}\n\nexport default StatusTag\n","import { Button, Space, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport IonIcon from '@sentre/antd-ionicon'\nimport StatusTag from './statusTag'\n\nimport { explorer, numeric, shortenAddress } from 'shared/util'\n\nconst FORMAT_AMOUNT = '0,00.[0000]a'\n\nexport const HISTORY_COLUMN = [\n  {\n    title: 'TIME',\n    dataIndex: 'time',\n  },\n  {\n    title: 'TRANSACTION',\n    dataIndex: 'transactionId',\n    render: (text: string) => (\n      <Space align=\"baseline\">\n        <Typography.Text\n          onClick={() => window.open(explorer(text), '_blank')}\n          style={{ fontWeight: 700, cursor: 'pointer' }}\n        >\n          {shortenAddress(text, 3, '...')}\n        </Typography.Text>\n        <Button\n          type=\"text\"\n          size=\"small\"\n          onClick={() => window.open(explorer(text), '_blank')}\n          icon={<IonIcon name=\"open-outline\" />}\n        />\n      </Space>\n    ),\n  },\n\n  {\n    title: 'BID',\n    dataIndex: 'bid',\n    render: (text: string, record: any) =>\n      !record.from ? (\n        '--'\n      ) : (\n        <Space size={8}>\n          <MintAvatar mintAddress={record.from} />\n          {numeric(record.amountFrom).format(FORMAT_AMOUNT)}\n          <MintSymbol mintAddress={record.from} />\n        </Space>\n      ),\n  },\n  {\n    title: 'ASK',\n    dataIndex: 'ask',\n    render: (text: string, record: any) =>\n      !record.to ? (\n        '--'\n      ) : (\n        <Space size={8}>\n          <MintAvatar mintAddress={record.to} />\n          {numeric(record.amountTo).format(FORMAT_AMOUNT)}\n          <MintSymbol mintAddress={record.to} />\n        </Space>\n      ),\n  },\n  {\n    title: 'STATUS',\n    dataIndex: 'status',\n    width: 100,\n    render: (text: string, record: any) => <StatusTag tag={record.status} />,\n  },\n]\n","import moment from 'moment'\n\nconst SECOND_PER_MILLISECOND = 1000\n\nexport enum TimeFormat {\n  YMD = 'YYYYMMDD',\n  SortableTimePattern = 'YYYY-MM-DD HH:mm:ss',\n}\n\nexport class DateHelper {\n  private milliSeconds: number = new Date().valueOf()\n\n  setMilliSeconds(milliSeconds: number) {\n    this.milliSeconds = milliSeconds\n  }\n\n  static fromSeconds(seconds: number): DateHelper {\n    const date = new DateHelper()\n    const milliSeconds = seconds * SECOND_PER_MILLISECOND\n    date.setMilliSeconds(milliSeconds)\n    return date\n  }\n\n  static fromYmd(ymd: number): DateHelper {\n    const date = new DateHelper()\n    const milliSeconds = moment(ymd, TimeFormat.YMD).valueOf()\n    date.setMilliSeconds(milliSeconds)\n    return date\n  }\n\n  static getListDate(ymdFrom: number, ymdTo: number): number[] {\n    const dates: number[] = []\n    let dateFrom = DateHelper.fromYmd(ymdFrom)\n    const dateTo = DateHelper.fromYmd(ymdTo)\n    while (dateFrom.ymd() <= dateTo.ymd()) {\n      dates.push(dateFrom.ymd())\n      dateFrom = dateFrom.addDay()\n    }\n    return dates\n  }\n\n  format(dateFormat: TimeFormat): string {\n    const date = new Date(this.milliSeconds)\n    return moment(date).format(dateFormat)\n  }\n\n  subtractDay(dayAmount: number = 1): DateHelper {\n    const milliSeconds = moment(this.milliSeconds)\n      .subtract(dayAmount, 'days')\n      .valueOf()\n    const date = DateHelper.fromSeconds(milliSeconds / SECOND_PER_MILLISECOND)\n    return date\n  }\n\n  addDay(dayAmount: number = 1): DateHelper {\n    const milliSeconds = moment(this.milliSeconds)\n      .add(dayAmount, 'days')\n      .valueOf()\n    const date = DateHelper.fromSeconds(milliSeconds / SECOND_PER_MILLISECOND)\n    return date\n  }\n\n  seconds(): number {\n    return (\n      (this.milliSeconds - (this.milliSeconds % SECOND_PER_MILLISECOND)) /\n      SECOND_PER_MILLISECOND\n    )\n  }\n\n  ymd(): number {\n    return Number(this.format(TimeFormat.YMD))\n  }\n\n  static today(format: string = TimeFormat.YMD): string {\n    return moment().format(format)\n  }\n}\n","export class TransLog {\n  programId: string = ''\n\n  programInfo: ProgramInfo | undefined\n\n  signature: string = ''\n\n  blockTime: number = 0\n\n  time: number = 0\n\n  owner: string = ''\n\n  actionType: string = ''\n\n  actionTransfers: Array<ActionTransfer> = []\n\n  programTransfer: Array<ActionTransfer> = []\n}\n\nexport class ActionInfo {\n  address: string = ''\n\n  // pool: string = ''\n\n  mint: string = ''\n\n  decimals: number = 0\n\n  preBalance: string = '0'\n\n  postBalance: string = '0'\n}\n/**\n * Amount is not same postBalance - preBalance\n * @postBalance and @preBalance are balance after all action (transaction)\n * @postBalance = @preBalance +- all @amount (multi amount in transaction)\n * @amount is value in 1 action\n */\nexport class ActionTransfer {\n  source: ActionInfo | undefined\n\n  destination: ActionInfo | undefined\n\n  amount: string = '0'\n}\ntype ProgramInfo = {\n  programId: string\n  data: string\n}\n","import {\n  ConfirmedSignatureInfo,\n  ConfirmedSignaturesForAddress2Options,\n  Connection,\n  ParsedConfirmedTransaction,\n  PublicKey,\n} from '@solana/web3.js'\n\nimport { OptionsFetchSignature } from '../../constants/transaction'\n\nconst DEFAULT_LIMIT = 700\nconst TRANSACTION_LIMIT = 200\n\nexport class Solana {\n  private conn: Connection = window.sentre.splt.connection\n\n  //Search for all signatures from last Signature and earlier\n  //So: If new collection (to now) -> last Signature = null\n  private async fetchSignatures(\n    address: PublicKey,\n    lastSignature?: string,\n    limit: number = DEFAULT_LIMIT,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    if (limit > DEFAULT_LIMIT) limit = DEFAULT_LIMIT\n    const options: ConfirmedSignaturesForAddress2Options = {\n      limit: limit,\n      before: lastSignature,\n    }\n    return this.conn.getConfirmedSignaturesForAddress2(address, options)\n  }\n\n  private async fetchConfirmTransaction(signatures: string[]) {\n    let confirmedTransactions: ParsedConfirmedTransaction[] = []\n    let limit = TRANSACTION_LIMIT\n\n    const promiseTransGroup = []\n    for (let offset = 0; offset <= signatures.length / limit; offset++) {\n      const skip = offset * limit\n      const signaturesGroup = signatures.slice(skip, skip + limit)\n      promiseTransGroup.push(\n        this.conn.getParsedConfirmedTransactions(signaturesGroup),\n      )\n    }\n\n    const transGroups = await Promise.all(promiseTransGroup)\n    for (const transGroup of transGroups) {\n      //@ts-ignore\n      confirmedTransactions = confirmedTransactions.concat(transGroup)\n    }\n    return confirmedTransactions\n  }\n\n  async fetchTransactions(\n    programId: string,\n    options: OptionsFetchSignature,\n  ): Promise<ParsedConfirmedTransaction[]> {\n    const currentTime = new Date().getTime() / 1000\n    let { secondFrom, secondTo, lastSignature, limit } = options\n    secondFrom = Math.floor(secondFrom || 0)\n    secondTo = Math.floor(secondTo || currentTime)\n\n    const programPublicKey = new PublicKey(programId)\n    let signatures: string[] = []\n    let isStop = false\n\n    while (!isStop) {\n      const confirmedSignatureInfos: ConfirmedSignatureInfo[] =\n        await this.fetchSignatures(programPublicKey, lastSignature, limit)\n      if (!confirmedSignatureInfos?.length || isStop) break\n      for (const info of confirmedSignatureInfos) {\n        const blockTime = info.blockTime\n        if (!blockTime || blockTime > secondTo) continue\n        if (blockTime < secondFrom) {\n          isStop = true\n          break\n        }\n        lastSignature = info.signature\n        signatures.push(info.signature)\n      }\n\n      if (limit && signatures.length >= limit) break\n      if (confirmedSignatureInfos?.length < DEFAULT_LIMIT) break\n    }\n    const confirmedTransactions = await this.fetchConfirmTransaction(signatures)\n    return confirmedTransactions\n  }\n}\n","export enum ParsedType {\n  Transfer = 'transfer',\n}\n\nexport type ParsedAction = {\n  type: ParsedType\n  info: ParsedInfoTransfer\n}\n\nexport type ParsedInfoTransfer = {\n  source: string\n  destination: string\n  amount: string\n  lamports: number\n}\n\nexport type OptionsFetchSignature = {\n  limit?: number\n  lastSignature?: string\n  secondFrom?: number\n  secondTo?: number\n}\n","import base58 from 'bs58'\n\nimport { TransLog } from '../entities/trans-log'\nimport { TransLogService } from './translog'\n\nconst { struct } = require('soprox-abi')\n\nconst TRANSLOG_PROGRAM_DATA_SCHEMA = { key: 'code', type: 'u8' }\n\nexport enum SwapActionType {\n  Route = 'SWAP',\n}\n\nconst ACTION_TYPE: Record<number, SwapActionType> = {\n  8: SwapActionType.Route,\n}\n\nexport default class SwapTransLogService extends TransLogService {\n  parseAction = (transLog: TransLog) => {\n    const programDataEncode = transLog.programInfo?.data\n    if (!programDataEncode) return ''\n\n    const dataBuffer = base58.decode(programDataEncode)\n    const actionLayout = new struct([TRANSLOG_PROGRAM_DATA_SCHEMA])\n    const programDataDecode: { code: number } = actionLayout.fromBuffer(\n      Buffer.from(dataBuffer),\n    )\n    return ACTION_TYPE[programDataDecode.code] || ''\n  }\n}\n","import {\n  ParsedConfirmedTransaction,\n  ParsedInstruction,\n  ParsedMessageAccount,\n  PartiallyDecodedInstruction,\n  TokenBalance,\n} from '@solana/web3.js'\nimport { account } from '@senswap/sen-js'\n\nimport { ActionInfo, ActionTransfer, TransLog } from '../entities/trans-log'\nimport { Solana } from '../adapters/solana/client'\nimport {\n  OptionsFetchSignature,\n  ParsedAction,\n  ParsedInfoTransfer,\n  ParsedType,\n} from '../constants/transaction'\nimport { DateHelper } from '../helpers/date'\nimport { SOL_ADDRESS, SOL_DECIMALS } from '../constants/sol'\n\ntype InstructionData = ParsedInstruction | PartiallyDecodedInstruction\n\nexport class TransLogService {\n  protected parseAction = (transLog: TransLog) => {\n    return ''\n  }\n\n  async collect(\n    programId: string,\n    configs: OptionsFetchSignature,\n  ): Promise<TransLog[]> {\n    const solana = new Solana()\n    let transLogs: Array<TransLog> = []\n    const confirmedTrans: ParsedConfirmedTransaction[] =\n      await solana.fetchTransactions(programId, configs)\n\n    for (const trans of confirmedTrans) {\n      const log = this.parseTransLog(trans)\n      if (!log) continue\n      transLogs.push(log)\n    }\n    return transLogs\n  }\n\n  private parseTransLog(\n    confirmedTrans: ParsedConfirmedTransaction,\n  ): TransLog | undefined {\n    const { blockTime, meta, transaction } = confirmedTrans\n    if (!blockTime || !meta) return\n    const { postTokenBalances, preTokenBalances, postBalances, preBalances } =\n      meta\n    const { signatures, message } = transaction\n\n    const innerInstructionData = meta.innerInstructions?.[0]?.instructions || []\n    const instructionData = message.instructions[0] || []\n\n    const transLog = new TransLog()\n    transLog.signature = signatures[0]\n    transLog.blockTime = blockTime\n    transLog.time = DateHelper.fromSeconds(blockTime).ymd()\n    transLog.programId = instructionData.programId.toString()\n\n    const mapAccount = this.parseAccountInfo(\n      message.accountKeys,\n      postTokenBalances || [],\n      preTokenBalances || [],\n      postBalances,\n      preBalances,\n    )\n    // system program transaction\n    if (this.isParsedInstruction(instructionData)) {\n      transLog.programTransfer = this.parseListActionTransfer(\n        [instructionData],\n        mapAccount,\n      )\n      return transLog\n    }\n    // smart contract transaction\n    transLog.actionTransfers = this.parseListActionTransfer(\n      innerInstructionData,\n      mapAccount,\n    )\n    transLog.programInfo = {\n      programId: instructionData.programId.toString(),\n      data: (instructionData as PartiallyDecodedInstruction).data,\n    }\n    transLog.actionType = this.parseAction(transLog)\n\n    return transLog\n  }\n\n  private isParsedInstruction(instructionData: InstructionData) {\n    return (instructionData as ParsedInstruction).parsed !== undefined\n  }\n\n  private parseListActionTransfer(\n    actions: InstructionData[],\n    mapAccount: Map<string, ActionInfo>,\n  ) {\n    const actionTransfer: ActionTransfer[] = []\n    for (const action of actions) {\n      if (!this.isParsedInstruction(action)) continue\n      const actionParsed: ParsedAction =\n        (action as ParsedInstruction).parsed || {}\n      switch (actionParsed.type) {\n        case ParsedType.Transfer:\n          const info: ParsedInfoTransfer = actionParsed.info\n          const parsedAction = this.parseActionTransfer(info, mapAccount)\n          if (parsedAction) actionTransfer.push(parsedAction)\n          break\n        default:\n          break\n      }\n    }\n    return actionTransfer\n  }\n\n  private parseActionTransfer(\n    parsedTransfer: ParsedInfoTransfer,\n    mapAccount: Map<string, ActionInfo>,\n  ): ActionTransfer | undefined {\n    const { source, destination, amount, lamports } = parsedTransfer\n    const amountTransfer = amount || lamports.toString()\n\n    if (\n      !amountTransfer ||\n      !mapAccount.has(source) ||\n      !mapAccount.has(destination)\n    )\n      return\n\n    const actionTransfer = new ActionTransfer()\n    actionTransfer.source = mapAccount.get(source)\n    actionTransfer.destination = mapAccount.get(destination)\n    actionTransfer.amount = amountTransfer\n    return actionTransfer\n  }\n\n  private parseAccountInfo(\n    accountKeys: Array<ParsedMessageAccount>,\n    postTokenBalances: Array<TokenBalance>,\n    preTokenBalances: Array<TokenBalance>,\n    postBalances: number[],\n    preBalances: number[],\n  ): Map<string, ActionInfo> {\n    const mapAccountInfo = new Map<string, ActionInfo>()\n\n    // Associated Address\n    for (const postBalance of postTokenBalances) {\n      const { accountIndex, mint, uiTokenAmount } = postBalance\n      const info = new ActionInfo()\n      info.address = accountKeys[accountIndex].pubkey.toString()\n      info.postBalance = uiTokenAmount.amount\n      info.mint = mint\n      info.decimals = uiTokenAmount.decimals\n      mapAccountInfo.set(info.address, info)\n    }\n\n    for (const preBalance of preTokenBalances) {\n      const { accountIndex, uiTokenAmount } = preBalance\n      const address = accountKeys[accountIndex].pubkey.toString()\n      const info = mapAccountInfo.get(address) || new ActionInfo()\n      info.preBalance = uiTokenAmount.amount\n      mapAccountInfo.set(info.address, info)\n    }\n\n    // Wallet address\n    accountKeys.forEach((accountData, idx) => {\n      const address = accountData.pubkey.toString()\n      if (!account.isAssociatedAddress(address)) {\n        const info = mapAccountInfo.get(address) || new ActionInfo()\n        info.address = address\n        info.mint = SOL_ADDRESS\n        info.postBalance = String(postBalances[idx] || 0) // lamports\n        info.preBalance = String(preBalances[idx] || 0) // lamports\n        info.decimals = SOL_DECIMALS\n        mapAccountInfo.set(info.address, info)\n      }\n    })\n\n    return mapAccountInfo\n  }\n}\n","export const SOL_ADDRESS = '11111111111111111111111111111111'\n\nexport const SOL_DECIMALS = 9\n","import { net } from 'shared/runtime'\nimport { createPDB } from 'shared/pdb'\nimport configs from 'app/configs'\n\nimport { TransLog } from '../../entities/trans-log'\nimport { DateHelper } from '../../helpers/date'\nimport SwapTransLogService, { SwapActionType } from '../translogSwap'\nimport IPFS from 'shared/pdb/ipfs'\n\nconst {\n  sol: { swapAddress },\n  manifest: { appId },\n} = configs\n\nconst DATE_RANGE = 30\nconst CACHE_KEY = `translogs-ipfs:${net}`\n\nexport default class SwapService {\n  programId: string\n  transLogService: SwapTransLogService = new SwapTransLogService()\n  constructor(address: string) {\n    this.programId = address\n  }\n\n  private async getPDB() {\n    const walletAddress = await window.sentre.wallet?.getAddress()\n    if (!walletAddress) throw new Error('Invalid wallet address')\n    const db = createPDB(walletAddress, appId)\n    if (!db) throw new Error('Can not create pdb')\n    return db\n  }\n\n  fetchTransLog = async (timeFrom: number, timeTo: number) => {\n    const ipfs = new IPFS()\n    let cacheTransLog: TransLog[] = []\n    const db = await this.getPDB()\n    const keyBackup = await db.getItem<string>(CACHE_KEY)\n    if (keyBackup) cacheTransLog = await ipfs.get(keyBackup)\n\n    const fistTransLog = cacheTransLog[0]\n    const lastTransLog = cacheTransLog[cacheTransLog.length - 1]\n\n    if (fistTransLog && lastTransLog) {\n      const [beginTransLogs] = await Promise.all([\n        this.transLogService.collect(this.programId, {\n          secondFrom: fistTransLog.blockTime,\n          secondTo: timeTo,\n        }),\n      ])\n      cacheTransLog = cacheTransLog.filter(\n        (trans) => trans.blockTime > timeFrom,\n      )\n      cacheTransLog = [...beginTransLogs, ...cacheTransLog]\n    } else {\n      cacheTransLog = await this.transLogService.collect(this.programId, {\n        secondFrom: timeFrom,\n        secondTo: timeTo,\n      })\n    }\n    // Filter transLog swap\n    const mapTransLogs: Record<string, TransLog> = {}\n    for (const log of cacheTransLog) {\n      if (\n        log.actionType === SwapActionType.Route &&\n        log.programId === swapAddress\n      )\n        mapTransLogs[log.signature] = log\n    }\n\n    const newTransLogs = Object.values(mapTransLogs).sort(\n      (a, b) => b.blockTime - a.blockTime,\n    )\n\n    const newIpfsKey = await ipfs.set(newTransLogs)\n    await db.setItem(CACHE_KEY, newIpfsKey)\n    return newTransLogs\n  }\n\n  fetchHistory = async () => {\n    let timeTo = new DateHelper()\n    const timeFrom = new DateHelper().subtractDay(DATE_RANGE)\n    // fetch transLog\n    const transLogs = await this.fetchTransLog(\n      timeFrom.seconds(),\n      timeTo.seconds(),\n    )\n    return transLogs.sort((a, b) => b.blockTime - a.blockTime)\n  }\n}\n","import moment from 'moment'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { utils } from '@senswap/sen-js'\n\nimport SwapService from 'app/lib/stat/logic/swap/swap'\n\nexport type State = {\n  historySwap: HistorySwap[]\n}\n\n/**\n * Store constructor\n */\n\nexport type HistorySwap = {\n  time: string\n  transactionId: string\n  from?: string\n  to?: string\n  amountFrom?: number\n  amountTo?: number\n  key: string\n  status: string\n  decimals: number\n}\n\nconst NAME = 'history'\nconst initialState: State = {\n  historySwap: [],\n}\n\n/**\n * Actions\n */\nexport const fetchHistorySwap = createAsyncThunk<{\n  historySwap: HistorySwap[]\n}>(`${NAME}/fetchHistorySwap`, async () => {\n  const myWalletAddress = await window.sentre.wallet?.getAddress()\n  if (!myWalletAddress) throw Error('Login first')\n\n  const transLogService = new SwapService(myWalletAddress)\n  const transLogsData = await transLogService.fetchHistory()\n  let history: HistorySwap[] = []\n\n  for (const transLog of transLogsData) {\n    const historyItem = {} as HistorySwap\n    const actionTransfer = transLog.actionTransfers\n    const firstAction = actionTransfer[0]\n    const lastAction = actionTransfer[actionTransfer.length - 1]\n    if (!firstAction || !lastAction) continue\n\n    const time = new Date(transLog.blockTime * 1000)\n    historyItem.time = moment(time).format('MMM DD, YYYY HH:mm')\n    historyItem.amountFrom = firstAction.destination\n      ? Number(\n          utils.undecimalize(\n            BigInt(firstAction.amount),\n            firstAction.destination.decimals,\n          ),\n        )\n      : undefined\n    historyItem.amountTo = lastAction?.destination\n      ? Number(\n          utils.undecimalize(\n            BigInt(lastAction.amount),\n            lastAction.destination.decimals,\n          ),\n        )\n      : undefined\n\n    historyItem.from = firstAction.destination?.mint\n    historyItem.to = lastAction?.destination?.mint\n    historyItem.transactionId = transLog.signature\n    historyItem.key = transLog.signature\n    historyItem.status =\n      !firstAction.destination || !lastAction?.destination\n        ? 'failed'\n        : 'success'\n    history.push(historyItem)\n  }\n  return { historySwap: history }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      fetchHistorySwap.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Card, Col, Row, Typography, Table, Button } from 'antd'\nimport { HISTORY_COLUMN } from './column'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport { fetchHistorySwap } from 'app/model/history.controller'\nimport { AppDispatch, AppState } from 'app/model'\n\nimport './index.less'\n\nconst ROW_PER_PAGE = 5\nconst TABLE_HEIGHT = 462\n\nconst History = () => {\n  const [amountRow, setAmountRow] = useState(ROW_PER_PAGE)\n  const [loading, setLoading] = useState(false)\n\n  const { historySwap } = useSelector((state: AppState) => state.history)\n  const dispatch = useDispatch<AppDispatch>()\n\n  const fetchHistory = useCallback(async () => {\n    try {\n      setLoading(true)\n      await dispatch(fetchHistorySwap()).unwrap()\n    } catch (er) {\n      return console.warn(er)\n    } finally {\n      setLoading(false)\n    }\n  }, [dispatch])\n\n  useEffect(() => {\n    fetchHistory()\n  }, [fetchHistory])\n\n  const onHandleViewMore = () => setAmountRow(amountRow + ROW_PER_PAGE)\n\n  const onHandleRefeshTable = () => {\n    fetchHistory()\n    setAmountRow(ROW_PER_PAGE)\n  }\n\n  const style = useMemo(() => {\n    return amountRow > 5 ? { height: 'auto' } : { height: TABLE_HEIGHT }\n  }, [amountRow])\n\n  return (\n    <Card bordered={false} style={{ ...style }}>\n      <Row gutter={[16, 24]}>\n        <Col flex=\"auto\">\n          <Typography.Title level={5}>Swap history</Typography.Title>\n        </Col>\n        <Col>\n          <Button onClick={onHandleRefeshTable}>Refresh</Button>\n        </Col>\n        <Col span={24}>\n          <Row justify=\"center\" gutter={[16, 9]}>\n            <Col span={24} style={{ minHeight: 310 }}>\n              <Table\n                columns={HISTORY_COLUMN}\n                dataSource={historySwap.slice(0, amountRow)}\n                loading={loading}\n                pagination={false}\n                rowClassName={(record, index) =>\n                  index % 2 ? 'odd-row' : 'even-row'\n                }\n                scroll={{ x: 800 }}\n              />\n            </Col>\n            <Col>\n              <Button\n                onClick={onHandleViewMore}\n                type=\"text\"\n                icon={<IonIcon name=\"chevron-down-outline\" />}\n                disabled={amountRow >= historySwap.length}\n              >\n                View more\n              </Button>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default History\n","import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { account } from '@senswap/sen-js'\nimport { usePool, useWallet } from '@senhub/providers'\nimport { JupiterProvider } from '@jup-ag/react-hook'\nimport { Connection, PublicKey } from '@solana/web3.js'\n\nimport { Row, Col } from 'antd'\nimport SwapChart from './chart'\nimport Swap from './swap'\nimport History from './history'\n\nimport { useMintSelection } from 'app/hooks/useMintSelection'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { updateAskData } from 'app/model/ask.controller'\nimport { SenLpState } from 'app/constant/senLpState'\nimport configs from 'app/configs'\n\nconst {\n  sol: { node, cluster },\n} = configs\nconst connection = new Connection(node)\n\nconst View = () => {\n  const { pools } = usePool()\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n  const dispatch = useDispatch<AppDispatch>()\n  const { state } = useLocation<SenLpState>()\n  const [bid, setBid] = useState('')\n  const [ask, setAsk] = useState('')\n  const bidData = useMintSelection(bid)\n  const askData = useMintSelection(ask)\n  const poolAddress = state?.poolAddress\n  const { enhancement } = useSelector((state: AppState) => state.settings)\n\n  /** Check state when user come from sen LP */\n  const checkIsSenLpCome = useCallback(() => {\n    if (!account.isAddress(poolAddress)) return\n    const poolData = pools[poolAddress]\n    if (!poolData) return\n    setBid(poolData?.mint_a)\n    setAsk(poolData?.mint_b)\n  }, [poolAddress, pools])\n\n  useEffect(() => {\n    checkIsSenLpCome()\n  }, [checkIsSenLpCome])\n\n  useEffect(() => {\n    if (\n      !account.isAddress(bidData.accountAddress) ||\n      !account.isAddress(askData.accountAddress)\n    )\n      return\n    dispatch(updateBidData(bidData))\n    dispatch(updateAskData(askData))\n  }, [askData, bidData, dispatch])\n\n  return (\n    <JupiterProvider\n      connection={connection}\n      cluster={cluster}\n      userPublicKey={new PublicKey(walletAddress)}\n    >\n      <Row\n        gutter={[24, 24]}\n        style={{ paddingBottom: 12 }}\n        justify={enhancement ? 'start' : 'center'}\n      >\n        <Col lg={8} md={12} xs={24}>\n          <Swap />\n        </Col>\n        {enhancement && (\n          <Col lg={16} md={12} xs={24}>\n            <Row gutter={[24, 24]}>\n              <Col span={24}>\n                <SwapChart />\n              </Col>\n              <Col span={24}>\n                <History />\n              </Col>\n            </Row>\n          </Col>\n        )}\n      </Row>\n    </JupiterProvider>\n  )\n}\n\nexport default View\n","import { PublicKey } from '@solana/web3.js'\nimport BN from 'bn.js'\n\n// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint' ||\n    val instanceof PublicKey ||\n    val instanceof BN ||\n    val instanceof Buffer\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'app/model/devTools'\n\nimport ask from './ask.controller'\nimport bid from './bid.controller'\nimport settings from './settings.controller'\nimport route from './route.controller'\nimport history from './history.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools(process.env.REACT_APP_ID as string),\n  reducer: {\n    ask,\n    bid,\n    settings,\n    route,\n    history,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport {\n  WalletProvider,\n  UIProvider,\n  AccountProvider,\n  PoolProvider,\n  MintProvider,\n} from '@senhub/providers'\n\nimport View from 'app/view'\n\nimport model from 'app/model'\nimport configs from 'app/configs'\n\nimport 'app/static/styles/dark.less'\nimport 'app/static/styles/light.less'\nimport 'app/static/styles/index.less'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <MintProvider>\n        <PoolProvider>\n          <AccountProvider>\n            <WalletProvider>\n              <Provider store={model}>\n                <View />\n              </Provider>\n            </WalletProvider>\n          </AccountProvider>\n        </PoolProvider>\n      </MintProvider>\n    </UIProvider>\n  )\n}\n\nexport * from 'app/static.app'\n","export type LimitConfig = {\n  calls: number\n  time: number\n}\n\nexport type CacheConfig = {\n  ttl: number // millisecond\n}\n\nexport type SingleFlightConfig = {\n  limit?: LimitConfig\n  cache?: CacheConfig\n}\n\n// 10 request per 1 second\nexport const DEFAULT_LIMIT_CONFIG: LimitConfig = {\n  calls: 10,\n  time: 1000,\n}\n\n// 10 request per 1 second\nexport const DEFAULT_CACHE_CONFIG: CacheConfig = {\n  ttl: 30000,\n}\n\nexport const DEFAULT_SINGLE_FLIGHT_CONFIG: SingleFlightConfig = {\n  limit : DEFAULT_LIMIT_CONFIG,\n  cache: DEFAULT_CACHE_CONFIG\n}","export interface IRequestQueue {\n  key: string\n  add(resolve: any, reject: any): void\n  resolves(data: any): void\n  rejects(error: any): void\n}\n\nexport class RequestQueue implements IRequestQueue {\n  key = ''\n  private resolveQueue: any[] = []\n  private rejectQueue: any[] = []\n  constructor(key: string) {\n    this.key = key\n  }\n\n  add(resolve: any, reject: any) {\n    this.resolveQueue.push(resolve)\n    this.rejectQueue.push(reject)\n  }\n\n  resolves(data: any) {\n    while (this.resolveQueue.length > 0) {\n      const resolve = this.resolveQueue.shift()\n      resolve(data)\n    }\n  }\n\n  rejects(error: any) {\n    while (this.rejectQueue.length > 0) {\n      const reject = this.rejectQueue.shift()\n      reject(error)\n    }\n  }\n}\n","import { DEFAULT_CACHE_CONFIG } from './constant'\nimport { CacheConfig } from './constant'\n\nexport class SingleFlightCache {\n  private static mapCache = new Map<string, any>()\n\n  static set(\n    key: string,\n    value: any,\n    configs: CacheConfig = DEFAULT_CACHE_CONFIG,\n  ) {\n    this.mapCache.set(key, value)\n    setTimeout(() => {\n      this.mapCache.delete(key)\n    }, configs.ttl)\n  }\n\n  static get(key: string) {\n    return this.mapCache.get(key)\n  }\n}\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey)\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(\n    request: IRequestQueue,\n    callback: () => Promise<any>,\n  ) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    return true\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import localForage from 'localforage'\nimport { account } from '@senswap/sen-js'\nimport IPFS from './ipfs'\n\n/**\n * Persistent Database\n */\nclass PDB {\n  readonly dbName: string\n  private driver: any\n  private ipfs: IPFS\n\n  constructor(walletAddress: string) {\n    if (!account.isAddress(walletAddress)) throw new Error('Invalid address')\n    this.dbName = walletAddress\n    this.driver = [localForage.WEBSQL, localForage.LOCALSTORAGE]\n    this.ipfs = new IPFS()\n  }\n\n  /**\n   * Local\n   */\n\n  createInstance = (appId: string): LocalForage => {\n    return localForage.createInstance({\n      driver: this.driver,\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  dropInstance = async (appId: string): Promise<void> => {\n    const instance = this.createInstance(appId)\n    await instance.clear()\n    return await localForage.dropInstance({\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  all = async (): Promise<any> => {\n    let data: any = {}\n    const appIds = (\n      ((await this.createInstance('sentre').getItem('appIds')) as string[]) ||\n      []\n    )\n      .flat()\n      .concat(['sentre'])\n    for (const appId of appIds) {\n      data[appId] = {}\n      const instance = this.createInstance(appId)\n      await instance.iterate((value: string, key: string) => {\n        data[appId][key] = value\n      })\n    }\n    return data\n  }\n\n  /**\n   * Cloud\n   */\n\n  fetch = async (cid: string) => {\n    return await this.ipfs.get(cid)\n  }\n\n  backup = async () => {\n    const data = await this.all()\n    return await this.ipfs.set(data)\n  }\n\n  restore = async (cid: string) => {\n    // Download data\n    const data = await this.fetch(cid)\n    // Apply to storage\n    for (const appId in data) {\n      const instance = await this.createInstance(appId)\n      for (const key in data[appId]) {\n        const value = data[appId][key]\n        await instance.setItem(key, value)\n      }\n    }\n    return data\n  }\n}\n\nexport default PDB\n\n/**\n * High abtraction pdb for app\n */\nexport const createPDB = (walletArress: string, appId: string) => {\n  return account.isAddress(walletArress)\n    ? new PDB(walletArress).createInstance(appId)\n    : undefined\n}\n","import { create, isIPFS } from 'ipfs-core'\nimport { asyncWait } from 'shared/util'\n\nclass IPFS {\n  private _ipfs: any = async () => {\n    try {\n      if (!window.ipfs) window.ipfs = await create()\n      return window.ipfs\n    } catch (er) {\n      await asyncWait(500)\n      return await this._ipfs()\n    }\n  }\n\n  static isCID = (cid: string | undefined | null): boolean => {\n    try {\n      if (!cid) return false\n      return isIPFS.multihash(cid)\n    } catch (er) {\n      return false\n    }\n  }\n\n  get = async (cid: string) => {\n    if (!IPFS.isCID(cid)) throw new Error('Invalid CID')\n    const ipfs = await this._ipfs()\n    const stream = await ipfs.cat(cid)\n    let raw = ''\n    for await (const chunk of stream) raw += Buffer.from(chunk).toString()\n    const data = JSON.parse(raw)\n    return data\n  }\n\n  set = async (data: object): Promise<string> => {\n    if (!data) throw new Error('Empty data')\n    const raw = JSON.stringify(data)\n    const ipfs = await this._ipfs()\n    const { cid } = await ipfs.add(raw)\n    return cid.toString()\n  }\n}\n\nexport default IPFS\n","import storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n\n/**\n * Chain ID\n */\nconst getChainId = () => {\n  switch (net) {\n    case 'devnet':\n      return 103\n    case 'testnet':\n      return 102\n    case 'mainnet':\n      return 101\n    default:\n      return 101\n  }\n}\nexport type ChainId = 101 | 102 | 103\nexport const chainId: ChainId = getChainId()\n\n/**\n * RPC Node\n */\nconst CLUSTERS: Record<Net, string> = {\n  devnet: 'https://api.devnet.solana.com',\n  testnet: 'https://api.testnet.solana.com',\n  mainnet:\n    env === 'development'\n      ? 'https://api.mainnet-beta.solana.com'\n      : 'https://solitary-autumn-water.solana-mainnet.quiknode.pro/dcbac9d444818a20ac583541dec35b44c6840888/',\n}\nexport const rpc: string = CLUSTERS[net]\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  try {\n    if (!value) return null\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n","// Pseudo native sol info\n// It's for all networks\nexport const sol = (chainId: 101 | 102 | 103) => ({\n  symbol: 'SOL',\n  name: 'Solana',\n  address: '11111111111111111111111111111111',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'solana',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png',\n})\n\n// Pseudo SNTR info\n// Only for devnet and testnet\nexport const sntr = (chainId: 102 | 103) => ({\n  symbol: 'SNTR',\n  name: 'Sentre',\n  address: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'sentre',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M/logo.png',\n})\n\n// Pseudo token infos for devnet\nconst supplementary = [\n  sol(103),\n  sntr(103),\n  {\n    symbol: 'wBTC',\n    name: 'Wrapped Bitcoin',\n    address: '8jk4eJymMfNZV9mkRNxJEt2VJ3pRvdJvD5FE94GXGBPM',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'bitcoin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/qfnqNqs3nCAHjnyCgLRDbBtq4p2MtHZxw8YjSyYhPoL/logo.png',\n  },\n  {\n    symbol: 'wETH',\n    name: 'Ethereum',\n    address: '27hdcZv7RtuMp75vupThR3T4KLsL61t476eosMdoec4c',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'ethereum',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/FeGn77dhg1KXRRFeSwwMiykZnZPw5JXW6naf2aQgZDQf/logo.png',\n  },\n  {\n    symbol: 'UNI',\n    name: 'Uniswap',\n    address: 'FVZFSXu3yn17YdcxLD72TFDUqkdE5xZvcW18EUpRQEbe',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'uniswap',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/3MVa4e32PaKmPxYUQ6n8vFkWtCma68Ld7e7fTktWDueQ/logo.png',\n  },\n  {\n    symbol: 'USDC',\n    name: 'USD Coin',\n    address: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'usd-coin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png',\n  },\n]\n\nexport default supplementary\n","import lunr, { Index } from 'lunr'\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry'\n\nimport { net, chainId, ChainId, Net } from 'shared/runtime'\nimport supplementary, { sntr, sol } from './supplementary'\n\nconsole.log('Debug OS Isolation:', process.env.REACT_APP_ID)\n\nclass TokenProvider {\n  private tokenMap: Map<string, TokenInfo>\n  private engine: Index | undefined\n  readonly chainId: ChainId\n  readonly cluster: Net\n  private loading: boolean\n  private queue: Array<any>\n\n  constructor() {\n    this.tokenMap = new Map<string, TokenInfo>()\n    this.engine = undefined\n    this.chainId = chainId\n    this.cluster = net\n    this.loading = false\n    this.queue = []\n    // Init\n    this._init()\n  }\n\n  private _init = async (): Promise<[Map<string, TokenInfo>, Index]> => {\n    if (this.tokenMap.size && this.engine) return [this.tokenMap, this.engine]\n    return new Promise(async (resolve) => {\n      // Queue of getters to avoid race condition of multiple _init calling\n      if (this.loading) return this.queue.push(resolve)\n      // Start\n      this.loading = true\n      // Build token list\n      let tokenList = await (await new TokenListProvider().resolve())\n        .filterByChainId(this.chainId)\n        .getList()\n      if (this.cluster === 'devnet') tokenList = tokenList.concat(supplementary)\n      if (this.cluster === 'testnet')\n        tokenList = tokenList.concat([sntr(102), sol(102)])\n      else tokenList = tokenList.concat([sol(101)])\n      // Build token map\n      tokenList.forEach((token) => this.tokenMap.set(token.address, token))\n      // Build search engine\n      this.engine = lunr(function () {\n        this.ref('address')\n        this.field('symbol')\n        this.field('name')\n        tokenList.forEach((doc) => this.add(doc))\n      })\n      // Resolve the main getter\n      resolve([this.tokenMap, this.engine])\n      // Resolve the rest of getters\n      while (this.queue.length) this.queue.shift()([this.tokenMap, this.engine])\n      // Finish\n      this.loading = false\n    })\n  }\n\n  all = async (): Promise<TokenInfo[]> => {\n    const [tokenMap] = await this._init()\n    return Array.from(tokenMap.values())\n  }\n\n  findByAddress = async (addr: string): Promise<TokenInfo | undefined> => {\n    const [tokenMap] = await this._init()\n    return tokenMap.get(addr)\n  }\n\n  find = async (keyword: string, limit = 10): Promise<TokenInfo[]> => {\n    const [tokenMap, engine] = await this._init()\n    let tokens: TokenInfo[] = []\n    if (!keyword) return []\n    const fuzzy = keyword + '~1'\n    engine.search(fuzzy).forEach(({ ref }) => {\n      if (tokens.findIndex(({ address }) => address === ref) < 0) {\n        const token = tokenMap.get(ref)\n        if (token) tokens.push(token)\n      }\n    })\n    if (limit === 0) return tokens\n    return tokens.slice(0, limit)\n  }\n}\n\nexport default TokenProvider\n","import { account, utils } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport { net } from 'shared/runtime'\nimport { DataLoader } from './dataloader'\n\n/**\n * Delay by async/await\n * @param ms - milisenconds\n * @returns\n */\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Shorten a long address\n * @param address - The long address\n * @param num - The number of the heading and trailing characters\n * @param delimiter - The delimiter\n * @returns Shortened address\n */\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\n/**\n * Build a explorer url by context including addresses or transaction ids\n * @param addressOrTxId - Address or TxId\n * @returns\n */\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://solscan.io/account/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://solscan.io/tx/${addressOrTxId}?cluster=${net}`\n}\n\n/**\n * Wrapped Numbro - https://numbrojs.com/old-format.html\n * @param value - value\n * @returns\n */\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value || !Number.isFinite(Number(value))) return numbro('0')\n  return numbro(value)\n}\n\n/**\n * Generate a random color\n * @param seed - Seed\n * @param opacity - Opacity\n * @returns\n */\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n\n/**\n * Fetch coingecko data with cache\n * @param ticket - Token ticket\n * @returns\n */\nexport const fetchCGK = async (ticket = '') => {\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n\n/**\n * Randomly choose an element in the input array\n * @param arr - Original array of elements\n * @returns\n */\nexport const randChoose = <T>(arr: T[]): T => {\n  const rand = Math.floor(Math.random() * arr.length)\n  return arr[rand]\n}\n\n/**\n * Randomize a subarray in the input array with a specific number of elements\n * @param arr - Original array of elements\n * @param num - Number of elements in randomized subarray\n * @returns\n */\nexport const randElements = <T>(arr: T[], num: number): T[] => {\n  if (arr.length < num) return [...arr]\n  const re: T[] = []\n  while (re.length < num) {\n    const el = randChoose(arr)\n    if (!re.includes(el)) re.push(el)\n  }\n  return re\n}\n"],"names":["_path","_path2","_path3","_path4","_defs","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","SvgLogo","_ref","svgRef","title","titleId","props","width","height","viewBox","fill","xmlns","ref","id","d","opacity","x1","y1","x2","y2","gradientUnits","stopColor","offset","ForwardRef","defineProperty","exports","value","enumerable","get","_logo","default","_README","_panel","_interopRequireDefault","require","_panel2","_panel3","obj","__esModule","panels","DEFAULT_AVATARS","undefined","mintAddress","size","icon","name","reversed","avatars","setAvatars","useState","tokenProvider","useMint","pools","usePool","deriveAvatar","useCallback","async","token","findByAddress","address","logoURI","deriveAvatars","account","poolData","values","find","mint_lpt","mint_a","mint_b","Promise","all","map","reverse","avatar","useEffect","Avatar","src","style","backgroundColor","border","display","whiteSpace","DEFAULT_NAME","separator","setName","deriveName","deriveNames","names","join","DEFAULT_SYMBOL","symbol","setSymbol","deriveSymbol","substring","deriveSymbols","symbols","onClick","active","Card","bodyStyle","padding","cursor","borderRadius","randomColor","className","bordered","Boolean","Space","justifyContent","Typography","ellipsis","color","boxShadow","Row","gutter","align","Col","direction","type","LoadMore","callback","Fragment","overflow","useAllMintAddresses","allMintAddresses","setAllMintAddresses","getRecommendedMintAddresses","addresses","filter","includes","useSortMints","mints","sortedMints","setSortedMints","accounts","useAccount","mapMintAmounts","useMemo","mapMints","mint","Number","amount","toString","sortMints","mintAddresses","sort","a","b","amountA","amountB","LOCAL_STORAGE_ID","net","searching","onChange","disabled","visible","setVisible","keyword","setKeyword","setOffset","recommendedMints","addRecommendMint","setRecommendedMints","getRecommendedMints","localStorage","push","slice","newMints","useRecommendedMints","searchedMints","loading","limit","setLoading","setSearchedMints","search","clearTimeout","setTimeout","useSearchedMints","onSelect","list","document","getElementById","scrollTop","Button","Modal","onCancel","footer","closable","centered","span","Input","placeholder","suffix","marginRight","e","xs","sm","md","maxHeight","justify","index","throttle","Empty","bid","mintInfo","bidMintInfo","ask","askMintInfo","useSelector","state","bidMintAddress","askMintAddress","chartData","labels","configs","disableAxe","chartId","isRebuildChart","setRebuildChart","formatData","data","label","background","datasets","chartRef","useRef","getBackground","ctx","current","canvas","getContext","gradient","createLinearGradient","addColorStop","chartInstance","dataInstace","compareData","isEqual","update","Chart","options","responsive","maintainAspectRatio","scales","xAxes","gridLines","drawBorder","ticks","yAxes","beginAtZero","maxTicksLimit","numeric","format","plugins","legend","hover","onHover","event","elements","spacing","iconSize","fontSize","Tooltip","CoinGeckoIcon","TokenProvider","fetchMarketChart","ticket","params","axios","method","url","days","interval","prices","time","val","error","Interval","CHART_DATA_CONFIG","day","unit","week","month","year","MARKET_CONFIG","CHART_CONFIGS","setInterval","setChartData","bidData","askData","swapChartConfigs","borderColor","pointRadius","tooltip","pointHitRadius","pointHoverRadius","parseChartDay","marketData","displayTime","moment","chartTime","unshift","subtract","parseChartDaily","fetchChartData","bidTokenInfo","askTokenInfo","bidTicket","extensions","coingeckoId","askTicket","compareAddress","accountAddress","marketConfig","bidChartData","askChartData","idx","bidChart","askChart","price","priceUI","paddingTop","flex","Popover","content","Radio","defaultValue","level","JupiterIcon","SwapPlatform","NAME","initialState","platform","SenSwap","best","BigInt","priceImpact","loadingJupSwap","loadingSenswap","setLoadingJupiterRoute","createAsyncThunk","setLoadingSenSwap","updateRoute","route","createSlice","reducers","extraReducers","builder","addCase","fulfilled","payload","srcMintAddress","chainMintAddresses","hop","dstMintAddress","JupiterAggregator","Divider","margin","setReversed","bidAmount","askAmount","reversedPrice","shape","PriceImpact","priceImpactColor","goodSwap","acceptableSwap","decimals","setDecimals","getDecimals","fetchDecimals","er","buildResult","balance","utils","useAccountBalance","wallet","walletAddress","lamports","useWallet","useMintDecimals","DEFAULT_EMPTY_ADDRESS","useSwapStatus","bidAccountAddress","bidMintDecimals","bidBalance","availableBid","DEFAULT_WSOL","estimateFee","max","ExtraTypography","Skeleton","settings","slippage","minHeight","DEFAULT_DATA","priceChange","rank","totalVolume","cgkData","setCgkData","fetchCgkData","fetchCGK","shared","appId","process","devnet","node","cluster","spltAddress","splataAddress","swapAddress","testnet","mainnet","bidDefault","askDefault","wormholeAddress","assetsRoute","manifest","development","staging","production","env","sol","swap","wormhole","PDB_KEY","txId","useMintCgk","db","createPDB","prevLogs","getItem","txIds","swapAmountSuccess","listTxIds","swapLogs","setItem","PRECISION","ORACLE","Swap","curve","hopData","fee_ratio","tax_ratio","bidReserve","extractReserve","askReserve","inverseCurve","inverseSwap","reserve_a","reserve_b","Error","calcPriceImpact","srcAmount","p","forEach","s","dstAmount","findAllRoutes","graph","deep","routes","clonedGraph","Map","delete","poolAddress","usePoolTvl","tvl","setTvl","getMintTotalValue","getMint","getTokenUsd","tokenInfo","pool","supply","deltaA","deltaB","useMintTotalValue","getTvl","updateTvl","poolTvl","useBestRoute","fixedPoolAddress","bestRoute","setBestRoute","findBestRoute","poolAddresses","bidPoolAddresses","priority","bidPriority","askPoolAddresses","askPriority","filteredPool","keys","allRoutes","has","set","buildPoolGraph","bidState","maxAskAmount","findBestRouteFromBid","reversedRoute","minBidAmount","findBestRouteFromAsk","_bidAmount","_askAmount","askMintDecimals","handleSwap","splt","window","sentre","routingAddresses","srcAddress","deriveAssociatedAddress","dstAddress","useHandleSwap","children","onSwap","senlpState","useLocation","dispatch","useDispatch","useSenSwap","setRoute","block","updateBidData","prioritized","reset","getState","prevPriority","refPriority","updateAskData","constructor","_wallet","publicKey","transaction","connection","signTransaction","sendRawTransaction","serializeMessage","transactions","signedTransactions","signedTransaction","Connection","timeout","bidDecimals","inputMint","outputMint","exchange","refresh","useJupiter","debounceTime","wrappedWallet","JupiterWalletWrapper","result","routeInfo","onTransaction","confirmTransaction","txid","getTransaction","commitment","message","outputAddress","outAmount","priceImpactPct","marketInfos","toBase58","useJupiterAggregator","then","dst","onCallback","forceSwap","validSwap","setValidSwap","bestAmount","advanced","wrapAmount","wrapSol","useWrapSol","swapPlatform","notify","description","open","explorer","setAskData","setBidData","tooHighImpact","validSwapValue","isUseJup","checked","setChecked","onCloseModal","closeIcon","forceRender","Checkbox","enhancement","bidCgk","askCgk","bidPoolData","askPoolData","getMintTVL","bidTVL","askTVL","wrap","SOL_BRIDGE_ADDRESS","SOL_TOKEN_BRIDGE_ADDRESS","getSolNetwork","storage","checkAttestedWormhole","solContext","solNetWork","chainId","CHAIN_ID_SOLANA","tokenBridgeAddress","bridgeAddress","getSolContext","getIsWrappedAssetSol","WORMHOLE_COLOR","FrameWormhole","lazy","module","Suspense","fallback","wormholeSupported","setWormholeSupported","overlayInnerStyle","trigger","Tag","SentreIcon","Option","placement","Switch","updateSettings","timeoutId","forwardRef","onValue","setError","setCursor","innerRef","onAmount","onError","test","parseFloat","setSelectionRange","selectionStart","DEFAULT_INFO","useMintSelection","selectionInfo","setSelectionInfo","getSelectionInfo","ui","theme","useUI","maxBalance","selectionDefault","getAvailablePoolAddresses","MINT_SELECTION_STYLE","marginLeft","textAlign","maxWidth","RATE","poolAdress","activeValue","setActiveValue","fiftyPerBtn","HUNDRED","FIFTY","onChangePercentAmount","numMaxBalance","checkActive","buttonStyle","widget","onSwitch","bidRest","askRest","updateData","bidStyle","askStyle","wrapStype","top","STATUS_COLOR","success","pending","failed","tag","setColorTag","textTransform","FORMAT_AMOUNT","HISTORY_COLUMN","dataIndex","render","text","fontWeight","shortenAddress","record","from","amountFrom","to","amountTo","status","SECOND_PER_MILLISECOND","TimeFormat","DateHelper","milliSeconds","Date","valueOf","setMilliSeconds","seconds","date","ymd","YMD","ymdFrom","ymdTo","dates","dateFrom","fromYmd","dateTo","addDay","dateFormat","subtractDay","dayAmount","fromSeconds","add","TransLog","programId","programInfo","signature","blockTime","owner","actionType","actionTransfers","programTransfer","ActionInfo","preBalance","postBalance","ActionTransfer","destination","DEFAULT_LIMIT","Solana","conn","lastSignature","before","getConfirmedSignaturesForAddress2","signatures","confirmedTransactions","promiseTransGroup","skip","signaturesGroup","getParsedConfirmedTransactions","transGroups","transGroup","concat","currentTime","getTime","secondFrom","secondTo","Math","floor","programPublicKey","PublicKey","isStop","confirmedSignatureInfos","fetchSignatures","info","fetchConfirmTransaction","ParsedType","struct","TRANSLOG_PROGRAM_DATA_SCHEMA","SwapActionType","ACTION_TYPE","Route","SwapTransLogService","parseAction","transLog","solana","transLogs","confirmedTrans","fetchTransactions","trans","log","parseTransLog","meta","postTokenBalances","preTokenBalances","postBalances","preBalances","innerInstructionData","innerInstructions","instructions","instructionData","mapAccount","parseAccountInfo","accountKeys","isParsedInstruction","parseListActionTransfer","parsed","actions","actionTransfer","action","actionParsed","Transfer","parsedAction","parseActionTransfer","parsedTransfer","amountTransfer","mapAccountInfo","accountIndex","uiTokenAmount","pubkey","accountData","String","programDataEncode","dataBuffer","base58","programDataDecode","fromBuffer","Buffer","code","CACHE_KEY","SwapService","transLogService","fetchTransLog","timeFrom","timeTo","ipfs","IPFS","cacheTransLog","getPDB","keyBackup","fistTransLog","lastTransLog","beginTransLogs","collect","mapTransLogs","newTransLogs","newIpfsKey","fetchHistory","getAddress","fetchHistorySwap","myWalletAddress","transLogsData","history","historyItem","firstAction","lastAction","transactionId","historySwap","amountRow","setAmountRow","unwrap","console","warn","Table","columns","dataSource","pagination","rowClassName","scroll","x","setBid","setAsk","checkIsSenLpCome","JupiterProvider","userPublicKey","paddingBottom","lg","toJSON","bigintSerializationMiddleware","serializableCheck","isSerializable","Array","isArray","proto","getPrototypeOf","isPlainObject","BN","configureStore","middleware","getDefaultMiddleware","devTools","reducer","Page","UIProvider","antd","MintProvider","PoolProvider","AccountProvider","WalletProvider","Provider","store","model","DEFAULT_CACHE_CONFIG","ttl","DEFAULT_SINGLE_FLIGHT_CONFIG","calls","cache","RequestQueue","resolveQueue","rejectQueue","resolve","reject","resolves","shift","rejects","SingleFlightCache","mapCache","DataLoader","instanceKey","JSON","stringify","mapInstance","instance","newSingleFlight","SingleFlight","requestKey","singleFlight","getSingleFlight","newRequest","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","cacheData","isFetch","request","fetch","validateLimit","addRequestQueue","createTimeLogs","response","catch","finally","fetchRequestQueue","clearInterval","now","PDB","dbName","driver","createInstance","localForage","storeName","dropInstance","clear","appIds","flat","iterate","cid","backup","restore","walletArress","_ipfs","create","asyncWait","isCID","stream","cat","raw","chunk","parse","isIPFS","getNetwork","getChainId","rpc","KEY","convert","sntr","tokenMap","engine","queue","_init","tokenList","TokenListProvider","filterByChainId","getList","supplementary","lunr","field","doc","addr","tokens","fuzzy","findIndex","ms","num","delimiter","addressOrTxId","isFinite","numbro","seed","hash","random","charCodeAt","rgb"],"sourceRoot":""}