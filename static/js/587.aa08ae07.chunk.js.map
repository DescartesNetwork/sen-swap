{"version":3,"file":"static/js/587.aa08ae07.chunk.js","mappings":"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","sources":["../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../node_modules/long/src/long.js","../node_modules/browser-pack/_prelude.js","../node_modules/bignumber.js/bignumber.js","en-US.js","formatting.js","globalState.js","loading.js","manipulating.js","numbro.js","parsing.js","unformatting.js","validating.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/protobufjs/src/index-minimal.js","../node_modules/protobufjs/src/reader.js","../node_modules/protobufjs/src/reader_buffer.js","../node_modules/protobufjs/src/roots.js","../node_modules/protobufjs/src/rpc.js","../node_modules/protobufjs/src/rpc/service.js","../node_modules/protobufjs/src/util/longbits.js","../node_modules/protobufjs/src/util/minimal.js","../node_modules/protobufjs/src/writer.js","../node_modules/protobufjs/src/writer_buffer.js","../node_modules/randombytes/browser.js"],"sourcesContent":["\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nmodule.exports = {\n    languageTag: \"en-US\",\n    delimiters: {\n        thousands: \",\",\n        decimal: \".\"\n    },\n    abbreviations: {\n        thousand: \"k\",\n        million: \"m\",\n        billion: \"b\",\n        trillion: \"t\"\n    },\n    spaceSeparated: false,\n    ordinal: function(number) {\n        let b = number % 10;\n        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n    },\n    bytes: {\n        binarySuffixes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n        decimalSuffixes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n    },\n    currency: {\n        symbol: \"$\",\n        position: \"prefix\",\n        code: \"USD\"\n    },\n    currencyFormat: {\n        thousandSeparated: true,\n        totalLength: 4,\n        spaceSeparated: true,\n        spaceSeparatedCurrency: true\n    },\n    formats: {\n        fourDigits: {\n            totalLength: 4,\n            spaceSeparated: true\n        },\n        fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 0\n        }\n    }\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState = require(\"./globalState\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nconst powers = {\n    trillion: Math.pow(10, 12),\n    billion: Math.pow(10, 9),\n    million: Math.pow(10, 6),\n    thousand: Math.pow(10, 3)\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false,\n    roundingFunction: Math.round,\n    spaceSeparatedAbbreviation: false\n};\n\nconst { binarySuffixes, decimalSuffixes } = globalState.currentBytes();\n\nconst bytes = {\n    general: { scale: 1024, suffixes: decimalSuffixes, marker: \"bd\" },\n    binary: { scale: 1024, suffixes: binarySuffixes, marker: \"b\" },\n    decimal: { scale: 1000, suffixes: decimalSuffixes, marker: \"d\" }\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState, numbro);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentTimeDefaultFormat());\n            return formatTime(instance, providedFormat, globalState, numbro);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState, numbro);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return { value, suffix };\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    const { binarySuffixes: localBinarySuffixes, decimalSuffixes: localDecimalSuffixes } = state.currentBytes();\n\n    const localBytes = {\n        general: { scale: 1024, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"bd\" },\n        binary: { scale: 1024, suffixes: localBinarySuffixes || binarySuffixes, marker: \"b\" },\n        decimal: { scale: 1000, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"d\" }\n    };\n    let baseInfo = localBytes[base];\n\n    let { value, suffix } = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let clonedFormat = Object.assign({}, providedFormat);\n    let options = Object.assign({}, defaultOptions, clonedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = clonedFormat.currencyPosition || currentCurrency.position;\n    let symbol = clonedFormat.currencySymbol || currentCurrency.symbol;\n    const spaceSeparatedCurrency = options.spaceSeparatedCurrency !== void 0\n        ? options.spaceSeparatedCurrency : options.spaceSeparated;\n\n    if (clonedFormat.lowPrecision === undefined) {\n        clonedFormat.lowPrecision = false;\n    }\n\n    if (spaceSeparatedCurrency) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat: clonedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else if (instance._value > 0 && options.forceSign) {\n            output = `+${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = !options.spaceSeparatedAbbreviation && average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {boolean} [lowPrecision=true] - reduce average precision\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @param {function} roundingFunction - function used to round numbers\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({ value, forceAverage, lowPrecision = true, abbreviations, spaceSeparated = false, totalLength = 0, roundingFunction = Math.round }) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if (forceAverage && abbreviations[forceAverage] && powers[forceAverage]) {\n        abbreviation = abbreviations[forceAverage];\n        value = value / powers[forceAverage];\n    } else {\n        if (abs >= powers.trillion || (lowPrecision && roundingFunction(abs / powers.trillion) === 1)) {\n            // trillion\n            abbreviation = abbreviations.trillion;\n            value = value / powers.trillion;\n        } else if (abs < powers.trillion && abs >= powers.billion || (lowPrecision && roundingFunction(abs / powers.billion) === 1)) {\n            // billion\n            abbreviation = abbreviations.billion;\n            value = value / powers.billion;\n        } else if (abs < powers.billion && abs >= powers.million || (lowPrecision && roundingFunction(abs / powers.million) === 1)) {\n            // million\n            abbreviation = abbreviations.million;\n            value = value / powers.million;\n        } else if (abs < powers.million && abs >= powers.thousand || (lowPrecision && roundingFunction(abs / powers.thousand) === 1)) {\n            // thousand\n            abbreviation = abbreviations.thousand;\n            value = value / powers.thousand;\n        }\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let isNegative = value < 0;\n        let characteristic = value.toString().split(\".\")[0];\n\n        let characteristicLength = isNegative\n            ? characteristic.length - 1\n            : characteristic.length;\n\n        mantissaPrecision = Math.max(totalLength - characteristicLength, 0);\n    }\n\n    return { value, abbreviation, mantissaPrecision };\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({ value, characteristicPrecision = 0 }) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @param {function} roundingFunction - rounding function to be used\n * @return {string}\n */\nfunction toFixed(value, precision, roundingFunction = Math.round) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    return (roundingFunction(+`${value}e+${precision}`) / (Math.pow(10, precision))).toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim, roundingFunction) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision, roundingFunction);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    const hasNegativeSign = value < 0 && currentCharacteristic.indexOf(\"-\") === 0;\n    if (hasNegativeSign) {\n            // Remove the negative sign\n            currentCharacteristic = currentCharacteristic.slice(1);\n            result = result.slice(1);\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    if (hasNegativeSign) {\n        // Add back the minus sign\n        result = `-${result}`;\n    }\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n    const hasNegativeSign = value < 0 && characteristic.indexOf(\"-\") === 0;\n\n    if (thousandSeparated) {\n        if (hasNegativeSign) {\n            // Remove the negative sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (hasNegativeSign) {\n            // Add back the negative sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({ instance, providedFormat, state = globalState, decimalSeparator, defaults = state.currentDefaults() }) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let lowPrecision = options.lowPrecision;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n    let roundingFunction = options.roundingFunction;\n\n    let abbreviation = \"\";\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            lowPrecision,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated,\n            roundingFunction,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa, roundingFunction);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nmodule.exports = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst enUS = require(\"./en-US\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nlet state = {};\n\nlet currentLanguageTag = undefined;\nlet languages = {};\n\nlet zeroFormat = null;\n\nlet globalDefaults = {};\n\nfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\nfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n/**\n * Return all the register languages\n *\n * @return {{}}\n */\nstate.languages = () => Object.assign({}, languages);\n\n//\n// Current language accessors\n//\n\n/**\n * Return the current language tag\n *\n * @return {string}\n */\nstate.currentLanguage = () => currentLanguageTag;\n\n/**\n * Return the current language bytes data\n *\n * @return {{}}\n */\nstate.currentBytes = () => currentLanguageData().bytes || {};\n\n/**\n * Return the current language currency data\n *\n * @return {{}}\n */\nstate.currentCurrency = () => currentLanguageData().currency;\n\n/**\n * Return the current language abbreviations data\n *\n * @return {{}}\n */\nstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n/**\n * Return the current language delimiters data\n *\n * @return {{}}\n */\nstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n/**\n * Return the current language ordinal function\n *\n * @return {function}\n */\nstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n//\n// Defaults\n//\n\n/**\n * Return the current formatting defaults.\n * First use the current language default, then fallback to the globally defined defaults.\n *\n * @return {{}}\n */\nstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n/**\n * Return the ordinal default-format.\n * First use the current language ordinal default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n/**\n * Return the byte default-format.\n * First use the current language byte default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n/**\n * Return the percentage default-format.\n * First use the current language percentage default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n/**\n * Return the currency default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n/**\n * Return the time default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n/**\n * Set the global formatting defaults.\n *\n * @param {{}|string} format - formatting options to use as defaults\n */\nstate.setDefaults = (format) => {\n    format = parsing.parseFormat(format);\n    if (validating.validateFormat(format)) {\n        globalDefaults = format;\n    }\n};\n\n//\n// Zero format\n//\n\n/**\n * Return the format string for 0.\n *\n * @return {string}\n */\nstate.getZeroFormat = () => zeroFormat;\n\n/**\n * Set a STRING to output when the value is 0.\n *\n * @param {{}|string} string - string to set\n */\nstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n/**\n * Return true if a format for 0 has been set already.\n *\n * @return {boolean}\n */\nstate.hasZeroFormat = () => zeroFormat !== null;\n\n//\n// Getters/Setters\n//\n\n/**\n * Return the language data for the provided TAG.\n * Return the current language data if no tag is provided.\n *\n * Throw an error if the tag doesn't match any registered language.\n *\n * @param {string} [tag] - language tag of a registered language\n * @return {{}}\n */\nstate.languageData = (tag) => {\n    if (tag) {\n        if (languages[tag]) {\n            return languages[tag];\n        }\n        throw new Error(`Unknown tag \"${tag}\"`);\n    }\n\n    return currentLanguageData();\n};\n\n/**\n * Register the provided DATA as a language if and only if the data is valid.\n * If the data is not valid, an error is thrown.\n *\n * When USELANGUAGE is true, the registered language is then used.\n *\n * @param {{}} data - language data to register\n * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n */\nstate.registerLanguage = (data, useLanguage = false) => {\n    if (!validating.validateLanguage(data)) {\n        throw new Error(\"Invalid language data\");\n    }\n\n    languages[data.languageTag] = data;\n\n    if (useLanguage) {\n        chooseLanguage(data.languageTag);\n    }\n};\n\n/**\n * Set the current language according to TAG.\n * If TAG doesn't match a registered language, another language matching\n * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n * `en-US` is finally used.\n *\n * @param tag\n * @param fallbackTag\n */\nstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n    if (!languages[tag]) {\n        let suffix = tag.split(\"-\")[0];\n\n        let matchingLanguageTag = Object.keys(languages).find(each => {\n            return each.split(\"-\")[0] === suffix;\n        });\n\n        if (!languages[matchingLanguageTag]) {\n            chooseLanguage(fallbackTag);\n            return;\n        }\n\n        chooseLanguage(matchingLanguageTag);\n        return;\n    }\n\n    chooseLanguage(tag);\n};\n\nstate.registerLanguage(enUS);\ncurrentLanguageTag = enUS.languageTag;\n\nmodule.exports = state;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = require(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nmodule.exports = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = require(\"bignumber.js\");\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nmodule.exports = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro),\n    BigNumber: BigNumber\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.3.5\";\n\nconst globalState = require(\"./globalState\");\nconst validator = require(\"./validating\");\nconst loader = require(\"./loading\")(numbro);\nconst unformatter = require(\"./unformatting\");\nlet formatter = require(\"./formatting\")(numbro);\nlet manipulate = require(\"./manipulating\")(numbro);\nconst parsing = require(\"./parsing\");\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\nnumbro.BigNumber = manipulate.BigNumber;\n\nmodule.exports = numbro;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n        result.spaceSeparatedCurrency = true;\n\n        if (result.average || result.forceAverage) {\n            result.spaceSeparatedAbbreviation = true;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for a trimmed mantissa. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseTrimMantissa(string, result) {\n    const mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        result.trimMantissa = mantissa.indexOf(\"[\") !== -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseTrimMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nmodule.exports = {\n    parseFormat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst allSuffixes = [\n    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n    {key: \"ZB\", factor: Math.pow(1000, 7)},\n    {key: \"YiB\", factor: Math.pow(1024, 8)},\n    {key: \"YB\", factor: Math.pow(1000, 8)},\n    {key: \"TiB\", factor: Math.pow(1024, 4)},\n    {key: \"TB\", factor: Math.pow(1000, 4)},\n    {key: \"PiB\", factor: Math.pow(1024, 5)},\n    {key: \"PB\", factor: Math.pow(1000, 5)},\n    {key: \"MiB\", factor: Math.pow(1024, 2)},\n    {key: \"MB\", factor: Math.pow(1000, 2)},\n    {key: \"KiB\", factor: Math.pow(1024, 1)},\n    {key: \"KB\", factor: Math.pow(1000, 1)},\n    {key: \"GiB\", factor: Math.pow(1024, 3)},\n    {key: \"GB\", factor: Math.pow(1000, 3)},\n    {key: \"EiB\", factor: Math.pow(1024, 6)},\n    {key: \"EB\", factor: Math.pow(1000, 6)},\n    {key: \"B\", factor: 1}\n];\n\n/**\n * Generate a RegExp where S get all RegExp specific characters escaped.\n *\n * @param {string} s - string representing a RegExp\n * @return {string}\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\n/**\n * Recursively compute the unformatted value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction computeUnformattedValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (!isNaN(+inputString)) {\n        return +inputString;\n    }\n\n    let stripped = \"\";\n    // Negative\n\n    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n    if (newInput !== inputString) {\n        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Byte\n\n    for (let i = 0; i < allSuffixes.length; i++) {\n        let suffix = allSuffixes[i];\n        stripped = inputString.replace(RegExp(`([0-9 ])(${suffix.key})$`), \"$1\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * suffix.factor;\n        }\n    }\n\n    // Percent\n\n    stripped = inputString.replace(\"%\", \"\");\n\n    if (stripped !== inputString) {\n        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) / 100;\n    }\n\n    // Ordinal\n\n    let possibleOrdinalValue = parseFloat(inputString);\n\n    if (isNaN(possibleOrdinalValue)) {\n        return undefined;\n    }\n\n    let ordinalString = ordinal(possibleOrdinalValue);\n    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    }\n\n    // Average\n\n    let inversedAbbreviations = {};\n    Object.keys(abbreviations).forEach((key) => {\n        inversedAbbreviations[abbreviations[key]] = key;\n    });\n\n    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n    let numberOfAbbreviations = abbreviationValues.length;\n\n    for (let i = 0; i < numberOfAbbreviations; i++) {\n        let value = abbreviationValues[i];\n        let key = inversedAbbreviations[value];\n\n        stripped = inputString.replace(value, \"\");\n        if (stripped !== inputString) {\n            let factor = undefined;\n            switch (key) { // eslint-disable-line default-case\n                case \"thousand\":\n                    factor = Math.pow(10, 3);\n                    break;\n                case \"million\":\n                    factor = Math.pow(10, 6);\n                    break;\n                case \"billion\":\n                    factor = Math.pow(10, 9);\n                    break;\n                case \"trillion\":\n                    factor = Math.pow(10, 12);\n                    break;\n            }\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * factor;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Removes in one pass all formatting symbols.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @return {string}\n */\nfunction removeFormattingSymbols(inputString, delimiters, currencySymbol = \"\") {\n    // Currency\n\n    let stripped = inputString.replace(currencySymbol, \"\");\n\n    // Thousand separators\n\n    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n    // Decimal\n\n    stripped = stripped.replace(delimiters.decimal, \".\");\n\n    return stripped;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (inputString === \"\") {\n        return undefined;\n    }\n\n    // Zero Format\n\n    if (inputString === zeroFormat) {\n        return 0;\n    }\n\n    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n}\n\n/**\n * Check if the INPUTSTRING represents a time.\n *\n * @param {string} inputString - string to check\n * @param {*} delimiters - Delimiters used while generating the inputString\n * @return {boolean}\n */\nfunction matchesTime(inputString, delimiters) {\n    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n    if (!separators) {\n        return false;\n    }\n\n    let segments = inputString.split(\":\");\n    if (segments.length !== 3) {\n        return false;\n    }\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n}\n\n/**\n * Unformat a numbro-generated string representing a time to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @return {number}\n */\nfunction unformatTime(inputString) {\n    let segments = inputString.split(\":\");\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return seconds + 60 * minutes + 3600 * hours;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {NumbroFormat} format - format used  while generating the inputString\n * @return {number}\n */\nfunction unformat(inputString, format) {\n    // Avoid circular references\n    const globalState = require(\"./globalState\");\n\n    let delimiters = globalState.currentDelimiters();\n    let currencySymbol = globalState.currentCurrency().symbol;\n    let ordinal = globalState.currentOrdinal();\n    let zeroFormat = globalState.getZeroFormat();\n    let abbreviations = globalState.currentAbbreviations();\n\n    let value = undefined;\n\n    if (typeof inputString === \"string\") {\n        if (matchesTime(inputString, delimiters)) {\n            value = unformatTime(inputString);\n        } else {\n            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    } else if (typeof inputString === \"number\") {\n        value = inputString;\n    } else {\n        return undefined;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    unformat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet unformatter = require(\"./unformatting\");\n\n// Simplified regexp supporting only `language`, `script`, and `region`\nconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\nconst validOutputValues = [\n    \"currency\",\n    \"percent\",\n    \"byte\",\n    \"time\",\n    \"ordinal\",\n    \"number\"\n];\n\nconst validForceAverageValues = [\n    \"trillion\",\n    \"billion\",\n    \"million\",\n    \"thousand\"\n];\n\nconst validCurrencyPosition = [\n    \"prefix\",\n    \"infix\",\n    \"postfix\"\n];\n\nconst validNegativeValues = [\n    \"sign\",\n    \"parenthesis\"\n];\n\nconst validMandatoryAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: {\n            type: \"string\",\n            mandatory: true\n        },\n        million: {\n            type: \"string\",\n            mandatory: true\n        },\n        billion: {\n            type: \"string\",\n            mandatory: true\n        },\n        trillion: {\n            type: \"string\",\n            mandatory: true\n        }\n    },\n    mandatory: true\n};\n\nconst validAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: \"string\",\n        million: \"string\",\n        billion: \"string\",\n        trillion: \"string\"\n    }\n};\n\nconst validBaseValues = [\n    \"decimal\",\n    \"binary\",\n    \"general\"\n];\n\nconst validFormat = {\n    output: {\n        type: \"string\",\n        validValues: validOutputValues\n    },\n    base: {\n        type: \"string\",\n        validValues: validBaseValues,\n        restriction: (number, format) => format.output === \"byte\",\n        message: \"`base` must be provided only when the output is `byte`\",\n        mandatory: (format) => format.output === \"byte\"\n    },\n    characteristic: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    prefix: \"string\",\n    postfix: \"string\",\n    forceAverage: {\n        type: \"string\",\n        validValues: validForceAverageValues\n    },\n    average: \"boolean\",\n    lowPrecision: {\n        type: \"boolean\",\n        restriction: (number, format) => format.average === true,\n        message: \"`lowPrecision` must be provided only when the option `average` is set\"\n    },\n    currencyPosition: {\n        type: \"string\",\n        validValues: validCurrencyPosition\n    },\n    currencySymbol: \"string\",\n    totalLength: {\n        type: \"number\",\n        restrictions: [\n            {\n                restriction: (number) => number >= 0,\n                message: \"value must be positive\"\n            },\n            {\n                restriction: (number, format) => !format.exponential,\n                message: \"`totalLength` is incompatible with `exponential`\"\n            }\n        ]\n    },\n    mantissa: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    optionalMantissa: \"boolean\",\n    trimMantissa: \"boolean\",\n    roundingFunction: \"function\",\n    optionalCharacteristic: \"boolean\",\n    thousandSeparated: \"boolean\",\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    spaceSeparatedAbbreviation: \"boolean\",\n    abbreviations: validAbbreviations,\n    negative: {\n        type: \"string\",\n        validValues: validNegativeValues\n    },\n    forceSign: \"boolean\",\n    exponential: {\n        type: \"boolean\"\n    },\n    prefixSymbol: {\n        type: \"boolean\",\n        restriction: (number, format) => format.output === \"percent\",\n        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n    }\n};\n\nconst validLanguage = {\n    languageTag: {\n        type: \"string\",\n        mandatory: true,\n        restriction: (tag) => {\n            return tag.match(bcp47RegExp);\n        },\n        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n    },\n    delimiters: {\n        type: \"object\",\n        children: {\n            thousands: \"string\",\n            decimal: \"string\",\n            thousandsSize: \"number\"\n        },\n        mandatory: true\n    },\n    abbreviations: validMandatoryAbbreviations,\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    ordinal: {\n        type: \"function\",\n        mandatory: true\n    },\n    bytes: {\n        type: \"object\",\n        children: {\n            binarySuffixes: \"object\",\n            decimalSuffixes: \"object\"\n        }\n    },\n    currency: {\n        type: \"object\",\n        children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n        },\n        mandatory: true\n    },\n    defaults: \"format\",\n    ordinalFormat: \"format\",\n    byteFormat: \"format\",\n    percentageFormat: \"format\",\n    currencyFormat: \"format\",\n    timeDefaults: \"format\",\n    formats: {\n        type: \"object\",\n        children: {\n            fourDigits: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: true\n            }\n        }\n    }\n};\n\n/**\n * Check the validity of the provided input and format.\n * The check is NOT lazy.\n *\n * @param {string|number|Numbro} input - input to check\n * @param {NumbroFormat} format - format to check\n * @return {boolean} True when everything is correct\n */\nfunction validate(input, format) {\n    let validInput = validateInput(input);\n    let isFormatValid = validateFormat(format);\n\n    return validInput && isFormatValid;\n}\n\n/**\n * Check the validity of the numbro input.\n *\n * @param {string|number|Numbro} input - input to check\n * @return {boolean} True when everything is correct\n */\nfunction validateInput(input) {\n    let value = unformatter.unformat(input);\n\n    return value !== undefined;\n}\n\n/**\n * Check the validity of the provided format TOVALIDATE against SPEC.\n *\n * @param {NumbroFormat} toValidate - format to check\n * @param {*} spec - specification against which to check\n * @param {string} prefix - prefix use for error messages\n * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n * @return {boolean} True when everything is correct\n */\nfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n    let results = Object.keys(toValidate).map((key) => {\n        if (!spec[key]) {\n            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        let value = toValidate[key];\n        let data = spec[key];\n\n        if (typeof data === \"string\") {\n            data = {type: data};\n        }\n\n        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n            if (!valid) {\n                return false;\n            }\n        } else if (typeof value !== data.type) {\n            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.restrictions && data.restrictions.length) {\n            let length = data.restrictions.length;\n            for (let i = 0; i < length; i++) {\n                let {restriction, message} = data.restrictions[i];\n                if (!restriction(value, toValidate)) {\n                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n        }\n\n        if (data.restriction && !data.restriction(value, toValidate)) {\n            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.validValues && data.validValues.indexOf(value) === -1) {\n            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.children) {\n            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (!skipMandatoryCheck) {\n        results.push(...Object.keys(spec).map((key) => {\n            let data = spec[key];\n            if (typeof data === \"string\") {\n                data = {type: data};\n            }\n\n            if (data.mandatory) {\n                let mandatory = data.mandatory;\n                if (typeof mandatory === \"function\") {\n                    mandatory = mandatory(toValidate);\n                }\n\n                if (mandatory && toValidate[key] === undefined) {\n                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n\n            return true;\n        }));\n    }\n\n    return results.reduce((acc, current) => {\n        return acc && current;\n    }, true);\n}\n\n/**\n * Check the provided FORMAT.\n *\n * @param {NumbroFormat} format - format to check\n * @return {boolean}\n */\nfunction validateFormat(format) {\n    return validateSpec(format, validFormat, \"[Validate format]\");\n}\n\n/**\n * Check the provided LANGUAGE.\n *\n * @param {NumbroLanguage} language - language to check\n * @return {boolean}\n */\nfunction validateLanguage(language) {\n    return validateSpec(language, validLanguage, \"[Validate language]\");\n}\n\nmodule.exports = {\n    validate,\n    validateFormat,\n    validateInput,\n    validateLanguage\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","'use strict'\n\n// limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\nvar MAX_BYTES = 65536\n\n// Node supports requesting up to this number of bytes\n// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48\nvar MAX_UINT32 = 4294967295\n\nfunction oldBrowser () {\n  throw new Error('Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11')\n}\n\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = global.crypto || global.msCrypto\n\nif (crypto && crypto.getRandomValues) {\n  module.exports = randomBytes\n} else {\n  module.exports = oldBrowser\n}\n\nfunction randomBytes (size, cb) {\n  // phantomjs needs to throw\n  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')\n\n  var bytes = Buffer.allocUnsafe(size)\n\n  if (size > 0) {  // getRandomValues fails on IE if size == 0\n    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues\n      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n      for (var generated = 0; generated < size; generated += MAX_BYTES) {\n        // buffer.slice automatically checks if the end is past the end of\n        // the buffer so we don't have to here\n        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))\n      }\n    } else {\n      crypto.getRandomValues(bytes)\n    }\n  }\n\n  if (typeof cb === 'function') {\n    return process.nextTick(function () {\n      cb(null, bytes)\n    })\n  }\n\n  return bytes\n}\n"],"names":["module","exports","fn","ctx","params","Array","arguments","length","offset","index","pending","Promise","resolve","reject","err","apply","base64","string","p","n","charAt","Math","ceil","b64","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","slice","join","invalidEncoding","decode","c","charCodeAt","undefined","Error","test","EventEmitter","this","_listeners","prototype","on","evt","off","listeners","splice","emit","args","factory","Float32Array","f32","f8b","Uint8Array","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","log","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","replace","Object","keys","e","alloc","size","SIZE","MAX","slab","call","utf8","len","read","write","c1","c2","Long","wasm","WebAssembly","Instance","Module","low","high","unsigned","isLong","obj","__isLong__","defineProperty","value","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","str","radix","RangeError","indexOf","substring","radixToPower","result","min","parseInt","power","mul","add","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","max","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","bytes","fromBytesLE","fromBytesBE","isNumeric","hasSymbol","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","r","s","z","xc","yc","k","l","a","BigNumber","pow2_53","random53bitInt","decimal","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","x","v","intCheck","alphabet","caseChanged","isNum","arrL","arr","carry","klo","khi","temp","xlo","m","xhi","cmp","c0","toExponential","toFixedPoint","method","pows10","out","rd","ni","d","rm","sd","crypto","EXPONENTIAL_AT","RANGE","rand","dp","sum","convertBase","y","yL","qc","q","base","more","xL","xi","remL","yz","yc0","rem0","prodL","prod","parseNumeric","nIsBig","nIsNeg","isModExp","nIsOdd","half","ye","xe","xLTy","reverse","normalise","xcL","ycL","zc","sqrtBase","ylo","yhi","rep","format","g1","g2","intPart","fractionPart","isNeg","intDigits","isInteger","n1","d1","md","exp","n0","d2","d0","globalObject","languageTag","delimiters","thousands","abbreviations","thousand","million","billion","trillion","spaceSeparated","ordinal","number","binarySuffixes","decimalSuffixes","currency","symbol","position","code","currencyFormat","thousandSeparated","totalLength","spaceSeparatedCurrency","formats","fourDigits","fullWithTwoDecimals","output","fullWithTwoDecimalsNoCurrency","fullWithNoDecimals","globalState","require","validating","parsing","powers","defaultOptions","characteristic","forceAverage","average","optionalMantissa","negative","forceSign","roundingFunction","spaceSeparatedAbbreviation","currentBytes","general","scale","suffixes","marker","binary","_format","instance","providedFormat","numbro","parseFormat","validateFormat","postfix","state","currentCurrency","clonedFormat","assign","options","space","currencyPosition","currencySymbol","lowPrecision","formatNumber","_value","formatOrDefault","currentCurrencyDefaultFormat","prefixSymbol","currentPercentageDefaultFormat","_state$currentBytes","localBinarySuffixes","localDecimalSuffixes","baseInfo","getFormatByteUnits","defaults","currentByteDefaultFormat","currentTimeDefaultFormat","hours","minutes","seconds","ordinalFn","currentOrdinal","currentOrdinalDefaultFormat","abs","zeroes","toFixed","precision","_result$split2","split","substr","replaceDelimiters","currentDelimiters","thousandSeparator","thousandsSize","hasNegativeSign","counter","unshift","forEach","currentDefaults","hasZeroFormat","getZeroFormat","isFinite","_ref2","_ref2$characteristicP","characteristicPrecision","numberString","exponential","optionalCharacteristic","mantissaPrecision","trimMantissa","abbreviation","data","characteristicLength","currentAbbreviations","_data","trim","_result$toString$spli2","currentCharacteristic","currentMantissa","match","hasTrailingZeroes","_result$toString$spli5","missingZeros","defaultFormat","getByteUnit","getBinaryByteUnit","getDecimalByteUnit","enUS","currentLanguageTag","languages","zeroFormat","globalDefaults","chooseLanguage","tag","currentLanguageData","currentLanguage","ordinalFormat","byteFormat","percentageFormat","timeFormat","setDefaults","setZeroFormat","languageData","registerLanguage","useLanguage","validateLanguage","setLanguage","fallbackTag","matchingLanguageTag","find","each","loadLanguagesInNode","tags","console","error","_subtract","otherValue","isNumbro","minus","plus","times","dividedBy","set","difference","clone","validator","loader","unformatter","formatter","manipulate","Numbro","_classCallCheck","input","normalizeInput","unformat","version","object","language","defaultCurrencyFormat","validate","allSuffixes","key","factor","escapeRegExp","unformatValue","inputString","computeUnformattedValue","stripped","newInput","RegExp","possibleOrdinalValue","parseFloat","ordinalString","inversedAbbreviations","abbreviationValues","sort","numberOfAbbreviations","_i","segments","bcp47RegExp","validFormat","type","validValues","restriction","message","mandatory","restrictions","children","validLanguage","timeDefaults","validateInput","validateSpec","toValidate","spec","skipMandatoryCheck","results","map","_typeof","JSON","stringify","_toConsumableArray","reduce","acc","current","validInput","isFormatValid","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","props","propName","componentName","location","propFullName","secret","name","getShim","isRequired","ReactPropTypes","array","bool","func","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","protobuf","configure","util","_configure","Writer","BufferWriter","Reader","BufferReader","build","rpc","roots","LongBits","indexOutOfRange","reader","writeLength","create_array","isArray","create","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","subarray","uint32","int32","sint32","fixed32","sfixed32","float","double","constructor","skip","skipType","wireType","BufferReader_","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","TypeError","Boolean","rpcCall","requestCtor","responseCtor","request","callback","self","asPromise","finish","response","setTimeout","endedByRPC","zero","zzEncode","zeroHash","from","isString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","src","ifNotSet","newError","CustomError","properties","get","captureStackTrace","stack","pool","isNode","global","process","versions","window","emptyArray","freeze","emptyObject","Number","isObject","isset","isSet","prop","hasOwnProperty","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","toJSONOptions","longs","enums","json","encoding","allocUnsafe","Op","next","noop","State","writer","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","fork","reset","ldelim","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength","MAX_BYTES","MAX_UINT32","msCrypto","getRandomValues","cb","generated","nextTick"],"sourceRoot":""}