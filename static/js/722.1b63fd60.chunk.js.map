{"version":3,"file":"static/js/722.1b63fd60.chunk.js","mappings":"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","sources":["app/shared/components/numericInput.tsx","app/page/chart/chart.tsx","app/page/chart/GroupAvatar.tsx","app/helper/cgk.ts","app/page/chart/index.tsx","app/components/swapButton.tsx","app/helper/router.ts","app/helper/oracle.ts","app/components/preview/routeAvatar.tsx","app/components/preview/inversePirce.tsx","app/components/preview/switchPriceRate.tsx","app/components/preview/index.tsx","app/page/swap/swapReview.tsx","app/shared/hooks/useTokenProvider.ts","app/shared/components/mint/mintAvatar.tsx","app/shared/components/mint/mintSymbol.tsx","app/shared/hooks/useMintCgk.ts","app/page/swap/swapPoolInfo.tsx","app/components/selection/search.tsx","app/components/selection/mint.tsx","app/components/selection/mintSelection.tsx","app/components/selection/index.tsx","app/model/bid.controller.ts","app/components/hooks/useMintSelection.ts","app/shared/hooks/useMintDecimals.ts","app/shared/hooks/useMintAccount.ts","app/constant/sol.ts","app/configs/manifest.config.ts","app/configs/sol.config.ts","app/configs/swap.config.ts","app/configs/index.ts","app/components/bid/index.tsx","app/model/ask.controller.ts","app/components/ask/index.tsx","app/static/images/sen.svg","app/lib/stat/constants/transaction.ts","app/components/poweredBy.tsx","app/components/settings/slippage.tsx","app/model/settings.controller.ts","app/components/settings/index.tsx","app/page/swap/swapSettings.tsx","app/model/route.controller.ts","app/components/swap.tsx","app/page/swap/index.tsx","app/page/history/statusTag.tsx","app/page/history/column.tsx","app/lib/stat/entities/trans-log.ts","app/lib/stat/adapters/solana/client.ts","app/lib/stat/helpers/date.ts","app/lib/stat/logic/translog.ts","app/lib/stat/constants/sol.ts","app/model/history.controller.ts","app/page/history/index.tsx","app/page/index.tsx","app/widget/confirmSwap.tsx","app/widget/index.tsx","app/model/index.ts","app/bootstrap.app.tsx","os/configs/index.ts","os/store/accounts.reducer.ts","os/store/index.ts","os/store/mints.reducer.ts","os/store/page.reducer.ts","os/store/pools.reducer.ts","os/store/search.reducer.ts","os/store/ui.reducer.ts","os/store/wallet.reducer.ts","shared/dataloader/index.ts","shared/runtime.ts","shared/util.ts"],"sourcesContent":["import React, { useState, forwardRef, useCallback, useRef } from 'react'\n\nimport { Input, Tooltip, Space } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nlet timeoutId: ReturnType<typeof setTimeout> | undefined\n\nconst NumericInput = forwardRef(\n  ({ max, onChange, ...props }: any, ref: any) => {\n    const [error, setError] = useState('')\n    const [cursor, setCursor] = useState<number | null>(null)\n    const innerRef = useRef(ref)\n\n    // Handle amount\n    const onAmount = useCallback(\n      (val: string) => {\n        const onError = (er: string) => {\n          if (timeoutId) {\n            clearTimeout(timeoutId)\n            timeoutId = undefined\n          }\n          setError(er)\n          timeoutId = setTimeout(() => setError(''), 500)\n        }\n        const reg = /^\\d*(\\.\\d*)?$/\n        if (!reg.test(val)) return onError('Invalid character')\n        if (max && parseFloat(val) > parseFloat(max))\n          return onError('Not enough balance')\n        return onChange(val)\n      },\n      [max, onChange],\n    )\n    // Handle cursor\n    innerRef?.current?.setSelectionRange(cursor, cursor)\n    return (\n      <Tooltip\n        title={\n          <Space>\n            <IonIcon name=\"warning\" />\n            {error}\n          </Space>\n        }\n        visible={!!error}\n      >\n        <Input\n          {...props}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setCursor(e.target.selectionStart)\n            onAmount(e.target.value || '')\n          }}\n          ref={innerRef}\n        />\n      </Tooltip>\n    )\n  },\n)\n\nexport default NumericInput\n","import { useCallback, useState, useRef, useEffect } from 'react'\nimport Chart from 'chart.js'\nimport isEqual from 'react-fast-compare'\n\nimport { numeric } from 'shared/util'\ninterface Props {\n  labels?: (number | string)[]\n  chartData?: (number | string)[]\n  configs?: { backgroundColor?: string } & object\n  type?: string\n  disableAxe?: boolean\n  chartHeight?: string\n  chartId?: string\n}\n\nconst DEFAULT_BACKGROUND_COLOR = '#dadada'\n\nconst SenChart = ({\n  chartData = [],\n  labels = [],\n  type = 'line',\n  configs,\n  disableAxe = false,\n  chartId = 'sen_chart',\n}: Props) => {\n  const { backgroundColor } = configs || {}\n  const [isRebuildChart, setRebuildChart] = useState<boolean>(false)\n\n  const formatData = useCallback(\n    (\n      data: Array<number | number[] | undefined | null | any>,\n      label: Array<string | number>,\n      background?: string | CanvasGradient | undefined,\n    ): Chart.ChartData => ({\n      labels: label,\n      datasets: [{ ...configs, data, backgroundColor: background }],\n    }),\n    [configs],\n  )\n  // use a ref to store the chart instance since it it mutable\n  const chartRef = useRef<Chart | null>(null)\n\n  // callback creates the chart on the canvas element\n  const canvasCallback = (canvas: HTMLCanvasElement | null) => {\n    if (!canvas) return\n    const ctx = canvas.getContext('2d')\n    if (ctx && !isRebuildChart) {\n      // create new chart\n      chartRef.current = new Chart(ctx, {\n        type: type,\n        data: {\n          labels: [],\n          datasets: [\n            {\n              data: [],\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            xAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                },\n              },\n            ],\n            yAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                  beginAtZero: true,\n                  maxTicksLimit: 8,\n                  callback: function (value, index, values) {\n                    return numeric(value).format('0,0.[0]a')\n                  },\n                },\n              },\n            ],\n          },\n          plugins: {\n            legend: false,\n          },\n          hover: {\n            onHover: (event, elements) => {\n              const target = document.getElementById(chartId)\n              if (!target) return\n              target.style.cursor = elements[0] ? 'pointer' : 'default'\n            },\n          },\n        },\n      })\n      setRebuildChart(true)\n    }\n  }\n\n  const getBackground = useCallback(() => {\n    if (!chartRef || !backgroundColor) return DEFAULT_BACKGROUND_COLOR\n    const ctx = chartRef?.current?.canvas?.getContext('2d')\n    const gradient = ctx?.createLinearGradient(0, 0, 0, 180)\n    gradient?.addColorStop(0, backgroundColor)\n    gradient?.addColorStop(1, `${backgroundColor}00`)\n    const background = type === 'line' ? gradient : backgroundColor\n    return background\n  }, [backgroundColor, type])\n\n  useEffect(() => {\n    const chartInstance = chartRef.current\n    const dataInstace = chartInstance?.data.datasets?.find(({ data }) => data)\n    const compareData = isEqual(dataInstace?.data, chartData)\n    if (chartInstance && !compareData) {\n      chartInstance.data = formatData(chartData, labels, getBackground())\n      chartInstance?.update()\n    }\n  }, [chartData, formatData, getBackground, labels])\n\n  return <canvas id={chartId} height=\"180px\" ref={canvasCallback}></canvas>\n}\n\nexport default SenChart\n","import { ReactNode } from 'react'\n\nimport { Avatar, AvatarProps } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst GroupAvatar = ({\n  icons = [],\n  defaultIcon = <IonIcon name=\"help-outline\" />,\n  ...rest\n}: {\n  icons?: (string | undefined)[]\n  defaultIcon?: ReactNode\n} & AvatarProps) => {\n  return (\n    <Avatar.Group>\n      {icons?.map((iconURI, idx) => (\n        <Avatar\n          src={iconURI}\n          key={idx}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n          {...rest}\n        >\n          {defaultIcon}\n        </Avatar>\n      ))}\n    </Avatar.Group>\n  )\n}\n\nexport default GroupAvatar\n","import TokenProvider from 'os/providers/tokenProvider'\nimport { fetchCGK } from 'shared/helper'\nimport axios from 'axios'\n\nexport interface MintInfo {\n  address: string\n  symbol: string\n  price: number\n  decimals: number\n}\n\nconst DEFAULT_TOKEN_INFO = {\n  address: '',\n  chainId: 0,\n  decimals: 0,\n  name: '',\n  symbol: 'TOKEN',\n  extensions: undefined,\n  logoURI: '',\n  tags: [],\n}\n\nconst TOKEN_PROVIDER = new TokenProvider()\n\nconst cgk = {\n  getMintInfos: async (mintsAddress: string[]) => {\n    if (!TOKEN_PROVIDER || !mintsAddress) return\n    const promise = mintsAddress.map(async (mint) => {\n      let tokenInfo = await TOKEN_PROVIDER.findByAddress(mint)\n      if (!tokenInfo) tokenInfo = DEFAULT_TOKEN_INFO\n      const { address, symbol, decimals, extensions } = tokenInfo\n      const ticket = extensions?.coingeckoId\n\n      if (!ticket) return { address, symbol, decimals, price: 0 } // some mints don't have a ticket, so the price in cgk is 0\n\n      const { price } = await fetchCGK(ticket)\n      return { address, symbol, decimals, price }\n    })\n    const mintsDetails = await Promise.all(promise)\n    const mapMintsDetails = new Map<string, MintInfo>()\n    mintsDetails.forEach((mint) => {\n      mapMintsDetails.set(mint.address, mint)\n    })\n    return mapMintsDetails\n  },\n}\nexport default cgk\n\nexport const fetchMarketChart = async (ticket: string) => {\n  try {\n    const data: any = await axios({\n      method: 'get',\n      url: `https://api.coingecko.com/api/v3/coins/${ticket}/market_chart?vs_currency=usd&days=max&interval=daily`,\n    })\n    const priceData: [number /*time*/, number /*price*/][] = data.data.prices\n    return priceData.map((data) => ({ time: data[0], val: data[1] }))\n  } catch (error) {\n    return []\n  }\n}\n","import { useSelector } from 'react-redux'\n\nimport { Card, Col, Radio, Row, Space, Typography } from 'antd'\nimport { AppState } from 'app/model'\nimport SenChart from './chart'\nimport GroupAvatar from './GroupAvatar'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport { fetchMarketChart } from 'app/helper/cgk'\nimport moment from 'moment'\n\nconst CHART_CONFIGS = {\n  color: '#5D6CCF',\n  radius: 0,\n  hitRadius: 14,\n  tooltip: 'TVL',\n  transparent: 'transparent',\n}\nconst CHART_RANGE: Record<string, number> = {\n  week: 7,\n  day: 1,\n  month: 30,\n  year: 365,\n}\nconst DEFAULT_TOKEN = 'UNKN'\n\nconst SwapChart = () => {\n  const [chartRange, setChartRange] = useState('week')\n  const [chartData, setChartData] = useState<{ label: string; val: number }[]>(\n    [],\n  )\n\n  const swapChartConfigs = {\n    borderColor: CHART_CONFIGS.transparent,\n    borderRadius: CHART_CONFIGS.radius,\n    pointRadius: CHART_CONFIGS.radius,\n    tooltip: CHART_CONFIGS.tooltip,\n    pointHitRadius: CHART_CONFIGS.hitRadius,\n    pointHoverRadius: CHART_CONFIGS.radius,\n    backgroundColor: CHART_CONFIGS.color,\n  }\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n\n  const icons = useMemo(() => {\n    return [bidData.mintInfo?.logoURI, askData.mintInfo?.logoURI]\n  }, [askData.mintInfo?.logoURI, bidData.mintInfo?.logoURI])\n  const symbols = useMemo(() => {\n    return [\n      bidData.mintInfo?.symbol || DEFAULT_TOKEN,\n      askData.mintInfo?.symbol || DEFAULT_TOKEN,\n    ]\n  }, [askData.mintInfo?.symbol, bidData.mintInfo?.symbol])\n\n  const fetchChartData = useCallback(async () => {\n    const askTicket = askData.mintInfo?.extensions?.coingeckoId\n    const bidTicket = bidData.mintInfo?.extensions?.coingeckoId\n    if (!askTicket || !bidTicket) return setChartData([])\n\n    const [askChart, bidChart] = await Promise.all([\n      fetchMarketChart(askTicket),\n      fetchMarketChart(bidTicket),\n    ])\n    const range = CHART_RANGE[chartRange] || 7 //day\n    const size = 10\n\n    const chartData: { label: string; val: number }[] = []\n    for (let idx = bidChart.length - 1; idx >= 0; idx--) {\n      const bidDay = bidChart[idx]\n      const askDay = askChart[askChart.length - 1 - (bidChart.length - 1 - idx)]\n      if (!bidDay || !askDay) break\n      if (chartData.length >= size) break\n      const val = +Number(bidDay.val / askDay.val).toFixed(8)\n      const dateCount = bidChart.length - 1 - idx\n      if (dateCount > -1 && dateCount % range === 0) {\n        const label = moment(bidDay.time).format('DD/MM')\n        chartData.unshift({ label, val })\n      }\n    }\n    setChartData(chartData)\n  }, [\n    askData.mintInfo?.extensions?.coingeckoId,\n    bidData.mintInfo?.extensions?.coingeckoId,\n    chartRange,\n  ])\n  useEffect(() => {\n    fetchChartData()\n  }, [fetchChartData])\n  \n  return (\n    <Card bordered={false} className=\"card-swap\" bodyStyle={{ paddingTop: 28 }}>\n      <Row gutter={[24, 24]}>\n        <Col flex=\"auto\">\n          <Space direction=\"vertical\" size={20}>\n            <Space size={4} align=\"baseline\">\n              <GroupAvatar icons={icons} size={24} />\n              <Typography.Text>{symbols.join('/')}</Typography.Text>\n            </Space>\n            <Typography.Title level={2}>\n              {chartData[chartData.length - 1]?.val}\n            </Typography.Title>\n          </Space>\n        </Col>\n        <Col>\n          <Radio.Group\n            defaultValue=\"week\"\n            onChange={(e) => setChartRange(e.target.value)}\n          >\n            <Radio.Button value=\"day\">Day</Radio.Button>\n            <Radio.Button value=\"week\">Week</Radio.Button>\n            <Radio.Button value=\"month\">Month</Radio.Button>\n            {/* <Radio.Button value=\"year\">Year</Radio.Button> */}\n          </Radio.Group>\n        </Col>\n        <Col span={24}>\n          <SenChart\n            chartData={chartData.map((data) => data.val)}\n            labels={chartData.map((data) => data.label)}\n            configs={swapChartConfigs}\n          />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapChart\n","import { useCallback, useState } from 'react'\nimport { utils } from '@senswap/sen-js'\nimport { useSelector } from 'react-redux'\n\nimport { Button } from 'antd'\nimport { HopData } from './preview/index'\nimport { AppState } from 'app/model'\nimport { useWallet } from 'senhub/providers'\nimport { explorer } from 'shared/util'\n\nconst DECIMALS = BigInt(1000000000)\n\nconst SwapButton = ({\n  hops,\n  onCallback = () => {},\n  disabled = false,\n  wrapAmount = BigInt(0),\n}: {\n  hops: HopData[]\n  onCallback?: () => void\n  disabled?: boolean\n  wrapAmount: bigint\n}) => {\n  const [loading, setLoading] = useState(false)\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const { slippage } = useSelector((state: AppState) => state.settings)\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  /**\n   * Swap function\n   */\n  const handleSwap = useCallback(async () => {\n    const { swap, splt, wallet } = window.sentre\n    if (!wallet) return\n    // Synthetize routings\n    const routingAddresses = await Promise.all(\n      hops.map(\n        async ({\n          srcMintInfo: { address: srcMintAddress },\n          dstMintInfo: { address: dstMintAddress },\n          poolData: { address: poolAddress },\n        }) => {\n          const srcAddress = await splt.deriveAssociatedAddress(\n            walletAddress,\n            srcMintAddress,\n          )\n          const dstAddress = await splt.deriveAssociatedAddress(\n            walletAddress,\n            dstMintAddress,\n          )\n          return {\n            poolAddress: poolAddress,\n            srcAddress: srcAddress,\n            dstAddress: dstAddress,\n          }\n        },\n      ),\n    )\n    // Compute limit\n    const {\n      srcMintInfo: { decimals: bidDecimals },\n    } = hops[0]\n    const bidAmount = utils.decimalize(bidData.amount, bidDecimals)\n    const {\n      dstMintInfo: { decimals: askDecimals },\n    } = hops[hops.length - 1]\n    const askAmount = utils.decimalize(askData.amount, askDecimals)\n    const limit =\n      (askAmount * (DECIMALS - utils.decimalize(slippage, 9))) / DECIMALS\n    // Execute swap\n    return await swap.route(bidAmount, limit, routingAddresses, wallet)\n  }, [hops, bidData, askData, slippage, walletAddress])\n\n  const handleWrapSol = async () => {\n    if (!wrapAmount) return\n    const { swap, wallet } = window.sentre\n    if (!wallet) return\n    return await swap.wrapSol(wrapAmount, wallet)\n  }\n\n  const onSwap = async () => {\n    try {\n      setLoading(true)\n      await handleWrapSol()\n      const { txId } = (await handleSwap()) || {}\n      window.notify({\n        type: 'success',\n        description: `Swap successfully. Click to view details.`,\n        onClick: () => window.open(explorer(txId || ''), '_blank'),\n      })\n      return onCallback()\n    } catch (er: any) {\n      return window.notify({ type: 'error', description: er.message })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Button\n      type=\"primary\"\n      onClick={onSwap}\n      disabled={disabled}\n      loading={loading}\n      block\n    >\n      Swap\n    </Button>\n  )\n}\n\nexport default SwapButton\n","import { account, PoolData } from '@senswap/sen-js'\n\nimport { curve } from './oracle'\nimport { State as BidState } from 'app/model/bid.controller'\nimport { State as AskState } from 'app/model/ask.controller'\nimport { inverseCurve } from './oracle'\nimport { HopData } from 'app/components/preview/index'\nimport TokenProvider from 'os/providers/tokenProvider'\n\nconst POOL_ACTIVITY_STATUS = 1\nconst LIMIT_POOL_IN_ROUTE = 3\nconst TOKEN_PROVIDER = new TokenProvider()\n\nexport type ExtendedPoolData = PoolData & { address: string }\nexport type GraphPool = Map<string, Map<string, PoolData>>\nexport type RouteTrace = {\n  pools: string[]\n  mints: string[]\n}\nexport class BestRouteInfo {\n  hops: HopData[] = []\n  amounts: string[] = []\n  amount: string = ''\n}\n\n/**\n * Extract reserve from pool data\n * @param extractReserve\n * @param poolData\n * @returns\n */\nexport const extractReserve = (\n  mintAddress: string,\n  poolData: PoolData,\n): bigint => {\n  const { mint_a, mint_b, reserve_a, reserve_b } = poolData\n  if (mintAddress === mint_a) return reserve_a\n  if (mintAddress === mint_b) return reserve_b\n  throw new Error('Cannot find reserves')\n}\n\n/**\n *\n * @param param0\n * @param param1\n * @returns\n */\ntype Point = { point: bigint }\nexport const pointSorting = (\n  { point: firstPoint }: Point,\n  { point: secondPoint }: Point,\n) => {\n  if (firstPoint < secondPoint) return 1\n  if (firstPoint > secondPoint) return -1\n  return 0\n}\n\nexport const buildPoolGraph = (pools: Record<string, PoolData>): GraphPool => {\n  const graph = new Map<\n    /*mint_address*/ string,\n    Map</*pool_address*/ string, PoolData>\n  >()\n  for (const poolAddress in pools) {\n    const pool = pools[poolAddress]\n    if (pool?.state !== POOL_ACTIVITY_STATUS) continue\n    const mints = [pool.mint_a, pool.mint_b]\n    mints.forEach((mint) => {\n      if (!graph.has(mint)) graph.set(mint, new Map<string, PoolData>())\n      graph.get(mint)?.set(poolAddress, pool)\n    })\n  }\n  return graph\n}\n\n// because of Solana is limiting the number of calculation unit, so the system\n// must limit the list pool of root. Currently, the system set 3 pools in route\nexport const findAllRoute = (\n  routes: Array<RouteTrace>,\n  graph: GraphPool,\n  startMint: string,\n  endMint: string,\n  pathTrace: RouteTrace,\n) => {\n  const { pools, mints } = pathTrace\n  if (pools.length === LIMIT_POOL_IN_ROUTE) return\n  const mapPool = graph.get(startMint)\n  mapPool?.forEach((pool, poolAddress) => {\n    if (pools.includes(poolAddress)) return\n\n    let { mint_b: askMint } = pool\n    if (pool.mint_a !== startMint) {\n      askMint = pool.mint_a\n    }\n    if (mints.includes(askMint)) return\n\n    const newPathTrace = {\n      pools: [...pools, poolAddress],\n      mints: [...mints, askMint],\n    }\n    if (askMint === endMint) {\n      routes.push(newPathTrace)\n      return\n    }\n    findAllRoute(routes, graph, askMint, endMint, newPathTrace)\n  })\n}\n\nconst parseHops = async (\n  mapPoolData: Record<string, PoolData>,\n  pools: string[],\n  bidData: BidState,\n  askData: AskState,\n): Promise<HopData[]> => {\n  const bidMintAddress = bidData.mintInfo?.address\n  const askMintAddress = askData.mintInfo?.address\n  if (!account.isAddress(bidMintAddress) || !account.isAddress(askMintAddress))\n    return []\n\n  const hops: HopData[] = []\n  let srcMintAddress = bidMintAddress\n  let dstMintAddress = ''\n  for (const poolAddress of pools) {\n    const poolData = mapPoolData[poolAddress]\n    const { mint_a, mint_b } = poolData\n\n    if (srcMintAddress !== mint_a && srcMintAddress !== mint_b) return []\n\n    dstMintAddress = srcMintAddress === mint_a ? mint_b : mint_a\n    const srcMintInfo = await TOKEN_PROVIDER.findByAddress(srcMintAddress)\n    const dstMintInfo = await TOKEN_PROVIDER.findByAddress(dstMintAddress)\n    if (!srcMintInfo || !dstMintInfo) return []\n\n    const hop: HopData = {\n      poolData: { address: poolAddress, ...poolData },\n      srcMintInfo,\n      dstMintInfo,\n    }\n    srcMintAddress = dstMintAddress\n    hops.push(hop)\n  }\n  return hops\n}\n\nexport const findBestRouteFromBid = async (\n  mapPoolData: Record<string, PoolData>,\n  routes: RouteTrace[],\n  bidData: BidState,\n  askData: AskState,\n): Promise<BestRouteInfo> => {\n  let bestRoute = new BestRouteInfo()\n  for (let route of routes) {\n    const hops = await parseHops(mapPoolData, route.pools, bidData, askData)\n    let amount = bidData.amount\n    const amounts = new Array<string>()\n\n    hops.forEach((hop) => {\n      amounts.push(amount)\n      amount = curve(amount, hop)\n    })\n    const maxAskAmount = Number(bestRoute.amount)\n    if (Number(amount) > maxAskAmount) {\n      bestRoute = {\n        hops,\n        amounts,\n        amount,\n      }\n    }\n  }\n  return bestRoute\n}\n\nexport const findBestRouteFromAsk = async (\n  mapPoolData: Record<string, PoolData>,\n  routes: RouteTrace[],\n  bidData: BidState,\n  askData: AskState,\n): Promise<BestRouteInfo> => {\n  let bestRoute = new BestRouteInfo()\n  for (let route of routes) {\n    const hops = await parseHops(mapPoolData, route.pools, bidData, askData)\n    const reversedHops = [...hops].reverse()\n    let amount = askData.amount\n    const amounts = new Array<string>()\n\n    for (const reversedHop of reversedHops) {\n      amount = inverseCurve(amount, reversedHop)\n      if (Number(amount) < 0) break\n      amounts.unshift(amount)\n    }\n    if (Number(amount) < 0) continue\n\n    const minBidAmount = Number(bestRoute.amount)\n    if (!minBidAmount || Number(amount) < minBidAmount) {\n      bestRoute = {\n        hops,\n        amounts,\n        amount,\n      }\n    }\n  }\n  return bestRoute\n}\n","import { utils, Swap } from '@senswap/sen-js'\nimport { HopData } from 'app/components/preview/index'\nimport { extractReserve } from './router'\n\nexport const ORACLE = Swap.oracle\n\nexport const curve = (bidAmount: string, data: HopData): string => {\n  const {\n    srcMintInfo: { address: srcMintAddress, decimals: bidDecimals },\n    dstMintInfo: { address: dstMintAddress, decimals: askDecimals },\n  } = data\n  const { fee_ratio, tax_ratio } = data.poolData\n  const bidReserve = extractReserve(srcMintAddress, data.poolData)\n  const askReserve = extractReserve(dstMintAddress, data.poolData)\n  if (!bidReserve || !askReserve) return '0'\n\n  const { askAmount } = ORACLE.swap(\n    utils.decimalize(bidAmount, bidDecimals),\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return utils.undecimalize(askAmount, askDecimals)\n}\n\nexport const inverseCurve = (askAmount: string, data: HopData): string => {\n  const {\n    srcMintInfo: { address: srcMintAddress, decimals: bidDecimals },\n    dstMintInfo: { address: dstMintAddress, decimals: askDecimals },\n  } = data\n  const { fee_ratio, tax_ratio } = data.poolData\n  const bidReserve = extractReserve(srcMintAddress, data.poolData)\n  const askReserve = extractReserve(dstMintAddress, data.poolData)\n  const bidAmount = ORACLE.inverseSwap(\n    utils.decimalize(askAmount, askDecimals),\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return utils.undecimalize(bidAmount, bidDecimals)\n}\n\nexport const slippage = (bidAmount: string, data: HopData): bigint => {\n  const {\n    srcMintInfo: { address: srcMintAddress, decimals: bidDecimals },\n    dstMintInfo: { address: dstMintAddress },\n  } = data\n  const { fee_ratio, tax_ratio } = data.poolData\n  const bidReserve = extractReserve(srcMintAddress, data.poolData)\n  const askReserve = extractReserve(dstMintAddress, data.poolData)\n\n  const slippage = ORACLE.slippage(\n    utils.decimalize(bidAmount, bidDecimals),\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return slippage\n}\n","import { Fragment, ReactNode } from 'react'\n\nimport { Avatar, Space } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst RouteAvatar = ({\n  icons = ['', ''],\n  size = 24,\n  defaultIcon = <IonIcon size={size} name=\"help-outline\" />,\n}: {\n  icons?: (string | undefined)[]\n  defaultIcon?: ReactNode\n  size?: number\n}) => {\n  return (\n    <Space>\n      {icons?.map((icon, idx) => (\n        <Fragment key={idx}>\n          <Avatar src={icon} size={size}>\n            {defaultIcon}\n          </Avatar>\n          {icons.length > idx + 1 && <IonIcon name=\"chevron-forward-outline\" />}\n        </Fragment>\n      ))}\n    </Space>\n  )\n}\nexport default RouteAvatar\n","import { Space, Typography } from 'antd'\nimport { State as BidState } from 'app/model/bid.controller'\nimport { State as AskState } from 'app/model/bid.controller'\nimport { numeric } from 'shared/util'\n\nconst InversePrice = ({\n  bidData,\n  askData,\n}: {\n  bidData?: BidState\n  askData?: AskState\n}) => {\n  const price = numeric(\n    Number(bidData?.amount) / Number(askData?.amount),\n  ).format('0,0.[000000]')\n  const symbols = `${bidData?.mintInfo?.symbol}/${askData?.mintInfo?.symbol}`\n  return (\n    <Space>\n      <Typography.Text>{price}</Typography.Text>\n      <Typography.Text>{symbols}</Typography.Text>\n    </Space>\n  )\n}\n\nexport default InversePrice\n","import { Button, Space, Typography } from 'antd'\nimport { Fragment, ReactNode } from 'react'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst SwitchPriceRate = ({\n  value = false,\n  onChange = () => {},\n  priceRate = <Fragment />,\n}: {\n  priceRate?: ReactNode\n  value?: boolean\n  onChange?: (value: boolean) => void\n}) => {\n  return (\n    <Space size={4}>\n      <Button\n        type=\"text\"\n        onClick={() => onChange(!value)}\n        shape=\"circle\"\n        icon={<IonIcon name=\"swap-horizontal-outline\" />}\n      />\n      <Typography.Text>{priceRate}</Typography.Text>\n    </Space>\n  )\n}\nexport default SwitchPriceRate\n","import {\n  Fragment,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport { useSelector } from 'react-redux'\nimport { PoolData, utils } from '@senswap/sen-js'\n\nimport { Col, Row, Typography } from 'antd'\n\nimport { slippage } from 'app/helper/oracle'\nimport { AppState } from 'app/model'\nimport { numeric } from 'shared/util'\nimport RouteAvatar from './routeAvatar'\nimport InversePrice from './inversePirce'\nimport SwitchPriceRate from './switchPriceRate'\nimport { TokenInfo } from '@solana/spl-token-registry'\n\nexport type HopData = {\n  poolData: PoolData & { address: string }\n  srcMintInfo: TokenInfo\n  dstMintInfo: TokenInfo\n}\n\nconst ExtraTypography = ({\n  label = '',\n  content = '',\n}: {\n  label?: string\n  content?: string | ReactNode\n}) => {\n  return (\n    <Row>\n      <Col flex=\"auto\">\n        <Typography.Text type=\"secondary\">{label}</Typography.Text>\n      </Col>\n      <Col>\n        <span>{content}</span>\n      </Col>\n    </Row>\n  )\n}\n\nconst PreviewSwap = () => {\n  const [inReverse, setInReverse] = useState(false)\n  const { slippage: slippageSettings } = useSelector(\n    (state: AppState) => state.settings,\n  )\n  const { route } = useSelector((state: AppState) => state.route)\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n\n  const { mintInfo: bidMintInfo } = bidData\n\n  const hopLastRoute = route?.hops.at(-1) // get lasted route hop\n  const bidAmoutLastRoute = route?.amounts.at(-1) || '' // laseted route bid amount\n\n  const slippageRate = useMemo(() => {\n    if (!hopLastRoute) return 0\n    return utils.undecimalize(slippage(bidAmoutLastRoute, hopLastRoute), 9)\n  }, [bidAmoutLastRoute, hopLastRoute])\n\n  const routeIcons = useMemo(() => {\n    if (!route?.hops) return\n    const { logoURI } = bidMintInfo || {}\n    let listRouteIcons = [logoURI]\n    for (const hop of route?.hops) {\n      const {\n        dstMintInfo: { logoURI },\n      } = hop\n      if (logoURI) listRouteIcons.push(logoURI)\n    }\n    return listRouteIcons\n  }, [bidMintInfo, route?.hops])\n\n  const calculatePrice = useCallback(() => {\n    if (!bidData.amount || !askData.amount) return <Fragment />\n    if (inReverse) return <InversePrice bidData={askData} askData={bidData} />\n    return <InversePrice bidData={bidData} askData={askData} />\n  }, [askData, bidData, inReverse])\n\n  useEffect(() => {\n    calculatePrice()\n  }, [calculatePrice])\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Price impart\"\n          content={\n            <Typography.Text type=\"danger\">\n              {numeric(Number(slippageRate)).format('0.[0000]%')}\n            </Typography.Text>\n          }\n        />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Price\"\n          content={\n            <SwitchPriceRate\n              priceRate={calculatePrice()}\n              value={inReverse}\n              onChange={setInReverse}\n            />\n          }\n        />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Slippage toleance\"\n          content={numeric(slippageSettings).format('0.[00]%')}\n        />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography label=\"Protocol Fee\" content=\"0.25%\" />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Route\"\n          content={<RouteAvatar icons={routeIcons} />}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default PreviewSwap\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { DEFAULT_WSOL, utils } from '@senswap/sen-js'\n\nimport { Card, Col, Row, Typography } from 'antd'\nimport SwapButton from 'app/components/swapButton'\nimport SwapInfo from 'app/components/preview'\n\nimport { AppState } from 'app/model'\nimport { useAccount } from 'senhub/providers'\n\nconst SwapActions = () => {\n  const { route } = useSelector((state: AppState) => state.route)\n  const {\n    amount: bidAmount,\n    mintInfo: bidMint,\n    accountAddress: bidAccountAddr,\n  } = useSelector((state: AppState) => state.bid)\n  const { amount: askAmount } = useSelector((state: AppState) => state.ask)\n  const { accounts } = useAccount()\n\n  const hops = route?.hops || []\n\n  const wrapAmount = useMemo(() => {\n    const { amount: bidAccountAmount } = accounts[bidAccountAddr] || {}\n    const bidBalance = bidAccountAmount || BigInt(0)\n    if (!bidMint || !Number(bidAmount) || bidMint.address !== DEFAULT_WSOL)\n      return BigInt(0)\n    const bid = utils.decimalize(bidAmount, bidMint.decimals)\n    if (bid <= bidBalance) return BigInt(0)\n    return bid - bidBalance\n  }, [accounts, bidAccountAddr, bidAmount, bidMint])\n\n  const disabled =\n    !hops.length ||\n    !parseFloat(bidAmount) ||\n    parseFloat(bidAmount) < 0 ||\n    !parseFloat(askAmount) ||\n    parseFloat(askAmount) < 0\n\n  return (\n    <Card bordered={false}>\n      <Row gutter={[24, 24]}>\n        <Col span={24}>\n          <Typography.Title level={5}>Review & Swap</Typography.Title>\n        </Col>\n        <Col span={24}>\n          <SwapInfo />\n        </Col>\n        <Col span={24}>\n          <SwapButton hops={hops} wrapAmount={wrapAmount} disabled={disabled} />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapActions\n","import { useCallback, useEffect, useState } from 'react'\nimport { TokenInfo } from '@solana/spl-token-registry'\n\nimport { useMint, usePool } from 'senhub/providers'\n\nconst useTokenProvider = (mintAddress: string) => {\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n  const [tokenInfo, setTokenInfo] = useState<(TokenInfo | undefined)[]>([])\n\n  const fetchTokenInfo = useCallback(async () => {\n    if (!mintAddress) return setTokenInfo([undefined])\n    // Normal mint\n    const token = await tokenProvider.findByAddress(mintAddress)\n    if (token) return setTokenInfo([token])\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (!poolData) return setTokenInfo([undefined])\n    const { mint_a, mint_b } = poolData\n    const tokenA = await tokenProvider.findByAddress(mint_a)\n    const tokenB = await tokenProvider.findByAddress(mint_b)\n    return setTokenInfo([tokenA, tokenB])\n  }, [mintAddress, pools, tokenProvider])\n\n  useEffect(() => {\n    fetchTokenInfo()\n  }, [fetchTokenInfo])\n\n  return tokenInfo\n}\n\nexport default useTokenProvider\n","import { ReactNode } from 'react'\n\nimport { Avatar } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport useTokenProvider from '../../hooks/useTokenProvider'\n\nconst MintAvatar = ({\n  mintAddress,\n  size = 24,\n  icon = <IonIcon name=\"diamond-outline\" />,\n}: {\n  mintAddress: string\n  size?: number\n  icon?: ReactNode\n}) => {\n  const tokens = useTokenProvider(mintAddress)\n  return (\n    <Avatar.Group style={{ display: 'block' }} >\n      {tokens.map((token, i) => (\n        <Avatar\n          key={token?.address || i}\n          src={token?.logoURI}\n          size={size}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n        >\n          {icon}\n        </Avatar>\n      ))}\n    </Avatar.Group>\n  )\n}\n\nexport default MintAvatar\n","import { useMemo } from 'react'\n\nimport useTokenProvider from 'app/shared/hooks/useTokenProvider'\n\nconst MintSymbol = ({ mintAddress }: { mintAddress: string }) => {\n  \n  const tokens = useTokenProvider(mintAddress)\n  const symbols = useMemo(() => {\n    return tokens\n      .map((token) => {\n        if (!token) return 'UNKN'\n        return token.symbol\n      })\n      .join(' / ')\n  }, [tokens])\n  return <span>{symbols}</span>\n}\n\nexport default MintSymbol\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from 'senhub/providers'\nimport { fetchCGK } from 'shared/helper'\n\nconst DEFAULT_DATA = {\n  address: '',\n  icon: '',\n  name: 'TOKEN',\n  price: 0,\n  priceChange: 0,\n  rank: 0,\n  symbol: 'TOKEN',\n  totalVolume: 0,\n}\n\nconst useMintCgk = (mintAddress?: string): CgkData => {\n  const [cgkData, setCgkData] = useState<CgkData>(DEFAULT_DATA)\n  const { tokenProvider } = useMint()\n\n  const fetchCgkData = useCallback(async () => {\n    if (!mintAddress) return setCgkData(DEFAULT_DATA)\n    try {\n      const token = await tokenProvider.findByAddress(mintAddress)\n      const ticket = token?.extensions?.coingeckoId\n      const cgkData = await fetchCGK(ticket)\n      return setCgkData(cgkData)\n    } catch (error) {\n      return setCgkData(DEFAULT_DATA)\n    }\n  }, [mintAddress, tokenProvider])\n\n  useEffect(() => {\n    fetchCgkData()\n  }, [fetchCgkData])\n\n  return cgkData\n}\nexport default useMintCgk\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { account, PoolData, utils } from '@senswap/sen-js'\n\nimport { Card, Col, Divider, Row, Space, Typography } from 'antd'\nimport { MintAvatar } from 'app/shared/components/mint'\n\nimport { AppState } from 'app/model'\nimport { extractReserve } from 'app/helper/router'\nimport { numeric } from 'shared/util'\nimport useMintCgk from 'app/shared/hooks/useMintCgk'\n\nconst MintPoolInfo = ({\n  mintAddress = '',\n  tvl = '',\n  symbol = '',\n  price,\n  format = '0,0.[00]a',\n}: {\n  mintAddress?: string\n  tvl?: string | number\n  symbol?: string\n  price?: number\n  format?: string\n}) => {\n  return (\n    <Space direction=\"vertical\" size={4}>\n      <MintAvatar mintAddress={mintAddress} />\n      <Space>\n        <Typography.Text>TVL:</Typography.Text>\n        <Typography.Title level={5}>\n          {numeric(tvl).format(format)}\n        </Typography.Title>\n        <Typography.Title level={5}>{symbol}</Typography.Title>\n      </Space>\n      <Typography.Text className=\"caption\" type=\"secondary\">\n        ~ ${numeric(price).format(format)}\n      </Typography.Text>\n    </Space>\n  )\n}\n\nconst SwapPoolInfo = () => {\n  const { route } = useSelector((state: AppState) => state.route)\n  const askMint = useSelector((state: AppState) => state.ask.mintInfo)\n  const bidMint = useSelector((state: AppState) => state.bid.mintInfo)\n  const askCgk = useMintCgk(askMint?.address)\n  const bidCgk = useMintCgk(bidMint?.address)\n\n  const { dstMintInfo: askMintInfo, poolData: askPoolData } =\n    route?.hops.at(-1) || {}\n  const { srcMintInfo: bidMintInfo, poolData: bidPoolData } =\n    route?.hops[0] || {}\n\n  const getMintTVL = (mintAddr?: string, poolData?: PoolData) => {\n    if (!account.isAddress(mintAddr) || !poolData) return BigInt(0)\n    return extractReserve(mintAddr, poolData)\n  }\n\n  const askTVL = useMemo(() => {\n    if (!askMintInfo?.decimals) return 0\n    const ask = getMintTVL(askMintInfo?.address, askPoolData)\n    return Number(utils.undecimalize(ask, askMintInfo.decimals))\n  }, [askMintInfo?.address, askMintInfo?.decimals, askPoolData])\n  const bidTVL = useMemo(() => {\n    if (!bidMintInfo?.decimals) return 0\n    const bid = getMintTVL(bidMintInfo?.address, bidPoolData)\n    return Number(utils.undecimalize(bid, bidMintInfo.decimals))\n  }, [bidMintInfo?.address, bidMintInfo?.decimals, bidPoolData])\n\n  return (\n    <Card bordered={false}>\n      <Row gutter={[16, 16]} wrap={false}>\n        <Col span={11}>\n          <MintPoolInfo\n            mintAddress={bidMint?.address}\n            tvl={bidTVL}\n            symbol={bidMint?.symbol}\n            price={bidTVL * bidCgk.price}\n          />\n        </Col>\n        <Col>\n          <Divider type=\"vertical\" style={{ height: '100%' }} />\n        </Col>\n        <Col span={11}>\n          <MintPoolInfo\n            mintAddress={askMint?.address}\n            tvl={askTVL}\n            symbol={askMint?.symbol}\n            price={askTVL * askCgk.price}\n          />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapPoolInfo\n","import React, { useCallback, useEffect, useState } from 'react'\n\nimport { Card, Input, Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { TokenInfo } from '@solana/spl-token-registry'\nimport { useMint } from 'senhub/providers'\n\nconst KEYSIZE = 3\n\nconst Search = ({\n  onChange,\n  isSupportedMint,\n  disabled = false,\n}: {\n  onChange: (data: TokenInfo[] | null) => void\n  isSupportedMint: (mintAddress: string) => boolean\n  disabled?: boolean\n}) => {\n  const [keyword, setKeyword] = useState('')\n  const { tokenProvider } = useMint()\n\n  const search = useCallback(async () => {\n    if (!keyword || keyword.length < KEYSIZE) return onChange(null)\n    const raw = await tokenProvider.find(keyword)\n    const data = raw.filter(({ address }) => isSupportedMint(address))\n    return onChange(data)\n  }, [keyword, tokenProvider, onChange, isSupportedMint])\n\n  useEffect(() => {\n    search()\n  }, [search])\n\n  return (\n    <Card className=\"card-child\" bodyStyle={{ padding: 8 }} bordered={false}>\n      <Input\n        placeholder=\"Search\"\n        value={keyword}\n        size=\"small\"\n        bordered={false}\n        suffix={\n          <Button\n            type=\"text\"\n            style={{ marginRight: -7 }}\n            size=\"small\"\n            onClick={keyword ? () => setKeyword('') : () => {}}\n            icon={\n              <IonIcon name={keyword ? 'close-outline' : 'search-outline'} />\n            }\n            disabled={disabled}\n          />\n        }\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          setKeyword(e.target.value)\n        }\n        disabled={disabled}\n      />\n    </Card>\n  )\n}\n\nexport default Search\n","import { Row, Col, Space, Avatar, Typography, Card, Divider } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Mint = ({\n  logoURI,\n  symbol,\n  name,\n  onClick,\n  active = false,\n}: {\n  logoURI: string | undefined\n  symbol: string\n  name: string\n  onClick: () => void\n  active?: boolean\n}) => {\n  return (\n    <Card\n      className=\"card-child\"\n      bodyStyle={{ padding: `8px 16px`, cursor: 'pointer' }}\n      bordered={active}\n      onClick={onClick}\n      hoverable\n    >\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Space size={12} style={{ marginLeft: -4 }}>\n            <Avatar\n              src={logoURI}\n              size={32}\n              style={{ backgroundColor: '#2D3355', border: 'none' }}\n            >\n              <IonIcon name=\"diamond-outline\" />\n            </Avatar>\n            <Typography.Text style={{ margin: 0 }}>{symbol}</Typography.Text>\n            <Divider type=\"vertical\" style={{ margin: 0 }} />\n            <Typography.Text\n              type=\"secondary\"\n              style={{ margin: 0, fontSize: 12 }}\n            >\n              {name}\n            </Typography.Text>\n          </Space>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default Mint\n","import { useState, useCallback, useMemo } from 'react'\nimport { TokenInfo } from '@solana/spl-token-registry'\nimport { account } from '@senswap/sen-js'\nimport LazyLoad from 'react-lazyload'\n\nimport { Row, Col, Typography } from 'antd'\nimport Search from './search'\nimport Mint from './mint'\n\nimport { useMint, usePool } from 'senhub/providers'\n\nexport type SelectionInfo = {\n  mintInfo?: TokenInfo\n  poolAddress?: string\n  poolAddresses: string[]\n}\n\nconst MintSelection = ({\n  value,\n  onChange,\n}: {\n  value: SelectionInfo\n  onChange: (value: SelectionInfo) => void\n}) => {\n  const [mints, setMints] = useState<Array<TokenInfo>>([])\n  const { pools } = usePool()\n  const { tokenProvider } = useMint()\n\n  // Compute mints that appear in all pools\n  const supportedMints = useMemo(() => {\n    if (!pools) return []\n    return Object.keys(pools)\n      .map((poolAddress) => {\n        const { mint_a, mint_b } = pools[poolAddress]\n        return [mint_a, mint_b]\n      })\n      .flat()\n      .filter((item, pos, self) => self.indexOf(item) === pos)\n  }, [pools])\n  const isSupportedMint = useCallback(\n    (mintAddress) => supportedMints.includes(mintAddress),\n    [supportedMints],\n  )\n  // Compoute mint list\n  const onMints = useCallback(\n    async (value: null | Array<TokenInfo>) => {\n      if (value) return setMints(value)\n      const raw = await tokenProvider.all()\n      const allMints = raw.filter(({ address }) => isSupportedMint(address))\n      return setMints(allMints)\n    },\n    [tokenProvider, isSupportedMint],\n  )\n  // Compute available pools\n  const getAvailablePoolAddresses = useCallback(\n    (tokenInfo: TokenInfo | undefined) => {\n      const mintAddress = tokenInfo?.address\n      if (!account.isAddress(mintAddress)) return []\n      return Object.keys(pools).filter((poolAddress) => {\n        const { mint_a, mint_b } = pools[poolAddress]\n        return [mint_a, mint_b].includes(mintAddress)\n      })\n    },\n    [pools],\n  )\n\n  /**\n   * Render mint list\n   */\n  const mintList = useMemo(() => {\n    // Return data to parent\n    const onMint = (tokenInfo: TokenInfo) => {\n      const poolAddresses = getAvailablePoolAddresses(tokenInfo)\n      return onChange({\n        mintInfo: tokenInfo,\n        poolAddress: undefined,\n        poolAddresses,\n      })\n    }\n    return (\n      <Row gutter={[16, 16]}>\n        {mints.map((mint, i) => {\n          const { logoURI, symbol, name, address } = mint\n          const { address: currentMintAddress } = value.mintInfo || {}\n          return (\n            <Col span={24} key={name + i}>\n              <LazyLoad height={48} overflow>\n                <Mint\n                  logoURI={logoURI}\n                  symbol={symbol}\n                  name={name}\n                  onClick={() => onMint(mint)}\n                  active={currentMintAddress === address}\n                />\n              </LazyLoad>\n            </Col>\n          )\n        })}\n      </Row>\n    )\n  }, [getAvailablePoolAddresses, onChange, mints, value])\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        <Typography.Title level={5}>Token Selection</Typography.Title>\n      </Col>\n      <Col span={24}>\n        <Search onChange={onMints} isSupportedMint={isSupportedMint} />\n      </Col>\n      <Col span={24}>\n        <Row gutter={[16, 16]} style={{ height: 300, overflow: 'auto' }}>\n          <Col span={24}>{mintList}</Col>\n          <Col span={24} />\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default MintSelection\n","import { useState, Fragment, useEffect } from 'react'\nimport { forceCheck } from 'react-lazyload'\n\nimport { Row, Col, Avatar, Space, Typography, Divider, Modal } from 'antd'\nimport MintSelection, { SelectionInfo } from './mintSelection'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Selection = ({\n  value,\n  onChange,\n}: {\n  value: SelectionInfo\n  onChange: (value: SelectionInfo) => void\n}) => {\n  const [visible, setVisible] = useState(false)\n\n  useEffect(() => {\n    if (visible) setTimeout(forceCheck, 500)\n  }, [visible])\n\n  const onSelection = (selectionInfo: SelectionInfo) => {\n    setVisible(false)\n    return onChange(selectionInfo)\n  }\n\n  const { logoURI, symbol } = value?.mintInfo || {}\n  return (\n    <Fragment>\n      <Space style={{ cursor: 'pointer' }} onClick={() => setVisible(true)}>\n        <Avatar\n          size={24}\n          src={logoURI}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n        >\n          <IonIcon name=\"diamond-outline\" />\n        </Avatar>\n        <Typography.Text type=\"secondary\" style={{ margin: 0 }}>\n          {symbol || 'TOKEN'}\n        </Typography.Text>\n        <Divider type=\"vertical\" style={{ marginLeft: 4 }} />\n      </Space>\n      <Modal\n        visible={visible}\n        onCancel={() => setVisible(false)}\n        closeIcon={<IonIcon name=\"close\" />}\n        footer={null}\n        destroyOnClose={true}\n        centered={true}\n      >\n        <Row gutter={[16, 16]}>\n          <Col span={24}>\n            <MintSelection value={value} onChange={onSelection} />\n          </Col>\n        </Row>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default Selection\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { TokenInfo } from '@solana/spl-token-registry'\n\nexport type State = {\n  amount: string // Desired amount\n  accountAddress: string // Associated account to the selected token\n  mintInfo?: TokenInfo // Selected token\n  poolAddresses: string[] // List of available pools\n  priority: number\n}\n\nconst NAME = 'bid'\nconst initialState: State = {\n  amount: '',\n  accountAddress: '',\n  poolAddresses: [],\n  priority: 0,\n}\n\n/**\n * Actions\n */\n\nexport const updateBidData = createAsyncThunk<\n  Partial<State>,\n  Partial<State> & { prioritized?: boolean; reset?: boolean },\n  { state: any }\n>(\n  `${NAME}/updateBidData`,\n  async ({ prioritized, reset, ...bidData }, { getState }) => {\n    const {\n      bid: { priority: prevPriority },\n      ask: { priority: refPriority },\n    } = getState()\n    if (Number(bidData.amount) < 0) bidData.amount = undefined\n    const priority = reset ? 0 : prioritized ? refPriority + 1 : prevPriority\n    return { ...bidData, priority }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateBidData.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { SelectionInfo } from './../selection/mintSelection'\nimport { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport { useMint, usePool, useWallet } from 'senhub/providers'\n\nconst DEFAULT_INFO = {\n  accountAddress: '',\n  poolAddresses: [],\n}\n\ntype MintSelection = SelectionInfo & {\n  accountAddress?: string\n}\n\nexport const useMintSelection = (mintAddress: string): MintSelection => {\n  const { wallet } = useWallet()\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n  const [selectionInfo, setSelectionInfo] =\n    useState<MintSelection>(DEFAULT_INFO)\n\n  const getSelectionInfo = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setSelectionInfo(DEFAULT_INFO)\n    const mintInfo = await tokenProvider.findByAddress(mintAddress)\n    const { splt } = window.sentre\n    // get mint account\n    const accountAddress = await splt.deriveAssociatedAddress(\n      wallet.address,\n      mintAddress,\n    )\n    // get pools\n    const poolAddresses = Object.keys(pools).filter((poolAddress) => {\n      const { mint_a, mint_b } = pools[poolAddress]\n      return [mint_a, mint_b].includes(mintAddress)\n    })\n    setSelectionInfo({\n      accountAddress,\n      mintInfo,\n      poolAddress: '',\n      poolAddresses,\n    })\n  }, [mintAddress, pools, tokenProvider, wallet.address])\n\n  useEffect(() => {\n    getSelectionInfo()\n  }, [getSelectionInfo])\n\n  return selectionInfo\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from 'senhub/providers'\n\nconst useMintDecimals = (mintAddress: string): number => {\n  const [decimals, setDecimals] = useState(0)\n  const { tokenProvider, getMint } = useMint()\n\n  const fetchTokenDecimals = useCallback(async () => {\n    if (!mintAddress) return setDecimals(0)\n    // Find in token provider\n    const token = await tokenProvider.findByAddress(mintAddress)\n    if (token) return setDecimals(token.decimals)\n    // Find on blockchain (slow than token provider)\n    try {\n      const mint = await getMint({ address: mintAddress })\n      return setDecimals(mint[mintAddress].decimals)\n    } catch (error) {}\n    return setDecimals(0)\n  }, [getMint, mintAddress, tokenProvider])\n\n  useEffect(() => {\n    fetchTokenDecimals()\n  }, [fetchTokenDecimals])\n\n  return decimals\n}\n\nexport default useMintDecimals\n","import { useMemo } from 'react'\n\nimport { utils } from '@senswap/sen-js'\nimport { useAccount, useWallet } from 'senhub/providers'\n\nimport { SOL_ADDRESS } from 'app/constant/sol'\nimport useMintDecimals from './useMintDecimals'\n\nexport const useMintAccount = (accountAddr: string) => {\n  const { accounts } = useAccount()\n  const { wallet } = useWallet()\n\n  const { amount, mint } = useMemo(() => {\n    // sol account\n    if (accountAddr === wallet.address)\n      return { amount: wallet.lamports, mint: SOL_ADDRESS }\n    // spl token account\n    return accounts[accountAddr] || {}\n  }, [accountAddr, accounts, wallet.address, wallet.lamports])\n\n  const decimals = useMintDecimals(mint)\n  const mintInfo = useMemo(() => {\n    return {\n      balance: utils.undecimalize(amount, decimals),\n      mint,\n      amount,\n      decimals,\n    }\n  }, [amount, decimals, mint])\n\n  return mintInfo\n}\n","export const SOL_ADDRESS = '11111111111111111111111111111111'\n\nexport const WSOL_ADDRESS = 'So11111111111111111111111111111111111111112'\n\nexport const LPT_DECIMALS = 9\n\nexport const SOL_DECIMALS = 9\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string' ||\n  typeof process.env.REACT_APP_SENHUB !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n  senhub: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n  senhub: process.env.REACT_APP_SENHUB,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  spltAddress: string\n  splataAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: 'https://api.devnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: 'https://api.testnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: 'https://api.mainnet-beta.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  bidDefault: string\n  askDefault: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    bidDefault: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    askDefault: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    bidDefault: '',\n    askDefault: '',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    bidDefault: '',\n    askDefault: '',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { env, net } from 'shared/runtime'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\nimport swap from './swap.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n  swap: swap[net]\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { useCallback, useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account, DEFAULT_WSOL, utils } from '@senswap/sen-js'\n\nimport { Row, Col, Typography, Button, Space, Tooltip, Tag } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport Selection from '../selection'\n\nimport { useWallet } from 'senhub/providers'\nimport { numeric } from 'shared/util'\nimport { randomColor } from 'shared/helper'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateBidData } from 'app/model/bid.controller'\nimport NumericInput from 'app/shared/components/numericInput'\nimport { SelectionInfo } from '../selection/mintSelection'\nimport { useMintSelection } from '../hooks/useMintSelection'\nimport { useMintAccount } from 'app/shared/hooks/useMintAccount'\nimport useMintCgk from 'app/shared/hooks/useMintCgk'\nimport configs from 'app/configs'\n\nconst WORMHOLE_COLOR = '#F9575E'\n\nconst Bid = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const {\n    wallet: { address: walletAddress, lamports },\n  } = useWallet()\n  const bidData = useSelector((state: AppState) => state.bid)\n\n  const { balance, decimals, mint, amount } = useMintAccount(\n    bidData.accountAddress,\n  )\n  const cgkData = useMintCgk(bidData.mintInfo?.address)\n  const selectionDefault = useMintSelection(configs.swap.bidDefault)\n\n  // Select default\n  useEffect(() => {\n    dispatch(updateBidData(selectionDefault))\n  }, [dispatch, selectionDefault])\n\n  // Compute selection info\n  const selectionInfo: SelectionInfo = useMemo(\n    () => ({\n      mintInfo: bidData.mintInfo,\n      poolAddresses: bidData.poolAddresses,\n    }),\n    [bidData],\n  )\n\n  // Compute human-readable balance\n  const balanceTransfer = useMemo((): string => {\n    if (mint !== DEFAULT_WSOL) return balance\n    // So estimate max = 0.01 fee -> multi transaction.\n    const estimateFee = utils.decimalize(0.01, decimals)\n    const max = lamports + amount - estimateFee\n    if (max <= amount) return utils.undecimalize(amount, decimals)\n    return utils.undecimalize(max, decimals)\n  }, [amount, balance, decimals, lamports, mint])\n\n  // Handle amount\n  const onAmount = useCallback(\n    (val: string) => {\n      return dispatch(updateBidData({ amount: val, prioritized: true }))\n    },\n    [dispatch],\n  )\n  // All in :)))\n  const onMax = () => onAmount(balance)\n\n  // Update bid data\n  const onSelectionInfo = async (selectionInfo: SelectionInfo) => {\n    const { splt } = window.sentre\n    const { address: mintAddress } = selectionInfo.mintInfo || {}\n    if (!account.isAddress(mintAddress))\n      return dispatch(updateBidData({ ...selectionInfo }))\n    const accountAddress = await splt.deriveAssociatedAddress(\n      walletAddress,\n      mintAddress,\n    )\n    return dispatch(updateBidData({ accountAddress, ...selectionInfo }))\n  }\n\n  // calculator\n  const totalValue = cgkData.price * Number(bidData.amount)\n\n  return (\n    <Row gutter={[8, 8]}>\n      <Col flex=\"auto\">\n        <Typography.Text>From</Typography.Text>\n      </Col>\n      <Col>\n        <Space size={4}>\n          <Typography.Text type=\"secondary\">Supported</Typography.Text>\n          <Tag\n            style={{\n              margin: 0,\n              borderRadius: 4,\n              color: randomColor(WORMHOLE_COLOR),\n            }}\n            color={randomColor(WORMHOLE_COLOR, 0.2)}\n          >\n            Wormhole Bridge\n          </Tag>\n        </Space>\n      </Col>\n      <Col span={24}>\n        <NumericInput\n          placeholder=\"0\"\n          value={bidData.amount}\n          onChange={onAmount}\n          size=\"large\"\n          prefix={\n            <Selection value={selectionInfo} onChange={onSelectionInfo} />\n          }\n          suffix={\n            <Button\n              type=\"text\"\n              size=\"small\"\n              style={{ fontSize: 12, marginRight: -7 }}\n              onClick={onMax}\n            >\n              MAX\n            </Button>\n          }\n          max={balanceTransfer}\n        />\n      </Col>\n      <Col span={24}>\n        <Row gutter={[4, 4]} style={{ fontSize: 12, marginLeft: 2 }}>\n          <Col flex=\"auto\">\n            {cgkData.price ? (\n              <Tooltip title=\"The estimation is based on CoinGecko API.\">\n                <Space size={4}>\n                  <IonIcon name=\"information-circle-outline\" />\n                  <Typography.Text type=\"secondary\">\n                    {numeric(bidData.amount).format('0,0.[0000]')}{' '}\n                    {selectionInfo.mintInfo?.symbol || 'TOKEN'} ~ $\n                    {numeric(totalValue).format('0,0.[00]a')}\n                  </Typography.Text>\n                </Space>\n              </Tooltip>\n            ) : null}\n          </Col>\n          <Col>\n            <Typography.Text type=\"secondary\">\n              Available: {numeric(balanceTransfer || 0).format('0,0.[00]')}{' '}\n              {selectionInfo.mintInfo?.symbol || 'TOKEN'}\n            </Typography.Text>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Bid\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { TokenInfo } from '@solana/spl-token-registry'\n\nexport type State = {\n  amount: string // Desired amount\n  accountAddress: string // Associated account to the selected token\n  mintInfo?: TokenInfo // Selected token\n  poolAddresses: string[] // List of available pools\n  priority: number\n}\n\nconst NAME = 'ask'\nconst initialState: State = {\n  amount: '',\n  accountAddress: '',\n  poolAddresses: [],\n  priority: 0,\n}\n\n/**\n * Actions\n */\nexport const updateAskData = createAsyncThunk<\n  Partial<State>,\n  Partial<State> & { prioritized?: boolean; reset?: boolean },\n  { state: any }\n>(\n  `${NAME}/updateAskData`,\n  async ({ prioritized, reset, ...askData }, { getState }) => {\n    const {\n      bid: { priority: refPriority },\n      ask: { priority: prevPriority },\n    } = getState()\n    const priority = reset ? 0 : prioritized ? refPriority + 1 : prevPriority\n    return { ...askData, priority }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateAskData.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useMemo, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account } from '@senswap/sen-js'\n\nimport { Row, Col, Typography, Space, Tooltip } from 'antd'\nimport { SelectionInfo } from '../selection/mintSelection'\nimport Selection from '../selection'\n\nimport { useWallet } from 'senhub/providers'\nimport IonIcon from 'shared/antd/ionicon'\nimport { numeric } from 'shared/util'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateAskData } from 'app/model/ask.controller'\nimport NumericInput from 'app/shared/components/numericInput'\nimport useMintCgk from 'app/shared/hooks/useMintCgk'\nimport { useMintAccount } from 'app/shared/hooks/useMintAccount'\nimport configs from 'app/configs'\nimport { useMintSelection } from '../hooks/useMintSelection'\n\nconst Ask = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const { wallet } = useWallet()\n  const askData = useSelector((state: AppState) => state.ask)\n\n  const { balance } = useMintAccount(askData.accountAddress)\n  const cgkData = useMintCgk(askData.mintInfo?.address)\n  const selectionDefault = useMintSelection(configs.swap.askDefault)\n\n  // Select default\n  useEffect(() => {\n    dispatch(updateAskData(selectionDefault))\n  }, [dispatch, selectionDefault])\n\n  // Compute selection info\n  const selectionInfo: SelectionInfo = useMemo(\n    () => ({\n      mintInfo: askData.mintInfo,\n      poolAddresses: askData.poolAddresses,\n    }),\n    [askData],\n  )\n\n  // Handle amount\n  const onAmount = (val: string) => {\n    return dispatch(updateAskData({ amount: val, prioritized: true }))\n  }\n\n  // Update ask data\n  const onSelectionInfo = async (selectionInfo: SelectionInfo) => {\n    const { splt } = window.sentre\n    const { address: mintAddress } = selectionInfo.mintInfo || {}\n    if (!account.isAddress(mintAddress))\n      return dispatch(updateAskData({ ...selectionInfo }))\n    const accountAddress = await splt.deriveAssociatedAddress(\n      wallet.address,\n      mintAddress,\n    )\n    dispatch(updateAskData({ accountAddress, ...selectionInfo }))\n  }\n\n  // calculator\n  const totalValue = cgkData.price * Number(askData.amount)\n\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Typography.Text>To</Typography.Text>\n      </Col>\n      <Col span={24}>\n        <NumericInput\n          placeholder=\"0\"\n          value={askData.amount}\n          onChange={onAmount}\n          size=\"large\"\n          prefix={\n            <Selection value={selectionInfo} onChange={onSelectionInfo} />\n          }\n        />\n      </Col>\n      <Col span={24}>\n        <Row gutter={[4, 4]} style={{ fontSize: 12, marginLeft: 2 }}>\n          <Col flex=\"auto\">\n            {cgkData.price ? (\n              <Tooltip title=\"The estimation is based on CoinGecko API.\">\n                <Space size={4}>\n                  <IonIcon name=\"information-circle-outline\" />\n                  <Typography.Text type=\"secondary\">\n                    {numeric(askData.amount).format('0,0.[0000]')}{' '}\n                    {selectionInfo.mintInfo?.symbol || 'TOKEN'} ~ $\n                    {numeric(totalValue).format('0,0.[0]a')}\n                  </Typography.Text>\n                </Space>\n              </Tooltip>\n            ) : null}\n          </Col>\n          <Col>\n            <Typography.Text type=\"secondary\">\n              Available: {numeric(balance || 0).format('0,0.[00]')}{' '}\n              {selectionInfo.mintInfo?.symbol || 'TOKEN'}\n            </Typography.Text>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Ask\n","var _defs, _path, _path2;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSen(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    \"data-name\": \"Layer 1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    viewBox: \"0 0 283.465 283.465\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"linear-gradient\",\n    x1: -1222.504,\n    y1: -2883.343,\n    x2: -1135.428,\n    y2: -2970.419,\n    gradientTransform: \"translate(1300.837 3068.613)\",\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    stopColor: \"#f9575e\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.27,\n    stopColor: \"#f8555b\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.486,\n    stopColor: \"#f44f51\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.685,\n    stopColor: \"#ee4540\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.871,\n    stopColor: \"#e63728\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#de2a13\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"linear-gradient-2\",\n    x1: 1314.111,\n    y1: -895.144,\n    x2: 1389.882,\n    y2: -811.556,\n    gradientTransform: \"translate(1516.988 -707.868) rotate(180)\",\n    xlinkHref: \"#linear-gradient\"\n  }))), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Senswap logo FINAL\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.179,85.127H114a92.562,92.562,0,0,1,92.562,92.562v20.648a0,0,0,0,1,0,0H129.741a92.562,92.562,0,0,1-92.562-92.562V85.127A0,0,0,0,1,37.179,85.127Z\",\n    transform: \"translate(107.828 328.128) rotate(-135)\",\n    fill: \"url(#linear-gradient)\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M169.462,85.127h76.823a0,0,0,0,1,0,0v20.648a92.562,92.562,0,0,1-92.562,92.562H76.9a0,0,0,0,1,0,0V177.689a92.562,92.562,0,0,1,92.562-92.562Z\",\n    transform: \"translate(-52.89 155.776) rotate(-45)\",\n    fill: \"url(#linear-gradient-2)\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSen);\nexport default __webpack_public_path__ + \"static/media/sen.f2d012c907167ba613b035621b6423cb.svg\";\nexport { ForwardRef as ReactComponent };","export enum ParsedType {\n  Transfer = 'transfer',\n}\n\nexport type ParsedAction = {\n  type: ParsedType\n  info: ParsedInfoTransfer\n}\n\nexport type ParsedInfoTransfer = {\n  source: string\n  destination: string\n  amount: string\n  lamports: number\n}\n\nexport type OptionsFetchSignature = {\n  limit?: number\n  lastSignature?: string\n  secondFrom?: number\n  secondTo?: number\n}\n","import { Avatar, Space, Typography } from 'antd'\nimport SentreIcon from 'app/static/images/sen.svg'\n\nconst PoweredBy = ({\n  spacing = 4,\n  iconSize = 20,\n}: {\n  spacing?: number\n  iconSize?: number\n}) => {\n  return (\n    <Space size={spacing}>\n      <Typography.Text style={{ fontSize: 12, color: '#7A7B85' }}>\n        Powered by\n      </Typography.Text>\n      <Avatar src={SentreIcon} size={iconSize} />\n    </Space>\n  )\n}\n\nexport default PoweredBy\n","import { Row, Col, Button, Typography, Tooltip } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Option = ({\n  label,\n  value,\n  onClick,\n  active = false,\n}: {\n  label: string\n  value: number\n  onClick: (value: number) => void\n  active?: boolean\n}) => {\n  return (\n    <Typography.Text\n      style={{ cursor: 'pointer', color: active ? '#F9575E' : 'inherit' }}\n      onClick={() => onClick(value)}\n    >\n      {label}\n    </Typography.Text>\n  )\n}\n\nconst Slippage = ({\n  value,\n  onChange,\n}: {\n  value: number\n  onChange: (value: number) => void\n}) => {\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false}>\n          <Col flex=\"auto\">\n            <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>\n              Slippage Tolerance\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Tooltip\n              placement=\"right\"\n              title={\n                <span>\n                  Your transaction will be canceled if the confirmed price\n                  breaks the limited range of{' '}\n                  <strong style={{ color: '#f9575e' }}>{`${\n                    value * 100\n                  }%.`}</strong>\n                </span>\n              }\n            >\n              <Button\n                type=\"text\"\n                shape=\"circle\"\n                size=\"small\"\n                icon={<IonIcon name=\"information-circle-outline\" />}\n              />\n            </Tooltip>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false} justify=\"space-between\">\n          {[0.001, 0.005, 0.01, 0.05, 1].map((e, i) => (\n            <Col key={i}>\n              <Option\n                label={e === 1 ? 'Freely' : `${e * 100}%`}\n                value={e}\n                onClick={onChange}\n                active={e === value}\n              />\n            </Col>\n          ))}\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Slippage\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nexport type State = {\n  slippage: number\n}\n\nconst NAME = 'settings'\nconst initialState: State = {\n  slippage: 0.01,\n}\n\n/**\n * Actions\n */\n\nexport const updateSettings = createAsyncThunk(\n  `${NAME}/updateSettings`,\n  async (settings: Partial<State>) => ({ ...settings }),\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateSettings.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useDispatch, useSelector } from 'react-redux'\n\nimport { Row, Col, Button, Popover, Typography } from 'antd'\nimport Slippage from './slippage'\n\nimport { updateSettings } from 'app/model/settings.controller'\nimport { AppDispatch, AppState } from 'app/model'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Settings = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const settings = useSelector((state: AppState) => state.settings)\n\n  const onSlippage = (slippage: number) => {\n    return dispatch(updateSettings({ ...settings, slippage }))\n  }\n\n  return (\n    <Popover\n      placement=\"bottomRight\"\n      overlayInnerStyle={{ width: 300 }}\n      content={\n        <Row gutter={[8, 8]}>\n          <Col span={24}>\n            <Typography.Title level={5}>Settings</Typography.Title>\n          </Col>\n          <Col span={24}>\n            <Slippage value={settings.slippage} onChange={onSlippage} />\n          </Col>\n        </Row>\n      }\n      trigger=\"click\"\n    >\n      <Button\n        type=\"text\"\n        shape=\"circle\"\n        size=\"small\"\n        icon={<IonIcon name=\"settings-outline\" />}\n      />\n    </Popover>\n  )\n}\n\nexport default Settings\n","import { Col, Divider, Row } from 'antd'\nimport PoweredBy from 'app/components/poweredBy'\nimport Settings from 'app/components/settings'\n\nconst SwapSettings = () => {\n  return (\n    <Row gutter={[4, 4]} justify=\"end\" align=\"middle\">\n      <Col>\n        <PoweredBy />\n      </Col>\n      <Col>\n        <Divider type=\"vertical\" style={{ padding: 0 }} />\n      </Col>\n      <Col>\n        <Settings />\n      </Col>\n    </Row>\n  )\n}\n\nexport default SwapSettings\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { HopData } from 'app/components/preview/index'\n\ntype RouteInfo = {\n  hops: HopData[]\n  amounts: string[]\n  amount: string\n}\n\nexport type State = {\n  route?: RouteInfo\n}\nconst ROUTE_DEFAULT = {\n  amount: '',\n  amounts: [],\n  hops: [],\n}\nconst NAME = 'route'\nconst initialState: State = {\n  route: ROUTE_DEFAULT,\n}\n\n/**\n * Actions\n */\nexport const updateRouteInfo = createAsyncThunk<\n  State,\n  { route: RouteInfo },\n  { state: any }\n>(`${NAME}/updateRouteInfo`, async ({ route }, { getState }) => {\n  const { route: routeState } = getState()\n  if (!route) return { route: routeState }\n  return { route }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateRouteInfo.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useState, useCallback, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account } from '@senswap/sen-js'\n\nimport { Row, Col, Button } from 'antd'\nimport Bid from './bid'\nimport IonIcon from 'shared/antd/ionicon'\nimport Ask from './ask'\nimport SwapSettings from 'app/page/swap/swapSettings'\n\nimport {\n  BestRouteInfo,\n  buildPoolGraph,\n  findAllRoute,\n  findBestRouteFromAsk,\n  findBestRouteFromBid,\n  RouteTrace,\n} from 'app/helper/router'\nimport { AppDispatch, AppState } from 'app/model'\nimport { usePool } from 'senhub/providers'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { updateAskData } from 'app/model/ask.controller'\nimport { updateRouteInfo } from 'app/model/route.controller'\n\nconst Swap = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const [bestRoute, setBestRoute] = useState(new BestRouteInfo())\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const { pools } = usePool()\n  /**\n   * Switch tokens\n   */\n  const onSwitch = useCallback(async () => {\n    const { amount: bidAmount, priority: bidPriority, ...bidRest } = bidData\n    const { amount: askAmount, priority: askPriority, ...askRest } = askData\n    const amount = bidPriority > askPriority ? bidAmount : askAmount\n    const updateData = bidPriority > askPriority ? updateAskData : updateBidData\n    await dispatch(updateBidData({ ...askRest, amount: '', reset: true }))\n    await dispatch(updateAskData({ ...bidRest, amount: '', reset: true }))\n    await dispatch(updateData({ amount, prioritized: true }))\n  }, [dispatch, askData, bidData])\n\n  /**\n   * Find optimal route\n   */\n  const findRoute = useCallback(async () => {\n    const {\n      poolAddresses: bidPoolAddresses,\n      mintInfo: bidMintInfo,\n      amount: bidAmount,\n      priority: bidPriority,\n    } = bidData\n    const {\n      poolAddresses: askPoolAddresses,\n      mintInfo: askMintInfo,\n      amount: askAmount,\n      priority: askPriority,\n    } = askData\n\n    const { address: bidMintAddress } = bidMintInfo || {}\n    const bidPools = bidPoolAddresses.map((address) => ({\n      address,\n      ...pools[address],\n    }))\n    const { address: askMintAddress } = askMintInfo || {}\n    const askPools = askPoolAddresses.map((address) => ({\n      address,\n      ...pools[address],\n    }))\n    let bestRoute = new BestRouteInfo()\n\n    if (\n      (!Number(bidAmount) && !Number(askAmount)) ||\n      !account.isAddress(bidMintAddress) ||\n      !account.isAddress(askMintAddress) ||\n      !bidPools.length ||\n      !askPools.length ||\n      !bidMintInfo\n    )\n      return setBestRoute(bestRoute)\n    // Use mode to find best route this mean the system find best route for end user.\n    // the best route return a route that user can receive maximum ask amount when swap\n    let routes = new Array<RouteTrace>()\n\n    const pathTrace: RouteTrace = {\n      mints: [bidMintAddress],\n      pools: [],\n    }\n    const graph = buildPoolGraph(pools)\n    findAllRoute(routes, graph, bidMintAddress, askMintAddress, pathTrace)\n    // No available route\n    if (!routes.length) return setBestRoute(bestRoute)\n\n    if (askPriority < bidPriority) {\n      bestRoute = await findBestRouteFromBid(pools, routes, bidData, askData)\n    } else\n      bestRoute = await findBestRouteFromAsk(pools, routes, bidData, askData)\n    return setBestRoute(bestRoute)\n  }, [askData, bidData, pools])\n\n  const updateRoute = useCallback(() => {\n    const bidPriority = bidData.priority\n    const askPriority = askData.priority\n    if (askPriority < bidPriority) {\n      dispatch(updateAskData({ amount: bestRoute.amount }))\n    }\n    if (bidPriority < askPriority) {\n      dispatch(updateBidData({ amount: bestRoute.amount }))\n    }\n    dispatch(updateRouteInfo({ route: { ...bestRoute } }))\n  }, [askData.priority, bestRoute, bidData.priority, dispatch])\n\n  useEffect(() => {\n    updateRoute()\n  }, [updateRoute])\n\n  useEffect(() => {\n    findRoute()\n  }, [findRoute])\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} justify=\"end\" align=\"middle\" wrap={false}>\n          <Col>\n            <SwapSettings />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Bid />\n      </Col>\n      <Col span={24}>\n        <Row gutter={[8, 8]} justify=\"center\">\n          <Col>\n            <Button\n              size=\"small\"\n              icon={<IonIcon name=\"git-compare-outline\" />}\n              onClick={onSwitch}\n            />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Ask />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Swap\n","import { Card, Col, Row } from 'antd'\nimport SwapReview from './swapReview'\nimport SwapPoolInfo from './swapPoolInfo'\nimport SwapForm from 'app/components/swap'\n\nconst Swap = () => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Card bordered={false} className=\"card-swap\">\n          <SwapForm />\n        </Card>\n      </Col>\n      <Col span={24}>\n        <SwapReview />\n      </Col>\n      <Col span={24}>\n        <SwapPoolInfo />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Swap\n","import { Tag } from 'antd'\n\nconst STATUS_COLOR: Record<string, number[]> = {\n  success: [20, 224, 65],\n  pending: [212, 177, 6],\n  error: [215, 35, 17],\n  failed: [215, 35, 17],\n}\n\nconst StatusTag = ({ tag }: { tag: string }) => {\n  const setColorTag = (opacity?: number) => {\n    let color = STATUS_COLOR[tag]\n    return `rgba(${color[0]},  ${color[1]}, ${color[2]},${opacity || 1})`\n  }\n\n  return (\n    <Tag\n      style={{\n        margin: 0,\n        borderRadius: 4,\n        color: setColorTag(),\n        textTransform: 'capitalize',\n      }}\n      color={setColorTag(0.1)}\n    >\n      {tag}\n    </Tag>\n  )\n}\n\nexport default StatusTag\n","import { Button, Space, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'app/shared/components/mint'\nimport IonIcon from 'shared/antd/ionicon'\nimport { explorer, shortenAddress } from 'shared/util'\nimport StatusTag from './statusTag'\n\nexport const HISTORY_COLUMN = [\n  {\n    title: 'TIME',\n    dataIndex: 'time',\n  },\n  {\n    title: 'TRANSACTION',\n    dataIndex: 'transactionId',\n    render: (text: string) => (\n      <Space align=\"baseline\">\n        <Typography.Text\n          onClick={() => window.open(explorer(text), '_blank')}\n          style={{ fontWeight: 700, cursor: 'pointer' }}\n        >\n          {shortenAddress(text, 3, '...')}\n        </Typography.Text>\n        <Button\n          type=\"text\"\n          size=\"small\"\n          onClick={() => window.open(explorer(text), '_blank')}\n          icon={<IonIcon name=\"open-outline\" />}\n        />\n      </Space>\n    ),\n  },\n\n  {\n    title: 'AMOUNT',\n    dataIndex: 'amount',\n    width: 400,\n    render: (text: string, record: any) => (\n      <Space size={8}>\n        {record.amountFrom}\n        <MintSymbol mintAddress={record.from} />\n        <MintAvatar mintAddress={record.from} />\n        <IonIcon name=\"arrow-forward-outline\" />\n        {record.amountTo}\n        <MintSymbol mintAddress={record.to} />\n        <MintAvatar mintAddress={record.to} />\n      </Space>\n    ),\n  },\n  {\n    title: 'STATUS',\n    dataIndex: 'status',\n    width: 100,\n    render: (text: string) => <StatusTag tag=\"success\" />,\n  },\n]\n","export class TransLog {\n  programId: string = ''\n\n  programInfo: ProgramInfo | undefined\n\n  signature: string = ''\n\n  blockTime: number = 0\n\n  time: number = 0\n\n  owner: string = ''\n\n  actionType: string = ''\n\n  actionTransfers: Array<ActionTransfer> = []\n\n  programTransfer: Array<ActionTransfer> = []\n}\n\nexport class ActionInfo {\n  address: string = ''\n\n  // pool: string = ''\n\n  mint: string = ''\n\n  decimals: number = 0\n\n  preBalance: string = '0'\n\n  postBalance: string = '0'\n}\n/**\n * Amount is not same postBalance - preBalance\n * @postBalance and @preBalance are balance after all action (transaction)\n * @postBalance = @preBalance +- all @amount (multi amount in transaction)\n * @amount is value in 1 action\n */\nexport class ActionTransfer {\n  source: ActionInfo | undefined\n\n  destination: ActionInfo | undefined\n\n  amount: string = '0'\n}\ntype ProgramInfo = {\n  programId: string\n  data: string\n}\n","import {\n  ConfirmedSignatureInfo,\n  ConfirmedSignaturesForAddress2Options,\n  Connection,\n  ParsedConfirmedTransaction,\n  PublicKey,\n} from '@solana/web3.js'\n\nimport { OptionsFetchSignature } from '../../constants/transaction'\n\nconst DEFAULT_LIMIT = 700\nconst TRANSACTION_LIMIT = 150\n\nexport class Solana {\n  private conn: Connection = window.sentre.splt.connection\n\n  //Search for all signatures from last Signature and earlier\n  //So: If new collection (to now) -> last Signature = null\n  private async fetchSignatures(\n    address: PublicKey,\n    lastSignature?: string,\n    limit: number = DEFAULT_LIMIT,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    if (limit > DEFAULT_LIMIT) limit = DEFAULT_LIMIT\n    const options: ConfirmedSignaturesForAddress2Options = {\n      limit: limit,\n      before: lastSignature,\n    }\n    return this.conn.getConfirmedSignaturesForAddress2(address, options)\n  }\n\n  private async fetchConfirmTransaction(signatures: string[]) {\n    let confirmedTransactions: ParsedConfirmedTransaction[] = []\n    let limit = TRANSACTION_LIMIT\n\n    const promiseTransGroup = []\n    for (let offset = 0; offset <= signatures.length / limit; offset++) {\n      const skip = offset * limit\n      const signaturesGroup = signatures.slice(skip, skip + limit)\n      promiseTransGroup.push(\n        this.conn.getParsedConfirmedTransactions(signaturesGroup),\n      )\n    }\n\n    const transGroups = await Promise.all(promiseTransGroup)\n    for (const transGroup of transGroups) {\n      //@ts-ignore\n      confirmedTransactions = confirmedTransactions.concat(transGroup)\n    }\n    return confirmedTransactions\n  }\n\n  async fetchTransactions(\n    programId: string,\n    options: OptionsFetchSignature,\n  ): Promise<ParsedConfirmedTransaction[]> {\n    const currentTime = new Date().getTime() / 1000\n    let { secondFrom, secondTo, lastSignature, limit } = options\n    secondFrom = Math.floor(secondFrom || 0)\n    secondTo = Math.floor(secondTo || currentTime)\n\n    const programPublicKey = new PublicKey(programId)\n    let signatures: string[] = []\n    let isStop = false\n\n    while (!isStop) {\n      const confirmedSignatureInfos: ConfirmedSignatureInfo[] =\n        await this.fetchSignatures(programPublicKey, lastSignature, limit)\n      if (!confirmedSignatureInfos?.length || isStop) break\n      for (const info of confirmedSignatureInfos) {\n        const blockTime = info.blockTime\n        if (!blockTime || blockTime > secondTo) continue\n        if (blockTime < secondFrom) {\n          isStop = true\n          break\n        }\n        lastSignature = info.signature\n        signatures.push(info.signature)\n      }\n\n      if (limit && signatures.length >= limit) break\n      if (confirmedSignatureInfos?.length < DEFAULT_LIMIT) break\n    }\n    const confirmedTransactions = await this.fetchConfirmTransaction(signatures)\n    return confirmedTransactions\n  }\n}\n","import moment from 'moment'\n\nconst SECOND_PER_MILLISECOND = 1000\n\nexport enum TimeFormat {\n  YMD = 'YYYYMMDD',\n  SortableTimePattern = 'YYYY-MM-DD HH:mm:ss',\n}\n\nexport class DateHelper {\n  private milliSeconds: number = new Date().valueOf()\n\n  setMilliSeconds(milliSeconds: number) {\n    this.milliSeconds = milliSeconds\n  }\n\n  static fromSeconds(seconds: number): DateHelper {\n    const date = new DateHelper()\n    const milliSeconds = seconds * SECOND_PER_MILLISECOND\n    date.setMilliSeconds(milliSeconds)\n    return date\n  }\n\n  static fromYmd(ymd: number): DateHelper {\n    const date = new DateHelper()\n    const milliSeconds = moment(ymd, TimeFormat.YMD).valueOf()\n    date.setMilliSeconds(milliSeconds)\n    return date\n  }\n\n  static getListDate(ymdFrom: number, ymdTo: number): number[] {\n    const dates: number[] = []\n    let dateFrom = DateHelper.fromYmd(ymdFrom)\n    const dateTo = DateHelper.fromYmd(ymdTo)\n    while (dateFrom.ymd() <= dateTo.ymd()) {\n      dates.push(dateFrom.ymd())\n      dateFrom = dateFrom.addDay()\n    }\n    return dates\n  }\n\n  format(dateFormat: TimeFormat): string {\n    const date = new Date(this.milliSeconds)\n    return moment(date).format(dateFormat)\n  }\n\n  subtractDay(dayAmount: number = 1): DateHelper {\n    const milliSeconds = moment(this.milliSeconds)\n      .subtract(dayAmount, 'days')\n      .valueOf()\n    const date = DateHelper.fromSeconds(milliSeconds / SECOND_PER_MILLISECOND)\n    return date\n  }\n\n  addDay(dayAmount: number = 1): DateHelper {\n    const milliSeconds = moment(this.milliSeconds)\n      .add(dayAmount, 'days')\n      .valueOf()\n    const date = DateHelper.fromSeconds(milliSeconds / SECOND_PER_MILLISECOND)\n    return date\n  }\n\n  seconds(): number {\n    return (\n      (this.milliSeconds - (this.milliSeconds % SECOND_PER_MILLISECOND)) /\n      SECOND_PER_MILLISECOND\n    )\n  }\n\n  ymd(): number {\n    return Number(this.format(TimeFormat.YMD))\n  }\n\n  static today(format: string = TimeFormat.YMD): string {\n    return moment().format(format)\n  }\n}\n","//@ts-ignore\nimport {\n  ParsedConfirmedTransaction,\n  ParsedInstruction,\n  ParsedMessageAccount,\n  PartiallyDecodedInstruction,\n  TokenBalance,\n} from '@solana/web3.js'\nimport { account } from '@senswap/sen-js'\n\nimport { ActionInfo, ActionTransfer, TransLog } from '../entities/trans-log'\nimport { Solana } from '../adapters/solana/client'\nimport {\n  OptionsFetchSignature,\n  ParsedAction,\n  ParsedInfoTransfer,\n  ParsedType,\n} from '../constants/transaction'\nimport { DateHelper } from '../helpers/date'\nimport { SOL_ADDRESS, SOL_DECIMALS } from '../constants/sol'\n\ntype InstructionData = ParsedInstruction | PartiallyDecodedInstruction\n\nexport class TransLogService {\n  solana: Solana\n  constructor() {\n    this.solana = new Solana()\n  }\n\n  async collect(\n    programId: string,\n    configs: OptionsFetchSignature,\n  ): Promise<TransLog[]> {\n    const confirmedTrans = await this.solana.fetchTransactions(\n      programId,\n      configs,\n    )\n    const transLogs: Array<TransLog> = []\n    for (const trans of confirmedTrans) {\n      const log = this.parseTransLog(trans)\n      if (log) transLogs.push(log)\n    }\n    return transLogs\n  }\n\n  private parseTransLog(\n    confirmedTrans: ParsedConfirmedTransaction,\n  ): TransLog | undefined {\n    const { blockTime, meta, transaction } = confirmedTrans\n    if (!blockTime || !meta) return\n    const {\n      postTokenBalances,\n      preTokenBalances,\n      err,\n      postBalances,\n      preBalances,\n    } = meta\n    const { signatures, message } = transaction\n    if (err !== null) return\n\n    const innerInstructionData = meta.innerInstructions?.[0]?.instructions || []\n    const instructionData = message.instructions[0] || []\n\n    const transLog = new TransLog()\n    transLog.signature = signatures[0]\n    transLog.blockTime = blockTime\n    transLog.time = DateHelper.fromSeconds(blockTime).ymd()\n    transLog.programId = instructionData.programId.toString()\n\n    const mapAccount = this.parseAccountInfo(\n      message.accountKeys,\n      postTokenBalances || [],\n      preTokenBalances || [],\n      postBalances,\n      preBalances,\n    )\n    // system program transaction\n    if (this.isParsedInstruction(instructionData)) {\n      transLog.programTransfer = this.parseAction([instructionData], mapAccount)\n      return transLog\n    }\n    // smart contract transaction\n    transLog.actionTransfers = this.parseAction(\n      innerInstructionData,\n      mapAccount,\n    )\n    transLog.programInfo = {\n      programId: instructionData.programId.toString(),\n      data: (instructionData as PartiallyDecodedInstruction).data,\n    }\n    return transLog\n  }\n\n  private isParsedInstruction(instructionData: InstructionData) {\n    return (instructionData as ParsedInstruction).parsed !== undefined\n  }\n\n  private parseAction(\n    actions: InstructionData[],\n    mapAccount: Map<string, ActionInfo>,\n  ) {\n    const actionTransfer: ActionTransfer[] = []\n    for (const action of actions) {\n      if (!this.isParsedInstruction(action)) continue\n      const actionParsed: ParsedAction =\n        (action as ParsedInstruction).parsed || {}\n      switch (actionParsed.type) {\n        case ParsedType.Transfer:\n          const info: ParsedInfoTransfer = actionParsed.info\n          const parsedAction = this.parseActionTransfer(info, mapAccount)\n          if (parsedAction) actionTransfer.push(parsedAction)\n          break\n        default:\n          break\n      }\n    }\n    return actionTransfer\n  }\n\n  private parseActionTransfer(\n    parsedTransfer: ParsedInfoTransfer,\n    mapAccount: Map<string, ActionInfo>,\n  ): ActionTransfer | undefined {\n    const { source, destination, amount, lamports } = parsedTransfer\n    const amountTransfer = amount || lamports.toString()\n\n    if (\n      !amountTransfer ||\n      !mapAccount.has(source) ||\n      !mapAccount.has(destination)\n    )\n      return\n\n    const actionTransfer = new ActionTransfer()\n    actionTransfer.source = mapAccount.get(source)\n    actionTransfer.destination = mapAccount.get(destination)\n    actionTransfer.amount = amountTransfer\n    return actionTransfer\n  }\n\n  private parseAccountInfo(\n    accountKeys: Array<ParsedMessageAccount>,\n    postTokenBalances: Array<TokenBalance>,\n    preTokenBalances: Array<TokenBalance>,\n    postBalances: number[],\n    preBalances: number[],\n  ): Map<string, ActionInfo> {\n    const mapAccountInfo = new Map<string, ActionInfo>()\n\n    // Associated Address\n    for (const postBalance of postTokenBalances) {\n      const { accountIndex, mint, uiTokenAmount } = postBalance\n      const info = new ActionInfo()\n      info.address = accountKeys[accountIndex].pubkey.toString()\n      info.postBalance = uiTokenAmount.amount\n      info.mint = mint\n      info.decimals = uiTokenAmount.decimals\n      mapAccountInfo.set(info.address, info)\n    }\n\n    for (const preBalance of preTokenBalances) {\n      const { accountIndex, uiTokenAmount } = preBalance\n      const address = accountKeys[accountIndex].pubkey.toString()\n      const info = mapAccountInfo.get(address) || new ActionInfo()\n      info.preBalance = uiTokenAmount.amount\n      mapAccountInfo.set(info.address, info)\n    }\n\n    // Wallet address\n    accountKeys.forEach((accountData, idx) => {\n      const address = accountData.pubkey.toString()\n      if (!account.isAssociatedAddress(address)) {\n        const info = mapAccountInfo.get(address) || new ActionInfo()\n        info.address = address\n        info.mint = SOL_ADDRESS\n        info.postBalance = String(postBalances[idx] || 0) // lamports\n        info.preBalance = String(preBalances[idx] || 0) // lamports\n        info.decimals = SOL_DECIMALS\n        mapAccountInfo.set(info.address, info)\n      }\n    })\n\n    return mapAccountInfo\n  }\n}\n","export const SOL_ADDRESS = '11111111111111111111111111111111'\n\nexport const SOL_DECIMALS = 9\n","import moment from 'moment'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nimport { utils } from '@senswap/sen-js'\nimport { TransLogService } from 'app/lib/stat/logic/translog'\nimport configs from 'os/configs'\n\nexport type State = {\n  historySwap: HistorySwap[]\n}\n\n/**\n * Store constructor\n */\n\nexport type HistorySwap = {\n  time: string\n  transactionId: string\n  from: string\n  to: string\n  amountFrom: number\n  amountTo: number\n  key: string\n}\n\nconst LIMIT_HISTORY_SWAP = 20\n\nconst NAME = 'history'\nconst initialState: State = {\n  historySwap: [],\n}\n\n/**\n * Actions\n */\nexport const fetchHistorySwap = createAsyncThunk<\n  { historySwap: HistorySwap[] },\n  { lastSignature?: string; isLoadMore?: boolean },\n  { state: { history: State } }\n>(\n  `${NAME}/fetchHistorySwap`,\n  async ({ lastSignature, isLoadMore }, { getState }) => {\n    const {\n      sol: { swapAddress },\n    } = configs\n\n    const {\n      history: { historySwap },\n    } = getState()\n\n    const myWalletAddress = await window.sentre.wallet?.getAddress()\n    if (!myWalletAddress) throw Error('Loggin first')\n\n    const options = {\n      limit: LIMIT_HISTORY_SWAP,\n      lastSignature,\n    }\n\n    const transLogService = new TransLogService()\n    const transLogsData = await transLogService.collect(\n      myWalletAddress,\n      options,\n    )\n    let history: HistorySwap[] = []\n\n    if (isLoadMore) history = [...historySwap]\n\n    for (const transLog of transLogsData) {\n      const historyItem = {} as HistorySwap\n      const actionTransfer = transLog.actionTransfers\n      const firstAction = actionTransfer[0]\n      const lastAction = actionTransfer.at(-1)\n      const programId = transLog.programId\n\n      if (programId !== swapAddress) continue\n      if (!firstAction.destination || !lastAction?.destination) continue\n\n      const time = new Date(transLog.blockTime * 1000)\n\n      historyItem.time = moment(time).format('DD MMM, YYYY hh:mm')\n      historyItem.amountFrom = Number(\n        utils.undecimalize(\n          BigInt(firstAction.amount),\n          firstAction.destination.decimals,\n        ),\n      )\n      historyItem.amountTo = Number(\n        utils.undecimalize(\n          BigInt(lastAction.amount),\n          lastAction.destination.decimals,\n        ),\n      )\n      historyItem.from = firstAction.destination.mint\n      historyItem.to = lastAction.destination.mint\n      historyItem.transactionId = transLog.signature\n      historyItem.key = transLog.signature\n      history.push(historyItem)\n    }\n    return { historySwap: history }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      fetchHistorySwap.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Card, Col, Row, Typography, Table, Button } from 'antd'\nimport { HISTORY_COLUMN } from './column'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { fetchHistorySwap } from 'app/model/history.controller'\nimport { AppDispatch, AppState } from 'app/model'\n\nimport './index.less'\n\nconst ROW_PER_PAGE = 5\nconst LIMIT_IN_STORE = 10\n\nconst History = () => {\n  const [amountRow, setAmountRow] = useState(ROW_PER_PAGE)\n  const [isLoading, setIsLoading] = useState(false)\n\n  const { historySwap } = useSelector((state: AppState) => state.history)\n  const dispatch = useDispatch<AppDispatch>()\n\n  const fetchHistory = useCallback(async () => {\n    setIsLoading(true)\n    await dispatch(fetchHistorySwap({})).unwrap()\n    setIsLoading(false)\n  }, [dispatch])\n\n  useEffect(() => {\n    fetchHistory()\n    return () => setIsLoading(false)\n  }, [fetchHistory])\n\n  const onHandleViewMore = () => {\n    const currentTransactionDataLength = historySwap.slice(0, amountRow).length\n\n    if (historySwap.length - currentTransactionDataLength <= LIMIT_IN_STORE) {\n      const lastSignature = historySwap.at(-1)?.transactionId\n      dispatch(\n        fetchHistorySwap({\n          lastSignature,\n          isLoadMore: true,\n        }),\n      )\n    }\n    setAmountRow(amountRow + ROW_PER_PAGE)\n  }\n\n  const onHandleRefeshTable = () => {\n    fetchHistory()\n    setAmountRow(ROW_PER_PAGE)\n  }\n\n  return (\n    <Card bordered={false} style={{ height: 472 }}>\n      <Row gutter={[16, 24]}>\n        <Col flex=\"auto\">\n          <Typography.Title level={5}>Swap history</Typography.Title>\n        </Col>\n        <Col>\n          <Button onClick={onHandleRefeshTable}>Refresh</Button>\n        </Col>\n        <Col span={24}>\n          <Row justify=\"center\" gutter={[16, 9]}>\n            <Col span={24} style={{ height: 336 }}>\n              <Table\n                columns={HISTORY_COLUMN}\n                dataSource={historySwap.slice(0, amountRow)}\n                loading={isLoading}\n                pagination={false}\n                rowClassName={(record, index) =>\n                  index % 2 ? 'odd-row' : 'even-row'\n                }\n                scroll={{ x: 800, y: 280 }}\n              />\n            </Col>\n            <Col>\n              <Button\n                onClick={onHandleViewMore}\n                type=\"text\"\n                icon={<IonIcon name=\"chevron-down-outline\" />}\n                disabled={amountRow >= historySwap.length}\n              >\n                View more\n              </Button>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default History\n","import { Row, Col } from 'antd'\nimport SwapChart from './chart'\nimport Swap from './swap'\nimport History from './history'\n\nimport 'app/static/styles/index.less'\n\nconst Page = () => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col lg={8} md={12} xs={24}>\n        <Swap />\n      </Col>\n      <Col lg={16} md={12} xs={24}>\n        <Row gutter={[24, 24]}>\n          <Col span={24}>\n            <SwapChart />\n          </Col>\n          <Col span={24}>\n            <History />\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Page\n","import { useSelector } from 'react-redux'\n\nimport { Avatar, Col, Divider, Row, Space, Typography } from 'antd'\nimport PreviewSwap from 'app/components/preview'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { AppState } from 'app/model'\n\nconst ConfirmSwap = () => {\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n\n  return (\n    <Row gutter={[16, 24]}>\n      <Col span={24}>\n        <Row align=\"middle\" justify=\"space-between\">\n          <Col>\n            <Space direction=\"vertical\">\n              <Typography.Text>From</Typography.Text>\n              <Typography.Text>\n                <Space>\n                  <Avatar src={bidData.mintInfo?.logoURI} />\n                  {bidData.mintInfo?.symbol}\n                </Space>\n              </Typography.Text>\n              <Typography.Title level={4}>{bidData.amount}</Typography.Title>\n            </Space>\n          </Col>\n          <Col>\n            <IonIcon name=\"arrow-forward-outline\" style={{ fontSize: 24 }} />\n          </Col>\n          <Col>\n            <Space direction=\"vertical\">\n              <Typography.Text>To</Typography.Text>\n              <Space>\n                <Avatar src={askData.mintInfo?.logoURI} />\n                {askData.mintInfo?.symbol}\n              </Space>\n              <Typography.Title level={4}>{askData.amount}</Typography.Title>\n            </Space>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Divider style={{ margin: 0 }} />\n      </Col>\n      <Col>\n        <PreviewSwap />\n      </Col>\n    </Row>\n  )\n}\n\nexport default ConfirmSwap\n","import { useMemo, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Row, Col, Typography, Space, Button, Popover, Modal } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport PreviewSwap from 'app/components/preview'\nimport ConfirmSwap from './confirmSwap'\nimport SwapButton from 'app/components/swapButton'\nimport Swap from 'app/components/swap'\n\nimport { AppState } from 'app/model'\nimport { useAccount } from 'senhub/providers'\nimport { DEFAULT_WSOL, utils } from '@senswap/sen-js'\n\nconst Widget = () => {\n  const [visible, setVisible] = useState(false)\n  const { route } = useSelector((state: AppState) => state.route)\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const { accounts } = useAccount()\n\n  const wrapAmount = useMemo(() => {\n    const bidMint = bidData.mintInfo\n    const bidAccount = accounts[bidData.accountAddress]\n    const bidBalance = bidAccount?.amount || BigInt(0)\n\n    if (!bidMint || !Number(bidData.amount)) return BigInt(0)\n    if (bidMint.address !== DEFAULT_WSOL) return BigInt(0)\n\n    const bidAmount = utils.decimalize(bidData.amount, bidMint.decimals)\n    if (bidAmount <= bidBalance) return BigInt(0)\n    return bidAmount - bidBalance\n  }, [accounts, bidData.accountAddress, bidData.amount, bidData.mintInfo])\n\n  const disabled =\n    !route?.hops.length ||\n    !parseFloat(bidData.amount) ||\n    parseFloat(bidData.amount) < 0 ||\n    !parseFloat(askData?.amount) ||\n    parseFloat(askData?.amount) < 0\n  return (\n    <Row gutter={[24, 24]} style={{ padding: '16px 4px' }}>\n      <Col span={24}>\n        <Swap />\n      </Col>\n      <Col span={24}>\n        <Row align=\"bottom\">\n          <Col flex=\"auto\">\n            <Popover\n              placement=\"bottomLeft\"\n              content={\n                <Row style={{ width: 307 }}>\n                  <Col>\n                    <PreviewSwap />\n                  </Col>\n                </Row>\n              }\n              trigger=\"click\"\n            >\n              <Space style={{ cursor: 'pointer' }} direction=\"vertical\">\n                <Space>\n                  <Typography.Text>\n                    <IonIcon\n                      name=\"information-circle-outline\"\n                      style={{ color: '#7A7B85' }}\n                    />\n                  </Typography.Text>\n                  <Typography.Text type=\"secondary\">\n                    Price impact\n                  </Typography.Text>\n                </Space>\n                <Space>\n                  <Typography.Text style={{ color: '#D72311' }}>\n                    <IonIcon name=\"arrow-down-outline\" />\n                  </Typography.Text>\n                  <Typography.Text style={{ color: '#D72311' }}>\n                    1.4%\n                  </Typography.Text>\n                </Space>\n              </Space>\n            </Popover>\n          </Col>\n          <Col>\n            <Button\n              onClick={() => setVisible(true)}\n              size=\"large\"\n              block\n              type=\"primary\"\n              disabled={disabled}\n            >\n              Review & Swap\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n      <Modal\n        title={<Typography.Title level={4}> Confirm swap</Typography.Title>}\n        onCancel={() => setVisible(false)}\n        footer={\n          <SwapButton\n            hops={route?.hops || []}\n            wrapAmount={wrapAmount}\n            disabled={disabled}\n            onCallback={() => setVisible(false)}\n          />\n        }\n        visible={visible}\n      >\n        <ConfirmSwap />\n      </Modal>\n    </Row>\n  )\n}\n\nexport default Widget\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport ask from './ask.controller'\nimport bid from './bid.controller'\nimport settings from './settings.controller'\nimport route from './route.controller'\nimport history from './history.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools('myapp'),\n  reducer: {\n    ask,\n    bid,\n    settings,\n    route,\n    history,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport {\n  WalletProvider,\n  UIProvider,\n  AccountProvider,\n  PoolProvider,\n  MintProvider,\n} from 'senhub/providers'\n\nimport PageView from 'app/page'\nimport WidgetView from 'app/widget'\n\nimport model from 'app/model'\nimport configs from 'app/configs'\n\nimport 'app/static/styles/dark.less'\nimport 'app/static/styles/light.less'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId}>\n      <MintProvider>\n        <PoolProvider>\n          <AccountProvider>\n            <WalletProvider>\n              <Provider store={model}>\n                <PageView />\n              </Provider>\n            </WalletProvider>\n          </AccountProvider>\n        </PoolProvider>\n      </MintProvider>\n    </UIProvider>\n  )\n}\n\nexport const widgetConfig: WidgetConfig = {\n  size: 'small',\n  type: 'solid',\n}\n\nexport const Widget = () => {\n  return (\n    <UIProvider appId={appId}>\n      <MintProvider>\n        <PoolProvider>\n          <AccountProvider>\n            <WalletProvider>\n              <Provider store={model}>\n                <WidgetView />\n              </Provider>\n            </WalletProvider>\n          </AccountProvider>\n        </PoolProvider>\n      </MintProvider>\n    </UIProvider>\n  )\n}\n","import { net, env } from 'shared/runtime'\nimport sol from './sol.config'\nimport register from './register.config'\n\nconst configs = {\n  sol: sol[net],\n  register: register[env],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, AccountData } from '@senswap/sen-js'\n\n/**\n * Interface & Utility\n */\n\nexport type State = Record<string, AccountData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'accounts'\nconst initialState: State = {}\n\n/**\n * Actions\n */\n\nexport const getAccounts = createAsyncThunk(\n  `${NAME}/getAccounts`,\n  async ({ owner }: { owner: string }) => {\n    if (!account.isAddress(owner))\n      throw new Error('Invalid owner/wallet address')\n    const { splt } = window.sentre\n    const ownerPublicKey = account.fromAddress(owner)\n    const { value } = await splt.connection.getTokenAccountsByOwner(\n      ownerPublicKey,\n      { programId: splt.spltProgramId },\n    )\n    let bulk: State = {}\n    value.forEach(({ pubkey, account: { data: buf } }) => {\n      const address = pubkey.toBase58()\n      const data = splt.parseAccountData(buf)\n      return (bulk[address] = data)\n    })\n    return bulk\n  },\n)\n\nexport const getAccount = createAsyncThunk<\n  State,\n  { address: string },\n  { state: any }\n>(`${NAME}/getAccount`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid account address')\n  const {\n    accounts: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const { splt } = window.sentre\n  const raw = await splt.getAccountData(address)\n  return { [address]: raw }\n})\n\nexport const upsetAccount = createAsyncThunk<\n  State,\n  { address: string; data: AccountData },\n  { state: any }\n>(`${NAME}/upsetAccount`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteAccount = createAsyncThunk(\n  `${NAME}/deleteAccount`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getAccounts.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getAccount.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetAccount.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteAccount.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport ui from './ui.reducer'\nimport flags from './flags.reducer'\nimport page from './page.reducer'\nimport wallet from './wallet.reducer'\nimport accounts from './accounts.reducer'\nimport mints from './mints.reducer'\nimport pools from './pools.reducer'\nimport search from './search.reducer'\n\n/**\n * Root store\n */\nconst store = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools('sentre'),\n  reducer: {\n    ui,\n    flags,\n    page,\n    wallet,\n    accounts,\n    mints,\n    pools,\n    search,\n  },\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type RootDispatch = typeof store.dispatch\nexport default store\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, MintData } from '@senswap/sen-js'\n\n/**\n * Interface & Utility\n */\n\nexport type State = Record<string, MintData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'mints'\nconst initialState: State = {}\n\n/**\n * Actions\n */\n\nexport const getMint = createAsyncThunk<\n  State,\n  { address: string; force?: boolean },\n  { state: any }\n>(`${NAME}/getMint`, async ({ address, force = false }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid mint address')\n  if (!force) {\n    const {\n      accounts: { [address]: data },\n    } = getState()\n    if (data) return { [address]: data }\n  }\n  const { splt } = window.sentre\n  const raw = await splt.getMintData(address)\n  return { [address]: raw }\n})\n\nexport const upsetMint = createAsyncThunk<\n  State,\n  { address: string; data: MintData },\n  { state: any }\n>(`${NAME}/upsetMint`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteMint = createAsyncThunk(\n  `${NAME}/deleteMint`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        getMint.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetMint.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteMint.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account } from '@senswap/sen-js'\n\nimport PDB from 'shared/pdb'\nimport configs from 'os/configs'\n\nconst {\n  register: { senreg, extra },\n} = configs\n\n/**\n * Interface & Utility\n */\n\nexport type State = {\n  register: SenReg\n  appIds: AppIds\n  widgetIds: AppIds\n}\n\nconst troubleshoot = (register: SenReg, appIds?: AppIds): AppIds => {\n  if (!appIds || !Array.isArray(appIds)) return []\n  return appIds.filter((appId) => register[appId])\n}\nconst fetchRegister = async () => {\n  try {\n    const res = await fetch(senreg)\n    return await res.json()\n  } catch (er) {\n    return {}\n  }\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'page'\nconst initialState: State = {\n  register: {},\n  appIds: [],\n  widgetIds: [],\n}\n\n/**\n * Actions\n */\n\n// Must fetch register at very first of the process\nexport const loadRegister = createAsyncThunk(\n  `${NAME}/loadRegister`,\n  async () => {\n    const register = await fetchRegister()\n    return { register: { ...register, ...extra } }\n  },\n)\n\n// For sandbox only\nexport const installManifest = createAsyncThunk<\n  Partial<State>,\n  ComponentManifest,\n  { state: any }\n>(`${NAME}/installManifest`, async (manifest, { getState }) => {\n  const {\n    wallet: { address },\n    page: { appIds, widgetIds, register },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  if (appIds.includes(manifest.appId))\n    throw new Error('Cannot run sandbox for an installed application.')\n  const newAppIds: AppIds = [...appIds]\n  newAppIds.push(manifest.appId)\n  const newWidgetIds: AppIds = [...widgetIds]\n  if (manifest.supportedViews.includes('widget'))\n    newWidgetIds.push(manifest.appId)\n  const newRegister: SenReg = { ...register }\n  newRegister[manifest.appId] = manifest\n  return { appIds: newAppIds, widgetIds: newWidgetIds, register: newRegister }\n})\n\n/**\n * App Actions\n */\nexport const loadPage = createAsyncThunk<Partial<State>, void, { state: any }>(\n  `${NAME}/loadPage`,\n  async (_, { getState }) => {\n    const {\n      wallet: { address },\n      page: { register },\n    } = getState()\n\n    if (!account.isAddress(address))\n      throw new Error('Wallet is not connected yet.')\n    // Fetch user's apps\n    const db = new PDB(address).createInstance('sentre')\n    const appIds = troubleshoot(\n      register,\n      (await db.getItem('appIds')) || initialState.appIds,\n    )\n    const widgetIds = troubleshoot(\n      register,\n      (await db.getItem('widgetIds')) || initialState.widgetIds,\n    )\n    return { appIds, widgetIds }\n  },\n)\n\nexport const updatePage = createAsyncThunk<\n  Partial<State>,\n  AppIds,\n  { state: any }\n>(`${NAME}/updatePage`, async (appIds, { getState }) => {\n  const {\n    wallet: { address },\n    page: { register },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  appIds = troubleshoot(register, appIds)\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('appIds', appIds)\n  return { appIds }\n})\n\nexport const installApp = createAsyncThunk<\n  Partial<State>,\n  string,\n  { state: any }\n>(`${NAME}/installApp`, async (appId, { getState }) => {\n  const {\n    wallet: { address },\n    page: { register, appIds, widgetIds },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  if (appIds.includes(appId)) return {}\n  const newAppIds: AppIds = [...appIds]\n  newAppIds.push(appId)\n  const newWidgetIds = register[appId]?.supportedViews?.includes('widget')\n    ? [...widgetIds, appId]\n    : [...widgetIds]\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('appIds', newAppIds)\n  await pdb.createInstance('sentre').setItem('widgetIds', newWidgetIds)\n  return { appIds: newAppIds, widgetIds: newWidgetIds }\n})\n\nexport const uninstallApp = createAsyncThunk<\n  Partial<State>,\n  string,\n  { state: any }\n>(`${NAME}/uninstallApp`, async (appId, { getState }) => {\n  const {\n    wallet: { address },\n    page: { appIds, widgetIds },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  if (!appIds.includes(appId)) return {}\n  const newAppIds = appIds.filter((_appId: string) => _appId !== appId)\n  const newWidgetIds = widgetIds.filter((_appId: string) => _appId !== appId)\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('appIds', newAppIds)\n  await pdb.createInstance('sentre').setItem('widgetIds', newWidgetIds)\n  await pdb.dropInstance(appId)\n  return { appIds: newAppIds, widgetIds: newWidgetIds }\n})\n\n/**\n * Dashboard Actions\n */\nexport const updateDashboard = createAsyncThunk<\n  Partial<State>,\n  AppIds,\n  { state: any }\n>(`${NAME}/updateDashboard`, async (widgetIds, { getState }) => {\n  const {\n    wallet: { address },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('widgetIds', widgetIds)\n  return { widgetIds }\n})\n\nexport const addWidgets = createAsyncThunk<\n  Partial<State>,\n  AppIds,\n  { state: any }\n>(`${NAME}/addWidgets`, async (appIds, { getState }) => {\n  const {\n    wallet: { address },\n    page: { widgetIds },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet')\n  const newWidgetIds: AppIds = [...widgetIds, ...appIds]\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('widgetIds', newWidgetIds)\n  return { widgetIds: newWidgetIds }\n})\n\nexport const removeWidget = createAsyncThunk<\n  Partial<State>,\n  string,\n  { state: any }\n>(`${NAME}/removeWidget`, async (appId, { getState }) => {\n  const {\n    wallet: { address },\n    page: { widgetIds },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  if (!widgetIds.includes(appId)) return {}\n  const newWidgetIds = widgetIds.filter((_appId: string) => _appId !== appId)\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('widgetIds', newWidgetIds)\n  return { widgetIds: newWidgetIds }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        loadRegister.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        installManifest.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        loadPage.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updatePage.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        installApp.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        uninstallApp.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateDashboard.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        addWidgets.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        removeWidget.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { AccountInfo, PublicKey } from '@solana/web3.js'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, PoolData } from '@senswap/sen-js'\nimport configs from 'os/configs'\n\nconst {\n  sol: { taxmanAddress },\n} = configs\n\n/**\n * Interface & Utility\n */\n\nexport type State = Record<string, PoolData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'pools'\nconst initialState: State = {}\n\n/**\n * Actions\n */\n\nexport const getPools = createAsyncThunk(`${NAME}/getPools`, async () => {\n  const { swap } = window.sentre\n  // Get all pools\n  const value: Array<{ pubkey: PublicKey; account: AccountInfo<Buffer> }> =\n    await swap.connection.getProgramAccounts(swap.swapProgramId, {\n      filters: [\n        { dataSize: 257 },\n        { memcmp: { bytes: taxmanAddress, offset: 65 } },\n      ],\n    })\n  let bulk: State = {}\n  value.forEach(({ pubkey, account: { data: buf } }) => {\n    const address = pubkey.toBase58()\n    const data = swap.parsePoolData(buf)\n    bulk[address] = data\n  })\n  return bulk\n})\n\nexport const getPool = createAsyncThunk<\n  State,\n  { address: string },\n  { state: any }\n>(`${NAME}/getPool`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid pool address')\n  const {\n    pools: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const { swap } = window.sentre\n  const raw = await swap.getPoolData(address)\n  return { [address]: raw }\n})\n\nexport const upsetPool = createAsyncThunk<\n  State,\n  { address: string; data: PoolData },\n  { state: any }\n>(`${NAME}/upsetPool`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid pool address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getPools.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\ntype State = {\n  value: string\n  loading: boolean\n  disabled: boolean\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'search'\nconst initialState: State = {\n  value: '',\n  loading: false,\n  disabled: false,\n}\n\n/**\n * Actions\n */\n\nexport const setValue = createAsyncThunk<\n  Partial<State>,\n  string,\n  { state: any }\n>(`${NAME}/setValue`, async (value) => {\n  return { value }\n})\n\nexport const setLoading = createAsyncThunk<\n  Partial<State>,\n  boolean,\n  { state: any }\n>(`${NAME}/setLoading`, async (loading) => {\n  return { loading }\n})\n\nexport const setDisabled = createAsyncThunk<\n  Partial<State>,\n  boolean,\n  { state: any }\n>(`${NAME}/setDisabled`, async (disabled) => {\n  return { disabled }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setValue.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setLoading.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setDisabled.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\nconst TIME_ZONE_MORNING = 6\nconst TIME_ZONE_NIGHT = 18\n\nexport type Infix = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\nexport type Theme = 'light' | 'dark'\n\nexport type State = {\n  theme: Theme\n  width: number\n  infix: Infix\n  touchable: boolean\n  visibleActionCenter: boolean\n}\n\nconst getInfix = (): Infix => {\n  const width = window.innerWidth\n  if (width < 576) return 'xs'\n  if (width < 768) return 'sm'\n  if (width < 992) return 'md'\n  if (width < 1200) return 'lg'\n  if (width < 1400) return 'xl'\n  return 'xxl'\n}\nconst isTouchable = () => {\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0\n}\nconst getTheme = (): Theme => {\n  const hour = new Date().getHours()\n  if (hour >= TIME_ZONE_MORNING && hour < TIME_ZONE_NIGHT) return 'light'\n  return 'dark'\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'ui'\nconst initialState: State = {\n  theme: getTheme(),\n  width: window.innerWidth,\n  infix: getInfix(),\n  touchable: isTouchable(),\n  visibleActionCenter: false,\n}\n\n/**\n * Actions\n */\n\nexport const setTheme = createAsyncThunk(\n  `${NAME}/setTheme`,\n  async (theme: Theme) => {\n    return { theme }\n  },\n)\n\nexport const resize = createAsyncThunk(`${NAME}/resize`, async () => {\n  const width = window.innerWidth\n  const infix = getInfix()\n  return { width, infix }\n})\n\nexport const setVisibleActionCenter = createAsyncThunk(\n  `${NAME}/setVisibleActionCenter`,\n  async (visible: boolean) => {\n    return { visibleActionCenter: visible }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setTheme.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        resize.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setVisibleActionCenter.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { Lamports, SPLT, Swap, WalletInterface } from '@senswap/sen-js'\n\nimport configs from 'os/configs'\n\n/**\n * Interface & Utility\n */\n\nexport type State = {\n  visible: boolean\n  address: string\n  lamports: bigint\n}\n\nconst initializeWindow = async (wallet: WalletInterface | undefined) => {\n  const {\n    sol: { node, spltAddress, splataAddress, swapAddress },\n  } = configs\n  window.sentre = {\n    wallet,\n    lamports: new Lamports(node),\n    splt: new SPLT(spltAddress, splataAddress, node),\n    swap: new Swap(swapAddress, spltAddress, splataAddress, node),\n  }\n}\n\nconst destroyWindow = async () => {\n  if (window.sentre?.wallet) window.sentre.wallet.disconnect()\n  await initializeWindow(undefined)\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'wallet'\nconst initialState: State = {\n  visible: false,\n  address: '',\n  lamports: BigInt(0),\n}\n\n/**\n * Actions\n */\n\nexport const openWallet = createAsyncThunk(`${NAME}/openWallet`, async () => {\n  return { visible: true }\n})\n\nexport const closeWallet = createAsyncThunk(`${NAME}/closeWallet`, async () => {\n  return { visible: false }\n})\n\nexport const connectWallet = createAsyncThunk(\n  `${NAME}/connectWallet`,\n  async (wallet: any) => {\n    if (!wallet) throw new Error('Invalid wallet instance')\n    await initializeWindow(wallet)\n    const address = await wallet.getAddress()\n    const lamports = await window.sentre.lamports.getLamports(address)\n    return { address, lamports: BigInt(lamports), visible: false }\n  },\n)\n\nexport const updateWallet = createAsyncThunk(\n  `${NAME}/updateWallet`,\n  async ({ lamports }: Partial<State>) => {\n    return { lamports }\n  },\n)\n\nexport const disconnectWallet = createAsyncThunk(\n  `${NAME}/disconnectWallet`,\n  async () => {\n    await destroyWindow()\n    window.location.reload() // Reset all redux store\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        openWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        closeWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        connectWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        disconnectWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey);\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(request: IRequestQueue, callback: () => Promise<any>) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    if (!this.config.limit) return false\n\n    const timeFarthest = this.timeLogs[0] || 0\n    const timeNow = new Date().getTime()\n    if (this.timeLogs.length < this.config.limit.calls) {\n      return true\n    }\n    const timeRange = timeNow - timeFarthest\n    const minTimeRange = this.config.limit.time\n    return timeRange > minTimeRange\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n","import { account } from '@senswap/sen-js'\nimport numbro from 'numbro'\nimport { net } from 'shared/runtime'\n\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value) return numbro('0')\n  return numbro(value)\n}\n"],"names":["timeoutId","chartData","labels","type","configs","disableAxe","chartId","backgroundColor","useState","isRebuildChart","setRebuildChart","formatData","useCallback","data","label","background","datasets","chartRef","useRef","getBackground","ctx","current","canvas","getContext","gradient","createLinearGradient","addColorStop","useEffect","chartInstance","dataInstace","find","compareData","isEqual","update","id","height","ref","Chart","options","responsive","maintainAspectRatio","scales","xAxes","gridLines","drawBorder","display","ticks","yAxes","beginAtZero","maxTicksLimit","callback","value","index","values","numeric","format","plugins","legend","hover","onHover","event","elements","target","document","getElementById","style","cursor","icons","defaultIcon","name","rest","Avatar","map","iconURI","idx","src","border","DEFAULT_TOKEN_INFO","address","chainId","decimals","symbol","extensions","undefined","logoURI","tags","TOKEN_PROVIDER","TokenProvider","fetchMarketChart","mintsAddress","promise","mint","findByAddress","tokenInfo","ticket","coingeckoId","price","fetchCGK","Promise","all","mintsDetails","mapMintsDetails","Map","forEach","set","axios","method","url","priceData","prices","time","val","CHART_CONFIGS","CHART_RANGE","week","day","month","year","DEFAULT_TOKEN","chartRange","setChartRange","setChartData","swapChartConfigs","borderColor","borderRadius","pointRadius","tooltip","pointHitRadius","pointHoverRadius","bidData","useSelector","state","bid","askData","ask","useMemo","mintInfo","symbols","fetchChartData","askTicket","bidTicket","askChart","bidChart","range","size","length","bidDay","askDay","Number","toFixed","dateCount","moment","unshift","Card","bordered","className","bodyStyle","paddingTop","Row","gutter","Col","flex","Space","direction","align","Typography","join","level","Radio","defaultValue","onChange","e","span","DECIMALS","BigInt","hops","onCallback","disabled","wrapAmount","loading","setLoading","slippage","settings","walletAddress","useWallet","wallet","handleSwap","window","sentre","swap","splt","srcMintAddress","srcMintInfo","dstMintAddress","dstMintInfo","poolAddress","poolData","deriveAssociatedAddress","srcAddress","dstAddress","routingAddresses","bidDecimals","bidAmount","utils","amount","askDecimals","askAmount","limit","route","handleWrapSol","wrapSol","onSwap","txId","notify","description","onClick","open","explorer","message","Button","block","BestRouteInfo","amounts","extractReserve","mintAddress","mint_a","mint_b","reserve_a","reserve_b","Error","buildPoolGraph","pools","graph","pool","has","get","findAllRoute","routes","startMint","endMint","pathTrace","mints","mapPool","includes","askMint","newPathTrace","push","parseHops","mapPoolData","bidMintAddress","askMintAddress","account","hop","findBestRouteFromBid","bestRoute","Array","curve","maxAskAmount","findBestRouteFromAsk","reversedHops","reverse","reversedHop","inverseCurve","minBidAmount","ORACLE","Swap","fee_ratio","tax_ratio","bidReserve","askReserve","inverseSwap","icon","Fragment","priceRate","shape","ExtraTypography","content","inReverse","setInReverse","slippageSettings","bidMintInfo","hopLastRoute","at","bidAmoutLastRoute","slippageRate","routeIcons","listRouteIcons","calculatePrice","bidMint","bidAccountAddr","accountAddress","accounts","useAccount","bidBalance","DEFAULT_WSOL","parseFloat","tokenProvider","useMint","usePool","setTokenInfo","fetchTokenInfo","token","Object","mint_lpt","tokenA","tokenB","tokens","useTokenProvider","i","DEFAULT_DATA","priceChange","rank","totalVolume","cgkData","setCgkData","fetchCgkData","MintPoolInfo","tvl","askCgk","useMintCgk","bidCgk","askMintInfo","askPoolData","bidPoolData","getMintTVL","mintAddr","askTVL","bidTVL","wrap","Divider","isSupportedMint","keyword","setKeyword","search","raw","filter","padding","Input","placeholder","suffix","marginRight","active","hoverable","marginLeft","margin","fontSize","setMints","supportedMints","keys","flat","item","pos","self","indexOf","onMints","allMints","getAvailablePoolAddresses","mintList","currentMintAddress","overflow","poolAddresses","onMint","visible","setVisible","setTimeout","forceCheck","Modal","onCancel","closeIcon","footer","destroyOnClose","centered","selectionInfo","updateBidData","createAsyncThunk","prioritized","reset","getState","prevPriority","priority","refPriority","createSlice","initialState","reducers","extraReducers","builder","addCase","fulfilled","payload","assign","forwardRef","max","props","error","setError","setCursor","innerRef","onAmount","onError","er","clearTimeout","test","setSelectionRange","Tooltip","title","selectionStart","DEFAULT_INFO","useMintSelection","setSelectionInfo","getSelectionInfo","setDecimals","getMint","fetchTokenDecimals","useMintAccount","accountAddr","lamports","useMintDecimals","balance","shared","appId","process","senhub","devnet","node","spltAddress","splataAddress","testnet","mainnet","bidDefault","askDefault","manifest","development","staging","production","env","sol","net","WORMHOLE_COLOR","dispatch","useDispatch","selectionDefault","balanceTransfer","estimateFee","onSelectionInfo","totalValue","Tag","color","randomColor","prefix","updateAskData","ParsedType","spacing","iconSize","SentreIcon","Option","placement","justify","NAME","updateSettings","Popover","overlayInnerStyle","width","trigger","updateRouteInfo","routeState","setBestRoute","onSwitch","bidPriority","bidRest","askPriority","askRest","updateData","findRoute","bidPoolAddresses","askPoolAddresses","bidPools","askPools","updateRoute","STATUS_COLOR","success","pending","failed","tag","setColorTag","opacity","textTransform","HISTORY_COLUMN","dataIndex","render","text","fontWeight","shortenAddress","record","amountFrom","from","amountTo","to","TransLog","programId","programInfo","signature","blockTime","owner","actionType","actionTransfers","programTransfer","ActionInfo","preBalance","postBalance","ActionTransfer","source","destination","DEFAULT_LIMIT","Solana","conn","connection","lastSignature","before","this","getConfirmedSignaturesForAddress2","signatures","confirmedTransactions","promiseTransGroup","offset","skip","signaturesGroup","slice","getParsedConfirmedTransactions","transGroups","transGroup","concat","currentTime","Date","getTime","secondFrom","secondTo","Math","floor","programPublicKey","PublicKey","isStop","fetchSignatures","confirmedSignatureInfos","info","fetchConfirmTransaction","TimeFormat","SECOND_PER_MILLISECOND","DateHelper","milliSeconds","valueOf","dateFormat","date","dayAmount","subtract","fromSeconds","add","YMD","seconds","setMilliSeconds","ymd","ymdFrom","ymdTo","dates","dateFrom","fromYmd","dateTo","addDay","TransLogService","solana","fetchTransactions","confirmedTrans","transLogs","trans","log","parseTransLog","meta","transaction","postTokenBalances","preTokenBalances","err","postBalances","preBalances","innerInstructionData","innerInstructions","instructions","instructionData","transLog","toString","mapAccount","parseAccountInfo","accountKeys","isParsedInstruction","parseAction","parsed","actions","actionTransfer","action","actionParsed","Transfer","parsedAction","parseActionTransfer","parsedTransfer","amountTransfer","mapAccountInfo","accountIndex","uiTokenAmount","pubkey","accountData","String","fetchHistorySwap","isLoadMore","swapAddress","historySwap","history","getAddress","myWalletAddress","transLogService","collect","transLogsData","historyItem","firstAction","lastAction","transactionId","key","amountRow","setAmountRow","isLoading","setIsLoading","fetchHistory","unwrap","Table","columns","dataSource","pagination","rowClassName","scroll","x","y","currentTransactionDataLength","lg","md","xs","bidAccount","configureStore","middleware","getDefaultMiddleware","bigintSerializationMiddleware","devTools","reducer","Page","UIProvider","MintProvider","PoolProvider","AccountProvider","WalletProvider","Provider","store","model","widgetConfig","Widget","register","getAccounts","ownerPublicKey","getTokenAccountsByOwner","spltProgramId","bulk","buf","toBase58","parseAccountData","getAccount","getAccountData","upsetAccount","deleteAccount","ui","flags","page","force","getMintData","upsetMint","deleteMint","senreg","extra","troubleshoot","appIds","isArray","fetchRegister","fetch","res","json","widgetIds","loadRegister","installManifest","newAppIds","newWidgetIds","supportedViews","newRegister","loadPage","_","db","PDB","createInstance","getItem","updatePage","pdb","setItem","installApp","uninstallApp","_appId","dropInstance","updateDashboard","addWidgets","removeWidget","taxmanAddress","getPools","getProgramAccounts","swapProgramId","filters","dataSize","memcmp","bytes","parsePoolData","getPool","getPoolData","upsetPool","setValue","setDisabled","getInfix","innerWidth","theme","hour","getHours","getTheme","infix","touchable","navigator","maxTouchPoints","visibleActionCenter","setTheme","resize","setVisibleActionCenter","initializeWindow","Lamports","SPLT","destroyWindow","disconnect","openWallet","closeWallet","connectWallet","getLamports","updateWallet","disconnectWallet","location","reload","DataLoader","instanceKey","JSON","stringify","mapInstance","instance","newSingleFlight","SingleFlight","requestKey","singleFlight","getSingleFlight","newRequest","RequestQueue","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","DEFAULT_SINGLE_FLIGHT_CONFIG","cacheData","SingleFlightCache","resolve","isFetch","request","reject","validateLimit","addRequestQueue","createTimeLogs","then","response","cache","resolves","catch","rejects","finally","delete","fetchRequestQueue","shift","clearInterval","setInterval","timeFarthest","timeNow","calls","now","storage","getNetwork","asyncWait","ms","num","delimiter","substring","addressOrTxId","numbro"],"sourceRoot":""}