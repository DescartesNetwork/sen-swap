{"version":3,"file":"static/js/415.c854f5d5.chunk.js","mappings":"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","sources":["shared/util.ts","app/page/chart/chart.tsx","shared/antd/ionicon/assets/icon-telegram.svg","shared/antd/ionicon/customs.tsx","shared/antd/ionicon/index.tsx","app/page/chart/GroupAvatar.tsx","app/page/chart/chartEmpty.tsx","shared/devTools.ts","os/store/ui.reducer.ts","os/store/flags.reducer.ts","shared/pdb/ipfs.ts","shared/pdb/index.ts","os/store/page.reducer.ts","os/store/wallet.reducer.ts","os/store/accounts.reducer.ts","os/store/pools.reducer.ts","os/store/search.reducer.ts","os/store/index.ts","shared/dataloader/constant.ts","shared/dataloader/request.ts","shared/dataloader/cache.ts","shared/dataloader/index.ts","shared/helper.ts","app/helper/cgk.ts","app/page/chart/index.tsx","app/components/swapButton.tsx","app/components/preview/routeAvatar.tsx","app/components/preview/inversePirce.tsx","app/components/preview/switchPriceRate.tsx","app/helper/router.ts","app/helper/oracle.ts","app/components/hooks/useSlippageRate.ts","app/components/preview/index.tsx","app/page/swap/swapReview.tsx","app/shared/hooks/useTokenProvider.ts","app/shared/components/mint/mintAvatar.tsx","app/shared/components/mint/mintSymbol.tsx","app/shared/hooks/useMintCgk.ts","app/page/swap/swapPoolInfo.tsx","app/static/images/sen.svg","app/components/poweredBy.tsx","app/components/settings/slippage.tsx","app/components/settings/advanced.tsx","app/model/settings.controller.ts","app/components/settings/index.tsx","app/components/selection/search.tsx","app/components/selection/mint.tsx","app/components/selection/mintSelection.tsx","app/components/selection/index.tsx","app/model/ask.controller.ts","app/shared/components/numericInput.tsx","app/shared/hooks/useMintDecimals.ts","app/shared/hooks/useMintAccount.ts","app/constant/sol.ts","app/configs/manifest.config.ts","app/configs/sol.config.ts","app/configs/swap.config.ts","app/configs/wormhole.config.ts","app/configs/index.ts","app/components/hooks/useMintSelection.ts","app/components/ask/index.tsx","app/components/wormHoleSupported.tsx","app/model/bid.controller.ts","app/constant/ethConfig.ts","app/constant/solConfig.ts","app/helper/wormhole.ts","app/components/bid/index.tsx","app/model/route.controller.ts","app/components/swap/swapAction.tsx","app/components/swap/index.tsx","app/page/swap/index.tsx","app/page/history/statusTag.tsx","app/page/history/column.tsx","app/lib/stat/entities/trans-log.ts","app/lib/stat/adapters/solana/client.ts","app/lib/stat/constants/transaction.ts","app/lib/stat/helpers/date.ts","app/lib/stat/logic/translog.ts","app/lib/stat/constants/sol.ts","app/model/history.controller.ts","app/page/history/index.tsx","app/page/index.tsx","app/widget/confirmSwap.tsx","app/widget/index.tsx","app/model/index.ts","app/bootstrap.app.tsx","os/configs/index.ts","os/configs/register.config.ts","os/configs/sol.config.ts","os/providers/tokenProvider/index.ts","os/providers/tokenProvider/supplementary.ts","os/store/mints.reducer.ts","shared/runtime.ts","shared/storage.ts"],"sourcesContent":["import { account } from '@senswap/sen-js'\nimport numbro from 'numbro'\nimport { net } from 'shared/runtime'\n\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value || !Number.isFinite(Number(value))) return numbro('0')\n  return numbro(value)\n}\n","import { useCallback, useState, useRef, useEffect } from 'react'\nimport Chart from 'chart.js'\nimport isEqual from 'react-fast-compare'\n\nimport { numeric } from 'shared/util'\ninterface Props {\n  labels?: (number | string)[]\n  chartData?: (number | string)[]\n  configs?: { backgroundColor?: string } & object\n  type?: string\n  disableAxe?: boolean\n  chartHeight?: string\n  chartId?: string\n}\n\nconst DEFAULT_BACKGROUND_COLOR = '#dadada'\n\nconst SenChart = ({\n  chartData = [],\n  labels = [],\n  type = 'line',\n  configs,\n  disableAxe = false,\n  chartId = 'sen_chart',\n}: Props) => {\n  const { backgroundColor } = configs || {}\n  const [isRebuildChart, setRebuildChart] = useState<boolean>(false)\n\n  const formatData = useCallback(\n    (\n      data: Array<number | number[] | undefined | null | any>,\n      label: Array<string | number>,\n      background?: string | CanvasGradient | undefined,\n    ): Chart.ChartData => ({\n      labels: label,\n      datasets: [{ ...configs, data, backgroundColor: background }],\n    }),\n    [configs],\n  )\n  // use a ref to store the chart instance since it it mutable\n  const chartRef = useRef<Chart | null>(null)\n\n  // callback creates the chart on the canvas element\n  const canvasCallback = (canvas: HTMLCanvasElement | null) => {\n    if (!canvas) return\n    const ctx = canvas.getContext('2d')\n    if (ctx && !isRebuildChart) {\n      // create new chart\n      chartRef.current = new Chart(ctx, {\n        type: type,\n        data: {\n          labels: [],\n          datasets: [\n            {\n              data: [],\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            xAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                },\n              },\n            ],\n            yAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                  beginAtZero: false,\n                  maxTicksLimit: 8,\n                  callback: function (value, index, values) {\n                    return numeric(value).format('0,0.[0]a')\n                  },\n                },\n              },\n            ],\n          },\n          plugins: {\n            legend: false,\n          },\n          hover: {\n            onHover: (event, elements) => {\n              const target = document.getElementById(chartId)\n              if (!target) return\n              target.style.cursor = elements[0] ? 'pointer' : 'default'\n            },\n          },\n        },\n      })\n      setRebuildChart(true)\n    }\n  }\n\n  const getBackground = useCallback(() => {\n    if (!chartRef || !backgroundColor) return DEFAULT_BACKGROUND_COLOR\n    const ctx = chartRef?.current?.canvas?.getContext('2d')\n    const gradient = ctx?.createLinearGradient(0, 0, 0, 180)\n    gradient?.addColorStop(0, backgroundColor)\n    gradient?.addColorStop(1, `${backgroundColor}00`)\n    const background = type === 'line' ? gradient : backgroundColor\n    return background\n  }, [backgroundColor, type])\n\n  useEffect(() => {\n    const chartInstance = chartRef.current\n    const dataInstace = chartInstance?.data.datasets?.find(({ data }) => data)\n    const compareData = isEqual(dataInstace?.data, chartData)\n    if (chartInstance && !compareData) {\n      chartInstance.data = formatData(chartData, labels, getBackground())\n      chartInstance?.update()\n    }\n  }, [chartData, formatData, getBackground, labels])\n\n  return <canvas id={chartId} height=\"180px\" ref={canvasCallback}></canvas>\n}\n\nexport default SenChart\n","var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgIconTelegram({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"inherit\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\",\n    width: \"50px\",\n    height: \"50px\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.137,6.552c-0.75-0.636-1.928-0.727-3.146-0.238l-0.002,0C41.708,6.828,6.728,21.832,5.304,22.445 c-0.259,0.09-2.521,0.934-2.288,2.814c0.208,1.695,2.026,2.397,2.248,2.478l8.893,3.045c0.59,1.964,2.765,9.21,3.246,10.758 c0.3,0.965,0.789,2.233,1.646,2.494c0.752,0.29,1.5,0.025,1.984-0.355l5.437-5.043l8.777,6.845l0.209,0.125 c0.596,0.264,1.167,0.396,1.712,0.396c0.421,0,0.825-0.079,1.211-0.237c1.315-0.54,1.841-1.793,1.896-1.935l6.556-34.077 C47.231,7.933,46.675,7.007,46.137,6.552z M22,32l-3,8l-3-10l23-17L22,32z\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgIconTelegram);\nexport default __webpack_public_path__ + \"static/media/icon-telegram.2450489f40d03000fe65fc1c6f238d85.svg\";\nexport { ForwardRef as ReactComponent };","import IconTele from './assets/icon-telegram.svg'\n\nexport const CUSTOM_ICONS: Record<string, string> = {\n  'logo-telegram': IconTele,\n}\n","/**\n * IonIcon 5\n * Credit https://ionic.io/ionicons\n */\n\nimport { forwardRef } from 'react'\nimport { CUSTOM_ICONS } from './customs'\n\n/**\n * IonIcon\n * @param name The icon name. You can find it here https://ionic.io/ionicons\n * @param className To modify the span class\n */\nconst IonIcon = forwardRef<\n  HTMLElement,\n  { name: string; className?: string } & any\n>(({ name, className, ...props }, ref) => {\n  const cln = className ? 'anticon ' + className : 'anticon'\n\n  return (\n    <span className={cln} {...props}>\n      {CUSTOM_ICONS[name] ? (\n        <ion-icon ref={ref} src={CUSTOM_ICONS[name]} />\n      ) : (\n        <ion-icon ref={ref} name={name} />\n      )}\n    </span>\n  )\n})\n\nexport default IonIcon\n","import { ReactNode } from 'react'\n\nimport { Avatar, AvatarProps } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst GroupAvatar = ({\n  icons = [],\n  defaultIcon = <IonIcon name=\"help-outline\" />,\n  ...rest\n}: {\n  icons?: (string | undefined)[]\n  defaultIcon?: ReactNode\n} & AvatarProps) => {\n  return (\n    <Avatar.Group>\n      {icons?.map((iconURI, idx) => (\n        <Avatar\n          src={iconURI}\n          key={idx}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n          {...rest}\n        >\n          {defaultIcon}\n        </Avatar>\n      ))}\n    </Avatar.Group>\n  )\n}\n\nexport default GroupAvatar\n","import { Col, Empty, Row } from 'antd'\n\nconst ChartEmpty = () => {\n  return (\n    <Row style={{ height: 170 }} align=\"middle\" justify=\"center\">\n      <Col>\n        <Empty />\n      </Col>\n    </Row>\n  )\n}\n\nexport default ChartEmpty\n","// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint'\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\nconst TIME_ZONE_MORNING = 6\nconst TIME_ZONE_NIGHT = 18\n\nexport type Infix = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\nexport type Theme = 'light' | 'dark'\n\nexport type State = {\n  theme: Theme\n  width: number\n  infix: Infix\n  touchable: boolean\n  visibleActionCenter: boolean\n}\n\nconst getInfix = (): Infix => {\n  const width = window.innerWidth\n  if (width < 576) return 'xs'\n  if (width < 768) return 'sm'\n  if (width < 992) return 'md'\n  if (width < 1200) return 'lg'\n  if (width < 1400) return 'xl'\n  return 'xxl'\n}\nconst isTouchable = () => {\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0\n}\nconst getTheme = (): Theme => {\n  const hour = new Date().getHours()\n  if (hour >= TIME_ZONE_MORNING && hour < TIME_ZONE_NIGHT) return 'light'\n  return 'dark'\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'ui'\nconst initialState: State = {\n  theme: getTheme(),\n  width: window.innerWidth,\n  infix: getInfix(),\n  touchable: isTouchable(),\n  visibleActionCenter: false,\n}\n\n/**\n * Actions\n */\n\nexport const setTheme = createAsyncThunk(\n  `${NAME}/setTheme`,\n  async (theme: Theme) => {\n    return { theme }\n  },\n)\n\nexport const resize = createAsyncThunk(`${NAME}/resize`, async () => {\n  const width = window.innerWidth\n  const infix = getInfix()\n  return { width, infix }\n})\n\nexport const setVisibleActionCenter = createAsyncThunk(\n  `${NAME}/setVisibleActionCenter`,\n  async (visible: boolean) => {\n    return { visibleActionCenter: visible }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setTheme.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        resize.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setVisibleActionCenter.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account } from '@senswap/sen-js'\n\n/**\n * Interface & Utility\n */\n\ntype State = {\n  visited: boolean\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'flags'\nconst initialState: State = {\n  visited: true,\n}\n\n/**\n * Actions\n */\n\nexport const setVisited = createAsyncThunk<\n  Partial<State>,\n  boolean,\n  { state: any }\n>(`${NAME}/setVisited`, async (visited, { getState }) => {\n  const {\n    wallet: { address },\n    flags: prevFlags,\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet')\n  return { ...prevFlags, visited }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      setVisited.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { create, isIPFS } from 'ipfs-core'\nimport { asyncWait } from 'shared/util'\n\nclass IPFS {\n  private _ipfs: any = async () => {\n    try {\n      if (!window.ipfs) window.ipfs = await create()\n      return window.ipfs\n    } catch (er) {\n      await asyncWait(500)\n      return await this._ipfs()\n    }\n  }\n\n  static isCID = (cid: string | undefined | null): boolean => {\n    try {\n      if (!cid) return false\n      return isIPFS.multihash(cid)\n    } catch (er) {\n      return false\n    }\n  }\n\n  get = async (cid: string) => {\n    if (!IPFS.isCID(cid)) throw new Error('Invalid CID')\n    const ipfs = await this._ipfs()\n    const stream = await ipfs.cat(cid)\n    let raw = ''\n    for await (const chunk of stream) raw += Buffer.from(chunk).toString()\n    const data = JSON.parse(raw)\n    return data\n  }\n\n  set = async (data: object): Promise<string> => {\n    if (!data) throw new Error('Empty data')\n    const raw = JSON.stringify(data)\n    const ipfs = await this._ipfs()\n    const { path: cid } = await ipfs.add(raw)\n    return cid as string\n  }\n}\n\nexport default IPFS\n","import localForage from 'localforage'\nimport { account } from '@senswap/sen-js'\nimport IPFS from './ipfs'\n\n/**\n * Persistent Database\n */\nclass PDB {\n  readonly dbName: string\n  private driver: any\n  private ipfs: IPFS\n\n  constructor(walletAddress: string) {\n    if (!account.isAddress(walletAddress)) throw new Error('Invalid address')\n    this.dbName = walletAddress\n    this.driver = [localForage.WEBSQL, localForage.LOCALSTORAGE]\n    this.ipfs = new IPFS()\n  }\n\n  /**\n   * Local\n   */\n\n  createInstance = (appId: string): LocalForage => {\n    return localForage.createInstance({\n      driver: this.driver,\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  dropInstance = async (appId: string): Promise<void> => {\n    const instance = this.createInstance(appId)\n    await instance.clear()\n    return await localForage.dropInstance({\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  all = async (): Promise<any> => {\n    let data: any = {}\n    const appIds = (\n      ((await this.createInstance('sentre').getItem('appIds')) as string[]) ||\n      []\n    )\n      .flat()\n      .concat(['sentre'])\n    for (const appId of appIds) {\n      data[appId] = {}\n      const instance = this.createInstance(appId)\n      await instance.iterate((value: string, key: string) => {\n        data[appId][key] = value\n      })\n    }\n    return data\n  }\n\n  /**\n   * Cloud\n   */\n\n  fetch = async (cid: string) => {\n    return await this.ipfs.get(cid)\n  }\n\n  backup = async () => {\n    const data = await this.all()\n    return await this.ipfs.set(data)\n  }\n\n  restore = async (cid: string) => {\n    // Download data\n    const data = await this.fetch(cid)\n    // Apply to storage\n    for (const appId in data) {\n      const instance = await this.createInstance(appId)\n      for (const key in data[appId]) {\n        const value = data[appId][key]\n        await instance.setItem(key, value)\n      }\n    }\n    return data\n  }\n}\n\nexport default PDB\n\n/**\n * High abtraction pdb for app\n */\nexport const createPDB = (walletArress: string, appId: string) => {\n  return account.isAddress(walletArress)\n    ? new PDB(walletArress).createInstance(appId)\n    : undefined\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account } from '@senswap/sen-js'\n\nimport PDB from 'shared/pdb'\nimport configs from 'os/configs'\n\nconst {\n  register: { senreg, extra },\n} = configs\n\n/**\n * Interface & Utility\n */\n\nexport type State = {\n  register: SenReg\n  appIds: AppIds\n  widgetIds: AppIds\n}\n\nconst troubleshoot = (register: SenReg, appIds?: AppIds): AppIds => {\n  if (!appIds || !Array.isArray(appIds)) return []\n  return appIds.filter((appId) => register[appId])\n}\nconst fetchRegister = async () => {\n  try {\n    const res = await fetch(senreg)\n    return await res.json()\n  } catch (er) {\n    return {}\n  }\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'page'\nconst initialState: State = {\n  register: {},\n  appIds: [],\n  widgetIds: [],\n}\n\n/**\n * Actions\n */\n\n// Must fetch register at very first of the process\nexport const loadRegister = createAsyncThunk(\n  `${NAME}/loadRegister`,\n  async () => {\n    const register = await fetchRegister()\n    return { register: { ...register, ...extra } }\n  },\n)\n\n// For sandbox only\nexport const installManifest = createAsyncThunk<\n  Partial<State>,\n  ComponentManifest,\n  { state: any }\n>(`${NAME}/installManifest`, async (manifest, { getState }) => {\n  const {\n    wallet: { address },\n    page: { appIds, widgetIds, register },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  if (appIds.includes(manifest.appId))\n    throw new Error('Cannot run sandbox for an installed application.')\n  const newAppIds: AppIds = [...appIds]\n  newAppIds.push(manifest.appId)\n  const newWidgetIds: AppIds = [...widgetIds]\n  if (manifest.supportedViews.includes('widget'))\n    newWidgetIds.push(manifest.appId)\n  const newRegister: SenReg = { ...register }\n  newRegister[manifest.appId] = manifest\n  return { appIds: newAppIds, widgetIds: newWidgetIds, register: newRegister }\n})\n\n/**\n * App Actions\n */\nexport const loadPage = createAsyncThunk<Partial<State>, void, { state: any }>(\n  `${NAME}/loadPage`,\n  async (_, { getState }) => {\n    const {\n      wallet: { address },\n      page: { register },\n    } = getState()\n\n    if (!account.isAddress(address))\n      throw new Error('Wallet is not connected yet.')\n    // Fetch user's apps\n    const db = new PDB(address).createInstance('sentre')\n    const appIds = troubleshoot(\n      register,\n      (await db.getItem('appIds')) || initialState.appIds,\n    )\n    const widgetIds = troubleshoot(\n      register,\n      (await db.getItem('widgetIds')) || initialState.widgetIds,\n    )\n    return { appIds, widgetIds }\n  },\n)\n\nexport const updatePage = createAsyncThunk<\n  Partial<State>,\n  AppIds,\n  { state: any }\n>(`${NAME}/updatePage`, async (appIds, { getState }) => {\n  const {\n    wallet: { address },\n    page: { register },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  appIds = troubleshoot(register, appIds)\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('appIds', appIds)\n  return { appIds }\n})\n\nexport const installApp = createAsyncThunk<\n  Partial<State>,\n  string,\n  { state: any }\n>(`${NAME}/installApp`, async (appId, { getState }) => {\n  const {\n    wallet: { address },\n    page: { register, appIds, widgetIds },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  if (appIds.includes(appId)) return {}\n  const newAppIds: AppIds = [...appIds]\n  newAppIds.push(appId)\n  const newWidgetIds = register[appId]?.supportedViews?.includes('widget')\n    ? [...widgetIds, appId]\n    : [...widgetIds]\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('appIds', newAppIds)\n  await pdb.createInstance('sentre').setItem('widgetIds', newWidgetIds)\n  return { appIds: newAppIds, widgetIds: newWidgetIds }\n})\n\nexport const uninstallApp = createAsyncThunk<\n  Partial<State>,\n  string,\n  { state: any }\n>(`${NAME}/uninstallApp`, async (appId, { getState }) => {\n  const {\n    wallet: { address },\n    page: { appIds, widgetIds },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  if (!appIds.includes(appId)) return {}\n  const newAppIds = appIds.filter((_appId: string) => _appId !== appId)\n  const newWidgetIds = widgetIds.filter((_appId: string) => _appId !== appId)\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('appIds', newAppIds)\n  await pdb.createInstance('sentre').setItem('widgetIds', newWidgetIds)\n  await pdb.dropInstance(appId)\n  return { appIds: newAppIds, widgetIds: newWidgetIds }\n})\n\n/**\n * Dashboard Actions\n */\nexport const updateDashboard = createAsyncThunk<\n  Partial<State>,\n  AppIds,\n  { state: any }\n>(`${NAME}/updateDashboard`, async (widgetIds, { getState }) => {\n  const {\n    wallet: { address },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('widgetIds', widgetIds)\n  return { widgetIds }\n})\n\nexport const addWidgets = createAsyncThunk<\n  Partial<State>,\n  AppIds,\n  { state: any }\n>(`${NAME}/addWidgets`, async (appIds, { getState }) => {\n  const {\n    wallet: { address },\n    page: { widgetIds },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet')\n  const newWidgetIds: AppIds = [...widgetIds, ...appIds]\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('widgetIds', newWidgetIds)\n  return { widgetIds: newWidgetIds }\n})\n\nexport const removeWidget = createAsyncThunk<\n  Partial<State>,\n  string,\n  { state: any }\n>(`${NAME}/removeWidget`, async (appId, { getState }) => {\n  const {\n    wallet: { address },\n    page: { widgetIds },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet.')\n  if (!widgetIds.includes(appId)) return {}\n  const newWidgetIds = widgetIds.filter((_appId: string) => _appId !== appId)\n  const pdb = new PDB(address)\n  await pdb.createInstance('sentre').setItem('widgetIds', newWidgetIds)\n  return { widgetIds: newWidgetIds }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        loadRegister.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        installManifest.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        loadPage.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updatePage.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        installApp.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        uninstallApp.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateDashboard.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        addWidgets.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        removeWidget.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { Lamports, SPLT, Swap, WalletInterface } from '@senswap/sen-js'\n\nimport configs from 'os/configs'\n\n/**\n * Interface & Utility\n */\n\nexport type State = {\n  visible: boolean\n  address: string\n  lamports: bigint\n}\n\nconst initializeWindow = async (wallet: WalletInterface | undefined) => {\n  const {\n    sol: { node, spltAddress, splataAddress, swapAddress },\n  } = configs\n  window.sentre = {\n    wallet,\n    lamports: new Lamports(node),\n    splt: new SPLT(spltAddress, splataAddress, node),\n    swap: new Swap(swapAddress, spltAddress, splataAddress, node),\n  }\n}\n\nconst destroyWindow = async () => {\n  if (window.sentre?.wallet) window.sentre.wallet.disconnect()\n  await initializeWindow(undefined)\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'wallet'\nconst initialState: State = {\n  visible: false,\n  address: '',\n  lamports: BigInt(0),\n}\n\n/**\n * Actions\n */\n\nexport const openWallet = createAsyncThunk(`${NAME}/openWallet`, async () => {\n  return { visible: true }\n})\n\nexport const closeWallet = createAsyncThunk(`${NAME}/closeWallet`, async () => {\n  return { visible: false }\n})\n\nexport const connectWallet = createAsyncThunk(\n  `${NAME}/connectWallet`,\n  async (wallet: any) => {\n    if (!wallet) throw new Error('Invalid wallet instance')\n    await initializeWindow(wallet)\n    const address = await wallet.getAddress()\n    const lamports = await window.sentre.lamports.getLamports(address)\n    return { address, lamports: BigInt(lamports), visible: false }\n  },\n)\n\nexport const updateWallet = createAsyncThunk(\n  `${NAME}/updateWallet`,\n  async ({ lamports }: Partial<State>) => {\n    return { lamports }\n  },\n)\n\nexport const disconnectWallet = createAsyncThunk(\n  `${NAME}/disconnectWallet`,\n  async () => {\n    await destroyWindow()\n    window.location.reload() // Reset all redux store\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        openWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        closeWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        connectWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        disconnectWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, AccountData } from '@senswap/sen-js'\n\n/**\n * Interface & Utility\n */\n\nexport type State = Record<string, AccountData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'accounts'\nconst initialState: State = {}\n\n/**\n * Actions\n */\n\nexport const getAccounts = createAsyncThunk(\n  `${NAME}/getAccounts`,\n  async ({ owner }: { owner: string }) => {\n    if (!account.isAddress(owner))\n      throw new Error('Invalid owner/wallet address')\n    const { splt } = window.sentre\n    const ownerPublicKey = account.fromAddress(owner)\n    const { value } = await splt.connection.getTokenAccountsByOwner(\n      ownerPublicKey,\n      { programId: splt.spltProgramId },\n    )\n    let bulk: State = {}\n    value.forEach(({ pubkey, account: { data: buf } }) => {\n      const address = pubkey.toBase58()\n      const data = splt.parseAccountData(buf)\n      return (bulk[address] = data)\n    })\n    return bulk\n  },\n)\n\nexport const getAccount = createAsyncThunk<\n  State,\n  { address: string },\n  { state: any }\n>(`${NAME}/getAccount`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid account address')\n  const {\n    accounts: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const { splt } = window.sentre\n  const raw = await splt.getAccountData(address)\n  return { [address]: raw }\n})\n\nexport const upsetAccount = createAsyncThunk<\n  State,\n  { address: string; data: AccountData },\n  { state: any }\n>(`${NAME}/upsetAccount`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteAccount = createAsyncThunk(\n  `${NAME}/deleteAccount`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getAccounts.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getAccount.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetAccount.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteAccount.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import { AccountInfo, PublicKey } from '@solana/web3.js'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, PoolData } from '@senswap/sen-js'\nimport configs from 'os/configs'\n\nconst {\n  sol: { taxmanAddress },\n} = configs\n\n/**\n * Interface & Utility\n */\n\nexport type State = Record<string, PoolData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'pools'\nconst initialState: State = {}\n\n/**\n * Actions\n */\n\nexport const getPools = createAsyncThunk(`${NAME}/getPools`, async () => {\n  const { swap } = window.sentre\n  // Get all pools\n  const value: Array<{ pubkey: PublicKey; account: AccountInfo<Buffer> }> =\n    await swap.connection.getProgramAccounts(swap.swapProgramId, {\n      filters: [\n        { dataSize: 257 },\n        { memcmp: { bytes: taxmanAddress, offset: 65 } },\n      ],\n    })\n  let bulk: State = {}\n  value.forEach(({ pubkey, account: { data: buf } }) => {\n    const address = pubkey.toBase58()\n    const data = swap.parsePoolData(buf)\n    bulk[address] = data\n  })\n  return bulk\n})\n\nexport const getPool = createAsyncThunk<\n  State,\n  { address: string },\n  { state: any }\n>(`${NAME}/getPool`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid pool address')\n  const {\n    pools: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const { swap } = window.sentre\n  const raw = await swap.getPoolData(address)\n  return { [address]: raw }\n})\n\nexport const upsetPool = createAsyncThunk<\n  State,\n  { address: string; data: PoolData },\n  { state: any }\n>(`${NAME}/upsetPool`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid pool address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getPools.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\ntype State = {\n  value: string\n  loading: boolean\n  disabled: boolean\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'search'\nconst initialState: State = {\n  value: '',\n  loading: false,\n  disabled: false,\n}\n\n/**\n * Actions\n */\n\nexport const setValue = createAsyncThunk<\n  Partial<State>,\n  string,\n  { state: any }\n>(`${NAME}/setValue`, async (value) => {\n  return { value }\n})\n\nexport const setLoading = createAsyncThunk<\n  Partial<State>,\n  boolean,\n  { state: any }\n>(`${NAME}/setLoading`, async (loading) => {\n  return { loading }\n})\n\nexport const setDisabled = createAsyncThunk<\n  Partial<State>,\n  boolean,\n  { state: any }\n>(`${NAME}/setDisabled`, async (disabled) => {\n  return { disabled }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setValue.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setLoading.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setDisabled.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport ui from './ui.reducer'\nimport flags from './flags.reducer'\nimport page from './page.reducer'\nimport wallet from './wallet.reducer'\nimport accounts from './accounts.reducer'\nimport mints from './mints.reducer'\nimport pools from './pools.reducer'\nimport search from './search.reducer'\n\n/**\n * Root store\n */\nconst store = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools('sentre'),\n  reducer: {\n    ui,\n    flags,\n    page,\n    wallet,\n    accounts,\n    mints,\n    pools,\n    search,\n  },\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type RootDispatch = typeof store.dispatch\nexport default store\n","export type LimitConfig = {\n  calls: number\n  time: number\n}\n\nexport type CacheConfig = {\n  ttl: number // millisecond\n}\n\nexport type SingleFlightConfig = {\n  limit?: LimitConfig\n  cache?: CacheConfig\n}\n\n// 10 request per 1 second\nexport const DEFAULT_LIMIT_CONFIG: LimitConfig = {\n  calls: 10,\n  time: 1000,\n}\n\n// 10 request per 1 second\nexport const DEFAULT_CACHE_CONFIG: CacheConfig = {\n  ttl: 30000,\n}\n\nexport const DEFAULT_SINGLE_FLIGHT_CONFIG: SingleFlightConfig = {\n  limit : DEFAULT_LIMIT_CONFIG,\n  cache: DEFAULT_CACHE_CONFIG\n}","export interface IRequestQueue {\n  key: string\n  add(resolve: any, reject: any): void\n  resolves(data: any): void\n  rejects(error: any): void\n}\n\nexport class RequestQueue implements IRequestQueue {\n  key = ''\n  private resolveQueue: any[] = []\n  private rejectQueue: any[] = []\n  constructor(key: string) {\n    this.key = key\n  }\n\n  add(resolve: any, reject: any) {\n    this.resolveQueue.push(resolve)\n    this.rejectQueue.push(reject)\n  }\n\n  resolves(data: any) {\n    while (this.resolveQueue.length > 0) {\n      const resolve = this.resolveQueue.shift()\n      resolve(data)\n    }\n  }\n\n  rejects(error: any) {\n    while (this.rejectQueue.length > 0) {\n      const reject = this.rejectQueue.shift()\n      reject(error)\n    }\n  }\n}\n","import { DEFAULT_CACHE_CONFIG } from './constant'\nimport { CacheConfig } from './constant'\n\nexport class SingleFlightCache {\n  private static mapCache = new Map<string, any>()\n\n  static set(\n    key: string,\n    value: any,\n    configs: CacheConfig = DEFAULT_CACHE_CONFIG,\n  ) {\n    this.mapCache.set(key, value)\n    setTimeout(() => {\n      this.mapCache.delete(key)\n    }, configs.ttl)\n  }\n\n  static get(key: string) {\n    return this.mapCache.get(key)\n  }\n}\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey);\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(request: IRequestQueue, callback: () => Promise<any>) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    if (!this.config.limit) return false\n\n    const timeFarthest = this.timeLogs[0] || 0\n    const timeNow = new Date().getTime()\n    if (this.timeLogs.length < this.config.limit.calls) {\n      return true\n    }\n    const timeRange = timeNow - timeFarthest\n    const minTimeRange = this.config.limit.time\n    return timeRange > minTimeRange\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import { PoolData, utils } from '@senswap/sen-js'\nimport configs from 'os/configs'\nimport TokenProvider from 'os/providers/tokenProvider'\nimport store from 'os/store'\n\nimport { DataLoader } from './dataloader'\n\nconst SEN_TICKET = 'sen'\nconst TOKEN_PROVIDER = new TokenProvider()\n\n/**\n * Extract reserve from pool data\n */\nconst extractReserve = (mintAddress: string, poolData: PoolData): bigint => {\n  const { mint_a, mint_b, reserve_a, reserve_b } = poolData\n  if (mintAddress === mint_a) return reserve_a\n  if (mintAddress === mint_b) return reserve_b\n  return BigInt(0)\n}\n\nconst calcSenPrice = async () => {\n  const {\n    sol: { senPoolAddress, senAddress },\n  } = configs\n  const senInfo = {\n    icon: '',\n    symbol: 'SEN',\n    name: 'Sen',\n    address: senAddress,\n    rank: 0,\n    price: 0,\n    priceChange: 0,\n    totalVolume: 0,\n  }\n  const poolData = store.getState().pools[senPoolAddress]\n  if (!poolData) return senInfo\n\n  const { mint_a, mint_b } = poolData\n  const usdcAddress = senAddress === mint_a ? mint_b : mint_a\n  const [usdcTokenInfo, senTokenInfo] = await Promise.all(\n    [usdcAddress, senAddress].map((addr) => TOKEN_PROVIDER.findByAddress(addr)),\n  )\n  if (!usdcTokenInfo || !senTokenInfo) return senInfo\n\n  const usdcReserve = extractReserve(usdcAddress, poolData)\n  const senReserve = extractReserve(senAddress, poolData)\n  senInfo.price =\n    Number(utils.undecimalize(usdcReserve, usdcTokenInfo.decimals)) /\n    Number(utils.undecimalize(senReserve, senTokenInfo.decimals))\n\n  return senInfo\n}\n\nexport const fetchCGK = async (ticket = '') => {\n  if (ticket === SEN_TICKET) return calcSenPrice()\n\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n","import TokenProvider from 'os/providers/tokenProvider'\nimport { fetchCGK } from 'shared/helper'\nimport axios from 'axios'\n\nexport interface MintInfo {\n  address: string\n  symbol: string\n  price: number\n  decimals: number\n}\n\nexport type ChartParamsCGK = {\n  days: number\n  interval: string\n}\n\nconst DEFAULT_TOKEN_INFO = {\n  address: '',\n  chainId: 0,\n  decimals: 0,\n  name: '',\n  symbol: 'TOKEN',\n  extensions: undefined,\n  logoURI: '',\n  tags: [],\n}\n\nconst TOKEN_PROVIDER = new TokenProvider()\n\nconst cgk = {\n  getMintInfos: async (mintsAddress: string[]) => {\n    if (!TOKEN_PROVIDER || !mintsAddress) return\n    const promise = mintsAddress.map(async (mint) => {\n      let tokenInfo = await TOKEN_PROVIDER.findByAddress(mint)\n      if (!tokenInfo) tokenInfo = DEFAULT_TOKEN_INFO\n      const { address, symbol, decimals, extensions } = tokenInfo\n      const ticket = extensions?.coingeckoId\n\n      if (!ticket) return { address, symbol, decimals, price: 0 } // some mints don't have a ticket, so the price in cgk is 0\n\n      const { price } = await fetchCGK(ticket)\n      return { address, symbol, decimals, price }\n    })\n    const mintsDetails = await Promise.all(promise)\n    const mapMintsDetails = new Map<string, MintInfo>()\n    mintsDetails.forEach((mint) => {\n      mapMintsDetails.set(mint.address, mint)\n    })\n    return mapMintsDetails\n  },\n}\nexport default cgk\n\nexport const fetchMarketChart = async (\n  ticket: string,\n  params: ChartParamsCGK,\n) => {\n  try {\n    const data: any = await axios({\n      method: 'get',\n      url: `https://api.coingecko.com/api/v3/coins/${ticket}/market_chart?vs_currency=usd&days=${params.days}&interval=${params.interval}`,\n    })\n    const priceData: [number /*time*/, number /*price*/][] = data.data.prices\n    return priceData.map((data) => ({ time: data[0], val: data[1] }))\n  } catch (error) {\n    return []\n  }\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport moment from 'moment'\n\nimport { Card, Col, Radio, Row, Space, Typography } from 'antd'\nimport { AppState } from 'app/model'\nimport SenChart from './chart'\nimport GroupAvatar from './GroupAvatar'\nimport ChartEmpty from './chartEmpty'\nimport { ChartParamsCGK, fetchMarketChart } from 'app/helper/cgk'\nimport { numeric } from 'shared/util'\n\ntype ChartData = { label: string; val: number }\nenum Interval {\n  day = 'day',\n  week = 'week',\n  month = 'month',\n  year = 'year',\n}\nconst CHART_DATA_CONFIG: Record<\n  Interval,\n  {\n    amount: number\n    unit: moment.unitOfTime.DurationConstructor\n    format: string\n  }\n> = {\n  day: { amount: 4, unit: 'hours', format: 'HH:00' },\n  week: { amount: 1, unit: 'days', format: 'DD.MMM' },\n  month: { amount: 5, unit: 'days', format: 'DD.MMM' },\n  year: { amount: 2, unit: 'months', format: 'DD.MMM' },\n}\nconst MARKET_CONFIG: Record<Interval, ChartParamsCGK> = {\n  day: { days: 1, interval: 'hourly' },\n  week: { days: 7, interval: 'daily' },\n  month: { days: 31, interval: 'daily' },\n  year: { days: 365, interval: 'daily' },\n}\n\nconst CHART_CONFIGS = {\n  color: '#5D6CCF',\n  radius: 0,\n  hitRadius: 14,\n  tooltip: 'TVL',\n  transparent: 'transparent',\n}\n\nconst DEFAULT_TOKEN = 'UNKN'\n\nconst SwapChart = () => {\n  const [interval, setInterval] = useState(Interval.week)\n  const [chartData, setChartData] = useState<{ label: string; val: number }[]>(\n    [],\n  )\n\n  const swapChartConfigs = {\n    borderColor: CHART_CONFIGS.transparent,\n    borderRadius: CHART_CONFIGS.radius,\n    pointRadius: CHART_CONFIGS.radius,\n    tooltip: CHART_CONFIGS.tooltip,\n    pointHitRadius: CHART_CONFIGS.hitRadius,\n    pointHoverRadius: CHART_CONFIGS.radius,\n    backgroundColor: CHART_CONFIGS.color,\n  }\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n\n  const icons = useMemo(() => {\n    return [bidData.mintInfo?.logoURI, askData.mintInfo?.logoURI]\n  }, [askData.mintInfo?.logoURI, bidData.mintInfo?.logoURI])\n  const symbols = useMemo(() => {\n    return [\n      bidData.mintInfo?.symbol || DEFAULT_TOKEN,\n      askData.mintInfo?.symbol || DEFAULT_TOKEN,\n    ]\n  }, [askData.mintInfo?.symbol, bidData.mintInfo?.symbol])\n\n  const parseChartDay = useCallback(\n    (marketData: { time: number; val: number }[]) => {\n      const chartData: ChartData[] = []\n      const { format, amount, unit } = CHART_DATA_CONFIG[interval]\n      let displayTime = moment()\n      // parser data\n      for (const data of marketData.reverse()) {\n        const chartTime = moment(data.time).format(format)\n        if (chartTime === displayTime.format(format)) {\n          const now = moment().format(format)\n          let label = chartTime\n          if (chartTime === now) label = moment().format('HH:mm')\n          if (displayTime)\n            chartData.unshift({\n              label: label,\n              val: data.val,\n            })\n          displayTime = displayTime.subtract(amount, unit)\n        } else if (chartTime === '00:00') {\n          chartData.unshift({\n            label: displayTime.format('DD.MMM'),\n            val: data.val,\n          })\n        }\n      }\n      setChartData(chartData)\n    },\n    [interval],\n  )\n\n  const parseChartDaily = useCallback(\n    (marketData: { time: number; val: number }[]) => {\n      const chartData: ChartData[] = []\n      const { format, amount, unit } = CHART_DATA_CONFIG[interval]\n      let displayTime = moment()\n      // parser data\n      for (const data of marketData.reverse()) {\n        const chartTime = moment(data.time).format(format)\n        if (chartTime === displayTime.format(format)) {\n          displayTime = displayTime.subtract(amount, unit)\n          chartData.unshift({\n            label: chartTime,\n            val: data.val,\n          })\n          continue\n        }\n      }\n      setChartData(chartData)\n    },\n    [interval],\n  )\n\n  const fetchChartData = useCallback(async () => {\n    // fetch data market from coingecko\n    const askTicket = askData.mintInfo?.extensions?.coingeckoId\n    const bidTicket = bidData.mintInfo?.extensions?.coingeckoId\n    if (!askTicket || !bidTicket) return setChartData([])\n\n    const marketConfig = MARKET_CONFIG[interval]\n    const [bidChartData, askChartData] = await Promise.all([\n      fetchMarketChart(bidTicket, marketConfig),\n      fetchMarketChart(askTicket, marketConfig),\n    ])\n    // parser market data\n    const marketData: { time: number; val: number }[] = []\n    for (let idx = bidChartData.length - 1; idx >= 0; idx--) {\n      const bidChart = bidChartData[idx]\n      const askChart =\n        askChartData[askChartData.length - bidChartData.length + idx]\n      if (!bidChart || !askChart) continue\n      marketData.unshift({\n        time: bidChart.time,\n        val: bidChart.val / askChart.val,\n      })\n    }\n    if (interval === Interval.day) return parseChartDay(marketData)\n    return parseChartDaily(marketData)\n  }, [\n    askData.mintInfo?.extensions?.coingeckoId,\n    bidData.mintInfo?.extensions?.coingeckoId,\n    interval,\n    parseChartDaily,\n    parseChartDay,\n  ])\n\n  useEffect(() => {\n    fetchChartData()\n  }, [fetchChartData])\n\n  const price = chartData.at(-1)?.val || 0\n  const priceUI = numeric(price).format(\n    price > 1 ? '0,0.[00]' : '0,0.[00000000]',\n  )\n\n  return (\n    <Card bordered={false} className=\"card-swap\" bodyStyle={{ paddingTop: 28 }}>\n      <Row gutter={[24, 24]}>\n        <Col flex=\"auto\">\n          <Row gutter={[20, 20]}>\n            <Col flex=\"auto\">\n              <Space size={4} align=\"center\">\n                <GroupAvatar icons={icons} size={24} />\n                <Typography.Text>{symbols.join('/')}</Typography.Text>\n              </Space>\n            </Col>\n            {chartData && !!chartData.length && (\n              <Col>\n                <Radio.Group\n                  defaultValue={Interval.week}\n                  onChange={(e) => setInterval(e.target.value)}\n                  className=\"chart-radio-btn\"\n                >\n                  <Radio.Button value={Interval.day}>1D</Radio.Button>\n                  <Radio.Button value={Interval.week}>1W</Radio.Button>\n                  <Radio.Button value={Interval.month}>1M</Radio.Button>\n                  <Radio.Button value={Interval.year}>1Y</Radio.Button>\n                </Radio.Group>\n              </Col>\n            )}\n            <Col span={24}>\n              <Typography.Title level={2}>\n                {price ? priceUI : ''}\n              </Typography.Title>\n            </Col>\n          </Row>\n        </Col>\n        <Col span={24}>\n          {chartData && !!chartData.length ? (\n            <SenChart\n              chartData={chartData?.map((data) => data.val)}\n              labels={chartData?.map((data) => data.label)}\n              configs={swapChartConfigs}\n            />\n          ) : (\n            <ChartEmpty />\n          )}\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapChart\n","import { useCallback, useState } from 'react'\nimport { utils } from '@senswap/sen-js'\nimport { useSelector } from 'react-redux'\n\nimport { Button } from 'antd'\nimport { HopData } from './preview/index'\nimport { AppState } from 'app/model'\nimport { useWallet } from 'senhub/providers'\nimport { explorer } from 'shared/util'\n\nconst DECIMALS = BigInt(1000000000)\n\nconst SwapButton = ({\n  hops,\n  onCallback = () => {},\n  disabled = false,\n  wrapAmount = BigInt(0),\n  hightImpact = false,\n}: {\n  hops: HopData[]\n  onCallback?: () => void\n  disabled?: boolean\n  wrapAmount: bigint\n  hightImpact?: boolean\n}) => {\n  const [loading, setLoading] = useState(false)\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const { slippage } = useSelector((state: AppState) => state.settings)\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  /**\n   * Swap function\n   */\n  const handleSwap = useCallback(async () => {\n    const { swap, splt, wallet } = window.sentre\n    if (!wallet) return\n    // Synthetize routings\n    const routingAddresses = await Promise.all(\n      hops.map(\n        async ({\n          srcMintInfo: { address: srcMintAddress },\n          dstMintInfo: { address: dstMintAddress },\n          poolData: { address: poolAddress },\n        }) => {\n          const srcAddress = await splt.deriveAssociatedAddress(\n            walletAddress,\n            srcMintAddress,\n          )\n          const dstAddress = await splt.deriveAssociatedAddress(\n            walletAddress,\n            dstMintAddress,\n          )\n          return {\n            poolAddress: poolAddress,\n            srcAddress: srcAddress,\n            dstAddress: dstAddress,\n          }\n        },\n      ),\n    )\n    // Compute limit\n    const {\n      srcMintInfo: { decimals: bidDecimals },\n    } = hops[0]\n    const bidAmount = utils.decimalize(bidData.amount, bidDecimals)\n    const {\n      dstMintInfo: { decimals: askDecimals },\n    } = hops[hops.length - 1]\n    const askAmount = utils.decimalize(askData.amount, askDecimals)\n    const limit =\n      (askAmount * (DECIMALS - utils.decimalize(slippage, 9))) / DECIMALS\n    // Execute swap\n    return await swap.route(bidAmount, limit, routingAddresses, wallet)\n  }, [hops, bidData, askData, slippage, walletAddress])\n\n  const handleWrapSol = async () => {\n    if (!wrapAmount) return\n    const { swap, wallet } = window.sentre\n    if (!wallet) return\n    return await swap.wrapSol(wrapAmount, wallet)\n  }\n\n  const onSwap = async () => {\n    try {\n      setLoading(true)\n      await handleWrapSol()\n      const { txId } = (await handleSwap()) || {}\n      window.notify({\n        type: 'success',\n        description: `Swap successfully. Click to view details.`,\n        onClick: () => window.open(explorer(txId || ''), '_blank'),\n      })\n      return onCallback()\n    } catch (er: any) {\n      return window.notify({ type: 'error', description: er.message })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Button\n      type=\"primary\"\n      onClick={onSwap}\n      disabled={disabled}\n      loading={loading}\n      block\n    >\n      {hightImpact ? 'Too Hight Price Impact' : 'Swap'}\n    </Button>\n  )\n}\n\nexport default SwapButton\n","import { Fragment, ReactNode } from 'react'\n\nimport { Avatar, Space } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst RouteAvatar = ({\n  icons = ['', ''],\n  size = 24,\n  defaultIcon = <IonIcon size={size} name=\"help-outline\" />,\n}: {\n  icons?: (string | undefined)[]\n  defaultIcon?: ReactNode\n  size?: number\n}) => {\n  return (\n    <Space>\n      {icons?.map((icon, idx) => (\n        <Fragment key={idx}>\n          <Avatar src={icon} size={size}>\n            {defaultIcon}\n          </Avatar>\n          {icons.length > idx + 1 && <IonIcon name=\"chevron-forward-outline\" />}\n        </Fragment>\n      ))}\n    </Space>\n  )\n}\nexport default RouteAvatar\n","import { Space, Typography } from 'antd'\nimport { State as BidState } from 'app/model/bid.controller'\nimport { State as AskState } from 'app/model/bid.controller'\nimport { numeric } from 'shared/util'\n\nconst InversePrice = ({\n  bidData,\n  askData,\n}: {\n  bidData?: BidState\n  askData?: AskState\n}) => {\n  const price = numeric(\n    Number(bidData?.amount) / Number(askData?.amount),\n  ).format('0,0.[000000]')\n  const symbols = `${bidData?.mintInfo?.symbol}/${askData?.mintInfo?.symbol}`\n  return (\n    <Space>\n      <Typography.Text>{price}</Typography.Text>\n      <Typography.Text>{symbols}</Typography.Text>\n    </Space>\n  )\n}\n\nexport default InversePrice\n","import { Button, Space, Typography } from 'antd'\nimport { Fragment, ReactNode } from 'react'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst SwitchPriceRate = ({\n  value = false,\n  onChange = () => {},\n  priceRate = <Fragment />,\n}: {\n  priceRate?: ReactNode\n  value?: boolean\n  onChange?: (value: boolean) => void\n}) => {\n  return (\n    <Space size={4}>\n      <Button\n        type=\"text\"\n        onClick={() => onChange(!value)}\n        shape=\"circle\"\n        icon={<IonIcon name=\"swap-horizontal-outline\" />}\n      />\n      <Typography.Text>{priceRate}</Typography.Text>\n    </Space>\n  )\n}\nexport default SwitchPriceRate\n","import { account, PoolData } from '@senswap/sen-js'\n\nimport { curve } from './oracle'\nimport { State as BidState } from 'app/model/bid.controller'\nimport { State as AskState } from 'app/model/ask.controller'\nimport { inverseCurve } from './oracle'\nimport { HopData } from 'app/components/preview/index'\nimport TokenProvider from 'os/providers/tokenProvider'\n\nconst POOL_ACTIVITY_STATUS = 1\nconst LIMIT_POOL_IN_ROUTE = 3\nconst TOKEN_PROVIDER = new TokenProvider()\n\nexport type ExtendedPoolData = PoolData & { address: string }\nexport type GraphPool = Map<string, Map<string, PoolData>>\nexport type RouteTrace = {\n  pools: string[]\n  mints: string[]\n}\nexport class BestRouteInfo {\n  hops: HopData[] = []\n  amounts: string[] = []\n  amount: string = ''\n}\n\n/**\n * Extract reserve from pool data\n * @param extractReserve\n * @param poolData\n * @returns\n */\nexport const extractReserve = (\n  mintAddress: string,\n  poolData: PoolData,\n): bigint => {\n  const { mint_a, mint_b, reserve_a, reserve_b } = poolData\n  if (mintAddress === mint_a) return reserve_a\n  if (mintAddress === mint_b) return reserve_b\n  throw new Error('Cannot find reserves')\n}\n\n/**\n *\n * @param param0\n * @param param1\n * @returns\n */\ntype Point = { point: bigint }\nexport const pointSorting = (\n  { point: firstPoint }: Point,\n  { point: secondPoint }: Point,\n) => {\n  if (firstPoint < secondPoint) return 1\n  if (firstPoint > secondPoint) return -1\n  return 0\n}\n\nexport const buildPoolGraph = (pools: Record<string, PoolData>): GraphPool => {\n  const graph = new Map<\n    /*mint_address*/ string,\n    Map</*pool_address*/ string, PoolData>\n  >()\n  for (const poolAddress in pools) {\n    const pool = pools[poolAddress]\n    if (pool?.state !== POOL_ACTIVITY_STATUS) continue\n    const mints = [pool.mint_a, pool.mint_b]\n    mints.forEach((mint) => {\n      if (!graph.has(mint)) graph.set(mint, new Map<string, PoolData>())\n      graph.get(mint)?.set(poolAddress, pool)\n    })\n  }\n  return graph\n}\n\n// because of Solana is limiting the number of calculation unit, so the system\n// must limit the list pool of root. Currently, the system set 3 pools in route\nexport const findAllRoute = (\n  routes: Array<RouteTrace>,\n  graph: GraphPool,\n  startMint: string,\n  endMint: string,\n  pathTrace: RouteTrace,\n) => {\n  const { pools, mints } = pathTrace\n  if (pools.length === LIMIT_POOL_IN_ROUTE) return\n  const mapPool = graph.get(startMint)\n  mapPool?.forEach((pool, poolAddress) => {\n    if (pools.includes(poolAddress)) return\n\n    let { mint_b: askMint } = pool\n    if (pool.mint_a !== startMint) {\n      askMint = pool.mint_a\n    }\n    if (mints.includes(askMint)) return\n\n    const newPathTrace = {\n      pools: [...pools, poolAddress],\n      mints: [...mints, askMint],\n    }\n    if (askMint === endMint) {\n      routes.push(newPathTrace)\n      return\n    }\n    findAllRoute(routes, graph, askMint, endMint, newPathTrace)\n  })\n}\n\nconst parseHops = async (\n  mapPoolData: Record<string, PoolData>,\n  pools: string[],\n  bidData: BidState,\n  askData: AskState,\n): Promise<HopData[]> => {\n  const bidMintAddress = bidData.mintInfo?.address\n  const askMintAddress = askData.mintInfo?.address\n  if (!account.isAddress(bidMintAddress) || !account.isAddress(askMintAddress))\n    return []\n\n  const hops: HopData[] = []\n  let srcMintAddress = bidMintAddress\n  let dstMintAddress = ''\n  for (const poolAddress of pools) {\n    const poolData = mapPoolData[poolAddress]\n    const { mint_a, mint_b } = poolData\n\n    if (srcMintAddress !== mint_a && srcMintAddress !== mint_b) return []\n\n    dstMintAddress = srcMintAddress === mint_a ? mint_b : mint_a\n    const srcMintInfo = await TOKEN_PROVIDER.findByAddress(srcMintAddress)\n    const dstMintInfo = await TOKEN_PROVIDER.findByAddress(dstMintAddress)\n    if (!srcMintInfo || !dstMintInfo) return []\n\n    const hop: HopData = {\n      poolData: { address: poolAddress, ...poolData },\n      srcMintInfo,\n      dstMintInfo,\n    }\n    srcMintAddress = dstMintAddress\n    hops.push(hop)\n  }\n  return hops\n}\n\nexport const findBestRouteFromBid = async (\n  mapPoolData: Record<string, PoolData>,\n  routes: RouteTrace[],\n  bidData: BidState,\n  askData: AskState,\n): Promise<BestRouteInfo> => {\n  let bestRoute = new BestRouteInfo()\n  for (let route of routes) {\n    const hops = await parseHops(mapPoolData, route.pools, bidData, askData)\n    if (!hops.length) continue\n    let amount = bidData.amount\n    const amounts = new Array<string>()\n\n    hops.forEach((hop) => {\n      amounts.push(amount)\n      amount = curve(amount, hop)\n    })\n    const maxAskAmount = Number(bestRoute.amount)\n    if (Number(amount) > maxAskAmount) {\n      bestRoute = {\n        hops,\n        amounts,\n        amount,\n      }\n    }\n  }\n  return bestRoute\n}\n\nexport const findBestRouteFromAsk = async (\n  mapPoolData: Record<string, PoolData>,\n  routes: RouteTrace[],\n  bidData: BidState,\n  askData: AskState,\n): Promise<BestRouteInfo> => {\n  let bestRoute = new BestRouteInfo()\n  for (let route of routes) {\n    try {\n      const hops = await parseHops(mapPoolData, route.pools, bidData, askData)\n      if (!hops.length) continue\n      const reversedHops = [...hops].reverse()\n      let amount = askData.amount\n      const amounts = new Array<string>()\n\n      for (const reversedHop of reversedHops) {\n        amount = inverseCurve(amount, reversedHop)\n        if (Number(amount) < 0) break\n        amounts.unshift(amount)\n      }\n      if (Number(amount) < 0) continue\n      const minBidAmount = Number(bestRoute.amount)\n      if (!minBidAmount || Number(amount) < minBidAmount) {\n        bestRoute = {\n          hops,\n          amounts,\n          amount,\n        }\n      }\n    } catch (error) {}\n  }\n  return bestRoute\n}\n","import { utils, Swap } from '@senswap/sen-js'\nimport { HopData } from 'app/components/preview/index'\nimport { extractReserve } from './router'\n\nexport const ORACLE = Swap.oracle\n\nexport const curve = (bidAmount: string, data: HopData): string => {\n  const {\n    srcMintInfo: { address: srcMintAddress, decimals: bidDecimals },\n    dstMintInfo: { address: dstMintAddress, decimals: askDecimals },\n  } = data\n  const { fee_ratio, tax_ratio } = data.poolData\n  const bidReserve = extractReserve(srcMintAddress, data.poolData)\n  const askReserve = extractReserve(dstMintAddress, data.poolData)\n  if (!bidReserve || !askReserve) return '0'\n\n  const { askAmount } = ORACLE.swap(\n    utils.decimalize(bidAmount, bidDecimals),\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return utils.undecimalize(askAmount, askDecimals)\n}\n\nexport const inverseCurve = (askAmount: string, data: HopData): string => {\n  const {\n    srcMintInfo: { address: srcMintAddress, decimals: bidDecimals },\n    dstMintInfo: { address: dstMintAddress, decimals: askDecimals },\n  } = data\n  const { fee_ratio, tax_ratio } = data.poolData\n  const bidReserve = extractReserve(srcMintAddress, data.poolData)\n  const askReserve = extractReserve(dstMintAddress, data.poolData)\n  const bidAmount = ORACLE.inverseSwap(\n    utils.decimalize(askAmount, askDecimals),\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return utils.undecimalize(bidAmount, bidDecimals)\n}\n\nexport const slippage = (bidAmount: string, data: HopData): bigint => {\n  const {\n    srcMintInfo: { address: srcMintAddress, decimals: bidDecimals },\n    dstMintInfo: { address: dstMintAddress },\n  } = data\n  const { fee_ratio, tax_ratio } = data.poolData\n  const bidReserve = extractReserve(srcMintAddress, data.poolData)\n  const askReserve = extractReserve(dstMintAddress, data.poolData)\n\n  const slippage = ORACLE.slippage(\n    utils.decimalize(bidAmount, bidDecimals),\n    bidReserve,\n    askReserve,\n    fee_ratio,\n    tax_ratio,\n  )\n  return slippage\n}\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\n\nimport { curve } from 'app/helper/oracle'\nimport { AppState } from 'app/model'\n\nexport const useSlippageRate = () => {\n  const { route } = useSelector((state: AppState) => state.route)\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askMount = useSelector((state: AppState) => state.ask)\n\n  const { amounts = [], hops = [] } = route || {}\n  const slippageRate = useMemo(() => {\n    let newAmount = bidData.amount\n    hops.forEach((hop, i) => {\n      const { dstMintInfo, srcMintInfo, poolData } = hop\n      const newPoolData = { ...poolData }\n      const srcAmount = amounts[i]\n      const srcDecimals = srcMintInfo.decimals\n      const dstAmount = amounts[i + 1] || askMount.amount\n      const dstDecimals = dstMintInfo.decimals\n      if (srcMintInfo.address === poolData.mint_a) {\n        newPoolData.reserve_a += utils.decimalize(srcAmount, srcDecimals)\n        newPoolData.reserve_b -= utils.decimalize(dstAmount, dstDecimals)\n      } else {\n        newPoolData.reserve_b += utils.decimalize(srcAmount, srcDecimals)\n        newPoolData.reserve_a -= utils.decimalize(dstAmount, dstDecimals)\n      }\n      newAmount = curve(newAmount, { ...hop, poolData: newPoolData })\n    })\n    return 1 - Number(newAmount) / Number(askMount.amount)\n  }, [amounts, askMount.amount, bidData.amount, hops])\n\n  return slippageRate\n}\n","import {\n  Fragment,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport { TokenInfo } from '@solana/spl-token-registry'\nimport { useSelector } from 'react-redux'\nimport { PoolData } from '@senswap/sen-js'\n\nimport { Col, Row, Typography } from 'antd'\nimport RouteAvatar from './routeAvatar'\nimport InversePrice from './inversePirce'\nimport SwitchPriceRate from './switchPriceRate'\n\nimport { AppState } from 'app/model'\nimport { numeric } from 'shared/util'\nimport { useSlippageRate } from '../hooks/useSlippageRate'\n\nexport type HopData = {\n  poolData: PoolData & { address: string }\n  srcMintInfo: TokenInfo\n  dstMintInfo: TokenInfo\n}\n\nconst ExtraTypography = ({\n  label = '',\n  content = '',\n}: {\n  label?: string\n  content?: string | ReactNode\n}) => {\n  return (\n    <Row>\n      <Col flex=\"auto\">\n        <Typography.Text type=\"secondary\">{label}</Typography.Text>\n      </Col>\n      <Col>\n        <span>{content}</span>\n      </Col>\n    </Row>\n  )\n}\n\nconst PreviewSwap = () => {\n  const [inReverse, setInReverse] = useState(false)\n  const { slippage: slippageSettings } = useSelector(\n    (state: AppState) => state.settings,\n  )\n  const { route } = useSelector((state: AppState) => state.route)\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const slippageRate = useSlippageRate()\n\n  const { mintInfo: bidMintInfo } = bidData\n\n  const routeIcons = useMemo(() => {\n    if (!route?.hops) return\n    const { logoURI } = bidMintInfo || {}\n    let listRouteIcons = [logoURI]\n    for (const hop of route?.hops) {\n      const {\n        dstMintInfo: { logoURI },\n      } = hop\n      if (logoURI) listRouteIcons.push(logoURI)\n    }\n    return listRouteIcons\n  }, [bidMintInfo, route?.hops])\n\n  const calculatePrice = useCallback(() => {\n    if (!bidData.amount || !askData.amount) return <Fragment />\n    if (inReverse) return <InversePrice bidData={askData} askData={bidData} />\n    return <InversePrice bidData={bidData} askData={askData} />\n  }, [askData, bidData, inReverse])\n\n  useEffect(() => {\n    calculatePrice()\n  }, [calculatePrice])\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Price impact\"\n          content={\n            <Typography.Text type=\"danger\">\n              {numeric(Number(slippageRate)).format('0.[0000]%')}\n            </Typography.Text>\n          }\n        />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Price\"\n          content={\n            <SwitchPriceRate\n              priceRate={calculatePrice()}\n              value={inReverse}\n              onChange={setInReverse}\n            />\n          }\n        />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Slippage Tolerance\"\n          content={numeric(slippageSettings).format('0.[00]%')}\n        />\n      </Col>\n      <Col span={24}>\n        <ExtraTypography\n          label=\"Route\"\n          content={<RouteAvatar icons={routeIcons} />}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default PreviewSwap\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { DEFAULT_WSOL, utils } from '@senswap/sen-js'\n\nimport { Card, Col, Row, Typography } from 'antd'\nimport SwapButton from 'app/components/swapButton'\nimport SwapInfo from 'app/components/preview'\n\nimport { AppState } from 'app/model'\nimport { useAccount } from 'senhub/providers'\nimport { useSlippageRate } from 'app/components/hooks/useSlippageRate'\n\nconst SwapActions = () => {\n  const { route } = useSelector((state: AppState) => state.route)\n  const {\n    amount: bidAmount,\n    mintInfo: bidMint,\n    accountAddress: bidAccountAddr,\n  } = useSelector((state: AppState) => state.bid)\n  const { amount: askAmount } = useSelector((state: AppState) => state.ask)\n  const { advanced } = useSelector((state: AppState) => state.settings)\n  const { accounts } = useAccount()\n  const slippageRate = useSlippageRate()\n\n  const hops = route?.hops || []\n\n  const wrapAmount = useMemo(() => {\n    const { amount: bidAccountAmount } = accounts[bidAccountAddr] || {}\n    const bidBalance = bidAccountAmount || BigInt(0)\n    if (!bidMint || !Number(bidAmount) || bidMint.address !== DEFAULT_WSOL)\n      return BigInt(0)\n    const bid = utils.decimalize(bidAmount, bidMint.decimals)\n    if (bid <= bidBalance) return BigInt(0)\n    return bid - bidBalance\n  }, [accounts, bidAccountAddr, bidAmount, bidMint])\n\n  const tooHightImpact = !advanced && slippageRate * 100 > 12.5 //just swap when the slippage rate is smaller than 12.5%\n  const disabled =\n    tooHightImpact ||\n    !hops.length ||\n    !parseFloat(bidAmount) ||\n    parseFloat(bidAmount) < 0 ||\n    !parseFloat(askAmount) ||\n    parseFloat(askAmount) < 0\n\n  return (\n    <Card bordered={false}>\n      <Row gutter={[24, 24]}>\n        <Col span={24}>\n          <Typography.Title level={5}>Review & Swap</Typography.Title>\n        </Col>\n        <Col span={24}>\n          <SwapInfo />\n        </Col>\n        <Col span={24}>\n          <SwapButton\n            hops={hops}\n            wrapAmount={wrapAmount}\n            disabled={disabled}\n            hightImpact={tooHightImpact}\n          />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapActions\n","import { useCallback, useEffect, useState } from 'react'\nimport { TokenInfo } from '@solana/spl-token-registry'\n\nimport { useMint, usePool } from 'senhub/providers'\n\nconst useTokenProvider = (mintAddress: string) => {\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n  const [tokenInfo, setTokenInfo] = useState<(TokenInfo | undefined)[]>([])\n\n  const fetchTokenInfo = useCallback(async () => {\n    if (!mintAddress) return setTokenInfo([undefined])\n    // Normal mint\n    const token = await tokenProvider.findByAddress(mintAddress)\n    if (token) return setTokenInfo([token])\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (!poolData) return setTokenInfo([undefined])\n    const { mint_a, mint_b } = poolData\n    const tokenA = await tokenProvider.findByAddress(mint_a)\n    const tokenB = await tokenProvider.findByAddress(mint_b)\n    return setTokenInfo([tokenA, tokenB])\n  }, [mintAddress, pools, tokenProvider])\n\n  useEffect(() => {\n    fetchTokenInfo()\n  }, [fetchTokenInfo])\n\n  return tokenInfo\n}\n\nexport default useTokenProvider\n","import { ReactNode } from 'react'\n\nimport { Avatar } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport useTokenProvider from '../../hooks/useTokenProvider'\n\nconst MintAvatar = ({\n  mintAddress,\n  size = 24,\n  icon = <IonIcon name=\"diamond-outline\" />,\n}: {\n  mintAddress: string\n  size?: number\n  icon?: ReactNode\n}) => {\n  const tokens = useTokenProvider(mintAddress)\n  return (\n    <Avatar.Group style={{ display: 'block' }} >\n      {tokens.map((token, i) => (\n        <Avatar\n          key={token?.address || i}\n          src={token?.logoURI}\n          size={size}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n        >\n          {icon}\n        </Avatar>\n      ))}\n    </Avatar.Group>\n  )\n}\n\nexport default MintAvatar\n","import { useMemo } from 'react'\n\nimport useTokenProvider from 'app/shared/hooks/useTokenProvider'\n\nconst MintSymbol = ({ mintAddress }: { mintAddress: string }) => {\n  \n  const tokens = useTokenProvider(mintAddress)\n  const symbols = useMemo(() => {\n    return tokens\n      .map((token) => {\n        if (!token) return 'UNKN'\n        return token.symbol\n      })\n      .join(' / ')\n  }, [tokens])\n  return <span>{symbols}</span>\n}\n\nexport default MintSymbol\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from 'senhub/providers'\nimport { fetchCGK } from 'shared/helper'\n\nconst DEFAULT_DATA = {\n  address: '',\n  icon: '',\n  name: 'TOKEN',\n  price: 0,\n  priceChange: 0,\n  rank: 0,\n  symbol: 'TOKEN',\n  totalVolume: 0,\n}\n\nconst useMintCgk = (mintAddress?: string): CgkData => {\n  const [cgkData, setCgkData] = useState<CgkData>(DEFAULT_DATA)\n  const { tokenProvider } = useMint()\n\n  const fetchCgkData = useCallback(async () => {\n    if (!mintAddress) return setCgkData(DEFAULT_DATA)\n    try {\n      const token = await tokenProvider.findByAddress(mintAddress)\n      const ticket = token?.extensions?.coingeckoId\n      const cgkData = await fetchCGK(ticket)\n      return setCgkData(cgkData)\n    } catch (error) {\n      return setCgkData(DEFAULT_DATA)\n    }\n  }, [mintAddress, tokenProvider])\n\n  useEffect(() => {\n    fetchCgkData()\n  }, [fetchCgkData])\n\n  return cgkData\n}\nexport default useMintCgk\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { account, PoolData, utils } from '@senswap/sen-js'\n\nimport { Card, Col, Divider, Row, Space, Typography } from 'antd'\nimport { MintAvatar } from 'app/shared/components/mint'\n\nimport { AppState } from 'app/model'\nimport { extractReserve } from 'app/helper/router'\nimport { numeric } from 'shared/util'\nimport useMintCgk from 'app/shared/hooks/useMintCgk'\n\nconst MintPoolInfo = ({\n  mintAddress = '',\n  tvl = '',\n  symbol = '',\n  price,\n  format = '0,0.[00]a',\n}: {\n  mintAddress?: string\n  tvl?: string | number\n  symbol?: string\n  price?: number\n  format?: string\n}) => {\n  return (\n    <Space direction=\"vertical\" size={4}>\n      <MintAvatar mintAddress={mintAddress} />\n      <Space>\n        <Typography.Text>TVL:</Typography.Text>\n        <Typography.Title level={5}>\n          {numeric(tvl).format(format)}\n        </Typography.Title>\n        <Typography.Title level={5}>{symbol}</Typography.Title>\n      </Space>\n      <Typography.Text className=\"caption\" type=\"secondary\">\n        ~ ${numeric(price).format(format)}\n      </Typography.Text>\n    </Space>\n  )\n}\n\nconst SwapPoolInfo = () => {\n  const { route } = useSelector((state: AppState) => state.route)\n  const askMint = useSelector((state: AppState) => state.ask.mintInfo)\n  const bidMint = useSelector((state: AppState) => state.bid.mintInfo)\n  const askCgk = useMintCgk(askMint?.address)\n  const bidCgk = useMintCgk(bidMint?.address)\n\n  const { dstMintInfo: askMintInfo, poolData: askPoolData } =\n    route?.hops.at(-1) || {}\n  const { srcMintInfo: bidMintInfo, poolData: bidPoolData } =\n    route?.hops[0] || {}\n\n  const getMintTVL = (mintAddr?: string, poolData?: PoolData) => {\n    if (!account.isAddress(mintAddr) || !poolData) return BigInt(0)\n    return extractReserve(mintAddr, poolData)\n  }\n\n  const askTVL = useMemo(() => {\n    if (!askMintInfo?.decimals) return 0\n    const ask = getMintTVL(askMintInfo?.address, askPoolData)\n    return Number(utils.undecimalize(ask, askMintInfo.decimals))\n  }, [askMintInfo?.address, askMintInfo?.decimals, askPoolData])\n  const bidTVL = useMemo(() => {\n    if (!bidMintInfo?.decimals) return 0\n    const bid = getMintTVL(bidMintInfo?.address, bidPoolData)\n    return Number(utils.undecimalize(bid, bidMintInfo.decimals))\n  }, [bidMintInfo?.address, bidMintInfo?.decimals, bidPoolData])\n\n  return (\n    <Card bordered={false}>\n      <Row gutter={[16, 16]} wrap={false}>\n        <Col span={11}>\n          <MintPoolInfo\n            mintAddress={bidMint?.address}\n            tvl={bidTVL}\n            symbol={bidMint?.symbol}\n            price={bidTVL * bidCgk.price}\n          />\n        </Col>\n        <Col>\n          <Divider type=\"vertical\" style={{ height: '100%' }} />\n        </Col>\n        <Col span={11}>\n          <MintPoolInfo\n            mintAddress={askMint?.address}\n            tvl={askTVL}\n            symbol={askMint?.symbol}\n            price={askTVL * askCgk.price}\n          />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default SwapPoolInfo\n","var _defs, _path, _path2;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgSen({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    \"data-name\": \"Layer 1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    viewBox: \"0 0 283.465 283.465\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"linear-gradient\",\n    x1: -1222.504,\n    y1: -2883.343,\n    x2: -1135.428,\n    y2: -2970.419,\n    gradientTransform: \"translate(1300.837 3068.613)\",\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    stopColor: \"#f9575e\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.27,\n    stopColor: \"#f8555b\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.486,\n    stopColor: \"#f44f51\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.685,\n    stopColor: \"#ee4540\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.871,\n    stopColor: \"#e63728\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#de2a13\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"linear-gradient-2\",\n    x1: 1314.111,\n    y1: -895.144,\n    x2: 1389.882,\n    y2: -811.556,\n    gradientTransform: \"translate(1516.988 -707.868) rotate(180)\",\n    xlinkHref: \"#linear-gradient\"\n  }))), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Senswap logo FINAL\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.179,85.127H114a92.562,92.562,0,0,1,92.562,92.562v20.648a0,0,0,0,1,0,0H129.741a92.562,92.562,0,0,1-92.562-92.562V85.127A0,0,0,0,1,37.179,85.127Z\",\n    transform: \"translate(107.828 328.128) rotate(-135)\",\n    fill: \"url(#linear-gradient)\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M169.462,85.127h76.823a0,0,0,0,1,0,0v20.648a92.562,92.562,0,0,1-92.562,92.562H76.9a0,0,0,0,1,0,0V177.689a92.562,92.562,0,0,1,92.562-92.562Z\",\n    transform: \"translate(-52.89 155.776) rotate(-45)\",\n    fill: \"url(#linear-gradient-2)\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSen);\nexport default __webpack_public_path__ + \"static/media/sen.f2d012c907167ba613b035621b6423cb.svg\";\nexport { ForwardRef as ReactComponent };","import { Avatar, Space, Typography } from 'antd'\nimport SentreIcon from 'app/static/images/sen.svg'\n\nconst PoweredBy = ({\n  spacing = 4,\n  iconSize = 20,\n}: {\n  spacing?: number\n  iconSize?: number\n}) => {\n  return (\n    <Space size={spacing}>\n      <Typography.Text style={{ fontSize: 12, color: '#7A7B85' }}>\n        Powered by\n      </Typography.Text>\n      <Avatar src={SentreIcon} size={iconSize} />\n    </Space>\n  )\n}\n\nexport default PoweredBy\n","import { Row, Col, Button, Typography, Tooltip } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Option = ({\n  label,\n  value,\n  onClick,\n  active = false,\n}: {\n  label: string\n  value: number\n  onClick: (value: number) => void\n  active?: boolean\n}) => {\n  return (\n    <Typography.Text\n      style={{ cursor: 'pointer', color: active ? '#F9575E' : 'inherit' }}\n      onClick={() => onClick(value)}\n    >\n      {label}\n    </Typography.Text>\n  )\n}\n\nconst Slippage = ({\n  value,\n  onChange,\n}: {\n  value: number\n  onChange: (value: number) => void\n}) => {\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false}>\n          <Col flex=\"auto\">\n            <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>\n              Slippage Tolerance\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Tooltip\n              placement=\"right\"\n              title={\n                <span>\n                  Your transaction will be canceled if the confirmed price\n                  breaks the limited range of{' '}\n                  <strong style={{ color: '#f9575e' }}>{`${\n                    value * 100\n                  }%.`}</strong>\n                </span>\n              }\n            >\n              <Button\n                type=\"text\"\n                shape=\"circle\"\n                size=\"small\"\n                icon={<IonIcon name=\"information-circle-outline\" />}\n              />\n            </Tooltip>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false} justify=\"space-between\">\n          {[0.001, 0.005, 0.01, 0.05, 1].map((e, i) => (\n            <Col key={i}>\n              <Option\n                label={e === 1 ? 'Freely' : `${e * 100}%`}\n                value={e}\n                onClick={onChange}\n                active={e === value}\n              />\n            </Col>\n          ))}\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Slippage\n","import { Row, Col, Typography, Switch } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Advanced = ({\n  value,\n  onChange,\n}: {\n  value: boolean\n  onChange: (value: boolean) => void\n}) => {\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false}>\n          <Col flex=\"auto\">\n            <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>\n              Advanced Mode\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Switch\n              size=\"small\"\n              checkedChildren={<IonIcon name=\"calculator-outline\" />}\n              unCheckedChildren={<IonIcon name=\"sparkles-outline\" />}\n              checked={value}\n              onChange={onChange}\n            />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Typography.Paragraph style={{ fontSize: 12, textAlign: 'justify' }}>\n          <IonIcon name=\"warning-outline\" /> This advanced mode will disable the\n          automatic protection that often results in bad rates and lost funds.\n          Only use this mode if you know what you are doing.\n        </Typography.Paragraph>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Advanced\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nexport type State = {\n  slippage: number\n  advanced: boolean\n}\n\nconst NAME = 'settings'\nconst initialState: State = {\n  slippage: 0.01,\n  advanced: false,\n}\n\n/**\n * Actions\n */\n\nexport const updateSettings = createAsyncThunk(\n  `${NAME}/updateSettings`,\n  async (settings: Partial<State>) => ({ ...settings }),\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateSettings.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useDispatch, useSelector } from 'react-redux'\n\nimport { Row, Col, Button, Popover, Typography, Divider } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport PoweredBy from 'app/components/poweredBy'\nimport Slippage from './slippage'\nimport Advanced from './advanced'\n\nimport { updateSettings } from 'app/model/settings.controller'\nimport { AppDispatch, AppState } from 'app/model'\n\nconst Settings = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const { slippage, advanced } = useSelector(\n    (state: AppState) => state.settings,\n  )\n\n  const onSlippage = (slippage: number) => {\n    return dispatch(updateSettings({ slippage }))\n  }\n  const onAdvanced = (advanced: boolean) => {\n    return dispatch(updateSettings({ advanced }))\n  }\n\n  return (\n    <Row gutter={[4, 4]} justify=\"end\" align=\"middle\" wrap={false}>\n      <Col>\n        <PoweredBy />\n      </Col>\n      <Col>\n        <Divider type=\"vertical\" style={{ padding: 0 }} />\n      </Col>\n      <Col>\n        <Popover\n          placement=\"bottomRight\"\n          overlayInnerStyle={{ width: 300 }}\n          content={\n            <Row gutter={[8, 8]}>\n              <Col span={24}>\n                <Typography.Title level={5}>Settings</Typography.Title>\n              </Col>\n              <Col span={24}>\n                <Slippage value={slippage} onChange={onSlippage} />\n              </Col>\n              <Divider style={{ marginTop: 8, marginBottom: 8 }} />\n              <Col span={24}>\n                <Advanced value={advanced} onChange={onAdvanced} />\n              </Col>\n            </Row>\n          }\n          trigger=\"click\"\n        >\n          <Button\n            type=\"text\"\n            shape=\"circle\"\n            size=\"small\"\n            icon={<IonIcon name=\"settings-outline\" />}\n          />\n        </Popover>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Settings\n","import React, { useCallback, useEffect, useState } from 'react'\n\nimport { Card, Input, Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { TokenInfo } from '@solana/spl-token-registry'\nimport { useMint } from 'senhub/providers'\n\nconst KEYSIZE = 3\n\nconst Search = ({\n  onChange,\n  isSupportedMint,\n  disabled = false,\n}: {\n  onChange: (data: TokenInfo[] | null) => void\n  isSupportedMint: (mintAddress: string) => boolean\n  disabled?: boolean\n}) => {\n  const [keyword, setKeyword] = useState('')\n  const { tokenProvider } = useMint()\n\n  const search = useCallback(async () => {\n    if (!keyword || keyword.length < KEYSIZE) return onChange(null)\n    const raw = await tokenProvider.find(keyword)\n    const data = raw.filter(({ address }) => isSupportedMint(address))\n    return onChange(data)\n  }, [keyword, tokenProvider, onChange, isSupportedMint])\n\n  useEffect(() => {\n    search()\n  }, [search])\n\n  return (\n    <Card className=\"card-child\" bodyStyle={{ padding: 8 }} bordered={false}>\n      <Input\n        placeholder=\"Search\"\n        value={keyword}\n        size=\"small\"\n        bordered={false}\n        suffix={\n          <Button\n            type=\"text\"\n            style={{ marginRight: -7 }}\n            size=\"small\"\n            onClick={keyword ? () => setKeyword('') : () => {}}\n            icon={\n              <IonIcon name={keyword ? 'close-outline' : 'search-outline'} />\n            }\n            disabled={disabled}\n          />\n        }\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          setKeyword(e.target.value)\n        }\n        disabled={disabled}\n      />\n    </Card>\n  )\n}\n\nexport default Search\n","import { Row, Col, Space, Avatar, Typography, Card, Divider } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Mint = ({\n  logoURI,\n  symbol,\n  name,\n  onClick,\n  active = false,\n}: {\n  logoURI: string | undefined\n  symbol: string\n  name: string\n  onClick: () => void\n  active?: boolean\n}) => {\n  return (\n    <Card\n      className={`card-child${active ? ' active' : ''}`}\n      bodyStyle={{ padding: `8px 16px`, cursor: 'pointer' }}\n      bordered={active}\n      onClick={onClick}\n      hoverable\n    >\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Space size={12} style={{ marginLeft: -4 }}>\n            <Avatar\n              src={logoURI}\n              size={32}\n              style={{ backgroundColor: '#2D3355', border: 'none' }}\n            >\n              <IonIcon name=\"diamond-outline\" />\n            </Avatar>\n            <Typography.Text style={{ margin: 0 }}>{symbol}</Typography.Text>\n            <Divider type=\"vertical\" style={{ margin: 0 }} />\n            <Typography.Text\n              type=\"secondary\"\n              style={{ margin: 0, fontSize: 12 }}\n            >\n              {name}\n            </Typography.Text>\n          </Space>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default Mint\n","import { useState, useCallback, useMemo } from 'react'\nimport { TokenInfo } from '@solana/spl-token-registry'\nimport { account } from '@senswap/sen-js'\nimport LazyLoad from 'react-lazyload'\n\nimport { Row, Col, Typography, Divider } from 'antd'\nimport Search from './search'\nimport Mint from './mint'\n\nimport { useMint, usePool } from 'senhub/providers'\n\nexport type SelectionInfo = {\n  mintInfo?: TokenInfo\n  poolAddress?: string\n  poolAddresses: string[]\n}\n\nconst MintSelection = ({\n  value,\n  onChange,\n}: {\n  value: SelectionInfo\n  onChange: (value: SelectionInfo) => void\n}) => {\n  const [mints, setMints] = useState<Array<TokenInfo>>([])\n  const { pools } = usePool()\n  const { tokenProvider } = useMint()\n\n  // Compute mints that appear in all pools\n  const supportedMints = useMemo(() => {\n    if (!pools) return []\n    return Object.keys(pools)\n      .map((poolAddress) => {\n        const { mint_a, mint_b } = pools[poolAddress]\n        return [mint_a, mint_b]\n      })\n      .flat()\n      .filter((item, pos, self) => self.indexOf(item) === pos)\n  }, [pools])\n  const isSupportedMint = useCallback(\n    (mintAddress) => supportedMints.includes(mintAddress),\n    [supportedMints],\n  )\n  // Compoute mint list\n  const onMints = useCallback(\n    async (value: null | Array<TokenInfo>) => {\n      if (value) return setMints(value)\n      const raw = await tokenProvider.all()\n      const allMints = raw.filter(({ address }) => isSupportedMint(address))\n      return setMints(allMints)\n    },\n    [tokenProvider, isSupportedMint],\n  )\n  // Compute available pools\n  const getAvailablePoolAddresses = useCallback(\n    (tokenInfo: TokenInfo | undefined) => {\n      const mintAddress = tokenInfo?.address\n      if (!account.isAddress(mintAddress)) return []\n      return Object.keys(pools).filter((poolAddress) => {\n        const { mint_a, mint_b } = pools[poolAddress]\n        return [mint_a, mint_b].includes(mintAddress)\n      })\n    },\n    [pools],\n  )\n\n  /**\n   * Render mint list\n   */\n  const mintList = useMemo(() => {\n    // Return data to parent\n    const onMint = (tokenInfo: TokenInfo) => {\n      const poolAddresses = getAvailablePoolAddresses(tokenInfo)\n      return onChange({\n        mintInfo: tokenInfo,\n        poolAddress: undefined,\n        poolAddresses,\n      })\n    }\n    return (\n      <Row gutter={[16, 16]}>\n        {mints.map((mint, i) => {\n          const { logoURI, symbol, name, address } = mint\n          const { address: currentMintAddress } = value.mintInfo || {}\n          return (\n            <Col span={24} key={name + i}>\n              <LazyLoad height={48} overflow>\n                <Mint\n                  logoURI={logoURI}\n                  symbol={symbol}\n                  name={name}\n                  onClick={() => onMint(mint)}\n                  active={currentMintAddress === address}\n                />\n              </LazyLoad>\n            </Col>\n          )\n        })}\n      </Row>\n    )\n  }, [getAvailablePoolAddresses, onChange, mints, value])\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        <Typography.Title level={5}>Token Selection</Typography.Title>\n      </Col>\n      <Col span={24}>\n        <Divider style={{ margin: 0 }} />\n      </Col>\n      <Col span={24}>\n        <Search onChange={onMints} isSupportedMint={isSupportedMint} />\n      </Col>\n      <Col span={24}>\n        <Row gutter={[16, 16]} style={{ height: 300, overflow: 'auto' }}>\n          <Col span={24}>{mintList}</Col>\n          <Col span={24} />\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default MintSelection\n","import { useState, Fragment, useEffect } from 'react'\nimport { forceCheck } from 'react-lazyload'\n\nimport { Row, Col, Avatar, Space, Typography, Divider, Modal } from 'antd'\nimport MintSelection, { SelectionInfo } from './mintSelection'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst Selection = ({\n  value,\n  onChange,\n}: {\n  value: SelectionInfo\n  onChange: (value: SelectionInfo) => void\n}) => {\n  const [visible, setVisible] = useState(false)\n\n  useEffect(() => {\n    if (visible) setTimeout(forceCheck, 500)\n  }, [visible])\n\n  const onSelection = (selectionInfo: SelectionInfo) => {\n    setVisible(false)\n    return onChange(selectionInfo)\n  }\n\n  const { logoURI, symbol } = value?.mintInfo || {}\n  return (\n    <Fragment>\n      <Space style={{ cursor: 'pointer' }} onClick={() => setVisible(true)}>\n        <Avatar\n          size={24}\n          src={logoURI}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n        >\n          <IonIcon name=\"diamond-outline\" />\n        </Avatar>\n        <Typography.Text type=\"secondary\" style={{ margin: 0 }}>\n          {symbol || 'TOKEN'}\n        </Typography.Text>\n        <Divider type=\"vertical\" style={{ marginLeft: 4 }} />\n      </Space>\n      <Modal\n        visible={visible}\n        onCancel={() => setVisible(false)}\n        closeIcon={<IonIcon name=\"close\" />}\n        footer={null}\n        destroyOnClose={true}\n        centered={true}\n      >\n        <Row gutter={[16, 16]}>\n          <Col span={24}>\n            <MintSelection value={value} onChange={onSelection} />\n          </Col>\n        </Row>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default Selection\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { TokenInfo } from '@solana/spl-token-registry'\n\nexport type State = {\n  amount: string // Desired amount\n  accountAddress: string // Associated account to the selected token\n  mintInfo?: TokenInfo // Selected token\n  poolAddresses: string[] // List of available pools\n  priority: number\n}\n\nconst NAME = 'ask'\nconst initialState: State = {\n  amount: '',\n  accountAddress: '',\n  poolAddresses: [],\n  priority: 0,\n}\n\n/**\n * Actions\n */\nexport const updateAskData = createAsyncThunk<\n  Partial<State>,\n  Partial<State> & { prioritized?: boolean; reset?: boolean },\n  { state: any }\n>(\n  `${NAME}/updateAskData`,\n  async ({ prioritized, reset, ...askData }, { getState }) => {\n    const {\n      bid: { priority: refPriority },\n      ask: { priority: prevPriority },\n    } = getState()\n    const priority = reset ? 0 : prioritized ? refPriority + 1 : prevPriority\n    return { ...askData, priority }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateAskData.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import React, { useState, forwardRef, useCallback, useRef } from 'react'\n\nimport { Input, Tooltip, Space } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nlet timeoutId: ReturnType<typeof setTimeout> | undefined\n\nconst NumericInput = forwardRef(\n  ({ max, onChange, ...props }: any, ref: any) => {\n    const [error, setError] = useState('')\n    const [cursor, setCursor] = useState<number | null>(null)\n    const innerRef = useRef(ref)\n\n    // Handle amount\n    const onAmount = useCallback(\n      (val: string) => {\n        const onError = (er: string) => {\n          if (timeoutId) {\n            clearTimeout(timeoutId)\n            timeoutId = undefined\n          }\n          setError(er)\n          timeoutId = setTimeout(() => setError(''), 500)\n        }\n        const reg = /^\\d*(\\.\\d*)?$/\n        if (!reg.test(val)) return onError('Invalid character')\n        if (max && parseFloat(val) > parseFloat(max))\n          return onError('Not enough balance')\n        return onChange(val)\n      },\n      [max, onChange],\n    )\n    // Handle cursor\n    innerRef?.current?.setSelectionRange(cursor, cursor)\n    return (\n      <Tooltip\n        title={\n          <Space>\n            <IonIcon name=\"warning\" />\n            {error}\n          </Space>\n        }\n        visible={!!error}\n      >\n        <Input\n          {...props}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setCursor(e.target.selectionStart)\n            onAmount(e.target.value || '')\n          }}\n          ref={innerRef}\n        />\n      </Tooltip>\n    )\n  },\n)\n\nexport default NumericInput\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from 'senhub/providers'\n\nconst useMintDecimals = (mintAddress: string): number => {\n  const [decimals, setDecimals] = useState(0)\n  const { tokenProvider, getMint } = useMint()\n\n  const fetchTokenDecimals = useCallback(async () => {\n    if (!mintAddress) return setDecimals(0)\n    // Find in token provider\n    const token = await tokenProvider.findByAddress(mintAddress)\n    if (token) return setDecimals(token.decimals)\n    // Find on blockchain (slow than token provider)\n    try {\n      const mint = await getMint({ address: mintAddress })\n      return setDecimals(mint[mintAddress].decimals)\n    } catch (error) {}\n    return setDecimals(0)\n  }, [getMint, mintAddress, tokenProvider])\n\n  useEffect(() => {\n    fetchTokenDecimals()\n  }, [fetchTokenDecimals])\n\n  return decimals\n}\n\nexport default useMintDecimals\n","import { useMemo } from 'react'\n\nimport { utils } from '@senswap/sen-js'\nimport { useAccount, useWallet } from 'senhub/providers'\n\nimport { SOL_ADDRESS } from 'app/constant/sol'\nimport useMintDecimals from './useMintDecimals'\n\nexport const useMintAccount = (accountAddr: string) => {\n  const { accounts } = useAccount()\n  const { wallet } = useWallet()\n\n  const { amount, mint } = useMemo(() => {\n    // sol account\n    if (accountAddr === wallet.address)\n      return { amount: wallet.lamports, mint: SOL_ADDRESS }\n    // spl token account\n    return accounts[accountAddr] || {}\n  }, [accountAddr, accounts, wallet.address, wallet.lamports])\n\n  const decimals = useMintDecimals(mint)\n  const mintInfo = useMemo(() => {\n    return {\n      balance: utils.undecimalize(amount, decimals),\n      mint,\n      amount,\n      decimals,\n    }\n  }, [amount, decimals, mint])\n\n  return mintInfo\n}\n","export const SOL_ADDRESS = '11111111111111111111111111111111'\n\nexport const WSOL_ADDRESS = 'So11111111111111111111111111111111111111112'\n\nexport const LPT_DECIMALS = 9\n\nexport const SOL_DECIMALS = 9\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string' ||\n  typeof process.env.REACT_APP_SENHUB !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n  senhub: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n  senhub: process.env.REACT_APP_SENHUB,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  spltAddress: string\n  splataAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: 'https://api.devnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: 'https://api.testnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: 'https://api.mainnet-beta.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  bidDefault: string\n  askDefault: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    bidDefault: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    askDefault: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    bidDefault: '',\n    askDefault: '',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    bidDefault: '',\n    askDefault: '',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  wormholeAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    wormholeAddress: 'rRsXLHe7sBHdyKU3KY3wbcgWvoT1Ntqudf6e9PKusgb',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { env, net } from 'shared/runtime'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\nimport swap from './swap.config'\nimport wormhole from './wormhole.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n  swap: swap[net],\n  wormhole: wormhole[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { SelectionInfo } from './../selection/mintSelection'\nimport { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport { useMint, usePool, useWallet } from 'senhub/providers'\n\nconst DEFAULT_INFO = {\n  accountAddress: '',\n  poolAddresses: [],\n}\n\ntype MintSelection = SelectionInfo & {\n  accountAddress?: string\n}\n\nexport const useMintSelection = (mintAddress: string): MintSelection => {\n  const { wallet } = useWallet()\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n  const [selectionInfo, setSelectionInfo] =\n    useState<MintSelection>(DEFAULT_INFO)\n\n  const getSelectionInfo = useCallback(async () => {\n    if (!account.isAddress(mintAddress) || !Object.keys(pools).length)\n      return setSelectionInfo(DEFAULT_INFO)\n\n    const mintInfo = await tokenProvider.findByAddress(mintAddress)\n    if (!mintInfo) return setSelectionInfo(DEFAULT_INFO)\n    const { splt } = window.sentre\n    // get mint account\n    const accountAddress = await splt.deriveAssociatedAddress(\n      wallet.address,\n      mintAddress,\n    )\n    // get pools\n    const poolAddresses = Object.keys(pools).filter((poolAddress) => {\n      const { mint_a, mint_b } = pools[poolAddress]\n      return [mint_a, mint_b].includes(mintAddress)\n    })\n    setSelectionInfo({\n      accountAddress,\n      mintInfo,\n      poolAddress: '',\n      poolAddresses,\n    })\n  }, [mintAddress, pools, tokenProvider, wallet.address])\n\n  useEffect(() => {\n    getSelectionInfo()\n  }, [getSelectionInfo])\n\n  return selectionInfo\n}\n","import { useMemo, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account } from '@senswap/sen-js'\n\nimport { Row, Col, Typography, Space, Tooltip } from 'antd'\nimport { SelectionInfo } from '../selection/mintSelection'\nimport Selection from '../selection'\n\nimport { useWallet } from 'senhub/providers'\nimport IonIcon from 'shared/antd/ionicon'\nimport { numeric } from 'shared/util'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateAskData } from 'app/model/ask.controller'\nimport NumericInput from 'app/shared/components/numericInput'\nimport useMintCgk from 'app/shared/hooks/useMintCgk'\nimport { useMintAccount } from 'app/shared/hooks/useMintAccount'\nimport configs from 'app/configs'\nimport { useMintSelection } from '../hooks/useMintSelection'\n\nconst Ask = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const { wallet } = useWallet()\n  const askData = useSelector((state: AppState) => state.ask)\n\n  const { balance } = useMintAccount(askData.accountAddress)\n  const cgkData = useMintCgk(askData.mintInfo?.address)\n  const selectionDefault = useMintSelection(configs.swap.askDefault)\n\n  // Select default\n  useEffect(() => {\n    if (askData.accountAddress) return\n    dispatch(updateAskData(selectionDefault))\n  }, [askData.accountAddress, dispatch, selectionDefault])\n\n  // Compute selection info\n  const selectionInfo: SelectionInfo = useMemo(\n    () => ({\n      mintInfo: askData.mintInfo,\n      poolAddresses: askData.poolAddresses,\n    }),\n    [askData],\n  )\n\n  // Handle amount\n  const onAmount = (val: string) => {\n    return dispatch(updateAskData({ amount: val, prioritized: true }))\n  }\n\n  // Update ask data\n  const onSelectionInfo = async (selectionInfo: SelectionInfo) => {\n    const { splt } = window.sentre\n    const { address: mintAddress } = selectionInfo.mintInfo || {}\n    if (!account.isAddress(mintAddress))\n      return dispatch(updateAskData({ ...selectionInfo }))\n    const accountAddress = await splt.deriveAssociatedAddress(\n      wallet.address,\n      mintAddress,\n    )\n    dispatch(updateAskData({ accountAddress, ...selectionInfo }))\n  }\n\n  // calculator\n  const totalValue = cgkData.price * Number(askData.amount)\n\n  return (\n    <Row gutter={[8, 8]}>\n      <Col span={24}>\n        <Typography.Text>To</Typography.Text>\n      </Col>\n      <Col span={24}>\n        <NumericInput\n          placeholder=\"0\"\n          value={askData.amount}\n          onChange={onAmount}\n          size=\"large\"\n          prefix={\n            <Selection value={selectionInfo} onChange={onSelectionInfo} />\n          }\n        />\n      </Col>\n      <Col span={24}>\n        <Row gutter={[4, 4]} style={{ fontSize: 12, marginLeft: 2 }}>\n          <Col flex=\"auto\">\n            {cgkData.price ? (\n              <Tooltip title=\"The estimation is based on CoinGecko API.\">\n                <Space size={4}>\n                  <IonIcon name=\"information-circle-outline\" />\n                  <Typography.Text type=\"secondary\">\n                    {numeric(askData.amount).format('0,0.[0000]')}{' '}\n                    {selectionInfo.mintInfo?.symbol || 'TOKEN'} ~ $\n                    {numeric(totalValue).format('0,0.[0]a')}\n                  </Typography.Text>\n                </Space>\n              </Tooltip>\n            ) : null}\n          </Col>\n          <Col>\n            <Typography.Text type=\"secondary\">\n              Available: {numeric(balance || 0).format('0,0.[00]')}{' '}\n              {selectionInfo.mintInfo?.symbol || 'TOKEN'}\n            </Typography.Text>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Ask\n","import { Space, Tag, Typography } from 'antd'\nimport { randomColor } from 'shared/helper'\n\nconst WORMHOLE_COLOR = '#F9575E'\n\nconst WormHoleSupported = () => {\n  return (\n    <Space size={4}>\n      <Tag\n        style={{\n          margin: 0,\n          borderRadius: 4,\n          color: randomColor(WORMHOLE_COLOR),\n        }}\n        color={randomColor(WORMHOLE_COLOR, 0.2)}\n      >\n        Wormhole Bridge\n      </Tag>\n      <Typography.Text type=\"secondary\">Supported</Typography.Text>\n    </Space>\n  )\n}\n\nexport default WormHoleSupported\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { TokenInfo } from '@solana/spl-token-registry'\n\nexport type State = {\n  amount: string // Desired amount\n  accountAddress: string // Associated account to the selected token\n  mintInfo?: TokenInfo // Selected token\n  poolAddresses: string[] // List of available pools\n  priority: number\n}\n\nconst NAME = 'bid'\nconst initialState: State = {\n  amount: '',\n  accountAddress: '',\n  poolAddresses: [],\n  priority: 0,\n}\n\n/**\n * Actions\n */\n\nexport const updateBidData = createAsyncThunk<\n  Partial<State>,\n  Partial<State> & { prioritized?: boolean; reset?: boolean },\n  { state: any }\n>(\n  `${NAME}/updateBidData`,\n  async ({ prioritized, reset, ...bidData }, { getState }) => {\n    const {\n      bid: { priority: prevPriority },\n      ask: { priority: refPriority },\n    } = getState()\n    if (Number(bidData.amount) < 0) bidData.amount = undefined\n    const priority = reset ? 0 : prioritized ? refPriority + 1 : prevPriority\n    return { ...bidData, priority }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateBidData.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","export type EthAddressConfig = {\n  mainnet: string\n  goerli: string\n  ropsten: string\n}\n\nexport type EthChainIdConfig = {\n  mainnet: number\n  goerli: number\n  ropsten: number\n}\n\nexport type EtherNetwork = 'mainnet' | 'goerli'\n\nexport type EtherConfigSet = {\n  mainnet: string\n  goerli: string\n  ropsten: string\n}\n\nexport type MoralisStructure = {\n  url: string\n  apiKey: string\n}\n\nexport const ETH_BRIDGE_ADDRESS: EthAddressConfig = {\n  mainnet: '0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B',\n  goerli: '0x706abc4E45D419950511e474C7B9Ed348A4a716c',\n  ropsten: '0xC89Ce4735882C9F0f0FE26686c53074E09B0D550',\n}\n\nexport const ETH_TOKEN_BRIDGE_ADDRESS: EthAddressConfig = {\n  mainnet: '0x3ee18B2214AFF97000D974cf647E7C347E8fa585',\n  goerli: '0xf890982f9310df57d00f659cf4fd87e65aded8d7',\n  ropsten: '0x0290FB167208Af455bB137780163b7B7a9a10C16',\n}\n\nexport const CHAIN_ID_ETH: EthChainIdConfig = {\n  mainnet: 1,\n  goerli: 5,\n  ropsten: 3,\n}\n\nexport const MORALIS_INFO: MoralisStructure = {\n  url: 'https://deep-index.moralis.io/api/v2',\n  apiKey: 'N6yeIUl1FxCPZWbXyxLHWPAjSr6ahQeJTX3d19pSKCwHsLCzpWE7z1hilon4xDOd',\n}\n\nexport const INFURA_API_KEY: String = '5eb1b92f2065414d9dd21858fac54257'\n\nexport const INFURA_API_HTTP_URL: EtherConfigSet = {\n  mainnet: `https://mainnet.infura.io/v3/${INFURA_API_KEY}`,\n  goerli: `https://goerli.infura.io/v3/${INFURA_API_KEY}`,\n  ropsten: `https://ropsten.infura.io/v3/${INFURA_API_KEY}`,\n}\n\nexport const INFURA_API_WSS_URL: EtherConfigSet = {\n  mainnet: `wss://mainnet.infura.io/ws/v3/${INFURA_API_KEY}`,\n  goerli: `wss://goerli.infura.io/ws/v3/${INFURA_API_KEY}`,\n  ropsten: `wss://ropsten.infura.io/ws/v3/${INFURA_API_KEY}`,\n}\n","export type SolNetWork = 'mainnet' | 'devnet'\n\nexport type SolAddressConfig = {\n  mainnet: string\n  testnet: string\n  devnet: string\n}\n\nexport const SOL_BRIDGE_ADDRESS: SolAddressConfig = {\n  mainnet: 'worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth',\n  testnet: 'Brdguy7BmNB4qwEbcqqMbyV5CyJd2sxQNUn6NEpMSsUb',\n  devnet: '3u8hJUVTA4jH1wYAyUur7FFZVQ8H635K3tSHHF4ssjQ5',\n}\n\nexport const SOL_TOKEN_BRIDGE_ADDRESS: SolAddressConfig = {\n  mainnet: 'wormDTUJ6AWPNvk59vGQbDvGJmqbDTdgWgAqcLBCgUb',\n  testnet: 'A4Us8EhCC76XdGAN17L4KpRNEK423nMivVHZzZqFqqBg',\n  devnet: 'DZnkkTmCiFWfYTfT41X3Rd1kDgozqzxWaHqsw6W4x2oe',\n}\n","import {\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from '@certusone/wormhole-sdk'\nimport storage from 'shared/storage'\n\nimport {\n  EtherNetwork,\n  ETH_BRIDGE_ADDRESS,\n  ETH_TOKEN_BRIDGE_ADDRESS,\n} from 'app/constant/ethConfig'\nimport {\n  SolNetWork,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n} from 'app/constant/solConfig'\nimport { getIsWrappedAssetSol } from '@certusone/wormhole-sdk'\n\nexport const getSolNetwork = () => {\n  const solNetwork = storage.get('network') || 'mainnet'\n  return solNetwork\n}\n\nexport const getEtherNetwork = () => {\n  const solNetwork = getSolNetwork()\n  const etherNetwork = solNetwork === 'mainnet' ? 'mainnet' : 'goerli'\n  return etherNetwork\n}\n\nexport const getEtherContext = () => {\n  const etherNetwork: EtherNetwork = getEtherNetwork()\n  return {\n    chainId: CHAIN_ID_ETH,\n    tokenBridgeAddress: ETH_TOKEN_BRIDGE_ADDRESS[etherNetwork],\n    bridgeAddress: ETH_BRIDGE_ADDRESS[etherNetwork],\n  }\n}\n\nexport const getSolContext = () => {\n  const solNetWork: SolNetWork = getSolNetwork()\n  return {\n    chainId: CHAIN_ID_SOLANA,\n    tokenBridgeAddress: SOL_TOKEN_BRIDGE_ADDRESS[solNetWork],\n    bridgeAddress: SOL_BRIDGE_ADDRESS[solNetWork],\n  }\n}\n\nexport const checkAttestedWormhole = async (mintAddress: string) => {\n  const solContext = getSolContext()\n  return getIsWrappedAssetSol(\n    window.sentre.splt.connection,\n    solContext.tokenBridgeAddress,\n    mintAddress,\n  )\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account, DEFAULT_WSOL, utils } from '@senswap/sen-js'\n\nimport { Row, Col, Typography, Button, Space, Tooltip } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport WormHoleSupported from '../wormHoleSupported'\nimport Selection from '../selection'\n\nimport { useMint, useWallet } from 'senhub/providers'\nimport { numeric } from 'shared/util'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateBidData } from 'app/model/bid.controller'\nimport NumericInput from 'app/shared/components/numericInput'\nimport { SelectionInfo } from '../selection/mintSelection'\nimport { useMintSelection } from '../hooks/useMintSelection'\nimport { useMintAccount } from 'app/shared/hooks/useMintAccount'\nimport useMintCgk from 'app/shared/hooks/useMintCgk'\nimport configs from 'app/configs'\nimport { checkAttestedWormhole } from 'app/helper/wormhole'\n\nconst Bid = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const {\n    wallet: { address: walletAddress, lamports },\n  } = useWallet()\n  const bidData = useSelector((state: AppState) => state.bid)\n  const { getMint } = useMint()\n  const [wormholeSupported, setWormholeSupported] = useState(false)\n\n  const { balance, decimals, mint, amount } = useMintAccount(\n    bidData.accountAddress,\n  )\n  const cgkData = useMintCgk(bidData.mintInfo?.address)\n  const selectionDefault = useMintSelection(configs.swap.bidDefault)\n\n  // Select default\n  useEffect(() => {\n    if (bidData.accountAddress) return\n    dispatch(updateBidData(selectionDefault))\n  }, [bidData.accountAddress, dispatch, selectionDefault])\n\n  // Compute selection info\n  const selectionInfo: SelectionInfo = useMemo(\n    () => ({\n      mintInfo: bidData.mintInfo,\n      poolAddresses: bidData.poolAddresses,\n    }),\n    [bidData],\n  )\n\n  // Compute human-readable balance\n  const balanceTransfer = useMemo((): string => {\n    if (mint !== DEFAULT_WSOL) return balance\n    // So estimate max = 0.01 fee -> multi transaction.\n    const estimateFee = utils.decimalize(0.01, decimals)\n    const max = lamports + amount - estimateFee\n    if (max <= amount) return utils.undecimalize(amount, decimals)\n    return utils.undecimalize(max, decimals)\n  }, [amount, balance, decimals, lamports, mint])\n\n  // Handle amount\n  const onAmount = useCallback(\n    (val: string) => {\n      return dispatch(updateBidData({ amount: val, prioritized: true }))\n    },\n    [dispatch],\n  )\n  // All in :)))\n  const onMax = () => onAmount(balance)\n\n  // Update bid data\n  const onSelectionInfo = async (selectionInfo: SelectionInfo) => {\n    const { splt } = window.sentre\n    const { address: mintAddress } = selectionInfo.mintInfo || {}\n    if (!account.isAddress(mintAddress))\n      return dispatch(updateBidData({ ...selectionInfo }))\n    const accountAddress = await splt.deriveAssociatedAddress(\n      walletAddress,\n      mintAddress,\n    )\n    return dispatch(updateBidData({ accountAddress, ...selectionInfo }))\n  }\n\n  // calculator\n  const totalValue = cgkData.price * Number(bidData.amount)\n\n  useEffect(() => {\n    ;(async () => {\n      const bidMintAddr = selectionInfo?.mintInfo?.address\n      if (!account.isAddress(bidMintAddr)) return\n      const wormholeSupported = await checkAttestedWormhole(bidMintAddr)\n      return setWormholeSupported(wormholeSupported)\n    })()\n  }, [getMint, selectionInfo])\n\n  return (\n    <Row gutter={[8, 8]}>\n      <Col flex=\"auto\">\n        <Typography.Text>From</Typography.Text>\n      </Col>\n      {wormholeSupported && (\n        <Col>\n          <WormHoleSupported />\n        </Col>\n      )}\n      <Col span={24}>\n        <NumericInput\n          placeholder=\"0\"\n          value={bidData.amount}\n          onChange={onAmount}\n          size=\"large\"\n          prefix={\n            <Selection value={selectionInfo} onChange={onSelectionInfo} />\n          }\n          suffix={\n            <Button\n              type=\"text\"\n              size=\"small\"\n              style={{ fontSize: 12, marginRight: -7 }}\n              onClick={onMax}\n            >\n              MAX\n            </Button>\n          }\n          max={balanceTransfer}\n        />\n      </Col>\n      <Col span={24}>\n        <Row gutter={[4, 4]} style={{ fontSize: 12, marginLeft: 2 }}>\n          <Col flex=\"auto\">\n            {cgkData.price ? (\n              <Tooltip title=\"The estimation is based on CoinGecko API.\">\n                <Space size={4}>\n                  <IonIcon name=\"information-circle-outline\" />\n                  <Typography.Text type=\"secondary\">\n                    {numeric(bidData.amount).format('0,0.[0000]')}{' '}\n                    {selectionInfo.mintInfo?.symbol || 'TOKEN'} ~ $\n                    {numeric(totalValue).format('0,0.[00]a')}\n                  </Typography.Text>\n                </Space>\n              </Tooltip>\n            ) : null}\n          </Col>\n          <Col>\n            <Typography.Text type=\"secondary\">\n              Available: {numeric(balanceTransfer || 0).format('0,0.[00]')}{' '}\n              {selectionInfo.mintInfo?.symbol || 'TOKEN'}\n            </Typography.Text>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Bid\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { HopData } from 'app/components/preview/index'\n\ntype RouteInfo = {\n  hops: HopData[]\n  amounts: string[]\n  amount: string\n}\n\nexport type State = {\n  route?: RouteInfo\n}\nconst ROUTE_DEFAULT = {\n  amount: '',\n  amounts: [],\n  hops: [],\n}\nconst NAME = 'route'\nconst initialState: State = {\n  route: ROUTE_DEFAULT,\n}\n\n/**\n * Actions\n */\nexport const updateRouteInfo = createAsyncThunk<\n  State,\n  { route: RouteInfo },\n  { state: any }\n>(`${NAME}/updateRouteInfo`, async ({ route }, { getState }) => {\n  const { route: routeState } = getState()\n  if (!route) return { route: routeState }\n  return { route }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      updateRouteInfo.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account } from '@senswap/sen-js'\n\nimport { Button, Col, Row } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport Ask from '../ask'\nimport Bid from '../bid'\n\nimport {\n  BestRouteInfo,\n  buildPoolGraph,\n  findAllRoute,\n  findBestRouteFromAsk,\n  findBestRouteFromBid,\n  RouteTrace,\n} from 'app/helper/router'\nimport { AppDispatch, AppState } from 'app/model'\nimport { updateAskData } from 'app/model/ask.controller'\nimport { updateBidData } from 'app/model/bid.controller'\nimport { updateRouteInfo } from 'app/model/route.controller'\nimport { usePool } from 'senhub/providers'\n\nconst SwapAction = ({ spacing = 12 }: { spacing?: number }) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const [bestRoute, setBestRoute] = useState(new BestRouteInfo())\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const { pools } = usePool()\n  /**\n   * Switch tokens\n   */\n  const onSwitch = useCallback(async () => {\n    const { amount: bidAmount, priority: bidPriority, ...bidRest } = bidData\n    const { amount: askAmount, priority: askPriority, ...askRest } = askData\n    const amount = bidPriority > askPriority ? bidAmount : askAmount\n    const updateData = bidPriority > askPriority ? updateAskData : updateBidData\n    await dispatch(updateBidData({ ...askRest, amount: '', reset: true }))\n    await dispatch(updateAskData({ ...bidRest, amount: '', reset: true }))\n    await dispatch(updateData({ amount, prioritized: true }))\n  }, [dispatch, askData, bidData])\n\n  /**\n   * Find optimal route\n   */\n  const findRoute = useCallback(async () => {\n    const {\n      poolAddresses: bidPoolAddresses,\n      mintInfo: bidMintInfo,\n      amount: bidAmount,\n      priority: bidPriority,\n    } = bidData\n    const {\n      poolAddresses: askPoolAddresses,\n      mintInfo: askMintInfo,\n      amount: askAmount,\n      priority: askPriority,\n    } = askData\n\n    const { address: bidMintAddress } = bidMintInfo || {}\n    const bidPools = bidPoolAddresses.map((address) => ({\n      address,\n      ...pools[address],\n    }))\n    const { address: askMintAddress } = askMintInfo || {}\n    const askPools = askPoolAddresses.map((address) => ({\n      address,\n      ...pools[address],\n    }))\n    let bestRoute = new BestRouteInfo()\n\n    if (\n      (!Number(bidAmount) && !Number(askAmount)) ||\n      !account.isAddress(bidMintAddress) ||\n      !account.isAddress(askMintAddress) ||\n      !bidPools.length ||\n      !askPools.length ||\n      !bidMintInfo\n    )\n      return setBestRoute(bestRoute)\n    // Use mode to find best route this mean the system find best route for end user.\n    // the best route return a route that user can receive maximum ask amount when swap\n    let routes = new Array<RouteTrace>()\n\n    const pathTrace: RouteTrace = {\n      mints: [bidMintAddress],\n      pools: [],\n    }\n    const graph = buildPoolGraph(pools)\n    findAllRoute(routes, graph, bidMintAddress, askMintAddress, pathTrace)\n    // No available route\n    if (!routes.length) return setBestRoute(bestRoute)\n\n    if (askPriority < bidPriority) {\n      bestRoute = await findBestRouteFromBid(pools, routes, bidData, askData)\n    } else\n      bestRoute = await findBestRouteFromAsk(pools, routes, bidData, askData)\n    return setBestRoute(bestRoute)\n  }, [askData, bidData, pools])\n\n  const updateRoute = useCallback(() => {\n    const bidPriority = bidData.priority\n    const askPriority = askData.priority\n    if (askPriority < bidPriority) {\n      dispatch(updateAskData({ amount: bestRoute.amount }))\n    }\n    if (bidPriority < askPriority) {\n      dispatch(updateBidData({ amount: bestRoute.amount }))\n    }\n    dispatch(updateRouteInfo({ route: { ...bestRoute } }))\n  }, [askData.priority, bestRoute, bidData.priority, dispatch])\n\n  useEffect(() => {\n    updateRoute()\n  }, [updateRoute])\n\n  useEffect(() => {\n    findRoute()\n  }, [findRoute])\n\n  return (\n    <Row gutter={[spacing, spacing]} justify=\"center\">\n      <Col span={24}>\n        <Bid />\n      </Col>\n      <Col>\n        <Button\n          size=\"small\"\n          icon={<IonIcon name=\"git-compare-outline\" />}\n          onClick={onSwitch}\n        />\n      </Col>\n      <Col span={24}>\n        <Ask />\n      </Col>\n    </Row>\n  )\n}\n\nexport default SwapAction\n","import { Col, Row } from 'antd'\nimport Settings from '../settings'\nimport SwapAction from './swapAction'\n\nconst Swap = () => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Row gutter={[8, 8]} justify=\"end\" align=\"middle\" wrap={false}>\n          <Col>\n            <Settings />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <SwapAction />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Swap\n","import { Card, Col, Row } from 'antd'\nimport SwapReview from './swapReview'\nimport SwapPoolInfo from './swapPoolInfo'\nimport SwapForm from 'app/components/swap'\n\nconst Swap = () => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Card bordered={false} className=\"card-swap\">\n          <SwapForm />\n        </Card>\n      </Col>\n      <Col span={24}>\n        <SwapReview />\n      </Col>\n      <Col span={24}>\n        <SwapPoolInfo />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Swap\n","import { Tag } from 'antd'\n\nconst STATUS_COLOR: Record<string, number[]> = {\n  success: [20, 224, 65],\n  pending: [212, 177, 6],\n  error: [215, 35, 17],\n  failed: [215, 35, 17],\n}\n\nconst StatusTag = ({ tag }: { tag: string }) => {\n  const setColorTag = (opacity?: number) => {\n    let color = STATUS_COLOR[tag]\n    return `rgba(${color[0]},  ${color[1]}, ${color[2]},${opacity || 1})`\n  }\n\n  return (\n    <Tag\n      style={{\n        margin: 0,\n        borderRadius: 4,\n        color: setColorTag(),\n        textTransform: 'capitalize',\n      }}\n      color={setColorTag(0.1)}\n    >\n      {tag}\n    </Tag>\n  )\n}\n\nexport default StatusTag\n","import { Button, Space, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'app/shared/components/mint'\nimport IonIcon from 'shared/antd/ionicon'\nimport { explorer, numeric, shortenAddress } from 'shared/util'\nimport StatusTag from './statusTag'\n\nconst FORMAT_AMOUNT = '0,00.[0000]a'\n\nexport const HISTORY_COLUMN = [\n  {\n    title: 'TIME',\n    dataIndex: 'time',\n  },\n  {\n    title: 'TRANSACTION',\n    dataIndex: 'transactionId',\n    render: (text: string) => (\n      <Space align=\"baseline\">\n        <Typography.Text\n          onClick={() => window.open(explorer(text), '_blank')}\n          style={{ fontWeight: 700, cursor: 'pointer' }}\n        >\n          {shortenAddress(text, 3, '...')}\n        </Typography.Text>\n        <Button\n          type=\"text\"\n          size=\"small\"\n          onClick={() => window.open(explorer(text), '_blank')}\n          icon={<IonIcon name=\"open-outline\" />}\n        />\n      </Space>\n    ),\n  },\n\n  {\n    title: 'BID',\n    dataIndex: 'bid',\n    render: (text: string, record: any) =>\n      !record.from ? (\n        '--'\n      ) : (\n        <Space size={8}>\n          <MintAvatar mintAddress={record.from} />\n          {numeric(record.amountFrom).format(FORMAT_AMOUNT)}\n          <MintSymbol mintAddress={record.from} />\n        </Space>\n      ),\n  },\n  {\n    title: 'ASK',\n    dataIndex: 'ask',\n    render: (text: string, record: any) =>\n      !record.to ? (\n        '--'\n      ) : (\n        <Space size={8}>\n          <MintAvatar mintAddress={record.to} />\n          {numeric(record.amountTo).format(FORMAT_AMOUNT)}\n          <MintSymbol mintAddress={record.to} />\n        </Space>\n      ),\n  },\n  {\n    title: 'STATUS',\n    dataIndex: 'status',\n    width: 100,\n    render: (text: string, record: any) => <StatusTag tag={record.status} />,\n  },\n]\n","export class TransLog {\n  programId: string = ''\n\n  programInfo: ProgramInfo | undefined\n\n  signature: string = ''\n\n  blockTime: number = 0\n\n  time: number = 0\n\n  owner: string = ''\n\n  actionType: string = ''\n\n  actionTransfers: Array<ActionTransfer> = []\n\n  programTransfer: Array<ActionTransfer> = []\n}\n\nexport class ActionInfo {\n  address: string = ''\n\n  // pool: string = ''\n\n  mint: string = ''\n\n  decimals: number = 0\n\n  preBalance: string = '0'\n\n  postBalance: string = '0'\n}\n/**\n * Amount is not same postBalance - preBalance\n * @postBalance and @preBalance are balance after all action (transaction)\n * @postBalance = @preBalance +- all @amount (multi amount in transaction)\n * @amount is value in 1 action\n */\nexport class ActionTransfer {\n  source: ActionInfo | undefined\n\n  destination: ActionInfo | undefined\n\n  amount: string = '0'\n}\ntype ProgramInfo = {\n  programId: string\n  data: string\n}\n","import {\n  ConfirmedSignatureInfo,\n  ConfirmedSignaturesForAddress2Options,\n  Connection,\n  ParsedConfirmedTransaction,\n  PublicKey,\n} from '@solana/web3.js'\n\nimport { OptionsFetchSignature } from '../../constants/transaction'\n\nconst DEFAULT_LIMIT = 700\nconst TRANSACTION_LIMIT = 150\n\nexport class Solana {\n  private conn: Connection = window.sentre.splt.connection\n\n  //Search for all signatures from last Signature and earlier\n  //So: If new collection (to now) -> last Signature = null\n  private async fetchSignatures(\n    address: PublicKey,\n    lastSignature?: string,\n    limit: number = DEFAULT_LIMIT,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    if (limit > DEFAULT_LIMIT) limit = DEFAULT_LIMIT\n    const options: ConfirmedSignaturesForAddress2Options = {\n      limit: limit,\n      before: lastSignature,\n    }\n    return this.conn.getConfirmedSignaturesForAddress2(address, options)\n  }\n\n  private async fetchConfirmTransaction(signatures: string[]) {\n    let confirmedTransactions: ParsedConfirmedTransaction[] = []\n    let limit = TRANSACTION_LIMIT\n\n    const promiseTransGroup = []\n    for (let offset = 0; offset <= signatures.length / limit; offset++) {\n      const skip = offset * limit\n      const signaturesGroup = signatures.slice(skip, skip + limit)\n      promiseTransGroup.push(\n        this.conn.getParsedConfirmedTransactions(signaturesGroup),\n      )\n    }\n\n    const transGroups = await Promise.all(promiseTransGroup)\n    for (const transGroup of transGroups) {\n      //@ts-ignore\n      confirmedTransactions = confirmedTransactions.concat(transGroup)\n    }\n    return confirmedTransactions\n  }\n\n  async fetchTransactions(\n    programId: string,\n    options: OptionsFetchSignature,\n  ): Promise<ParsedConfirmedTransaction[]> {\n    const currentTime = new Date().getTime() / 1000\n    let { secondFrom, secondTo, lastSignature, limit } = options\n    secondFrom = Math.floor(secondFrom || 0)\n    secondTo = Math.floor(secondTo || currentTime)\n\n    const programPublicKey = new PublicKey(programId)\n    let signatures: string[] = []\n    let isStop = false\n\n    while (!isStop) {\n      const confirmedSignatureInfos: ConfirmedSignatureInfo[] =\n        await this.fetchSignatures(programPublicKey, lastSignature, limit)\n      if (!confirmedSignatureInfos?.length || isStop) break\n      for (const info of confirmedSignatureInfos) {\n        const blockTime = info.blockTime\n        if (!blockTime || blockTime > secondTo) continue\n        if (blockTime < secondFrom) {\n          isStop = true\n          break\n        }\n        lastSignature = info.signature\n        signatures.push(info.signature)\n      }\n\n      if (limit && signatures.length >= limit) break\n      if (confirmedSignatureInfos?.length < DEFAULT_LIMIT) break\n    }\n    const confirmedTransactions = await this.fetchConfirmTransaction(signatures)\n    return confirmedTransactions\n  }\n}\n","export enum ParsedType {\n  Transfer = 'transfer',\n}\n\nexport type ParsedAction = {\n  type: ParsedType\n  info: ParsedInfoTransfer\n}\n\nexport type ParsedInfoTransfer = {\n  source: string\n  destination: string\n  amount: string\n  lamports: number\n}\n\nexport type OptionsFetchSignature = {\n  limit?: number\n  lastSignature?: string\n  secondFrom?: number\n  secondTo?: number\n}\n","import moment from 'moment'\n\nconst SECOND_PER_MILLISECOND = 1000\n\nexport enum TimeFormat {\n  YMD = 'YYYYMMDD',\n  SortableTimePattern = 'YYYY-MM-DD HH:mm:ss',\n}\n\nexport class DateHelper {\n  private milliSeconds: number = new Date().valueOf()\n\n  setMilliSeconds(milliSeconds: number) {\n    this.milliSeconds = milliSeconds\n  }\n\n  static fromSeconds(seconds: number): DateHelper {\n    const date = new DateHelper()\n    const milliSeconds = seconds * SECOND_PER_MILLISECOND\n    date.setMilliSeconds(milliSeconds)\n    return date\n  }\n\n  static fromYmd(ymd: number): DateHelper {\n    const date = new DateHelper()\n    const milliSeconds = moment(ymd, TimeFormat.YMD).valueOf()\n    date.setMilliSeconds(milliSeconds)\n    return date\n  }\n\n  static getListDate(ymdFrom: number, ymdTo: number): number[] {\n    const dates: number[] = []\n    let dateFrom = DateHelper.fromYmd(ymdFrom)\n    const dateTo = DateHelper.fromYmd(ymdTo)\n    while (dateFrom.ymd() <= dateTo.ymd()) {\n      dates.push(dateFrom.ymd())\n      dateFrom = dateFrom.addDay()\n    }\n    return dates\n  }\n\n  format(dateFormat: TimeFormat): string {\n    const date = new Date(this.milliSeconds)\n    return moment(date).format(dateFormat)\n  }\n\n  subtractDay(dayAmount: number = 1): DateHelper {\n    const milliSeconds = moment(this.milliSeconds)\n      .subtract(dayAmount, 'days')\n      .valueOf()\n    const date = DateHelper.fromSeconds(milliSeconds / SECOND_PER_MILLISECOND)\n    return date\n  }\n\n  addDay(dayAmount: number = 1): DateHelper {\n    const milliSeconds = moment(this.milliSeconds)\n      .add(dayAmount, 'days')\n      .valueOf()\n    const date = DateHelper.fromSeconds(milliSeconds / SECOND_PER_MILLISECOND)\n    return date\n  }\n\n  seconds(): number {\n    return (\n      (this.milliSeconds - (this.milliSeconds % SECOND_PER_MILLISECOND)) /\n      SECOND_PER_MILLISECOND\n    )\n  }\n\n  ymd(): number {\n    return Number(this.format(TimeFormat.YMD))\n  }\n\n  static today(format: string = TimeFormat.YMD): string {\n    return moment().format(format)\n  }\n}\n","//@ts-ignore\nimport {\n  ParsedConfirmedTransaction,\n  ParsedInstruction,\n  ParsedMessageAccount,\n  PartiallyDecodedInstruction,\n  TokenBalance,\n} from '@solana/web3.js'\nimport { account } from '@senswap/sen-js'\n\nimport { ActionInfo, ActionTransfer, TransLog } from '../entities/trans-log'\nimport { Solana } from '../adapters/solana/client'\nimport {\n  OptionsFetchSignature,\n  ParsedAction,\n  ParsedInfoTransfer,\n  ParsedType,\n} from '../constants/transaction'\nimport { DateHelper } from '../helpers/date'\nimport { SOL_ADDRESS, SOL_DECIMALS } from '../constants/sol'\n\ntype InstructionData = ParsedInstruction | PartiallyDecodedInstruction\n\nexport class TransLogService {\n  solana: Solana\n  constructor() {\n    this.solana = new Solana()\n  }\n\n  async collect(\n    programId: string,\n    configs: OptionsFetchSignature,\n    funcFilter?: (transLog: TransLog) => boolean,\n  ): Promise<TransLog[]> {\n    let { lastSignature, limit } = configs\n\n    let isStop = false\n    let transLogs: Array<TransLog> = []\n    let lastSignatureTmp = lastSignature\n\n    while (!isStop) {\n      const confirmedTrans: ParsedConfirmedTransaction[] =\n        await this.solana.fetchTransactions(programId, {\n          ...configs,\n          lastSignature: lastSignatureTmp,\n        })\n\n      for (const trans of confirmedTrans) {\n        lastSignatureTmp = trans.transaction.signatures[0]\n        const log = this.parseTransLog(trans)\n        if (log) transLogs.push(log)\n      }\n\n      if (funcFilter) {\n        transLogs = transLogs.filter((trans) => funcFilter(trans))\n\n        if (!confirmedTrans.length || isStop) break\n        if (limit && transLogs.length >= limit) {\n          isStop = true\n          break\n        }\n      } else break\n    }\n    return transLogs\n  }\n  private parseTransLog(\n    confirmedTrans: ParsedConfirmedTransaction,\n  ): TransLog | undefined {\n    const { blockTime, meta, transaction } = confirmedTrans\n    if (!blockTime || !meta) return\n    const { postTokenBalances, preTokenBalances, postBalances, preBalances } =\n      meta\n    const { signatures, message } = transaction\n\n    const innerInstructionData = meta.innerInstructions?.[0]?.instructions || []\n    const instructionData = message.instructions[0] || []\n\n    const transLog = new TransLog()\n    transLog.signature = signatures[0]\n    transLog.blockTime = blockTime\n    transLog.time = DateHelper.fromSeconds(blockTime).ymd()\n    transLog.programId = instructionData.programId.toString()\n\n    const mapAccount = this.parseAccountInfo(\n      message.accountKeys,\n      postTokenBalances || [],\n      preTokenBalances || [],\n      postBalances,\n      preBalances,\n    )\n    // system program transaction\n    if (this.isParsedInstruction(instructionData)) {\n      transLog.programTransfer = this.parseAction([instructionData], mapAccount)\n      return transLog\n    }\n    // smart contract transaction\n    transLog.actionTransfers = this.parseAction(\n      innerInstructionData,\n      mapAccount,\n    )\n    transLog.programInfo = {\n      programId: instructionData.programId.toString(),\n      data: (instructionData as PartiallyDecodedInstruction).data,\n    }\n    return transLog\n  }\n\n  private isParsedInstruction(instructionData: InstructionData) {\n    return (instructionData as ParsedInstruction).parsed !== undefined\n  }\n\n  private parseAction(\n    actions: InstructionData[],\n    mapAccount: Map<string, ActionInfo>,\n  ) {\n    const actionTransfer: ActionTransfer[] = []\n    for (const action of actions) {\n      if (!this.isParsedInstruction(action)) continue\n      const actionParsed: ParsedAction =\n        (action as ParsedInstruction).parsed || {}\n      switch (actionParsed.type) {\n        case ParsedType.Transfer:\n          const info: ParsedInfoTransfer = actionParsed.info\n          const parsedAction = this.parseActionTransfer(info, mapAccount)\n          if (parsedAction) actionTransfer.push(parsedAction)\n          break\n        default:\n          break\n      }\n    }\n    return actionTransfer\n  }\n\n  private parseActionTransfer(\n    parsedTransfer: ParsedInfoTransfer,\n    mapAccount: Map<string, ActionInfo>,\n  ): ActionTransfer | undefined {\n    const { source, destination, amount, lamports } = parsedTransfer\n    const amountTransfer = amount || lamports.toString()\n\n    if (\n      !amountTransfer ||\n      !mapAccount.has(source) ||\n      !mapAccount.has(destination)\n    )\n      return\n\n    const actionTransfer = new ActionTransfer()\n    actionTransfer.source = mapAccount.get(source)\n    actionTransfer.destination = mapAccount.get(destination)\n    actionTransfer.amount = amountTransfer\n    return actionTransfer\n  }\n\n  private parseAccountInfo(\n    accountKeys: Array<ParsedMessageAccount>,\n    postTokenBalances: Array<TokenBalance>,\n    preTokenBalances: Array<TokenBalance>,\n    postBalances: number[],\n    preBalances: number[],\n  ): Map<string, ActionInfo> {\n    const mapAccountInfo = new Map<string, ActionInfo>()\n\n    // Associated Address\n    for (const postBalance of postTokenBalances) {\n      const { accountIndex, mint, uiTokenAmount } = postBalance\n      const info = new ActionInfo()\n      info.address = accountKeys[accountIndex].pubkey.toString()\n      info.postBalance = uiTokenAmount.amount\n      info.mint = mint\n      info.decimals = uiTokenAmount.decimals\n      mapAccountInfo.set(info.address, info)\n    }\n\n    for (const preBalance of preTokenBalances) {\n      const { accountIndex, uiTokenAmount } = preBalance\n      const address = accountKeys[accountIndex].pubkey.toString()\n      const info = mapAccountInfo.get(address) || new ActionInfo()\n      info.preBalance = uiTokenAmount.amount\n      mapAccountInfo.set(info.address, info)\n    }\n\n    // Wallet address\n    accountKeys.forEach((accountData, idx) => {\n      const address = accountData.pubkey.toString()\n      if (!account.isAssociatedAddress(address)) {\n        const info = mapAccountInfo.get(address) || new ActionInfo()\n        info.address = address\n        info.mint = SOL_ADDRESS\n        info.postBalance = String(postBalances[idx] || 0) // lamports\n        info.preBalance = String(preBalances[idx] || 0) // lamports\n        info.decimals = SOL_DECIMALS\n        mapAccountInfo.set(info.address, info)\n      }\n    })\n\n    return mapAccountInfo\n  }\n}\n","export const SOL_ADDRESS = '11111111111111111111111111111111'\n\nexport const SOL_DECIMALS = 9\n","import moment from 'moment'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nimport { utils } from '@senswap/sen-js'\nimport { TransLogService } from 'app/lib/stat/logic/translog'\nimport configs from 'os/configs'\nimport { TransLog } from 'app/lib/stat/entities/trans-log'\n\nexport type State = {\n  historySwap: HistorySwap[]\n}\n\n/**\n * Store constructor\n */\n\nexport type HistorySwap = {\n  time: string\n  transactionId: string\n  from?: string\n  to?: string\n  amountFrom?: number\n  amountTo?: number\n  key: string\n  status: string\n  decimals: number\n}\n\nconst LIMIT_HISTORY_SWAP = 20\n\nconst NAME = 'history'\nconst initialState: State = {\n  historySwap: [],\n}\n\nconst filterFunction = (transLog: TransLog) => {\n  if (!transLog.actionTransfers.length) return false\n  return true\n}\n\n/**\n * Actions\n */\nexport const fetchHistorySwap = createAsyncThunk<\n  { historySwap: HistorySwap[] },\n  { lastSignature?: string; isLoadMore?: boolean },\n  { state: { history: State } }\n>(\n  `${NAME}/fetchHistorySwap`,\n  async ({ lastSignature, isLoadMore }, { getState }) => {\n    const {\n      sol: { swapAddress },\n    } = configs\n\n    const {\n      history: { historySwap },\n    } = getState()\n\n    const myWalletAddress = await window.sentre.wallet?.getAddress()\n    if (!myWalletAddress) throw Error('Loggin first')\n\n    const options = {\n      limit: LIMIT_HISTORY_SWAP,\n      lastSignature,\n    }\n\n    const transLogService = new TransLogService()\n    const transLogsData = await transLogService.collect(\n      myWalletAddress,\n      options,\n      filterFunction,\n    )\n    let history: HistorySwap[] = []\n\n    if (isLoadMore) history = [...historySwap]\n\n    for (const transLog of transLogsData) {\n      const historyItem = {} as HistorySwap\n      const actionTransfer = transLog.actionTransfers\n      let lastAction\n      const firstAction = actionTransfer[0]\n      if (actionTransfer.length > 1) lastAction = actionTransfer.at(-1)\n\n      const programId = transLog.programId\n\n      if (programId !== swapAddress) continue\n\n      const time = new Date(transLog.blockTime * 1000)\n\n      historyItem.time = moment(time).format('DD MMM, YYYY hh:mm')\n      historyItem.amountFrom = firstAction.destination\n        ? Number(\n            utils.undecimalize(\n              BigInt(firstAction.amount),\n              firstAction.destination.decimals,\n            ),\n          )\n        : undefined\n      historyItem.amountTo = lastAction?.destination\n        ? Number(\n            utils.undecimalize(\n              BigInt(lastAction.amount),\n              lastAction.destination.decimals,\n            ),\n          )\n        : undefined\n\n      historyItem.from = firstAction.destination?.mint\n      historyItem.to = lastAction?.destination?.mint\n      historyItem.transactionId = transLog.signature\n      historyItem.key = transLog.signature\n      historyItem.status =\n        !firstAction.destination || !lastAction?.destination\n          ? 'failed'\n          : 'success'\n      history.push(historyItem)\n    }\n    return { historySwap: history }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      fetchHistorySwap.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Card, Col, Row, Typography, Table, Button } from 'antd'\nimport { HISTORY_COLUMN } from './column'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { fetchHistorySwap } from 'app/model/history.controller'\nimport { AppDispatch, AppState } from 'app/model'\n\nimport './index.less'\n\nconst ROW_PER_PAGE = 5\nconst LIMIT_IN_STORE = 15\n\nconst History = () => {\n  const [amountRow, setAmountRow] = useState(ROW_PER_PAGE)\n  const [loading, setLoading] = useState(false)\n\n  const { historySwap } = useSelector((state: AppState) => state.history)\n  const dispatch = useDispatch<AppDispatch>()\n\n  const fetchHistory = useCallback(async () => {\n    setLoading(true)\n    await dispatch(fetchHistorySwap({})).unwrap()\n    setLoading(false)\n  }, [dispatch])\n\n  useEffect(() => {\n    fetchHistory()\n  }, [fetchHistory])\n\n  const onHandleViewMore = () => {\n    const currentTransactionDataLength = historySwap.slice(0, amountRow).length\n\n    if (historySwap.length - currentTransactionDataLength <= LIMIT_IN_STORE) {\n      const lastSignature = historySwap.at(-1)?.transactionId\n      dispatch(\n        fetchHistorySwap({\n          lastSignature,\n          isLoadMore: true,\n        }),\n      )\n    }\n    setAmountRow(amountRow + ROW_PER_PAGE)\n  }\n\n  const onHandleRefeshTable = () => {\n    fetchHistory()\n    setAmountRow(ROW_PER_PAGE)\n  }\n\n  return (\n    <Card bordered={false} style={{ height: 438 }}>\n      <Row gutter={[16, 24]}>\n        <Col flex=\"auto\">\n          <Typography.Title level={5}>Swap history</Typography.Title>\n        </Col>\n        <Col>\n          <Button onClick={onHandleRefeshTable}>Refresh</Button>\n        </Col>\n        <Col span={24}>\n          <Row justify=\"center\" gutter={[16, 9]}>\n            <Col span={24} style={{ height: 310 }}>\n              <Table\n                columns={HISTORY_COLUMN}\n                dataSource={historySwap.slice(0, amountRow)}\n                loading={loading}\n                pagination={false}\n                rowClassName={(record, index) =>\n                  index % 2 ? 'odd-row' : 'even-row'\n                }\n                scroll={historySwap.length ? { x: 800, y: 260 } : {}}\n              />\n            </Col>\n            <Col>\n              <Button\n                onClick={onHandleViewMore}\n                type=\"text\"\n                icon={<IonIcon name=\"chevron-down-outline\" />}\n                disabled={amountRow >= historySwap.length}\n              >\n                View more\n              </Button>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default History\n","import { Row, Col } from 'antd'\nimport SwapChart from './chart'\nimport Swap from './swap'\nimport History from './history'\n\nimport 'app/static/styles/index.less'\n\nconst Page = () => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col lg={8} md={12} xs={24}>\n        <Swap />\n      </Col>\n      <Col lg={16} md={12} xs={24}>\n        <Row gutter={[24, 24]}>\n          <Col span={24}>\n            <SwapChart />\n          </Col>\n          <Col span={24}>\n            <History />\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Page\n","import { useSelector } from 'react-redux'\n\nimport { Avatar, Col, Divider, Row, Space, Typography } from 'antd'\nimport PreviewSwap from 'app/components/preview'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { AppState } from 'app/model'\n\nconst ConfirmSwap = () => {\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n\n  return (\n    <Row gutter={[16, 24]}>\n      <Col span={24}>\n        <Row align=\"middle\" justify=\"space-between\">\n          <Col>\n            <Space direction=\"vertical\">\n              <Typography.Text>From</Typography.Text>\n              <Typography.Text>\n                <Space>\n                  <Avatar src={bidData.mintInfo?.logoURI} />\n                  {bidData.mintInfo?.symbol}\n                </Space>\n              </Typography.Text>\n              <Typography.Title level={4}>{bidData.amount}</Typography.Title>\n            </Space>\n          </Col>\n          <Col>\n            <IonIcon name=\"arrow-forward-outline\" style={{ fontSize: 24 }} />\n          </Col>\n          <Col>\n            <Space direction=\"vertical\">\n              <Typography.Text>To</Typography.Text>\n              <Space>\n                <Avatar src={askData.mintInfo?.logoURI} />\n                {askData.mintInfo?.symbol}\n              </Space>\n              <Typography.Title level={4}>{askData.amount}</Typography.Title>\n            </Space>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Divider style={{ margin: 0 }} />\n      </Col>\n      <Col>\n        <PreviewSwap />\n      </Col>\n    </Row>\n  )\n}\n\nexport default ConfirmSwap\n","import { useMemo, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Row, Col, Typography, Space, Button, Popover, Modal } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport PreviewSwap from 'app/components/preview'\nimport ConfirmSwap from './confirmSwap'\nimport SwapButton from 'app/components/swapButton'\nimport SwapAction from 'app/components/swap/swapAction'\n\nimport { AppState } from 'app/model'\nimport { useAccount } from 'senhub/providers'\nimport { DEFAULT_WSOL, utils } from '@senswap/sen-js'\nimport { useSlippageRate } from 'app/components/hooks/useSlippageRate'\nimport { numeric } from 'shared/util'\n\nconst Widget = () => {\n  const [visible, setVisible] = useState(false)\n  const { route } = useSelector((state: AppState) => state.route)\n  const bidData = useSelector((state: AppState) => state.bid)\n  const askData = useSelector((state: AppState) => state.ask)\n  const { advanced } = useSelector((state: AppState) => state.settings)\n  const { accounts } = useAccount()\n  const slippageRate = useSlippageRate()\n\n  const wrapAmount = useMemo(() => {\n    const bidMint = bidData.mintInfo\n    const bidAccount = accounts[bidData.accountAddress]\n    const bidBalance = bidAccount?.amount || BigInt(0)\n\n    if (!bidMint || !Number(bidData.amount)) return BigInt(0)\n    if (bidMint.address !== DEFAULT_WSOL) return BigInt(0)\n\n    const bidAmount = utils.decimalize(bidData.amount, bidMint.decimals)\n    if (bidAmount <= bidBalance) return BigInt(0)\n    return bidAmount - bidBalance\n  }, [accounts, bidData.accountAddress, bidData.amount, bidData.mintInfo])\n\n  const tooHightImpact = !advanced && slippageRate * 100 > 12.5\n  const disabled =\n    !route?.hops.length ||\n    !parseFloat(bidData.amount) ||\n    parseFloat(bidData.amount) < 0 ||\n    !parseFloat(askData?.amount) ||\n    parseFloat(askData?.amount) < 0\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={24}>\n        <SwapAction spacing={12} />\n      </Col>\n      <Col span={24}>\n        <Row align=\"bottom\">\n          <Col flex=\"auto\">\n            <Popover\n              placement=\"bottomLeft\"\n              content={\n                <Row style={{ width: 307 }}>\n                  <Col>\n                    <PreviewSwap />\n                  </Col>\n                </Row>\n              }\n              trigger=\"click\"\n            >\n              <Space\n                style={{ cursor: 'pointer' }}\n                direction=\"vertical\"\n                size={4}\n              >\n                <Space>\n                  <Typography.Text>\n                    <IonIcon\n                      name=\"information-circle-outline\"\n                      style={{ color: '#7A7B85' }}\n                    />\n                  </Typography.Text>\n                  <Typography.Text type=\"secondary\">\n                    Price impact\n                  </Typography.Text>\n                </Space>\n                <Space>\n                  <Typography.Text style={{ color: '#D72311' }}>\n                    <IonIcon name=\"arrow-down-outline\" />\n                  </Typography.Text>\n                  <Typography.Text style={{ color: '#D72311' }}>\n                    {numeric(Number(slippageRate)).format('0.[0000]%')}\n                  </Typography.Text>\n                </Space>\n              </Space>\n            </Popover>\n          </Col>\n          <Col>\n            <Button\n              onClick={() => setVisible(true)}\n              size=\"large\"\n              block\n              type=\"primary\"\n              disabled={disabled}\n            >\n              Review & Swap\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n      <Modal\n        title={<Typography.Title level={4}> Confirm swap</Typography.Title>}\n        onCancel={() => setVisible(false)}\n        footer={\n          <SwapButton\n            hops={route?.hops || []}\n            wrapAmount={wrapAmount}\n            onCallback={() => setVisible(false)}\n            hightImpact={tooHightImpact}\n            disabled={disabled || tooHightImpact}\n          />\n        }\n        visible={visible}\n      >\n        <ConfirmSwap />\n      </Modal>\n    </Row>\n  )\n}\n\nexport default Widget\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport ask from './ask.controller'\nimport bid from './bid.controller'\nimport settings from './settings.controller'\nimport route from './route.controller'\nimport history from './history.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools('myapp'),\n  reducer: {\n    ask,\n    bid,\n    settings,\n    route,\n    history,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport {\n  WalletProvider,\n  UIProvider,\n  AccountProvider,\n  PoolProvider,\n  MintProvider,\n} from 'senhub/providers'\n\nimport PageView from 'app/page'\nimport WidgetView from 'app/widget'\n\nimport model from 'app/model'\nimport configs from 'app/configs'\n\nimport 'app/static/styles/dark.less'\nimport 'app/static/styles/light.less'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <MintProvider>\n        <PoolProvider>\n          <AccountProvider>\n            <WalletProvider>\n              <Provider store={model}>\n                <PageView />\n              </Provider>\n            </WalletProvider>\n          </AccountProvider>\n        </PoolProvider>\n      </MintProvider>\n    </UIProvider>\n  )\n}\n\nexport const widgetConfig: WidgetConfig = {\n  size: 'small',\n  type: 'solid',\n}\n\nexport const Widget = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <MintProvider>\n        <PoolProvider>\n          <AccountProvider>\n            <WalletProvider>\n              <Provider store={model}>\n                <WidgetView />\n              </Provider>\n            </WalletProvider>\n          </AccountProvider>\n        </PoolProvider>\n      </MintProvider>\n    </UIProvider>\n  )\n}\n","import { net, env } from 'shared/runtime'\nimport sol from './sol.config'\nimport register from './register.config'\n\nconst configs = {\n  sol: sol[net],\n  register: register[env],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_NAME !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string' ||\n  typeof process.env.REACT_APP_SENHUB !== 'string'\n)\n  throw new Error(\n    'Please add REACT_APP_ID, REACT_APP_NAME, REACT_APP_URL in .env.local!',\n  )\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  extra: SenReg\n  senreg: string\n}\n\nconst devApp = {\n  [process.env.REACT_APP_ID]: {\n    url: process.env.REACT_APP_URL,\n    appId: process.env.REACT_APP_ID,\n    name: process.env.REACT_APP_NAME,\n    author: {\n      name: process.env.REACT_APP_AUTHOR_NAME || '',\n      email: process.env.REACT_APP_AUTHOR_EMAIL || '',\n    },\n    supportedViews: (process.env.REACT_APP_SUPPORTED_VIEWS || '')\n      .split(',')\n      .map((view) => view.trim())\n      .filter((view) => ['page', 'widget'].includes(view)) as Array<\n      'widget' | 'page'\n    >,\n    tags: (process.env.REACT_APP_TAGS || '')\n      .split(',')\n      .map((tag) => tag.trim()),\n    description: process.env.REACT_APP_DESCRIPTION || '',\n    verified: false,\n  },\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    extra: {},\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\nconst SOLVARS = {\n  spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n  splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n}\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  chainId: 101 | 102 | 103\n  senAddress: string\n  senPoolAddress: string\n  swapAddress: string\n  taxmanAddress: string\n} & typeof SOLVARS\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    ...SOLVARS,\n    node: 'https://api.devnet.solana.com',\n    chainId: 103,\n    senAddress: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n    senPoolAddress: '3EUPL7YQLbU6DNU5LZeQeHPXTf1MigJ2yASXA9rH5Ku4',\n    swapAddress: '4erFSLP7oBFSVC1t35jdxmbfxEhYCKfoM6XdG2BLR3UF',\n    taxmanAddress: '8UaZw2jDhJzv5V53569JbCd3bD4BnyCfBH3sjwgajGS9',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    ...SOLVARS,\n    node: 'https://api.testnet.solana.com',\n    chainId: 102,\n    senAddress: '',\n    senPoolAddress: '',\n    swapAddress: '',\n    taxmanAddress: '',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    ...SOLVARS,\n    node: 'https://api.mainnet-beta.solana.com',\n    chainId: 101,\n    senAddress: 'SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M',\n    senPoolAddress: '',\n    swapAddress: 'SSW7ooZ1EbEognq5GosbygA3uWW1Hq1NsFq6TsftCFV',\n    taxmanAddress: '9doo2HZQEmh2NgfT3Yx12M89aoBheycYqH1eaR5gKb3e',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Document } from 'flexsearch'\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry'\n\nimport { net } from 'shared/runtime'\nimport configs from 'os/configs'\nimport supplementary, { sen, sol } from './supplementary'\n\nconst {\n  sol: { chainId },\n} = configs\nconst DELIMITER = /[\\W_]+/g\nconst PRESET = {\n  tokenize: 'full',\n  context: true,\n  minlength: 3,\n}\nconst DOCUMENT = {\n  document: {\n    id: 'address',\n    index: [\n      { field: 'symbol', ...PRESET },\n      { field: 'name', ...PRESET },\n    ],\n  },\n}\n\nclass TokenProvider {\n  private tokenMap: Map<string, TokenInfo>\n  private engine: typeof Document | undefined\n  readonly chainId: typeof chainId\n  readonly cluster: typeof net\n\n  constructor() {\n    this.tokenMap = new Map<string, TokenInfo>()\n    this.engine = undefined\n    this.chainId = chainId\n    this.cluster = net\n    // Init\n    this._init()\n  }\n\n  private _init = async (): Promise<Map<string, TokenInfo>> => {\n    if (this.tokenMap.size) return this.tokenMap\n    // Build token list\n    let tokenList = await (await new TokenListProvider().resolve())\n      .filterByChainId(this.chainId)\n      .getList()\n    if (this.cluster === 'devnet') tokenList = tokenList.concat(supplementary)\n    if (this.cluster === 'testnet')\n      tokenList = tokenList.concat([sen(102), sol(102)])\n    else tokenList = tokenList.concat([sol(101)])\n    // Build token map\n    tokenList.forEach((token) => this.tokenMap.set(token.address, token))\n    return this.tokenMap\n  }\n\n  private _engine = async () => {\n    if (this.engine) return this.engine\n    const tm = await this._init()\n    this.engine = new Document(DOCUMENT)\n    tm.forEach(({ address, ...doc }) => this.engine.add(address, doc))\n    return this.engine\n  }\n\n  all = async (): Promise<TokenInfo[]> => {\n    const tm = await this._init()\n    return Array.from(tm.values())\n  }\n\n  findByAddress = async (addr: string): Promise<TokenInfo | undefined> => {\n    const tm = await this._init()\n    return tm.get(addr)\n  }\n\n  find = async (keyword: string, limit?: 10): Promise<TokenInfo[]> => {\n    const tm = await this._init()\n    const engine = await this._engine()\n    let tokens: TokenInfo[] = []\n    keyword.split(DELIMITER).forEach((key) => {\n      const raw: Array<{ result: string[] }> = engine.search(key, limit)\n      return raw.forEach(({ result }) => {\n        return result.forEach((id: string) => {\n          if (tokens.findIndex(({ address }) => address === id) < 0) {\n            const token = tm.get(id)\n            if (token) tokens.push(token)\n          }\n        })\n      })\n    })\n    return tokens\n  }\n}\n\nexport default TokenProvider\n","// Pseudo native sol info\n// It's for all networks\nexport const sol = (chainId: 101 | 102 | 103) => ({\n  symbol: 'SOL',\n  name: 'Solana',\n  address: '11111111111111111111111111111111',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'solana',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png',\n})\n\n// Pseudo sen info\n// Only for testnet and mainnet\nexport const sen = (chainId: 102 | 103) => ({\n  symbol: 'SEN',\n  name: 'Sen',\n  address: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'sen',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M/logo.png',\n})\n\n// Pseudo token infos for devnet\nconst supplementary = [\n  sol(103),\n  sen(103),\n  {\n    symbol: 'wBTC',\n    name: 'Wrapped Bitcoin',\n    address: '8jk4eJymMfNZV9mkRNxJEt2VJ3pRvdJvD5FE94GXGBPM',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'bitcoin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/qfnqNqs3nCAHjnyCgLRDbBtq4p2MtHZxw8YjSyYhPoL/logo.png',\n  },\n  {\n    symbol: 'wETH',\n    name: 'Ethereum',\n    address: '27hdcZv7RtuMp75vupThR3T4KLsL61t476eosMdoec4c',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'ethereum',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/FeGn77dhg1KXRRFeSwwMiykZnZPw5JXW6naf2aQgZDQf/logo.png',\n  },\n  {\n    symbol: 'UNI',\n    name: 'Uniswap',\n    address: 'FVZFSXu3yn17YdcxLD72TFDUqkdE5xZvcW18EUpRQEbe',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'uniswap',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/3MVa4e32PaKmPxYUQ6n8vFkWtCma68Ld7e7fTktWDueQ/logo.png',\n  },\n  {\n    symbol: 'USDC',\n    name: 'USD Coin',\n    address: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'usd-coin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png',\n  },\n]\n\nexport default supplementary\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, MintData } from '@senswap/sen-js'\n\n/**\n * Interface & Utility\n */\n\nexport type State = Record<string, MintData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'mints'\nconst initialState: State = {}\n\n/**\n * Actions\n */\n\nexport const getMint = createAsyncThunk<\n  State,\n  { address: string; force?: boolean },\n  { state: any }\n>(`${NAME}/getMint`, async ({ address, force = false }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid mint address')\n  if (!force) {\n    const {\n      accounts: { [address]: data },\n    } = getState()\n    if (data) return { [address]: data }\n  }\n  const { splt } = window.sentre\n  const raw = await splt.getMintData(address)\n  return { [address]: raw }\n})\n\nexport const upsetMint = createAsyncThunk<\n  State,\n  { address: string; data: MintData },\n  { state: any }\n>(`${NAME}/upsetMint`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteMint = createAsyncThunk(\n  `${NAME}/deleteMint`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        getMint.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetMint.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteMint.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  if (!value) return null\n  try {\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n"],"names":["shortenAddress","address","num","delimiter","substring","length","explorer","addressOrTxId","account","net","numeric","value","Number","isFinite","numbro","chartData","labels","type","configs","disableAxe","chartId","backgroundColor","isRebuildChart","setRebuildChart","useState","formatData","useCallback","data","label","background","datasets","chartRef","useRef","getBackground","ctx","current","canvas","getContext","gradient","createLinearGradient","addColorStop","useEffect","chartInstance","dataInstace","find","compareData","isEqual","update","id","height","ref","Chart","options","responsive","maintainAspectRatio","scales","xAxes","gridLines","drawBorder","display","ticks","yAxes","beginAtZero","maxTicksLimit","callback","index","values","format","plugins","legend","hover","onHover","event","elements","target","document","getElementById","style","cursor","CUSTOM_ICONS","forwardRef","name","className","props","cln","src","icons","defaultIcon","rest","Avatar","map","iconURI","idx","border","Row","align","justify","Col","Empty","BigInt","prototype","toJSON","this","toString","bigintSerializationMiddleware","serializableCheck","isSerializable","val","Array","isArray","obj","proto","Object","getPrototypeOf","isPlainObject","getInfix","width","window","innerWidth","NAME","initialState","theme","hour","Date","getHours","getTheme","infix","touchable","navigator","maxTouchPoints","visibleActionCenter","setTheme","createAsyncThunk","async","resize","setVisibleActionCenter","visible","createSlice","reducers","extraReducers","builder","addCase","fulfilled","state","payload","assign","setVisited","visited","getState","wallet","flags","prevFlags","Error","IPFS","_ipfs","ipfs","create","er","ms","Promise","resolve","setTimeout","get","isCID","cid","stream","cat","raw","chunk","Buffer","from","JSON","parse","set","stringify","path","add","isIPFS","PDB","constructor","walletAddress","dbName","driver","createInstance","appId","localForage","storeName","dropInstance","instance","clear","all","appIds","getItem","flat","concat","iterate","key","fetch","backup","restore","setItem","register","senreg","extra","troubleshoot","filter","widgetIds","loadRegister","res","json","fetchRegister","installManifest","manifest","page","includes","newAppIds","push","newWidgetIds","supportedViews","newRegister","loadPage","_","db","updatePage","pdb","installApp","uninstallApp","_appId","updateDashboard","addWidgets","removeWidget","initializeWindow","sol","node","spltAddress","splataAddress","swapAddress","sentre","lamports","Lamports","splt","SPLT","swap","Swap","openWallet","closeWallet","connectWallet","getAddress","getLamports","updateWallet","disconnectWallet","disconnect","undefined","destroyWindow","location","reload","getAccounts","owner","ownerPublicKey","connection","getTokenAccountsByOwner","programId","spltProgramId","bulk","forEach","pubkey","buf","toBase58","parseAccountData","getAccount","accounts","getAccountData","upsetAccount","deleteAccount","taxmanAddress","getPools","getProgramAccounts","swapProgramId","filters","dataSize","memcmp","bytes","offset","parsePoolData","getPool","pools","getPoolData","upsetPool","setValue","setLoading","loading","setDisabled","disabled","configureStore","middleware","getDefaultMiddleware","devTools","reducer","ui","mints","search","DEFAULT_CACHE_CONFIG","ttl","DEFAULT_SINGLE_FLIGHT_CONFIG","limit","calls","time","cache","RequestQueue","resolveQueue","rejectQueue","reject","resolves","shift","rejects","error","SingleFlightCache","mapCache","delete","Map","DataLoader","instanceKey","mapInstance","has","newSingleFlight","SingleFlight","requestKey","singleFlight","getSingleFlight","newRequest","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","cacheData","isFetch","request","validateLimit","addRequestQueue","createTimeLogs","then","response","catch","finally","fetchRequestQueue","clearInterval","setInterval","timeFarthest","timeNow","getTime","now","TOKEN_PROVIDER","TokenProvider","extractReserve","mintAddress","poolData","mint_a","mint_b","reserve_a","reserve_b","fetchCGK","ticket","senPoolAddress","senAddress","senInfo","icon","symbol","rank","price","priceChange","totalVolume","store","usdcAddress","usdcTokenInfo","senTokenInfo","addr","findByAddress","usdcReserve","senReserve","utils","decimals","calcSenPrice","randomColor","seed","opacity","hash","Math","floor","random","i","charCodeAt","rgb","fetchMarketChart","params","axios","method","url","days","interval","prices","Interval","CHART_DATA_CONFIG","day","amount","unit","week","month","year","MARKET_CONFIG","CHART_CONFIGS","DEFAULT_TOKEN","setChartData","swapChartConfigs","borderColor","borderRadius","pointRadius","tooltip","pointHitRadius","pointHoverRadius","bidData","useSelector","bid","askData","ask","useMemo","mintInfo","logoURI","symbols","parseChartDay","marketData","displayTime","moment","reverse","chartTime","unshift","subtract","parseChartDaily","fetchChartData","askTicket","extensions","coingeckoId","bidTicket","marketConfig","bidChartData","askChartData","bidChart","askChart","at","priceUI","Card","bordered","bodyStyle","paddingTop","gutter","flex","Space","size","Typography","join","Radio","defaultValue","onChange","e","span","level","DECIMALS","hops","onCallback","wrapAmount","hightImpact","slippage","settings","useWallet","handleSwap","routingAddresses","srcMintInfo","srcMintAddress","dstMintInfo","dstMintAddress","poolAddress","srcAddress","deriveAssociatedAddress","dstAddress","bidDecimals","bidAmount","askDecimals","route","Button","onClick","wrapSol","handleWrapSol","txId","notify","description","open","message","block","Fragment","priceRate","shape","BestRouteInfo","amounts","findAllRoute","routes","graph","startMint","endMint","pathTrace","mapPool","pool","askMint","newPathTrace","parseHops","mapPoolData","bidMintAddress","askMintAddress","hop","ORACLE","curve","fee_ratio","tax_ratio","bidReserve","askReserve","askAmount","inverseCurve","inverseSwap","useSlippageRate","askMount","newAmount","newPoolData","srcAmount","srcDecimals","dstAmount","dstDecimals","ExtraTypography","content","inReverse","setInReverse","slippageSettings","slippageRate","bidMintInfo","routeIcons","listRouteIcons","calculatePrice","bidMint","accountAddress","bidAccountAddr","advanced","useAccount","bidAccountAmount","bidBalance","DEFAULT_WSOL","tooHightImpact","parseFloat","tokenProvider","useMint","usePool","tokenInfo","setTokenInfo","fetchTokenInfo","token","mint_lpt","tokenA","tokenB","tokens","useTokenProvider","DEFAULT_DATA","cgkData","setCgkData","fetchCgkData","MintPoolInfo","tvl","direction","askCgk","useMintCgk","bidCgk","askMintInfo","askPoolData","bidPoolData","getMintTVL","mintAddr","askTVL","bidTVL","wrap","Divider","spacing","iconSize","fontSize","color","SentreIcon","Option","active","Tooltip","placement","title","Switch","checkedChildren","unCheckedChildren","checked","textAlign","updateSettings","dispatch","useDispatch","padding","Popover","overlayInnerStyle","marginTop","marginBottom","trigger","isSupportedMint","keyword","setKeyword","Input","placeholder","suffix","marginRight","hoverable","marginLeft","margin","setMints","supportedMints","keys","item","pos","self","indexOf","onMints","allMints","getAvailablePoolAddresses","mintList","mint","currentMintAddress","overflow","poolAddresses","onMint","setVisible","forceCheck","Modal","onCancel","closeIcon","footer","destroyOnClose","centered","selectionInfo","updateAskData","prioritized","reset","priority","refPriority","prevPriority","timeoutId","max","setError","setCursor","innerRef","onAmount","onError","clearTimeout","test","setSelectionRange","selectionStart","setDecimals","getMint","fetchTokenDecimals","useMintAccount","accountAddr","useMintDecimals","balance","shared","process","senhub","devnet","testnet","mainnet","bidDefault","askDefault","wormholeAddress","development","staging","production","env","wormhole","DEFAULT_INFO","useMintSelection","setSelectionInfo","getSelectionInfo","selectionDefault","totalValue","prefix","WORMHOLE_COLOR","Tag","updateBidData","SOL_BRIDGE_ADDRESS","SOL_TOKEN_BRIDGE_ADDRESS","getSolNetwork","storage","checkAttestedWormhole","solContext","solNetWork","chainId","CHAIN_ID_SOLANA","tokenBridgeAddress","bridgeAddress","getSolContext","getIsWrappedAssetSol","wormholeSupported","setWormholeSupported","balanceTransfer","estimateFee","bidMintAddr","updateRouteInfo","routeState","bestRoute","setBestRoute","onSwitch","bidPriority","bidRest","askPriority","askRest","updateData","findRoute","bidPoolAddresses","askPoolAddresses","bidPools","askPools","buildPoolGraph","maxAskAmount","findBestRouteFromBid","reversedHops","reversedHop","minBidAmount","findBestRouteFromAsk","updateRoute","STATUS_COLOR","success","pending","failed","tag","setColorTag","textTransform","FORMAT_AMOUNT","HISTORY_COLUMN","dataIndex","render","text","fontWeight","record","amountFrom","to","amountTo","status","TransLog","programInfo","signature","blockTime","actionType","actionTransfers","programTransfer","ActionInfo","preBalance","postBalance","ActionTransfer","source","destination","DEFAULT_LIMIT","Solana","conn","lastSignature","before","getConfirmedSignaturesForAddress2","signatures","confirmedTransactions","promiseTransGroup","skip","signaturesGroup","slice","getParsedConfirmedTransactions","transGroups","transGroup","currentTime","secondFrom","secondTo","programPublicKey","PublicKey","isStop","confirmedSignatureInfos","fetchSignatures","info","fetchConfirmTransaction","ParsedType","SECOND_PER_MILLISECOND","TimeFormat","DateHelper","milliSeconds","valueOf","setMilliSeconds","seconds","date","ymd","YMD","ymdFrom","ymdTo","dates","dateFrom","fromYmd","dateTo","addDay","dateFormat","subtractDay","dayAmount","fromSeconds","TransLogService","solana","funcFilter","transLogs","lastSignatureTmp","confirmedTrans","fetchTransactions","trans","transaction","log","parseTransLog","meta","postTokenBalances","preTokenBalances","postBalances","preBalances","innerInstructionData","innerInstructions","instructions","instructionData","transLog","mapAccount","parseAccountInfo","accountKeys","isParsedInstruction","parseAction","parsed","actions","actionTransfer","action","actionParsed","Transfer","parsedAction","parseActionTransfer","parsedTransfer","amountTransfer","mapAccountInfo","accountIndex","uiTokenAmount","accountData","String","filterFunction","fetchHistorySwap","isLoadMore","history","historySwap","myWalletAddress","transLogService","transLogsData","collect","historyItem","lastAction","firstAction","transactionId","amountRow","setAmountRow","fetchHistory","unwrap","Table","columns","dataSource","pagination","rowClassName","scroll","x","y","currentTransactionDataLength","lg","md","xs","bidAccount","Page","UIProvider","antd","MintProvider","PoolProvider","AccountProvider","WalletProvider","Provider","model","widgetConfig","Widget","devApp","author","email","split","view","trim","tags","verified","SOLVARS","DELIMITER","PRESET","tokenize","context","minlength","DOCUMENT","field","tokenMap","engine","cluster","_init","tokenList","TokenListProvider","filterByChainId","getList","supplementary","sen","_engine","tm","Document","doc","result","findIndex","force","getMintData","upsetMint","deleteMint","getNetwork","KEY","localStorage","convert"],"sourceRoot":""}